[assembly: JetBrains.Application.Install.InstallFromReferencesDirectoryAttribute("ExternalAnnotations", JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.InstallDir, "ExternalAnnotations", "ExternalAnnotations", JetBrains.Application.Install.InstallFromReferencesDirectoryAttribute.Recursive.Yes, false)]
[assembly: JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute(IconNames=new string[] {
        "PropertyWrite",
        "Struct",
        "ModifiersProtectedInternal",
        "Field",
        "ModifiersReadWrite",
        "Namespace",
        "SymbolUnitTestSet",
        "EnumMember",
        "Const",
        "Event",
        "SymbolUnitTest",
        "DynamicMethod",
        "AnonymousMethod",
        "LocalConst",
        "Parameter",
        "ModifiersPrivate",
        "ModifiersWrite",
        "DynamicProperty",
        "Typeparameter",
        "PsiSymbolTypicalSizePlaceholder",
        "Class",
        "Interface",
        "Operator",
        "Method",
        "Constructor",
        "ModifiersRead",
        "ModifiersStatic",
        "ModifiersAbstract",
        "Variable",
        "UnresolvedField",
        "Property",
        "ModifiersProtected",
        "Enum",
        "UnresolvedMethod",
        "ModifiersVirtual",
        "Delegate",
        "ModifiersPublic",
        "ModifiersInternal",
        "AnonymousTypeProperty"}, IconPackResourceIdentification="JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
    "iSymbols.Generated.Xaml")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"JetBrains.ReSharper.PsiTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010087f63ba6a789c30e210e7ec987234ad9fe33baf7367993bab1b312d6f72ca296b91ed5c658964ffb9e7570eb184a527c68c6bdba41cfe67d8cfd3f888234206bf39205a3652d3af3445bb6f715fdac532e289fea41229bac37762b67eb16f58fee717d2465fca9ee17f08ed16772a1fc52c1c17022e1f0d9bdd004524a663aca")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"JetBrains.ReSharper.PerformanceTest, PublicKey=002400000480000094000000060200000024000052534131000400000100010087f63ba6a789c30e210e7ec987234ad9fe33baf7367993bab1b312d6f72ca296b91ed5c658964ffb9e7570eb184a527c68c6bdba41cfe67d8cfd3f888234206bf39205a3652d3af3445bb6f715fdac532e289fea41229bac37762b67eb16f58fee717d2465fca9ee17f08ed16772a1fc52c1c17022e1f0d9bdd004524a663aca")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"JetBrains.ReSharper.SolutionAnalysisTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010087f63ba6a789c30e210e7ec987234ad9fe33baf7367993bab1b312d6f72ca296b91ed5c658964ffb9e7570eb184a527c68c6bdba41cfe67d8cfd3f888234206bf39205a3652d3af3445bb6f715fdac532e289fea41229bac37762b67eb16f58fee717d2465fca9ee17f08ed16772a1fc52c1c17022e1f0d9bdd004524a663aca")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"HighlightingTest, PublicKey=002400000480000094000000060200000024000052534131000400000100010087f63ba6a789c30e210e7ec987234ad9fe33baf7367993bab1b312d6f72ca296b91ed5c658964ffb9e7570eb184a527c68c6bdba41cfe67d8cfd3f888234206bf39205a3652d3af3445bb6f715fdac532e289fea41229bac37762b67eb16f58fee717d2465fca9ee17f08ed16772a1fc52c1c17022e1f0d9bdd004524a663aca")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"JetBrains.ReSharper.Features.Internal, PublicKey=002400000480000094000000060200000024000052534131000400000100010087f63ba6a789c30e210e7ec987234ad9fe33baf7367993bab1b312d6f72ca296b91ed5c658964ffb9e7570eb184a527c68c6bdba41cfe67d8cfd3f888234206bf39205a3652d3af3445bb6f715fdac532e289fea41229bac37762b67eb16f58fee717d2465fca9ee17f08ed16772a1fc52c1c17022e1f0d9bdd004524a663aca")]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:shemas-jetbrains-com:ui-application-icons-psi-symbols", "JetBrains.ReSharper.Psi.Resources")]

namespace JetBrains.ReSharper.Psi
{
    
    public class AccessibilityDomain
    {
        public AccessibilityDomain(JetBrains.ReSharper.Psi.AccessibilityDomain.AccessibilityDomainType domainType, JetBrains.ReSharper.Psi.ITypeElement container) { }
        public JetBrains.ReSharper.Psi.ITypeElement Container { get; }
        public JetBrains.ReSharper.Psi.AccessibilityDomain.AccessibilityDomainType DomainType { get; }
        public override string ToString() { }
        public enum AccessibilityDomainType
        {
            PUBLIC = 0,
            INTERNAL = 1,
            PROTECTED = 2,
            PROTECTED_OR_INTERNAL = 3,
            PROTECTED_AND_INTERNAL = 4,
            PRIVATE = 5,
            NONE = 6,
        }
    }
    public enum AccessorKind : byte
    {
        UNKNOWN = 0,
        GETTER = 1,
        SETTER = 2,
        ADDER = 3,
        REMOVER = 4,
        RAISER = 5,
    }
    public enum AccessRights
    {
        PUBLIC = 0,
        INTERNAL = 1,
        PROTECTED = 2,
        PROTECTED_OR_INTERNAL = 3,
        PROTECTED_AND_INTERNAL = 4,
        PRIVATE = 5,
        NONE = 6,
    }
    public struct AnonymousTypeDescriptor
    {
        public readonly bool IsKey;
        public readonly string Name;
        public readonly JetBrains.ReSharper.Psi.IType Type;
        public AnonymousTypeDescriptor(string name, JetBrains.ReSharper.Psi.IType type, bool isKey) { }
    }
    public class static ArgumentsInfoExtension
    {
        public static int IndexOf(this JetBrains.ReSharper.Psi.IArgumentInfo argumentInfo) { }
    }
    public abstract class AsyncCommitService
    {
        public abstract void DropRequest([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IAsyncCommitClient client);
        public static JetBrains.ReSharper.Psi.AsyncCommitService GetInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution) { }
        public abstract void RequestCommit([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IAsyncCommitClient client);
    }
    public class static AttributeInstanceEx
    {
        public const string ATTRIBUTE_SUFFIX = "Attribute";
        public static void Dump([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IAttributeInstance instance, System.IO.TextWriter writer) { }
    }
    public class AttributeValue
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.AttributeValue BAD_VALUE;
        public AttributeValue([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ConstantValue constantValue) { }
        public AttributeValue([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IType @typeof) { }
        public AttributeValue([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IArrayType arrayType, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.AttributeValue[] values) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.IArrayType ArrayType { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.AttributeValue[] ArrayValue { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.ConstantValue ConstantValue { get; }
        public bool IsArray { get; }
        public bool IsBadValue { get; }
        public bool IsConstant { get; }
        public bool IsType { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.IType TypeValue { get; }
        public void Dump([JetBrains.Annotations.NotNullAttribute()] System.IO.TextWriter writer) { }
        public JetBrains.ReSharper.Psi.IType GetType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
    }
    public class static BadAncestorSubstitutionHandling
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution GetAncestorSubstitution(JetBrains.ReSharper.Psi.ITypeElement inheritor, JetBrains.ReSharper.Psi.ITypeElement @base) { }
    }
    public class CachedPsiValue<T>
    
    {
        public static JetBrains.ReSharper.Psi.CachedPsiValue<T> Create(JetBrains.ReSharper.Psi.Tree.ITreeNode element, T data) { }
        protected virtual int GetTimestamp(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public T GetValue([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, [JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<T> calculator) { }
        public T GetValue<TNode>([JetBrains.Annotations.NotNullAttribute()] TNode element, [JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<TNode, T> calculator)
            where TNode : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public T GetValue<TNode, TState>([JetBrains.Annotations.NotNullAttribute()] TNode element, TState state, [JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<TNode, TState, T> calculator)
            where TNode : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public T GetValue([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public T GetValueRaw() { }
        public void Invalidate() { }
        public bool IsUpToDate(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void SetValue([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, T value) { }
        public override string ToString() { }
    }
    public class static CachedPsiValueExtensions
    {
        public static JetBrains.ReSharper.Psi.CachedPsiValue<T> CreateCachedValue<T>(this JetBrains.ReSharper.Psi.Tree.ITreeNode element, T data) { }
        public static T GetCachedValue<T>(this JetBrains.ReSharper.Psi.Tree.ITreeNode element, ref JetBrains.ReSharper.Psi.CachedPsiValue<> data) { }
        public static void SetCachedValue<T>(this JetBrains.ReSharper.Psi.Tree.ITreeNode element, ref JetBrains.ReSharper.Psi.CachedPsiValue<> data, T value) { }
    }
    public class CachedPsiValueWithOffsets<T> : JetBrains.ReSharper.Psi.CachedPsiValue<T>
    
    {
        protected override int GetTimestamp(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public class static ClassExtensions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IClass GetSuperClass([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IClass @class) { }
    }
    public class static ClrConstantValueFactory
    {
        public static JetBrains.ReSharper.Psi.ConstantValue CreateBoolValue(bool x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateByteValue(byte x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateCharValue(char x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateDecimalValue(decimal x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateDoubleValue(double x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateFloatValue(float x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateIntValue(int x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateLongValue(long x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreatePureNullValue(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateSbyteValue(sbyte x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateShortValue(short x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateStringValue(string x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateUintValue(uint x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateUlongValue(ulong x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateUshortValue(ushort x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.KnownLanguage))]
    public class ClrConstantValueService : JetBrains.ReSharper.Psi.IConstantValueService
    {
        public ClrConstantValueService() { }
        public virtual JetBrains.ReSharper.Psi.IConstantValuePresenter Presenter { get; }
        public virtual JetBrains.ReSharper.Psi.ConstantValue GetDefaultValue(JetBrains.ReSharper.Psi.IType type) { }
        public virtual bool IsLegalConstantType(JetBrains.ReSharper.Psi.IType type) { }
        public virtual bool IsPureNull(JetBrains.ReSharper.Psi.ConstantValue value) { }
    }
    public class static ClrDeclaredElementExtensions
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution GetIdSubstitutionSafe([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
    }
    public sealed class CLRDeclaredElementType : JetBrains.ReSharper.Psi.DeclaredElementTypeBase
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType CONSTANT;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType CONSTRUCTOR;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType CONVERSION_OPERATOR;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType DELEGATE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType ENUM;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType ENUM_MEMBER;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType EVENT;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType FIELD;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType INTERFACE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType LABEL;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType LOCAL_CONSTANT;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType LOCAL_VARIABLE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType METHOD;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType MODULE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType NAMESPACE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType PARAMETER;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType PROPERTY;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType SIGN_OPERATOR;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType STRUCT;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType TYPE_PARAMETER;
        protected internal override JetBrains.ReSharper.Psi.IDeclaredElementPresenter DefaultPresenter { get; }
    }
    [System.ComponentModel.LocalizableAttribute(false)]
    public class ClrTypeName : JetBrains.ReSharper.Psi.ClrTypeNameBase
    {
        public ClrTypeName([JetBrains.Annotations.NotNullAttribute()] string fullName, System.Func<string, string> intern) { }
        public ClrTypeName([JetBrains.Annotations.NotNullAttribute()] string fullName) { }
        public override string FullName { get; }
        public override System.Collections.Generic.IEnumerable<string> NamespaceNames { get; }
        public override string ShortName { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber> TypeNames { get; }
        public override string GetFullNameFast() { }
        public override JetBrains.ReSharper.Psi.IClrTypeNamePartIterator GetPartIterator() { }
        public override int GetPartsCount() { }
        public override JetBrains.ReSharper.Psi.IClrTypeName GetPersistent() { }
        public static JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber ParseSingleTypeName(System.Func<string, string> intern, string typeNameString) { }
        public static JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber[] ParseTypeName(System.Func<string, string> intern, string typeNameString) { }
    }
    public abstract class ClrTypeNameBase : JetBrains.ReSharper.Psi.IClrTypeName
    {
        public abstract string FullName { get; }
        public abstract System.Collections.Generic.IEnumerable<string> NamespaceNames { get; }
        public abstract string ShortName { get; }
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber> TypeNames { get; }
        public virtual bool Equals(object obj) { }
        public abstract string GetFullNameFast();
        public virtual int GetHashCode() { }
        public abstract JetBrains.ReSharper.Psi.IClrTypeNamePartIterator GetPartIterator();
        public abstract int GetPartsCount();
        public virtual JetBrains.ReSharper.Psi.IClrTypeName GetPersistent() { }
        public override string ToString() { }
    }
    public class static ClrTypeNameExtensions
    {
        public static bool GetIsInnerType(this JetBrains.ReSharper.Psi.IClrTypeName name) { }
        public static string GetNamespaceName(this JetBrains.ReSharper.Psi.IClrTypeName name) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IClrTypeName GetParent(this JetBrains.ReSharper.Psi.IClrTypeName name) { }
        public static bool IsEmpty(this JetBrains.ReSharper.Psi.IClrTypeName name) { }
    }
    public class ClrTypePartArrayIterator : JetBrains.ReSharper.Psi.IClrTypeNamePartIterator
    {
        public ClrTypePartArrayIterator(JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber[] types, string[] namespaces) { }
        public bool GetNextPart(out JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber info) { }
    }
    public sealed class CommonDeclaredElementType : JetBrains.ReSharper.Psi.DeclaredElementTypeBase
    {
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType AnonymousTypeProperty;
        public CommonDeclaredElementType(string name, JetBrains.UI.Icons.IconId imageName) { }
        protected internal override JetBrains.ReSharper.Psi.IDeclaredElementPresenter DefaultPresenter { get; }
    }
    public class ConstantValue
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.ConstantValue ARITHMETIC_PROBLEM_VALUE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.ConstantValue BAD_VALUE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.ConstantValue CYCLE_IN_COMPUTATION;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.ConstantValue NOT_COMPILE_TIME_CONSTANT;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.ConstantValue OVERFLOW_VALUE;
        public ConstantValue([JetBrains.Annotations.CanBeNullAttribute()] object value, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public ConstantValue([JetBrains.Annotations.NotNullAttribute()] object value, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public bool IsImplicitlyTyped { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.IType Type { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public object Value { get; }
        public string Dump(JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public string GetPresentation(JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsBadValue() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsBoolean() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsByte() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsChar() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsDecimal() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsDouble() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsFloat() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsInteger() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsLong() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsPureNull([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsPureZero() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsSbyte() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsShort() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsString() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsUinteger() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsUlong() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsUshort() { }
        public bool IsValid() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsZero() { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.ConstantValue Substitute([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class static ConstantValueExtension
    {
        public static bool IsFalse([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ConstantValue value) { }
        public static bool IsTrue([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ConstantValue value) { }
    }
    public class static DeclaredElementConstants
    {
        public const string CONSTRUCTOR_NAME = ".ctor";
        public const string DEFAULT_PROPERTY_NAME = "!.default.Property";
        public const string DELEGATE_BEGIN_INVOKE_METHOD_NAME = "BeginInvoke";
        public const string DELEGATE_END_INVOKE_METHOD_NAME = "EndInvoke";
        public const string DELEGATE_INVOKE_METHOD_NAME = "Invoke";
        public const string STATIC_CONSTRUCTOR_NAME = ".cctor";
    }
    public sealed class DeclaredElementEnvoy<T> : JetBrains.CommonControls.ICachedPresentation, JetBrains.ReSharper.Psi.IDeclaredElementEnvoy
        where T :  class, JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public DeclaredElementEnvoy([JetBrains.Annotations.NotNullAttribute()] T declaredElement) { }
        public bool IsValid { get; }
        public string Text { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public T GetValidDeclaredElement() { }
        public void Present<TStructureElement>(JetBrains.UI.TreeView.StructuredPresenter<TStructureElement, JetBrains.CommonControls.IPresentableItem> presenter, TStructureElement structureElement, JetBrains.CommonControls.IPresentableItem item, JetBrains.UI.TreeView.PresentationState state)
            where TStructureElement : JetBrains.Util.IPresentableStructureElement { }
        public void ResetCache() { }
        public override string ToString() { }
    }
    public class static DeclaredElementExtensions
    {
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public static void AssertIsNullOrValid(this JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public static void AssertIsValid(this JetBrains.ReSharper.Psi.IDeclaredElement element, string messageText = "") { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ProjectModel.ISolution GetSolution([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Element = {Element}, Substitution = {Substitution}")]
    public class DeclaredElementInstance
    {
        public DeclaredElementInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public DeclaredElementInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredElement Element { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Substitution { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public bool IsValid() { }
    }
    public class DeclaredElementInstance<T> : JetBrains.ReSharper.Psi.DeclaredElementInstance
        where T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public DeclaredElementInstance([JetBrains.Annotations.NotNullAttribute()] T element) { }
        public DeclaredElementInstance([JetBrains.Annotations.NotNullAttribute()] T element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public T Element { get; }
    }
    public class static DeclaredElementInstanceExtensions
    {
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<T> Cast<T>(this JetBrains.ReSharper.Psi.DeclaredElementInstance instance)
            where T : JetBrains.ReSharper.Psi.IDeclaredElement { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType GetContainingType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.DeclaredElementInstance instance) { }
        public static JetBrains.ReSharper.Psi.InvocableSignature GetInvokeMethodSignature([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IDelegate> instance) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetParameterType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> instance) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetReturnType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IDelegate> instance) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetReturnType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> instance) { }
        public static JetBrains.ReSharper.Psi.InvocableSignature GetSignature([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> instance) { }
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<T> TryCast<T>(this JetBrains.ReSharper.Psi.DeclaredElementInstance instance)
            where T : JetBrains.ReSharper.Psi.IDeclaredElement { }
    }
    public class static DeclaredElementPresenter
    {
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle FROMKIND_PRESENTER;
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle INKIND_PRESENTER;
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle KIND_NAME_PRESENTER;
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle KIND_PRESENTER;
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle KIND_QUALIFIED_NAME_PRESENTER;
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle NAME_PRESENTER;
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle QUALIFIED_NAME_PRESENTER;
        [JetBrains.Annotations.NotNullAttribute()]
        public static string Format(JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle style, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string Format(JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle style, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] out JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking marking) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string Format(JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle style, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string Format(JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle style, JetBrains.ReSharper.Psi.DeclaredElementInstance instance) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string Format(JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle style, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, [JetBrains.Annotations.NotNullAttribute()] out JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking marking) { }
        public static string Format(JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ReSharper.Psi.ParameterKind parameterKind) { }
        public static string Format(JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ReSharper.Psi.AccessRights accessRights) { }
        public static bool MakeSmaller(JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle presenter, ref string str, ref JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking marking) { }
    }
    public class DeclaredElementPresenterMarking
    {
        public DeclaredElementPresenterMarking() { }
        public JetBrains.Util.TextRange AccessRightsRange { get; set; }
        public JetBrains.Util.TextRange ConstantValueRange { get; set; }
        public JetBrains.Util.TextRange ContainerNameRange { get; set; }
        public JetBrains.Util.TextRange ContainerRange { get; set; }
        public JetBrains.Util.TextRange EntityKindRange { get; set; }
        public JetBrains.Util.TextRange ExplicitInterfaceRange { get; set; }
        public JetBrains.Util.TextRange ModifiersRange { get; set; }
        public JetBrains.Util.TextRange NameRange { get; set; }
        public JetBrains.Util.TextRange ParameterListRange { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public Parameter[] ParameterRanges { get; set; }
        public JetBrains.Util.TextRange ScalarTypeRange { get; set; }
        public JetBrains.Util.TextRange TypeParameterListRange { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.Util.TextRange[] TypeParameterRanges { get; set; }
        public JetBrains.Util.TextRange TypeRange { get; set; }
        public void Offset(int startPos, int offset) { }
        public class Parameter
        {
            public JetBrains.Util.TextRange DefaultValueRange;
            public JetBrains.Util.TextRange KindRange;
            public JetBrains.Util.TextRange NameRange;
            public JetBrains.Util.TextRange Range;
            public JetBrains.Util.TextRange ScalarTypeRange;
            public JetBrains.Util.TextRange TypeRange;
            public Parameter() { }
            public Parameter(JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking.Parameter p, int offset) { }
            public bool IsValid { get; }
        }
    }
    public class DeclaredElementPresenterStyle
    {
        public DeclaredElementPresenterStyle() { }
        public DeclaredElementPresenterStyle(JetBrains.ReSharper.Psi.NameStyle nameStyle) { }
        public System.Func<string, JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking, int> LengthCheck { get; set; }
        public int LengthLimit { get; set; }
        public bool MemberContainerQualified { get; set; }
        public bool ShowAccessRights { get; set; }
        public bool ShowConstantValue { get; set; }
        public JetBrains.ReSharper.Psi.EntityKindForm ShowEntityKind { get; set; }
        public bool ShowExplicitInterfaceQualification { get; set; }
        public JetBrains.ReSharper.Psi.MemberContainerStyle ShowMemberContainer { get; set; }
        public bool ShowModifiers { get; set; }
        public JetBrains.ReSharper.Psi.NameStyle ShowName { get; set; }
        public bool ShowNameInQuotes { get; set; }
        public JetBrains.ReSharper.Psi.NamespaceContainerStyle ShowNamespaceContainer { get; set; }
        public JetBrains.ReSharper.Psi.ParameterContainerStyle ShowParameterContainer { get; set; }
        public bool ShowParameterNames { get; set; }
        public bool ShowParametersForDelegates { get; set; }
        public bool ShowParameterTypes { get; set; }
        public JetBrains.ReSharper.Psi.TypeStyle ShowType { get; set; }
        public JetBrains.ReSharper.Psi.TypeContainerStyle ShowTypeContainer { get; set; }
        public JetBrains.ReSharper.Psi.TypeParameterStyle ShowTypeParameters { get; set; }
        public bool ShowTypesQualified { get; set; }
        public JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle Clone() { }
    }
    public abstract class DeclaredElementType : JetBrains.Util.EnumPattern
    {
        protected DeclaredElementType(string name) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected internal abstract JetBrains.ReSharper.Psi.IDeclaredElementPresenter DefaultPresenter { get; }
        public abstract string PresentableName { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected internal abstract JetBrains.UI.Icons.IconId GetImage();
        public abstract bool IsPresentable(JetBrains.ReSharper.Psi.PsiLanguageType language);
    }
    public abstract class DeclaredElementTypeBase : JetBrains.ReSharper.Psi.DeclaredElementType
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected readonly JetBrains.UI.Icons.IconId myImageName;
        protected DeclaredElementTypeBase(string name, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Icons.IconId imageName) { }
        public override string PresentableName { get; }
        protected internal override JetBrains.UI.Icons.IconId GetImage() { }
        public override bool IsPresentable(JetBrains.ReSharper.Psi.PsiLanguageType language) { }
    }
    public class static DeclaredTypeExtensions
    {
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution GetSubstitution(this JetBrains.ReSharper.Psi.IDeclaredType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperType(this JetBrains.ReSharper.Psi.IDeclaredType derived, JetBrains.ReSharper.Psi.ITypeElement superTypeElement, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        [JetBrains.Annotations.PureAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes(this JetBrains.ReSharper.Psi.IDeclaredType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.ITypeElement GetTypeElement(this JetBrains.ReSharper.Psi.IDeclaredType type, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
    }
    public class DefaultValue
    {
        public static readonly JetBrains.ReSharper.Psi.DefaultValue BAD_VALUE;
        public DefaultValue([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IField> literal) { }
        public DefaultValue([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ConstantValue constantValue) { }
        public DefaultValue([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType defaultType) { }
        public JetBrains.ReSharper.Psi.ConstantValue ConstantValue { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.IType DefaultTypeValue { get; }
        public bool IsBadValue { get; }
        public bool IsConstant { get; }
        public bool IsDefaultType { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IField> Literal { get; }
        public override bool Equals(object obj) { }
        protected bool Equals(JetBrains.ReSharper.Psi.DefaultValue other) { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IType GetType(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public JetBrains.ReSharper.Psi.DefaultValue Substitute(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class DelegatingTypeVisitor : JetBrains.ReSharper.Psi.TypeVisitor
    {
        public JetBrains.ReSharper.Psi.DelegatingTypeVisitor.AnonymousTypeProcessor ProcessAnonymousType { get; set; }
        public JetBrains.ReSharper.Psi.DelegatingTypeVisitor.ArrayTypeProcessor ProcessArrayType { get; set; }
        public JetBrains.ReSharper.Psi.DelegatingTypeVisitor.DeclaredTypeProcessor ProcessDeclaredType { get; set; }
        public JetBrains.ReSharper.Psi.DelegatingTypeVisitor.DynamicTypeProcessor ProcessDynamicType { get; set; }
        public JetBrains.ReSharper.Psi.DelegatingTypeVisitor.MultitypeProcessor ProcessMultitype { get; set; }
        public JetBrains.ReSharper.Psi.DelegatingTypeVisitor.PointerTypeProcessor ProcessPointerType { get; set; }
        public JetBrains.ReSharper.Psi.DelegatingTypeVisitor.TypeProcessor ProcessType { get; set; }
        public override void VisitAnonymousType(JetBrains.ReSharper.Psi.IAnonymousType anonymousType) { }
        public override void VisitArrayType(JetBrains.ReSharper.Psi.IArrayType arrayType) { }
        public override void VisitDeclaredType(JetBrains.ReSharper.Psi.IDeclaredType declaredType) { }
        public override void VisitDynamicType(JetBrains.ReSharper.Psi.IDynamicType dynamicType) { }
        public override void VisitMultitype(JetBrains.ReSharper.Psi.IMultitype multitype) { }
        public override void VisitPointerType(JetBrains.ReSharper.Psi.IPointerType pointerType) { }
        public override void VisitType(JetBrains.ReSharper.Psi.IType type) { }
        public delegate void AnonymousTypeProcessor(JetBrains.ReSharper.Psi.IAnonymousType anonymousType);
        public delegate void ArrayTypeProcessor(JetBrains.ReSharper.Psi.IArrayType arrayType);
        public delegate void DeclaredTypeProcessor(JetBrains.ReSharper.Psi.IDeclaredType declaredType);
        public delegate void DynamicTypeProcessor(JetBrains.ReSharper.Psi.IDynamicType dynamicType);
        public delegate void MultitypeProcessor(JetBrains.ReSharper.Psi.IMultitype multitype);
        public delegate void PointerTypeProcessor(JetBrains.ReSharper.Psi.IPointerType pointerType);
        public delegate void TypeProcessor(JetBrains.ReSharper.Psi.IType type);
    }
    public class DisposableMarker : System.IDisposable
    {
        public DisposableMarker([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode root) { }
        public JetBrains.ReSharper.Psi.TreeNodeMarker Marker { get; }
        public virtual void Dispose() { }
    }
    public class DisposableMarker<T> : JetBrains.ReSharper.Psi.DisposableMarker
        where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public DisposableMarker([JetBrains.Annotations.CanBeNullAttribute()] T element) { }
        public override void Dispose() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public T Find(JetBrains.ReSharper.Psi.Tree.ITreeNode root) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public T Get(JetBrains.ReSharper.Psi.Tree.ITreeNode root) { }
    }
    public class ElementFactoryException : System.Exception
    {
        public ElementFactoryException(string message) { }
        public ElementFactoryException(string message, System.Exception innerException) { }
        protected ElementFactoryException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static T Catch<T>([JetBrains.Annotations.NotNullAttribute()] System.Func<T> action)
            where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    }
    public class EmptyAttributesSet : JetBrains.ReSharper.Psi.IAttributesSet
    {
        public static readonly JetBrains.ReSharper.Psi.IAttributesSet Instance;
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
    }
    public class EmptyClrTypeName : JetBrains.ReSharper.Psi.ClrTypeNameBase
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName Instance;
        public override string FullName { get; }
        public override System.Collections.Generic.IEnumerable<string> NamespaceNames { get; }
        public override string ShortName { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber> TypeNames { get; }
        public override string GetFullNameFast() { }
        public override JetBrains.ReSharper.Psi.IClrTypeNamePartIterator GetPartIterator() { }
        public override int GetPartsCount() { }
        public override string ToString() { }
    }
    public class EmptyPsiModule : JetBrains.ReSharper.Psi.Modules.IPsiModule
    {
        public EmptyPsiModule([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution) { }
        public JetBrains.ProjectModel.IModule ContainingProjectModule { get; }
        public string DisplayName { get; }
        public string Name { get; }
        public JetBrains.ProjectModel.ProjectFileType ProjectFileType { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PsiLanguage { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> SourceFiles { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.PreProcessingDirective> GetAllDefines() { }
        public string GetPersistentID() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModuleReference> GetReferences(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext) { }
        public JetBrains.ProjectModel.ISolution GetSolution() { }
        public bool IsValid() { }
    }
    public enum EntityKindForm
    {
        NONE = 0,
        NORMAL = 1,
        NORMAL_IN_BRACKETS = 2,
        IN = 3,
        FROM = 4,
    }
    public class static ExpressionTypeExtensions
    {
        [System.ObsoleteAttribute("Use IExpressionType.IsImplicitlyConvertibleTo with conversion rule")]
        public static bool IsImplicitlyConvertibleTo(this JetBrains.ReSharper.Psi.IExpressionType sourceType, JetBrains.ReSharper.Psi.IType targetType, JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
    }
    public class Generated : JetBrains.ReSharper.Psi.ITreeTextRangeKind { }
    public class static GeneratedDocumentsManagerExtensions
    {
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public static void AssertThatGeneratedFilesAreValid(this JetBrains.ReSharper.Psi.IGeneratedDocumentsManager generatedDocumentsManager, JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile) { }
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public static void AssertThatGeneratedFilesAreValid(this JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.IGeneratedDocumentService> GetServices([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IGeneratedDocumentsManager generatedDocumentsManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public static JetBrains.DocumentModel.DocumentRange TryFindNavigationRangeInPrimaryDocument(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public interface IAccessor : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IMethod, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        JetBrains.ReSharper.Psi.AccessorKind Kind { get; }
        JetBrains.ReSharper.Psi.IOverridableMember OwnerMember { get; }
        JetBrains.ReSharper.Psi.IParameter ValueVariable { get; }
    }
    public interface IAccessRightsOwner
    {
        JetBrains.ReSharper.Psi.AccessRights GetAccessRights();
    }
    public interface IAnonymousType : JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType
    {
        bool CaseSensistive { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.AnonymousTypeDescriptor> TypeDescriptor { get; }
    }
    public interface IAnonymousTypeProperty : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner
    {
        JetBrains.ReSharper.Psi.IAnonymousType ContainingType { get; }
        int Index { get; }
        JetBrains.ReSharper.Psi.IAnonymousTypeProperty SetName(string name);
    }
    public interface IArgumentInfo
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IInvocationInfo Invocation { get; }
        bool IsExtension { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> MatchingParameter { get; }
        JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        JetBrains.DocumentModel.DocumentRange GetDocumentRange();
        JetBrains.ReSharper.Psi.IExpressionType GetExpressionType();
        JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        bool IsValid();
    }
    public interface IArrayType : JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType ElementType { get; }
        int Rank { get; }
    }
    public interface IAsyncCommitClient
    {
        System.Action BeforeCommit();
        void OnInterrupt();
    }
    public interface IAttributeInstance
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IConstructor Constructor { get; }
        int PositionParameterCount { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IDeclaredType GetAttributeType();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IClrTypeName GetClrName();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.AttributeValue NamedParameter(string name);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<string, JetBrains.ReSharper.Psi.AttributeValue>> NamedParameters();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.AttributeValue PositionParameter(int paramIndex);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.AttributeValue> PositionParameters();
    }
    public interface IAttributesOwner : JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement { }
    public interface IAttributesSet
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit);
        bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit);
    }
    public interface ICaseInsensitiveNamespace : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.INamespace, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ICaseSensitiveNamespace> Constitutients { get; }
    }
    public interface ICaseSensitiveNamespace : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.INamespace, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        JetBrains.ReSharper.Psi.ICaseInsensitiveNamespace CaseInsensitiveNamespace { get; }
    }
    public interface IClass : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> Constants { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> Fields { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IDeclaredType GetBaseClassType();
        JetBrains.ReSharper.Psi.MemberPresenceFlag GetMemberPresenceFlag();
    }
    public interface IClrDeclaredElement : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITypeElement GetContainingType();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember();
    }
    [JetBrains.Annotations.CannotApplyEqualityOperatorAttribute()]
    public interface IClrTypeName
    {
        string FullName { get; }
        System.Collections.Generic.IEnumerable<string> NamespaceNames { get; }
        string ShortName { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber> TypeNames { get; }
        [JetBrains.Annotations.PureAttribute()]
        string GetFullNameFast();
        [JetBrains.Annotations.PureAttribute()]
        JetBrains.ReSharper.Psi.IClrTypeNamePartIterator GetPartIterator();
        [JetBrains.Annotations.PureAttribute()]
        int GetPartsCount();
        [JetBrains.Annotations.PureAttribute()]
        JetBrains.ReSharper.Psi.IClrTypeName GetPersistent();
    }
    public interface IClrTypeNamePartIterator
    {
        bool GetNextPart(out JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber info);
    }
    public interface ICompiledElement : JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement
    {
        JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
    }
    public interface IConstantValueOwner
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.ConstantValue ConstantValue { get; }
    }
    public interface IConstantValuePresenter
    {
        string Present(JetBrains.ReSharper.Psi.ConstantValue constantValue);
    }
    public interface IConstantValueService
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IConstantValuePresenter Presenter { get; }
        JetBrains.ReSharper.Psi.ConstantValue GetDefaultValue([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type);
        bool IsLegalConstantType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type);
        bool IsPureNull([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ConstantValue value);
    }
    public interface IConstructor : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        bool IsDefault { get; }
        bool IsImplicit { get; }
    }
    public interface IConversionOperator : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOperator, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        bool IsExplicitCast { get; }
        bool IsImplicitCast { get; }
    }
    public interface ICustomPsiSourceFileProperties { }
    public interface IDeclarationsRange
    {
        JetBrains.ReSharper.Psi.Tree.IDeclaration[] Declarations { get; }
        JetBrains.ReSharper.Psi.ITreeRange TreeRange { get; }
    }
    public interface IDeclarationsRangeContainer : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.IDeclarationsRange AddDeclarationsRangeAfter(JetBrains.ReSharper.Psi.IDeclarationsRange range, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor);
        JetBrains.ReSharper.Psi.IDeclarationsRange AddDeclarationsRangeBefore(JetBrains.ReSharper.Psi.IDeclarationsRange range, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor);
        JetBrains.ReSharper.Psi.IDeclarationsRange GetAllDeclarationsRange();
        JetBrains.ReSharper.Psi.IDeclarationsRange GetDeclarationsRange(JetBrains.ReSharper.Psi.TreeTextRange range);
        JetBrains.ReSharper.Psi.IDeclarationsRange GetDeclarationsRange(JetBrains.ReSharper.Psi.Tree.IDeclaration first, JetBrains.ReSharper.Psi.Tree.IDeclaration last);
        void RemoveDeclarationsRange(JetBrains.ReSharper.Psi.IDeclarationsRange range);
    }
    [JetBrains.Annotations.CannotApplyEqualityOperatorAttribute()]
    public interface IDeclaredElement
    {
        bool CaseSensistiveName { get; }
        JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string ShortName { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations();
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.DeclaredElementType GetElementType();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles();
        System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit);
        System.Xml.XmlNode GetXMLDoc(bool inherit);
        bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        bool IsSynthetic();
        bool IsValid();
    }
    public interface IDeclaredElementEnvoy
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IDeclaredElement GetValidDeclaredElement();
        void Present<TStructureElement>(JetBrains.UI.TreeView.StructuredPresenter<TStructureElement, JetBrains.CommonControls.IPresentableItem> presenter, TStructureElement structureElement, JetBrains.CommonControls.IPresentableItem item, JetBrains.UI.TreeView.PresentationState state)
            where TStructureElement : JetBrains.Util.IPresentableStructureElement;
    }
    public interface IDeclaredElementPresenter
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        string Format([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle style, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, [JetBrains.Annotations.NotNullAttribute()] out JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking marking);
        [JetBrains.Annotations.CanBeNullAttribute()]
        string Format(JetBrains.ReSharper.Psi.ParameterKind parameterKind);
        [JetBrains.Annotations.CanBeNullAttribute()]
        string Format(JetBrains.ReSharper.Psi.AccessRights accessRights);
    }
    public interface IDeclaredType : JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.Metadata.Utils.AssemblyNameInfo Assembly { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        JetBrains.ReSharper.Psi.IClrTypeName GetClrName();
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        JetBrains.ReSharper.Psi.ITypeElement GetTypeElement();
        [JetBrains.Annotations.PureAttribute()]
        bool IsSubtypeOf([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredType to);
        [JetBrains.Annotations.PureAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IResolveResult Resolve();
    }
    public interface IDelegate : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IMethod InvokeMethod { get; }
        JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
    }
    public interface IDynamicType : JetBrains.ReSharper.Psi.IDeclaredType, JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType { }
    public interface IEnum : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IField> EnumMembers { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType GetUnderlyingType();
    }
    public interface IEvent : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IAccessor Adder { get; }
        bool IsFieldLikeEvent { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IAccessor Raiser { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IAccessor Remover { get; }
    }
    public interface IExplicitImplementation
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IDeclaredType DeclaringType { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string MemberName { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.OverridableMemberInstance Resolve();
    }
    [JetBrains.Annotations.CannotApplyEqualityOperatorAttribute()]
    public interface IExpressionType
    {
        bool IsResolved { get; }
        bool IsUnknown { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType);
        JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        bool IsExplicitlyConvertibleTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule);
        bool IsImplicitlyConvertibleTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule);
        bool IsValid();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IType ToIType();
    }
    public interface IField : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        System.Nullable<int> FixedBufferSize { get; }
        bool IsConstant { get; }
        bool IsEnumMember { get; }
        bool IsField { get; }
    }
    public interface IFunction : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        bool IsPredefined { get; }
        JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
    }
    public interface IGeneratedDocumentsManager
    {
        void ApplyTransactionDocumentChange(JetBrains.DocumentModel.DocumentChange documentChange, string oldText, JetBrains.ReSharper.Psi.Transactions.IPsiTransactionAction transactionAction);
        void AssertGeneratedFilesValid(JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile);
        JetBrains.DocumentModel.IDocument CreateGeneratedDocument(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, string text, JetBrains.ReSharper.Psi.PsiLanguageType language);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> GetPossibleLanguageTypes(JetBrains.ProjectModel.IProject project, JetBrains.ProjectModel.ProjectFileType projectFileType);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.IGeneratedDocumentService> GetServices([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ProjectFileType projectFileType);
    }
    public interface IInterface : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner { }
    public interface IInvocationInfo
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IArgumentInfo> Arguments { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IArgumentInfo ExtensionQualifier { get; }
        JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference Reference { get; }
        JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        bool IsValid();
    }
    public interface ILabel : JetBrains.ReSharper.Psi.IDeclaredElement { }
    public interface ILanguageManager
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<T> GetMultipleServicesFromAll<T>()
            where T :  class;
        [JetBrains.Annotations.NotNullAttribute()]
        T GetService<T, TLanguage>()
            where T :  class
            where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType;
        [JetBrains.Annotations.NotNullAttribute()]
        T GetService<T>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType languageType)
            where T :  class;
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<T> GetServices<T>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType languageType)
            where T :  class;
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<T> GetServicesFromAll<T>()
            where T :  class;
        bool HasService<T>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType languageType)
            where T :  class;
        [JetBrains.Annotations.CanBeNullAttribute()]
        T TryGetService<T, TLanguage>()
            where T :  class
            where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType;
        [JetBrains.Annotations.CanBeNullAttribute()]
        T TryGetService<T>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType languageType)
            where T :  class;
    }
    public interface ILanguages : JetBrains.DataFlow.IViewable<JetBrains.ReSharper.Psi.PsiLanguageType>
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> All { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.PsiLanguageType GetLanguageByName([JetBrains.Annotations.NotNullAttribute()] string languageName);
    }
    public interface ILocalScope : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredElement> LocalVariables { get; }
    }
    public interface ILocalVariable : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner
    {
        bool IsConstant { get; }
        bool IsStatic { get; }
        bool IsWritable { get; }
    }
    public interface IMethod : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        bool IsExtensionMethod { get; }
        bool IsIterator { get; }
        bool IsVarArg { get; }
    }
    public interface IModifiersOwner : JetBrains.ReSharper.Psi.IAccessRightsOwner
    {
        bool IsAbstract { get; }
        bool IsExtern { get; }
        bool IsOverride { get; }
        bool IsReadonly { get; }
        bool IsSealed { get; }
        bool IsStatic { get; }
        bool IsUnsafe { get; }
        bool IsVirtual { get; }
        bool IsVolatile { get; }
    }
    public interface IModuleDeclaredElement : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.Metadata.Utils.AssemblyNameInfo AssemblyName { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.Util.FileSystemPath Location { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ProjectModel.IModule ProjectModule { get; }
    }
    public interface IMultitype : JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> Constitutients { get; }
    }
    public interface INamespace : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        bool HasNonSourceMembers { get; }
        bool IsRootNamespace { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> Modules { get; }
        string QualifiedName { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.ICaseInsensitiveNamespace GetCaseInsensitiveNamespace();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.INamespace GetContainingNamespace();
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IClrDeclaredElement> GetNestedElements(JetBrains.ReSharper.Psi.Caches.ISymbolScope cache);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IClrDeclaredElement> GetNestedElements(JetBrains.ReSharper.Psi.Caches.ISymbolScope cache, string name, bool caseSensitive);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.INamespace GetNestedNamespace(JetBrains.ReSharper.Psi.Caches.ISymbolScope cache, string name);
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.INamespace> GetNestedNamespaces(JetBrains.ReSharper.Psi.Caches.ISymbolScope cache);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeElement> GetNestedTypeElements(JetBrains.ReSharper.Psi.Caches.ISymbolScope cache);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeElement> GetNestedTypeElements(JetBrains.ReSharper.Psi.Caches.ISymbolScope cache, string name, bool caseSensitive);
        bool IsEmptyNamespace(JetBrains.ReSharper.Psi.Caches.ISymbolScope cache);
    }
    public interface INavigateablePsiSourceFile : JetBrains.ReSharper.Psi.IPsiSourceFile, JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.Util.FileSystemPath NavigationPath { get; }
    }
    public interface INonCachableExpressionType : JetBrains.ReSharper.Psi.IExpressionType { }
    public class static InterfaceEx
    {
        public static bool CanBeInstantiated([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IInterface @interface) { }
    }
    public class InvocableSignature
    {
        public static readonly JetBrains.ReSharper.Psi.InvocableSignature Null;
        public InvocableSignature(JetBrains.ReSharper.Psi.IParametersOwner parametersOwner, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, JetBrains.ReSharper.Psi.ISignatureComparer defaultComparer = null) { }
        public JetBrains.ReSharper.Psi.IType ConversionOperatorReturnType { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution EqualitySubstitution { get; }
        public bool IsDefaultProperty { get; }
        public bool IsResolved { get; }
        public bool IsStaticConstructor { get; }
        public string Name { get; }
        public int ParameterCount { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public static bool CompareWithoutName(JetBrains.ReSharper.Psi.InvocableSignature s1, JetBrains.ReSharper.Psi.InvocableSignature s2) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.IType GetEqualityParameterType(int parameterIndex) { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.ParameterKind GetParameterKind(int parameterIndex) { }
        public JetBrains.ReSharper.Psi.IType GetParameterType(int parameterIndex) { }
        public bool IsOptional(int parameterIndex) { }
        public bool IsParamArray(int index) { }
        public bool IsVarArg(int index) { }
        public void SetParameterType(int parameterIndex, JetBrains.ReSharper.Psi.IType type) { }
    }
    public interface IOperator : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner { }
    public interface IOverridableMember : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        bool CanBeImplicitImplementation { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExplicitImplementation> ExplicitImplementations { get; }
        bool IsExplicitImplementation { get; }
    }
    public interface IParameter : JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IParametersOwner ContainingParametersOwner { get; }
        bool IsOptional { get; }
        bool IsParameterArray { get; }
        bool IsValueVariable { get; }
        bool IsVarArg { get; }
        JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        JetBrains.ReSharper.Psi.DefaultValue GetDefaultValue();
    }
    public interface IParametersOwner : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType ReturnType { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations();
        JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
    }
    public interface IPathDeclaredElement : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        JetBrains.Util.FileSystemPath Path { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ProjectModel.IProjectItem GetProjectItem();
    }
    public interface IPointerType : JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType
    {
        JetBrains.ReSharper.Psi.IType ElementType { get; }
    }
    public interface IProjectFileCustomPsiPropertiesProvider
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        T GetCustomProperties<T>([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ProjectModel.IProjectFile projectFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
    }
    public interface IProjectFileLanguageService
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Icons.IconId Icon { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ProjectModel.ProjectFileType LanguageType { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Parsing.ILexerFactory GetMixedLexerFactory([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution, JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile = null);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.PreProcessingDirective[] GetPreprocessorDefines(JetBrains.ProjectModel.IProject project);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.PsiLanguageType GetPsiLanguageType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProjectFile projectFile);
        [JetBrains.Annotations.NotNullAttribute()]
        [System.ObsoleteAttribute("Use overload that takes project file")]
        JetBrains.ReSharper.Psi.PsiLanguageType GetPsiLanguageType(JetBrains.ProjectModel.ProjectFileType languageType);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiSourceFileProperties GetPsiProperties([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProjectFile projectFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
    }
    public interface IProperty : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IAccessor Getter { get; }
        bool IsDefault { get; }
        bool IsReadable { get; }
        bool IsWritable { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IAccessor Setter { get; }
    }
    public interface IPsiAssembly
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.Metadata.Utils.AssemblyNameInfo AssemblyName { get; }
        bool IsFrameworkAssembly { get; }
        bool IsMscorlib { get; }
        bool IsRetargetable { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.Util.FileSystemPath Location { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ProjectModel.PlatformID PlatformId { get; }
        JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        bool IsValid();
    }
    public interface IPsiCleanupProvider
    {
        void Run();
    }
    public interface IPsiConfiguration
    {
        bool CacheJobServiceSynchronous { get; }
        bool EagerMetadataLoad { get; }
        bool FullMetadataLoad { get; }
        bool PersistCaches { get; }
        JetBrains.ProjectModel.ISolution Solution { get; }
        JetBrains.ProjectModel.Caches.ISolutionCachesConfiguration SolutionCachesConfiguration { get; }
    }
    public interface IPsiIconManagerExtension
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Icons.IconId GetImageId(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.PsiLanguageType languageType, out bool canApplyExtensions);
    }
    public interface IPsiProjectFile : JetBrains.ReSharper.Psi.IPsiSourceFile, JetBrains.ReSharper.Psi.IPsiSourceFileWithLocation, JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ProjectModel.IProjectFile ProjectFile { get; }
    }
    public interface IPsiServices
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Search.IFinder AsyncFinder { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Caches.IPsiCaches Caches { get; }
        JetBrains.ReSharper.Psi.IPsiConfiguration Configuration { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Dependencies.DependencyStore DependencyStore { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Files.IPsiFiles Files { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Search.IFinder Finder { get; }
        JetBrains.ReSharper.Psi.IGeneratedDocumentsManager GeneratedDocumentsManager { get; }
        JetBrains.Application.IShellLocks Locks { get; }
        JetBrains.ReSharper.Psi.Modules.IPsiModules Modules { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Naming.NamingManager Naming { get; }
        JetBrains.ReSharper.Psi.Pointers.IPsiPointers Pointers { get; }
        JetBrains.Application.Settings.ISettingsStore SettingsStore { get; }
        JetBrains.ProjectModel.ISolution Solution { get; }
        JetBrains.ReSharper.Psi.Caches.IStubTreeNodeCache StubTreeNodes { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Caches.ISymbolCache Symbols { get; }
        JetBrains.ReSharper.Psi.Transactions.IPsiTransactions Transactions { get; }
        JetBrains.ReSharper.Psi.Caches.IWordIndex WordIndex { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        T GetComponent<T>()
            where T :  class;
    }
    public interface IPsiSourceFile : JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        string DisplayName { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DocumentModel.IDocument Document { get; }
        System.Nullable<int> InMemoryModificationStamp { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ProjectModel.ProjectFileType LanguageType { get; }
        System.DateTime LastWriteTimeUtc { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string Name { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.PsiLanguageType PrimaryPsiLanguage { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiSourceFileProperties Properties { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiSourceFileStorage PsiStorage { get; }
        JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        string GetPersistentID();
        bool IsValid();
    }
    public interface IPsiSourceFileProperties
    {
        bool IsGeneratedFile { get; }
        bool IsICacheParticipant { get; }
        bool IsNonUserFile { get; }
        bool ProvidesCodeModel { get; }
        bool ShouldBuildPsi { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string GetDefaultNamespace();
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.PreProcessingDirective> GetDefines();
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<string> GetPreImportedNamespaces();
    }
    public interface IPsiSourceFilePropertiesProvider
    {
        double Order { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiSourceFileProperties GetPsiProperties([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFileProperties prevProperties, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProjectFile projectFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
    }
    public interface IPsiSourceFileStorage
    {
        JetBrains.Util.Caches.IParametrizedCachedValue<JetBrains.ReSharper.Psi.Files.PsiFilesBucket, System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.Files.IPsiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile>> PsiFilesBucket { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        object StubTreeNodesCacheLock { get; }
        JetBrains.ReSharper.Psi.Caches.SymbolCache.TypeMembersBucket TypeMemberBucket { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        object TypeMemberBucketLock { get; }
    }
    public interface IPsiSourceFileWithLocation : JetBrains.ReSharper.Psi.IPsiSourceFile, JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.Util.FileSystemPath Location { get; }
    }
    public interface IRecursiveElementProcessor
    {
        bool ProcessingIsFinished { get; }
        bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element);
        void ProcessAfterInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element);
        void ProcessBeforeInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element);
    }
    public interface IRecursiveElementProcessor<in TContext>
    
    {
        bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element, TContext context);
        bool IsProcessingFinished(TContext context);
        void ProcessAfterInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element, TContext context);
        void ProcessBeforeInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element, TContext context);
    }
    public interface IReferencePointer
    {
        JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference GetReference();
    }
    public interface IRegionsInfo
    {
        bool ContainedInGeneratedRange(JetBrains.Util.TextRange range);
        bool ContainedInIgnoreRangeForWarning(string id, JetBrains.Util.TextRange range);
    }
    public interface IRegionsInfoProvider
    {
        JetBrains.ReSharper.Psi.IRegionsInfo GetInfoForDocument(JetBrains.DocumentModel.IDocument document, bool runDaemon = False);
    }
    public interface IResourceItemDeclaredElement : JetBrains.ReSharper.Psi.IDeclaredElement { }
    public interface ISandBox : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope, JetBrains.ReSharper.Psi.Impl.IResolveIsolationScope, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode ContextNode { get; }
        JetBrains.ReSharper.Psi.SandBoxContextType ContextType { get; }
    }
    public interface ISignatureComparer : System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.InvocableSignature>
    {
        bool Compare(JetBrains.ReSharper.Psi.InvocableSignature s1, JetBrains.ReSharper.Psi.InvocableSignature s2);
        bool CompareParameters(JetBrains.ReSharper.Psi.InvocableSignature s1, JetBrains.ReSharper.Psi.InvocableSignature s2);
        bool CompareWithoutName(JetBrains.ReSharper.Psi.InvocableSignature s1, JetBrains.ReSharper.Psi.InvocableSignature s2);
        bool CompareWithoutNameAndWithoutTypeParameters(JetBrains.ReSharper.Psi.InvocableSignature s1, JetBrains.ReSharper.Psi.InvocableSignature s2);
    }
    public interface ISignOperator : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOperator, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner { }
    public interface IStruct : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> Constants { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> Fields { get; }
        bool HasHiddenInstanceFields { get; }
        JetBrains.ReSharper.Psi.MemberPresenceFlag GetMemberPresenceFlag();
    }
    public interface ITreeNodePointer<out T>
        where out T : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        T GetTreeNode();
    }
    public interface ITreeRange : System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode>, System.Collections.IEnumerable
    {
        JetBrains.ReSharper.Psi.Tree.ITreeNode First { get; }
        bool IsEmpty { get; }
        JetBrains.ReSharper.Psi.Tree.ITreeNode Last { get; }
    }
    public interface ITreeRangePointer
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITreeRange GetTreeRange();
    }
    public interface ITreeTextRangeKind { }
    public interface IType : JetBrains.ReSharper.Psi.IExpressionType
    {
        System.Nullable<JetBrains.ReSharper.Psi.TypeClassification> Classify { get; }
        bool IsOpenType { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeModifier> TypeModifiers { get; }
        void Accept(JetBrains.ReSharper.Psi.TypeVisitor typeVisitor);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.ITypePointer CreatePointer();
        [JetBrains.Annotations.NotNullAttribute()]
        string GetPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext GetResolveContext();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IDeclaredType GetScalarType();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module);
        bool IsWellFormed();
    }
    public interface ITypeConversionRule
    {
        [JetBrains.Annotations.PureAttribute()]
        bool IsExplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to);
        [JetBrains.Annotations.PureAttribute()]
        bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to);
        [JetBrains.Annotations.PureAttribute()]
        bool IsImplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to);
        [JetBrains.Annotations.PureAttribute()]
        bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to);
    }
    public interface ITypeDecorator : JetBrains.ReSharper.Psi.ITypePointer
    {
        JetBrains.ReSharper.Psi.ITypePointer TypePointer { get; set; }
    }
    public interface ITypeElement : JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeParametersOwner
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeElement> NestedTypes { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IClrTypeName GetClrName();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.INamespace GetContainingNamespace();
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers();
        JetBrains.ReSharper.Psi.IPsiSourceFile GetSingleOrDefaultSourceFile();
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes();
    }
    public interface ITypeKeywordsService
    {
        System.Collections.Generic.IEnumerable<string> TypeKeywords { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        string GetFullQualifiedTypeName(string keyword);
        [JetBrains.Annotations.CanBeNullAttribute()]
        string GetTypeKeyword(JetBrains.ReSharper.Psi.IClrTypeName qualifiedTypeName);
        bool IsDynamicKeyword(string keyword);
        bool IsTypeKeywordReference(JetBrains.ReSharper.Psi.Resolve.IReference reference);
    }
    public interface ITypeMember : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash();
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers();
    }
    public interface ITypeOwner : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType Type { get; }
    }
    public interface ITypeParameter : JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeParametersOwner
    {
        bool HasDefaultConstructor { get; }
        int Index { get; }
        bool IsClassType { get; }
        bool IsValueType { get; }
        JetBrains.ReSharper.Psi.ITypeParametersOwner Owner { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IMethod OwnerMethod { get; }
        JetBrains.ReSharper.Psi.ITypeElement OwnerType { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> TypeConstraints { get; }
        JetBrains.ReSharper.Psi.TypeParameterVariance Variance { get; }
    }
    public interface ITypeParametersOwner : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
    }
    public interface ITypePointer
    {
        JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType FindType();
    }
    public interface ITypePresenter
    {
        string GetLongPresentableName(JetBrains.ReSharper.Psi.IType type);
        string GetPresentableName(JetBrains.ReSharper.Psi.IType type);
        string GetUnresolvedScalarTypePresentation(string name, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> typeArguments, JetBrains.ProjectModel.ISolution solution);
    }
    public interface IUnresolvedDeclaredElement : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        bool IsDynamic { get; }
    }
    public interface IXmlDocIdOwner : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement
    {
        [JetBrains.Annotations.NotNullAttribute()]
        string XMLDocId { get; }
    }
    [JetBrains.ReSharper.Psi.LanguageDefinitionAttribute("ANY")]
    public class KnownLanguage : JetBrains.ReSharper.Psi.PsiLanguageType
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.KnownLanguage ANY;
        public const string ANY_LANGUAGEID = "ANY";
        protected KnownLanguage([JetBrains.Annotations.NotNullAttribute()] string name) { }
        protected KnownLanguage([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] string presentableName) { }
    }
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=true)]
    public class LanguageAttribute : JetBrains.Application.Parts.PartAttribute
    {
        public LanguageAttribute(System.Type language) { }
        public System.Type Language { get; }
    }
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All)]
    public class LanguageDefinitionAttribute : JetBrains.Application.Parts.PartAttribute
    {
        public LanguageDefinitionAttribute(string language) { }
        public string Edition { get; set; }
        public string Language { get; set; }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class LanguageManager : JetBrains.Application.Extensibility.SplittedComponentContainer<JetBrains.ReSharper.Psi.PsiLanguageType, JetBrains.ReSharper.Psi.LanguageAttribute>, JetBrains.ReSharper.Psi.ILanguageManager
    {
        public LanguageManager(JetBrains.Application.IShellLocks locks, JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Parts.IPartsCatalogueSet catalogueSet, JetBrains.Application.Components.IComponentContainer parentContainer, JetBrains.ReSharper.Psi.ILanguages languages) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ILanguageManager Instance { get; }
        protected override void InitializeDefinition(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ReSharper.Psi.PsiLanguageType definition, JetBrains.Application.Parts.IPartsCatalogueSet catalogueSet, JetBrains.Application.Components.IComponentContainer parentContainer) { }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class Languages : JetBrains.DataFlow.IViewable<JetBrains.ReSharper.Psi.PsiLanguageType>, JetBrains.ReSharper.Psi.ILanguages
    {
        public Languages(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Parts.IPartsCatalogueSet catalogueSet, JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations, JetBrains.ReSharper.Psi.LanguageSettings.EnabledLanguagesSupport enabledLanguages) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> All { get; }
        public static JetBrains.ReSharper.Psi.ILanguages Instance { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType GetLanguageByName(string languageName) { }
        public void View(JetBrains.DataFlow.Lifetime lifetime, System.Action<JetBrains.DataFlow.Lifetime, JetBrains.ReSharper.Psi.PsiLanguageType> viewer) { }
    }
    public class LanguagesChanged
    {
        public LanguagesChanged(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> addedLanguages, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> removingLanguages) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> AddedLanguages { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> RemovingLanguages { get; }
    }
    public abstract class LanguageService
    {
        protected LanguageService(JetBrains.ReSharper.Psi.PsiLanguageType psiLanguageType, JetBrains.ReSharper.Psi.IConstantValueService constantValueService) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ILanguageCacheProvider CacheProvider { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public virtual JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter CodeFormatter { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IConstantValueService ConstantValueService { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public virtual JetBrains.ReSharper.Psi.IDeclaredElementPresenter DeclaredElementPresenter { get; }
        public abstract bool IsCaseSensitive { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType LanguageType { get; }
        public abstract bool SupportTypeMemberCache { get; }
        [System.ObsoleteAttribute("Context information is necessary for correct conversions. Usa language dependent " +
            "extension method \'GetTypeConversionRule\' from corresponding tree node.")]
        public virtual JetBrains.ReSharper.Psi.ITypeConversionRule TypeConversionRule { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.ITypePresenter TypePresenter { get; }
        public virtual bool CanContainCachableDeclarations([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public JetBrains.ReSharper.Psi.Parsing.CachingLexer CreateCachingLexer(JetBrains.Text.IBuffer buffer) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public virtual JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T> CreateElementPointer<T>(T declaredElement)
            where T : JetBrains.ReSharper.Psi.IDeclaredElement { }
        public abstract JetBrains.ReSharper.Psi.Parsing.ILexer CreateFilteringLexer(JetBrains.ReSharper.Psi.Parsing.ILexer lexer);
        public abstract JetBrains.ReSharper.Psi.Parsing.IParser CreateParser([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Parsing.ILexer lexer, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.IReferenceContextCodec CreateReferenceContextCodec() { }
        public virtual System.Collections.Generic.IEnumerable<string> EnumerateParserCapabilities() { }
        public abstract JetBrains.ReSharper.Psi.Parsing.ILexerFactory GetPrimaryLexerFactory();
        public JetBrains.ReSharper.Psi.ReferenceAccessType GetReferenceAccessType(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        public virtual JetBrains.ReSharper.Psi.ReferenceAccessType GetReferenceAccessType(JetBrains.ReSharper.Psi.IDeclaredElement target, JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        public virtual JetBrains.ReSharper.Psi.PreProcessingDirectivesInFile GetUsedConditionalSymbols(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [System.ObsoleteAttribute("Use ITreeNode.IsFiltered() instead")]
        public bool IsFilteredNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public virtual bool IsTypeMemberVisible(JetBrains.ReSharper.Psi.ITypeMember member) { }
        public virtual bool IsValidName(JetBrains.ReSharper.Psi.DeclaredElementType elementType, string name) { }
        public virtual void OptimizeImportsAndRefs(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IRangeMarker rangeMarker, bool optimizeUsings, bool shortenReferences, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Tree.IFile ParseFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Parsing.ILexer lexer, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public virtual JetBrains.ReSharper.Psi.Tree.ITreeNode ParseUsingCapability(string text, string capability, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    public class static LanguagesEx
    {
        public static JetBrains.ReSharper.Psi.PsiLanguageType LanguageOrUnknown(this JetBrains.ReSharper.Psi.ILanguages languages, [JetBrains.Annotations.NotNullAttribute()] string languageName) { }
    }
    [JetBrains.ProjectModel.ProjectModelElementPresenterAttribute(10D)]
    public class LanguageSpecificProjectElementPresenter : JetBrains.ProjectModel.IProjectModelElementPresenter
    {
        public JetBrains.UI.Icons.IconId GetIcon(JetBrains.ProjectModel.IProjectModelElement element) { }
        public string GetPresentableLocation(JetBrains.ProjectModel.IProjectModelElement projectModelElement) { }
    }
    public class ManuallyRemappedTreeNodePointer
    {
        public ManuallyRemappedTreeNodePointer(string keyName) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Tree.ITreeNode> Nodes { get; }
        public void Add(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public void Remap(JetBrains.ReSharper.Psi.Tree.ITreeNode tree) { }
    }
    public enum MemberContainerStyle
    {
        NONE = 0,
        AFTER = 1,
        AFTER_WITH_KIND = 2,
        AFTER_IN_PARENTHESIS = 3,
        AFTER_IN_PARENTHESIS_WITH_KIND = 4,
    }
    public struct MemberDecoration
    {
        public static readonly JetBrains.ReSharper.Psi.MemberDecoration DefaultValue;
        public JetBrains.ReSharper.Psi.Modifiers Modifiers;
        public JetBrains.ReSharper.Psi.AccessRights AccessRights { get; set; }
        public bool IsAbstract { get; set; }
        public bool IsExtern { get; set; }
        public bool IsHideBySig { get; set; }
        public bool IsOverride { get; set; }
        public bool IsReadonly { get; set; }
        public bool IsSealed { get; set; }
        public bool IsStatic { get; set; }
        public bool IsUnsafe { get; set; }
        public bool IsVirtual { get; set; }
        public bool IsVolatile { get; set; }
        public static JetBrains.ReSharper.Psi.MemberDecoration FromInt(int modifiers) { }
        public static JetBrains.ReSharper.Psi.MemberDecoration FromModifiers(JetBrains.ReSharper.Psi.Modifiers modifiers) { }
        [JetBrains.Annotations.PureAttribute()]
        public int ToInt() { }
    }
    public enum MemberHidePolicy : byte
    {
        HIDE_BY_SIGNATURE = 0,
        HIDE_BY_NAME = 1,
    }
    [System.FlagsAttribute()]
    public enum MemberPresenceFlag : byte
    {
        NONE = 0,
        IMPLICIT_OP = 1,
        EXPLICIT_OP = 2,
        SIGN_OP = 4,
        EQUALITY_OP = 8,
        MAY_EQUALS_OVERRIDE = 16,
        MAY_TOSTRING_OVERRIDE = 32,
        PUBLIC_DEFAULT_CTOR = 64,
        INSTANCE_CTOR = 128,
    }
    public abstract class MixedProjectFileLanguageService : JetBrains.ReSharper.Psi.ProjectFileLanguageService
    {
        protected MixedProjectFileLanguageService(JetBrains.ProjectModel.ProjectFileType projectFileType) { }
        public override JetBrains.ReSharper.Psi.Parsing.ILexerFactory GetMixedLexerFactory(JetBrains.ProjectModel.ISolution solution, JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile = null) { }
    }
    [System.FlagsAttribute()]
    public enum Modifiers : ushort
    {
        INITIAL = 0,
        ABSTRACT = 1,
        SEALED = 2,
        VIRTUAL = 4,
        OVERRIDE = 8,
        STATIC = 16,
        READONLY = 32,
        EXTERN = 64,
        UNSAFE = 128,
        VOLATILE = 256,
        SPECIAL_NAME = 512,
        PUBLIC = 1024,
        PROTECTED = 2048,
        INTERNAL = 4096,
        PRIVATE = 8192,
        HIDE_BY_SIG = 16384,
    }
    public class static ModifiersOwnerExtension
    {
        public static bool CanBeOverriden(this JetBrains.ReSharper.Psi.IModifiersOwner modifiersOwner) { }
    }
    public enum NamespaceContainerStyle
    {
        NONE = 0,
        AFTER = 1,
        AFTER_IN_PARENTHESIS = 2,
    }
    public enum NameStyle
    {
        NONE = 0,
        SHORT = 1,
        SHORT_RAW = 2,
        QUALIFIED = 3,
        QUALIFIED_EXCEPT_MEMBERS = 4,
        QUALIFIED_FULL_NESTED_TYPE_FOR_MEMBERS = 5,
        FULL_NESTED_TYPE = 6,
        FULL_NESTED_TYPE_EXCEPT_MEMBERS = 7,
    }
    public class NavigateablePsiSourceFileWithLocation : JetBrains.ReSharper.Psi.PsiSourceFileFromPath, JetBrains.ReSharper.Psi.INavigateablePsiSourceFile, JetBrains.ReSharper.Psi.IPsiSourceFile, JetBrains.Util.IUserDataHolder
    {
        public NavigateablePsiSourceFileWithLocation(JetBrains.ProjectModel.IProjectFileExtensions projectFileExtensions, JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator projectFileTypeCoordinator, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Util.FileSystemPath path, System.Func<JetBrains.ReSharper.Psi.PsiSourceFileFromPath, bool> validityCheck, System.Func<JetBrains.ReSharper.Psi.PsiSourceFileFromPath, JetBrains.ReSharper.Psi.IPsiSourceFileProperties> propertiesFactory, JetBrains.DocumentManagers.DocumentManager documentManager, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public NavigateablePsiSourceFileWithLocation(JetBrains.ProjectModel.IProjectFileExtensions projectFileExtensions, JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator projectFileTypeCoordinator, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Util.FileSystemPath path, System.Func<JetBrains.ReSharper.Psi.PsiSourceFileFromPath, bool> validityCheck, System.Func<JetBrains.ReSharper.Psi.PsiSourceFileFromPath, JetBrains.ReSharper.Psi.IPsiSourceFileProperties> propertiesFactory, JetBrains.DocumentManagers.DocumentManager documentManager, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext, JetBrains.Util.FileSystemPath navigationPath) { }
        public JetBrains.Util.FileSystemPath NavigationPath { get; }
    }
    public class OneActionProcessor : JetBrains.ReSharper.Psi.IRecursiveElementProcessor
    {
        protected System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode> myAction;
        protected System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> myPredicate;
        protected System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> myVisitPredicate;
        public OneActionProcessor(System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode> action, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> predicate) { }
        public OneActionProcessor(System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode> action, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> predicate, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> visitPredicate) { }
        public bool ProcessingIsFinished { get; }
        public virtual bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessAfterInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessBeforeInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public class OneActionProcessorWithoutVisit : JetBrains.ReSharper.Psi.OneActionProcessor
    {
        public OneActionProcessorWithoutVisit(System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode> action, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> predicate) { }
        public override bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public class static OperatorName
    {
        public const string BINARY_BITWISE_AND = "op_BitwiseAnd";
        public const string BINARY_BITWISE_OR = "op_BitwiseOr";
        public const string BINARY_DIVIDE = "op_Division";
        public const string BINARY_EQUALITY = "op_Equality";
        public const string BINARY_EXCLUSIVE_OR = "op_ExclusiveOr";
        public const string BINARY_GE = "op_GreaterThanOrEqual";
        public const string BINARY_GT = "op_GreaterThan";
        public const string BINARY_INEQUALITY = "op_Inequality";
        public const string BINARY_LE = "op_LessThanOrEqual";
        public const string BINARY_LEFTSHIFT = "op_LeftShift";
        public const string BINARY_LT = "op_LessThan";
        public const string BINARY_MINUS = "op_Subtraction";
        public const string BINARY_MODULUS = "op_Modulus";
        public const string BINARY_MULTIPLY = "op_Multiply";
        public const string BINARY_PLUS = "op_Addition";
        public const string BINARY_RIGHTSHIFT = "op_RightShift";
        public const string EXPLICIT_CONVERSION = "op_Explicit";
        public const string IMPLICIT_CONVERSION = "op_Implicit";
        public const string UNARY_COMPLEMENT = "op_OnesComplement";
        public const string UNARY_DECREMENT = "op_Decrement";
        public const string UNARY_FALSE = "op_False";
        public const string UNARY_INCREMENT = "op_Increment";
        public const string UNARY_LOGNOT = "op_LogicalNot";
        public const string UNARY_MINUS = "op_UnaryNegation";
        public const string UNARY_PLUS = "op_UnaryPlus";
        public const string UNARY_TRUE = "op_True";
    }
    public class Original : JetBrains.ReSharper.Psi.ITreeTextRangeKind { }
    public class static OverridableMemberExtensions
    {
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetAllSuperMembers(this JetBrains.ReSharper.Psi.IOverridableMember overridableMember, bool searchQuasi = False) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetImmediateSuperMembers([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IOverridableMember overridableMember, bool searchQuasi = False) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetRootSuperMembers([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IOverridableMember overridableMember, bool searchQuasi = False) { }
        public static bool HasImmediateSuperMembers([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IOverridableMember overridableMember, bool searchQuasi = False) { }
        public static bool OverridesOrImplements(this JetBrains.ReSharper.Psi.IOverridableMember derivedMember, JetBrains.ReSharper.Psi.IOverridableMember superMember) { }
    }
    public sealed class OverridableMemberInstance : JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IOverridableMember>
    {
        public OverridableMemberInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IOverridableMember member, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public OverridableMemberInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IOverridableMember member) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType DeclaringType { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IOverridableMember Member { get; }
        public JetBrains.ReSharper.Psi.InvocableSignature Signature { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetImmediateImplement(bool searchQuasi) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetImmediateOverride() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetImmediateSuperMembers(bool searchQuasi) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetRootOverride() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetRootSuperMembers(bool searchQuasi) { }
        public bool OverridesOrImplements(JetBrains.ReSharper.Psi.OverridableMemberInstance superMember) { }
    }
    public class static OverridableMemberInstanceExtension
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.OverridableMemberInstance ToOverridableMemberInstance([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.DeclaredElementInstance instance) { }
    }
    public enum ParameterContainerStyle
    {
        NONE = 0,
        AFTER = 1,
        AFTER_IN_PARENTHESIS = 2,
    }
    public class static ParameterExtensions
    {
        public static int IndexOf(this JetBrains.ReSharper.Psi.IParameter parameter) { }
        public static bool IsExtensionFirstParameter([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IParameter parameter) { }
    }
    public enum ParameterKind : byte
    {
        UNKNOWN = 0,
        VALUE = 1,
        REFERENCE = 2,
        OUTPUT = 3,
    }
    public class ParsedClrTypeName : JetBrains.ReSharper.Psi.ClrTypeNameBase
    {
        public ParsedClrTypeName(string[] namespaces, JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber[] types) { }
        public override string FullName { get; }
        public override System.Collections.Generic.IEnumerable<string> NamespaceNames { get; }
        public override string ShortName { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber> TypeNames { get; }
        public static string BuildFullName(string[] namespaces, JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber[] types) { }
        public override string GetFullNameFast() { }
        public override JetBrains.ReSharper.Psi.IClrTypeNamePartIterator GetPartIterator() { }
        public override int GetPartsCount() { }
        public override JetBrains.ReSharper.Psi.IClrTypeName GetPersistent() { }
    }
    public class PredefinedType
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ACCESSEDTHROUGHPROPERTY_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ACTION_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ARGUMENTEXCEPTION_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ARGUMENTNULLEXCEPTION_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ARRAY_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ASYNCCALLBACK;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ATTRIBUTE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ATTRIBUTE_USAGE_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName BOOLEAN_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName BROWSABLE_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName BYTE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName CALLER_FILE_PATH_ATTRIBUTE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName CALLER_LINE_NUMBER_ATTRIBUTE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName CALLER_MEMBER_NAME_ATTRIBUTE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName CANCELLATION_TOKEN_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName CANCELLATION_TOKEN_SOURCE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName CHAR_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName COCLASS_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName CODEDOM_GENERATED_CODE_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName COMIMPORT_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName COMPILER_GENERATED_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName CONDITIONAL_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DATE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DATE_OFFSET_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DEBUGGER_BROWSABLE_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DEBUGGER_STEP_THROUGH_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DECIMAL_CONSTANT_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DECIMAL_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DEFAULT_MEMBER_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DEFAULTPARAMETERVALUE_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DEFAULTVALUE_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DELEGATE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DESCRIPTION_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DESIGNER_SERIALIZATION_VISIBILITY_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DLLIMPORT_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DOUBLE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName DYNAMIC_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName EDITOR_BROWSABLE_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ENUM_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ENUMERABLE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName EVENT_REGISTRATION_TOKEN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName EVENTARGS_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName EXCEPTION_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName EXPRESSION_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName EXTENSION_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName FIELD_OFFSET_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName FIXED_BUFFER_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName FLAGS_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName FLOAT_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName FUNC_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GENERIC_IASYNCOPERATION_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GENERIC_ICOLLECTION_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GENERIC_IDICTIONARY_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GENERIC_IENUMERABLE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GENERIC_IENUMERATOR_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GENERIC_ILIST_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GENERIC_IQUERYABLE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GENERIC_IREADONLYCOLLECTION_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GENERIC_IREADONLYLIST_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GENERIC_LIST_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GENERIC_NULLABLE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GENERIC_TASK_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GUID_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName GUID_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName IASYNCACTION_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName IASYNCRESULT_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ICLONEABLE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ICOLLECTION_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ICONVERTIBLE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName IDICTIONARY_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName IDISPOSABLE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName IENUMERABLE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName IENUMERATOR_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ILIST_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName IMPORTEDFROMTYPELIB_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName IN_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName INDEXER_NAME_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName INOTIFYPROPERTYCHANGED_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName INT_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName INTERNALS_VISIBLE_TO_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName INTPTR_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName IS_VOLATILE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ISERIALIZABLE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName LONG_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName MARSHAL_BY_REF_OBJECT_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName MARSHALAS_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName METHODIMPL_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName MULTICAST_DELEGATE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName NONSERIALIZED_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName NOTIMPLEMENTEDEXCEPTION_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName NULLABLE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName OBJECT_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName OBSOLETE_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName OPTIONAL_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName OUT_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName PARAM_ARRAY_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName RUNTIMEARGUMENTHANDLE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName SBYTE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName SERIALIZABLE_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName SHORT_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName SPECIAL_NAME_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName STRING_BUILDER_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName STRING_COMPARISON_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName STRING_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName STRUCT_LAYOUT_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName TASK_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName TIMESPAN_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName TUPLE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName TYPE_DESCRIPTION_PROVIDER_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName TYPE_FORWARDED_FROM_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName TYPE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName TYPEIDENTIFIER_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName UINT_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName UINTPTR_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName ULONG_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName USHORT_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName VALUETYPE_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName VOID_FQN;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName WINRT_ALLOW_MULTIPLE_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName WINRT_ATTRIBUTE_USAGE_ATTRIBUTE_CLASS;
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Action { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType ArgumentException { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType ArgumentNullException { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Array { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType AsyncCallback { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Attribute { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Bool { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Byte { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType CancellationToken { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType CancellationTokenSource { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Char { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType DateTime { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType DebuggerStepThroughAttribute { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Decimal { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType DefaultMemberAttribute { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Delegate { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Double { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDynamicType DynamicObject { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Enum { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Enumerable { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType EventArgs { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Exception { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Expression { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType ExtensionAttribute { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Float { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType GenericIAsyncOperation { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType GenericICollection { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType GenericIDictionary { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType GenericIEnumerable { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType GenericIEnumerator { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType GenericIList { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType GenericIQueryable { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType GenericIReadOnlyList { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType GenericList { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType GenericNullable { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType GenericTask { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType IAsyncAction { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType IAsyncResult { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType ICloneable { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType ICollection { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType IConvertible { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType IDictionary { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType IDisposable { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType IEnumerable { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType IEnumerator { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType IList { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType IndexerNameAttribute { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType INotifyPropertyChanged { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Int { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType IntPtr { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType ISerializable { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Long { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType MarshalByRefObject { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType MulticastDelegate { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType NotImplementedException { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Object { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType OptionalAttribute { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType OutAttribute { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType RuntimeArgumentHandle { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Sbyte { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Short { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType String { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType StringComparison { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Task { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Tuple { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Type { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Uint { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType UIntPtr { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Ulong { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Ushort { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType ValueType { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType Void { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IPointerType VoidPointer { get; }
        public static bool CanHasUserDefinedOperators(JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Colors.PredefinedColorTypes GetColorTypes() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredType> GetSimplePredefinedTypes() { }
        public static bool IsPredefinedIntegral([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public static bool IsPredefinedIntegralNumeric([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public static bool IsPredefinedNumeric([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public static bool IsPredefinedTuple([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public static bool IsPredefinedType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public static bool IsSimplePredefined([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public static bool IsSimplePredefinedClrName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredType TryGetType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IClrTypeName clrTypeName) { }
    }
    public class static PredefinedTypeExtensions
    {
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.PredefinedType GetPredefinedType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsAction(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsArray(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsBool(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsByte(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsChar(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsDateTime(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsDateTimeOffset(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsDecimal(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsDelegate(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsDouble(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsExpression(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsFloat(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsFloatOrDouble(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsGenericIEnumerable(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsGenericIEnumerator(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsGenericTask(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsGuid(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsICollection(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsIEnumerable(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsIEnumerator(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsIList(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsInt(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsLong(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsMulticastDelegate(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsNullable(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsNullableBool(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsObject(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsPredefinedIntegral(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsPredefinedIntegralNumeric(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsPredefinedNumeric(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsSbyte(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsShort(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsSimplePredefined(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsString(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsTask(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsTimeSpan(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsTuple(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsType(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsUint(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsUlong(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsUshort(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsValue(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsVoid(this JetBrains.ReSharper.Psi.IType type) { }
    }
    public struct PreProcessingDirective
    {
        public PreProcessingDirective([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] string value) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string Name { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string Value { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public class Comparer : System.Collections.Generic.IComparer<JetBrains.ReSharper.Psi.PreProcessingDirective>, System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.PreProcessingDirective>
        {
            public static readonly JetBrains.ReSharper.Psi.PreProcessingDirective.Comparer INSTANCE;
            public int Compare(JetBrains.ReSharper.Psi.PreProcessingDirective x, JetBrains.ReSharper.Psi.PreProcessingDirective y) { }
            public bool Equals(JetBrains.ReSharper.Psi.PreProcessingDirective x, JetBrains.ReSharper.Psi.PreProcessingDirective y) { }
            public int GetHashCode(JetBrains.ReSharper.Psi.PreProcessingDirective directive) { }
        }
    }
    public class PreProcessingDirectivesInFile
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly string[] LocalDefinedNames;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly string[] UsedNames;
        public PreProcessingDirectivesInFile(string[] usedNames, string[] localDefinedNames) { }
    }
    public abstract class ProjectFileLanguageService : JetBrains.ReSharper.Psi.IProjectFileLanguageService
    {
        protected ProjectFileLanguageService(JetBrains.ProjectModel.ProjectFileType projectFileType) { }
        public abstract JetBrains.UI.Icons.IconId Icon { get; }
        public JetBrains.ProjectModel.ProjectFileType LanguageType { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        protected abstract JetBrains.ReSharper.Psi.PsiLanguageType PsiLanguageType { get; }
        public abstract JetBrains.ReSharper.Psi.Parsing.ILexerFactory GetMixedLexerFactory(JetBrains.ProjectModel.ISolution solution, JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile = null);
        public virtual JetBrains.ReSharper.Psi.PreProcessingDirective[] GetPreprocessorDefines(JetBrains.ProjectModel.IProject project) { }
        public virtual JetBrains.ReSharper.Psi.PsiLanguageType GetPsiLanguageType(JetBrains.ProjectModel.IProjectFile projectFile) { }
        public virtual JetBrains.ReSharper.Psi.PsiLanguageType GetPsiLanguageType(JetBrains.ProjectModel.ProjectFileType languageType) { }
        public virtual JetBrains.ReSharper.Psi.IPsiSourceFileProperties GetPsiProperties(JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
    public class static ProjectFileLanguageServiceExtensions
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.PsiLanguageType GetPsiLanguageType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IProjectFileLanguageService projectFileLanguageService) { }
    }
    public class static PropertyExtensions
    {
        public static JetBrains.ReSharper.Psi.IAccessor GetPolymorhicGetter(this JetBrains.ReSharper.Psi.IProperty property) { }
        public static JetBrains.ReSharper.Psi.IAccessor GetPolymorhicSetter(this JetBrains.ReSharper.Psi.IProperty property) { }
    }
    public class static PsiAssemblyExtensions
    {
        public static bool IsPortable(this JetBrains.ReSharper.Psi.IPsiAssembly psiAssembly) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly ToAssembly(this JetBrains.ReSharper.Psi.IPsiAssembly assembly) { }
    }
    public enum PsiChangedElementType
    {
        ContentsChanged = 0,
        Whitespaces = 1,
        TemporaryChangedBeforeSecondaryPsiGeneration = 2,
        RestoredAfterSecondaryPsiGeneration = 3,
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class PsiCleanupManager
    {
        public PsiCleanupManager(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiCleanupProvider> providers) { }
        public static JetBrains.ReSharper.Psi.PsiCleanupManager GetInstance(JetBrains.ProjectModel.ISolution solution) { }
        public void Run() { }
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.ReSharper.Psi.IPsiCleanupProvider))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    public class PsiCleanupProviderAttribute : JetBrains.ProjectModel.SolutionComponentAttribute { }
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All)]
    public class PsiComponentAttribute : JetBrains.ProjectModel.SolutionComponentAttribute { }
    public class static PsiExtensions
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IPsiServices GetPsiServices([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ProjectModel.ISolution solution) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IPsiServices GetPsiServices([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public static void MarkAsDirty([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiServices psiServices, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProjectFile projectFile) { }
    }
    [System.FlagsAttribute()]
    public enum PsiIconExtension
    {
        None = 0,
        ReadAccess = 1,
        WriteAccess = 2,
        ReadWriteAccess = 3,
        Static = 4,
        Private = 8,
        Protected = 16,
        Internal = 32,
        ProtectedInternal = 64,
        Abstract = 128,
        Virtual = 256,
        Public = 512,
        Sealed = 1024,
    }
    public abstract class PsiIconManager
    {
        public abstract JetBrains.UI.Icons.IconId TransparentIconOfTypicalPsiIconSize { get; }
        public abstract void AddExtension(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ReSharper.Psi.IPsiIconManagerExtension extension);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.UI.Icons.IconId ExtendToTypicalSize([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId image);
        public abstract JetBrains.ReSharper.Psi.PsiIconExtension GetAccessExtensions(JetBrains.ReSharper.Psi.AccessRights access);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.UI.Icons.IconId GetDummyImage();
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.UI.Icons.IconId GetImage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType languageType, bool drawExtensions);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.UI.Icons.IconId GetImage(JetBrains.ReSharper.Psi.DeclaredElementType elementType);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.UI.Icons.IconId GetImage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.DeclaredElementType elementType, JetBrains.ReSharper.Psi.PsiIconExtension extensions);
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.ReSharper.Psi.IPsiIconManagerExtension))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    public class PsiIconManagerExtensionAttribute : JetBrains.ReSharper.Psi.PsiSharedComponentAttribute { }
    [JetBrains.Annotations.CannotApplyEqualityOperatorAttribute()]
    public class PsiLanguageType : System.IFormattable
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly string Name;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly string PresentableName;
        protected PsiLanguageType([JetBrains.Annotations.NotNullAttribute()] string name) { }
        protected PsiLanguageType([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] string presentableName) { }
        public override string ToString() { }
        public string ToString(string format, System.IFormatProvider formatProvider) { }
    }
    public class static PsiLanguageTypeExtensions
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ILanguageCacheProvider CacheProvider(this JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public static JetBrains.ReSharper.Psi.IConstantValueService ConstantValueService(this JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public static JetBrains.ReSharper.Psi.IDeclaredElementPresenter DeclaredElementPresenter(this JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public static bool Is<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.PsiLanguageType languageType)
            where T : JetBrains.ReSharper.Psi.PsiLanguageType { }
        public static bool IsExactly<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.PsiLanguageType languageType)
            where T : JetBrains.ReSharper.Psi.PsiLanguageType { }
        public static bool IsLanguage([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.PsiLanguageType languageType, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType baseLanguage) { }
        public static bool IsLanguage([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.PsiLanguageType languageType, [JetBrains.Annotations.CanBeNullAttribute()] System.Type baseLanguage) { }
        [JetBrains.Annotations.ContractAnnotationAttribute("null=>true")]
        public static bool IsNullOrUnknown(this JetBrains.ReSharper.Psi.PsiLanguageType psiLanguageType) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.LanguageService LanguageService(this JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.LanguageService LanguageServiceNotNull(this JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public static System.Nullable<JetBrains.ReSharper.Psi.Caches.PersistentCachesUniqueIds> StubTreeNodeUniqueId(this JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public static bool SupportTreeNodeCache(this JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ILanguageCacheProvider TryGetCacheProvider(this JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ProjectModel.ISolution solution) { }
        [System.ObsoleteAttribute("Context information is necessary for correct conversions. Use a language dependen" +
            "t extension method \'GetTypeConversionRule\' from corresponding tree node.")]
        public static JetBrains.ReSharper.Psi.ITypeConversionRule TypeConversionRule(this JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public static JetBrains.ReSharper.Psi.ITypePresenter TypePresenter(this JetBrains.ReSharper.Psi.PsiLanguageType language) { }
    }
    public class static PsiManagerExtensions
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.IDisposable CreateCustomCookie<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Transactions.IPsiTransactions psiFiles)
            where T :  class, new () { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> EnumerateDominantPsiFiles([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Tree.IFile, JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator>> EnumerateGeneratedPsiFiles([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Tree.IFile, JetBrains.ReSharper.Psi.TreeTextRange>> EnumerateIntersectingPsiFiles([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile, JetBrains.DocumentModel.DocumentRange range, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language = null) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.IFile GetPrimaryPsiFile([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ProjectModel.IProjectFile projectFile) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.IFile GetTheOnlyPsiFile([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public static bool IsLanguageSupported<TLanguageType>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile)
            where TLanguageType : JetBrains.ReSharper.Psi.PsiLanguageType { }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class PsiProjectFileTypeCoordinator
    {
        public PsiProjectFileTypeCoordinator(JetBrains.ProjectModel.FileTypes.IProjectFileTypeServices fileTypeServices) { }
        public static JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator Instance { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Parsing.ILexerFactory CreateLexerFactory([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Text.IBuffer buffer) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Parsing.ILexerFactory CreateLexerFactory([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ProjectFileType projectFileType, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile = null) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ProjectModel.ProjectFileType> GetByPrimaryPsiLanguageType(JetBrains.ReSharper.Psi.PsiLanguageType psiLanguageType) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Icons.IconId GetIconByPsiLanguage(JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.PsiLanguageType GetPrimaryPsiLanguageType([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ProjectModel.IProject project) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.PsiLanguageType GetPrimaryPsiLanguageType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProjectFile projectFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.PsiLanguageType GetPrimaryPsiLanguageType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ProjectFileType projectFileType) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.IProjectFileLanguageService TryGetService([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ProjectFileType projectFileType) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public T TryGetService<T>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ProjectFileType projectFileType)
            where T :  class { }
    }
    public class static PsiShared
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static T GetComponent<T>()
            where T :  class { }
        public static bool HasComponent<T>()
            where T :  class { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static T TryGetComponent<T>()
            where T :  class { }
    }
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All)]
    public class PsiSharedComponentAttribute : JetBrains.Application.ShellComponentAttribute { }
    public class static PsiSourceFileExtensions
    {
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public static void AssertIsValid(this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, string messageText = "") { }
        public static long GetAggregatedTimestamp([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static T GetCustomProperties<T>([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile psiSource)
            where T :  class, JetBrains.ReSharper.Psi.ICustomPsiSourceFileProperties { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Util.FileSystemPath GetLocation([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ProjectModel.IProject GetProject([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IPsiSourceFile GetPsiSourceFile([JetBrains.Annotations.NotNullAttribute()] this JetBrains.DocumentModel.IDocument document, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> GetPsiSourceFiles([JetBrains.Annotations.NotNullAttribute()] this JetBrains.DocumentModel.IDocument document, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext GetResolveContext([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Application.Settings.IContextBoundSettingsStore GetSettingsStore([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Application.Settings.IContextBoundSettingsStore GetSettingsStore([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ProjectModel.ISolution solution) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ProjectModel.ISolution GetSolution([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        public static JetBrains.ProjectModel.IProjectFile ToProjectFile([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IPsiSourceFile ToSourceFile([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ProjectModel.IProjectFile projectFile) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> ToSourceFiles([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ProjectModel.IProjectFile projectFile) { }
    }
    public class PsiSourceFileFromPath : JetBrains.Util.UserDataHolder, JetBrains.ReSharper.Psi.IPsiSourceFile, JetBrains.ReSharper.Psi.IPsiSourceFileWithLocation, JetBrains.Util.IUserDataHolder
    {
        public PsiSourceFileFromPath([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProjectFileExtensions projectFileExtensions, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator projectFileTypeCoordinator, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Util.FileSystemPath path, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ReSharper.Psi.PsiSourceFileFromPath, bool> validityCheck, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ReSharper.Psi.PsiSourceFileFromPath, JetBrains.ReSharper.Psi.IPsiSourceFileProperties> propertiesFactory, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DocumentManagers.DocumentManager documentManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public string DisplayName { get; }
        public JetBrains.DocumentModel.IDocument Document { get; }
        public System.Nullable<int> InMemoryModificationStamp { get; }
        public JetBrains.ProjectModel.ProjectFileType LanguageType { get; }
        public System.DateTime LastWriteTimeUtc { get; }
        public JetBrains.Util.FileSystemPath Location { get; }
        public string Name { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PrimaryPsiLanguage { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFileProperties Properties { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFileStorage PsiStorage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string GetPersistentID() { }
        public bool IsValid() { }
        public void MarkDocumentModified() { }
        public override string ToString() { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class PsiSourceFilePropertiesManager
    {
        public PsiSourceFilePropertiesManager(JetBrains.DataFlow.Lifetime lifetime, JetBrains.DataFlow.IViewable<JetBrains.ReSharper.Psi.IPsiSourceFilePropertiesProvider> psiSourceFilePropertiesProviders) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.IPsiSourceFileProperties GetPsiProperties([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProjectFile projectFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
    public class PsiSourceFileStorage : JetBrains.ReSharper.Psi.IPsiSourceFileStorage
    {
        public PsiSourceFileStorage() { }
        public JetBrains.Util.Caches.IParametrizedCachedValue<JetBrains.ReSharper.Psi.Files.PsiFilesBucket, System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.Files.IPsiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile>> PsiFilesBucket { get; set; }
        public object StubTreeNodesCacheLock { get; }
        public JetBrains.ReSharper.Psi.Caches.SymbolCache.TypeMembersBucket TypeMemberBucket { get; set; }
        public object TypeMemberBucketLock { get; }
    }
    public class PsiSpecificTypeNameParser : JetBrains.Metadata.Utils.TypeName.AbstractTypeNameParser<JetBrains.ReSharper.Psi.IType>
    {
        public PsiSpecificTypeNameParser(string typeName, JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool allowUnresolvedTypes) { }
        protected override JetBrains.ReSharper.Psi.IType CreateArrayType(JetBrains.ReSharper.Psi.IType elementType, uint rank, uint[] sizes, int[] lBounds) { }
        protected override JetBrains.ReSharper.Psi.IType CreateArrayType(JetBrains.ReSharper.Psi.IType elementType) { }
        protected override JetBrains.ReSharper.Psi.IType CreatePointerType(JetBrains.ReSharper.Psi.IType elementType) { }
        protected override JetBrains.ReSharper.Psi.IType CreateReferenceType(JetBrains.ReSharper.Psi.IType elementType) { }
        protected override JetBrains.ReSharper.Psi.IType CreateTypeByNameAndAssembly(string typeName, JetBrains.Util.TextRange typeNameRange, string assemblyName, JetBrains.Util.TextRange assemblyNameRange, JetBrains.Util.TextRange assemblyFullNameRange, JetBrains.ReSharper.Psi.IType[] genericArguments) { }
        protected override JetBrains.ReSharper.Psi.IType CreateUnresolvedType(string typeName, JetBrains.Util.TextRange typeNameRange) { }
    }
    public class RecursiveElementCollector<T> : JetBrains.ReSharper.Psi.IRecursiveElementProcessor
        where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly System.Func<T, bool> myPredicate;
        public RecursiveElementCollector(System.Func<T, bool> predicate = null) { }
        public bool ProcessingIsFinished { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.RecursiveElementCollector<T> ClearResults() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IList<T> GetResults() { }
        public virtual bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessAfterInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessBeforeInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public virtual JetBrains.ReSharper.Psi.RecursiveElementCollector<T> ProcessElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public class RecursiveElementProcessor : JetBrains.ReSharper.Psi.IRecursiveElementProcessor
    {
        public RecursiveElementProcessor([JetBrains.Annotations.InstantHandleAttribute()] System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode> action) { }
        public System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> InteriorShouldBeProcessedHandler { get; set; }
        public bool ProcessingIsFinished { get; }
        public System.Func<bool> ProcessingIsFinishedHandler { get; set; }
        public bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void Process(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void Process(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> range) { }
        public void ProcessAfterInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessBeforeInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessForResolve(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public class RecursiveElementProcessor<T> : JetBrains.ReSharper.Psi.RecursiveElementProcessor
        where T : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public RecursiveElementProcessor(System.Action<T> action) { }
    }
    public class static RecursiveElementProcessorExtensions
    {
        public static JetBrains.ReSharper.Psi.RecursiveElementProcessor<T> CreateInterruptable<T>(System.Predicate<T> predicate)
            where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static void ProcessChildren<T>(this JetBrains.ReSharper.Psi.Tree.ITreeNode element, [JetBrains.Annotations.InstantHandleAttribute()] System.Action<T> handler)
            where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static bool ProcessDescendantForResolve([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IRecursiveElementProcessor processor, JetBrains.ReSharper.Psi.Tree.ITreeNode descendant) { }
        public static void ProcessDescendants([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode root, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IRecursiveElementProcessor processor) { }
        public static void ProcessDescendants<TContext>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode root, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IRecursiveElementProcessor<TContext> processor, TContext context) { }
        public static void ProcessOtherElementsForResolve(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement element, JetBrains.ReSharper.Psi.IRecursiveElementProcessor processor, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode, bool> predicate) { }
        public static void ProcessThisAndDescendants([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode root, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IRecursiveElementProcessor processor) { }
        public static void ProcessThisAndDescendants<TContext>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode root, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IRecursiveElementProcessor<TContext> processor, TContext context) { }
    }
    public class RecursiveReferenceProcessor : JetBrains.ReSharper.Psi.RecursiveElementProcessor
    {
        public RecursiveReferenceProcessor(System.Action<JetBrains.ReSharper.Psi.Resolve.IReference> action) { }
    }
    public class RecursiveReferenceProcessor<T> : JetBrains.ReSharper.Psi.RecursiveElementProcessor
        where T :  class, JetBrains.ReSharper.Psi.Resolve.IReference
    {
        public RecursiveReferenceProcessor(System.Action<T> action) { }
    }
    public enum ReferenceAccessType
    {
        READ = 0,
        WRITE = 1,
        READ_WRITE = 2,
        INVOCATION = 3,
        DOCUMENTATION_REFERENCE = 4,
        ATTRIBUTE = 5,
        OTHER = 6,
    }
    public class static ReSharperControlConstruct
    {
        public const string DisableAllID = "All";
        public const string DisableOncePrefix = "ReSharper disable once";
        public const string DisablePrefix = "ReSharper disable";
        public const string RestorePrefix = "ReSharper restore";
        public static System.Collections.Generic.IEnumerable<string> CommentWarnings(string text) { }
        public static bool IsDisableOnceComment(string commentText, out string warningIds) { }
        public static JetBrains.Util.Pair<bool, string> ProcessComment(string commentText) { }
    }
    public enum SandBoxContextType
    {
        Replace = 0,
        Child = 1,
    }
    public class static SandBoxExtensions
    {
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode GetParentNode([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ISandBox holder) { }
        public static void SetResolveContextForSandBox([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode context, JetBrains.ReSharper.Psi.SandBoxContextType contextType = 0) { }
    }
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All)]
    public class ShellFeaturePartAttribute : JetBrains.Application.Parts.PartAttribute { }
    public class static SignatureComparers
    {
        public static readonly JetBrains.ReSharper.Psi.ISignatureComparer Strict;
        public abstract class SignatureComparerBase : JetBrains.ReSharper.Psi.ISignatureComparer, System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.InvocableSignature>
        {
            protected abstract System.StringComparer NameComparer { get; }
            public bool Compare(JetBrains.ReSharper.Psi.InvocableSignature s1, JetBrains.ReSharper.Psi.InvocableSignature s2) { }
            protected abstract bool CompareParameterKind(JetBrains.ReSharper.Psi.ParameterKind k1, JetBrains.ReSharper.Psi.ParameterKind k2);
            public virtual bool CompareParameters(JetBrains.ReSharper.Psi.InvocableSignature s1, JetBrains.ReSharper.Psi.InvocableSignature s2) { }
            protected abstract bool CompareParameterType(JetBrains.ReSharper.Psi.IType t1, JetBrains.ReSharper.Psi.IType t2);
            public bool CompareWithoutName(JetBrains.ReSharper.Psi.InvocableSignature s1, JetBrains.ReSharper.Psi.InvocableSignature s2) { }
            public bool CompareWithoutNameAndWithoutTypeParameters(JetBrains.ReSharper.Psi.InvocableSignature s1, JetBrains.ReSharper.Psi.InvocableSignature s2) { }
            public bool Equals(JetBrains.ReSharper.Psi.InvocableSignature s1, JetBrains.ReSharper.Psi.InvocableSignature s2) { }
            public int GetHashCode(JetBrains.ReSharper.Psi.InvocableSignature s) { }
            protected abstract int GetParameterCount(JetBrains.ReSharper.Psi.InvocableSignature s);
        }
    }
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All)]
    public class SolutionFeaturePartAttribute : JetBrains.Application.Parts.PartAttribute { }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class StandardPsiSourceFilePropertiesProvider : JetBrains.ReSharper.Psi.IPsiSourceFilePropertiesProvider
    {
        public StandardPsiSourceFilePropertiesProvider(JetBrains.ProjectModel.FileTypes.IProjectFileTypeServices projectFileTypeServices) { }
        public double Order { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFileProperties GetPsiProperties(JetBrains.ReSharper.Psi.IPsiSourceFileProperties prevProperties, JetBrains.ProjectModel.IProject project, JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
    public class static SyntheticAttribute
    {
        public const string Name = "__ReSharperSynthetic";
    }
    public class TreeNodeMarker
    {
        public TreeNodeMarker(string keyName) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Tree.ITreeNode FindMarkedNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode root) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> FindMarkedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode tree) { }
        public bool IsMarked(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void Mark(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public void Unmark(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("{Offset}")]
    public struct TreeOffset : System.IComparable<JetBrains.ReSharper.Psi.TreeOffset>, System.IEquatable<JetBrains.ReSharper.Psi.TreeOffset>
    {
        public static readonly JetBrains.ReSharper.Psi.TreeOffset InvalidOffset;
        public static readonly JetBrains.ReSharper.Psi.TreeOffset MaxValue;
        public static readonly JetBrains.ReSharper.Psi.TreeOffset Zero;
        public TreeOffset(int offset) { }
        public int Offset { get; }
        public int CompareTo(JetBrains.ReSharper.Psi.TreeOffset other) { }
        public bool Equals(JetBrains.ReSharper.Psi.TreeOffset other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsValid() { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.TreeOffset Max(JetBrains.ReSharper.Psi.TreeOffset a, JetBrains.ReSharper.Psi.TreeOffset b) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.TreeOffset Min(JetBrains.ReSharper.Psi.TreeOffset a, JetBrains.ReSharper.Psi.TreeOffset b) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeOffset Shift(int delta) { }
        public override string ToString() { }
    }
    public class static TreeRangeExtensions
    {
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public static void AssertValid([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITreeRange range) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ITreeRangePointer CreateSurvivableTreeRangePointer([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITreeRange range, bool trackExternals) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ITreeRangePointer CreateTreeRangePointer([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITreeRange range) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Text.StringBuilder GetText([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITreeRange range) { }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Range = ({StartOffset}:{EndOffset}), Length = {Length}")]
    public struct TreeTextRange : System.IEquatable<JetBrains.ReSharper.Psi.TreeTextRange>
    {
        public static readonly JetBrains.ReSharper.Psi.TreeTextRange InvalidRange;
        public TreeTextRange(JetBrains.ReSharper.Psi.TreeOffset offset) { }
        public TreeTextRange(JetBrains.ReSharper.Psi.TreeOffset startOffset, JetBrains.ReSharper.Psi.TreeOffset endOffset) { }
        public TreeTextRange(JetBrains.ReSharper.Psi.TreeOffset startOffset, int length) { }
        public JetBrains.ReSharper.Psi.TreeOffset EndOffset { get; }
        public bool IsEmpty { get; }
        public bool IsNormalized { get; }
        public int Length { get; }
        public JetBrains.ReSharper.Psi.TreeOffset StartOffset { get; }
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public void AssertContainedIn(JetBrains.ReSharper.Psi.TreeTextRange rangeContainer) { }
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public void AssertNormalized() { }
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public void AssertValid() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool ContainedIn(JetBrains.ReSharper.Psi.TreeTextRange treeRange) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool Contains(JetBrains.ReSharper.Psi.TreeTextRange treeRange) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool Contains(JetBrains.ReSharper.Psi.TreeOffset offset) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool ContainsCharIndex(JetBrains.ReSharper.Psi.TreeOffset charindex) { }
        [JetBrains.Annotations.PureAttribute()]
        public int DistanceTo(JetBrains.ReSharper.Psi.TreeOffset offset) { }
        public override bool Equals(object obj) { }
        public bool Equals(JetBrains.ReSharper.Psi.TreeTextRange other) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange ExtendLeft(int length) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange ExtendRight(int length) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange FromLength(JetBrains.ReSharper.Psi.TreeOffset offset, int length) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange FromLength(int length) { }
        public override int GetHashCode() { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeOffset GetMaxOffset() { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeOffset GetMinOffset() { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange Intersect(JetBrains.ReSharper.Psi.TreeTextRange treeRange) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool Intersects(JetBrains.ReSharper.Psi.TreeTextRange treeRange) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsLeftTo(JetBrains.ReSharper.Psi.TreeOffset offset) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsValid() { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange Join(JetBrains.ReSharper.Psi.TreeTextRange treeRange) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange JoinLeft(JetBrains.ReSharper.Psi.TreeTextRange treeRange) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange JoinRight(JetBrains.ReSharper.Psi.TreeTextRange treeRange) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange Normalized() { }
        public static JetBrains.ReSharper.Psi.TreeTextRange Parse(string s) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange SetEndTo(JetBrains.ReSharper.Psi.TreeOffset offset) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange SetStartTo(JetBrains.ReSharper.Psi.TreeOffset offset) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange Shift(int delta) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange Shift(JetBrains.ReSharper.Psi.TreeOffset delta) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool StrictContainedIn(JetBrains.ReSharper.Psi.TreeTextRange treeRange) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool StrictIntersects(JetBrains.ReSharper.Psi.TreeTextRange treeRange) { }
        public override string ToString() { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange TrimLeft(int length) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange TrimRight(int length) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeTextRange UpdateRange(JetBrains.ReSharper.Psi.TreeOffset startOffset, int oldLength, int newLength, bool greedyToLeft, bool greedyToRight) { }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Range = ({StartOffset}:{EndOffset}), Length = {Length}")]
    public struct TreeTextRange<TKind> : System.IEquatable<JetBrains.ReSharper.Psi.TreeTextRange<TKind>>
        where TKind : JetBrains.ReSharper.Psi.ITreeTextRangeKind
    {
        public static readonly JetBrains.ReSharper.Psi.TreeTextRange<TKind> InvalidRange;
        public TreeTextRange(JetBrains.ReSharper.Psi.TreeTextRange range) { }
        public TreeTextRange(JetBrains.ReSharper.Psi.TreeOffset offset) { }
        public TreeTextRange(JetBrains.ReSharper.Psi.TreeOffset startOffset, JetBrains.ReSharper.Psi.TreeOffset endOffset) { }
        public JetBrains.ReSharper.Psi.TreeOffset EndOffset { get; }
        public bool IsEmpty { get; }
        public bool IsNormalized { get; }
        public int Length { get; }
        public JetBrains.ReSharper.Psi.TreeOffset StartOffset { get; }
        public void AssertContainedIn(JetBrains.ReSharper.Psi.TreeTextRange<TKind> rangeContainer) { }
        public void AssertNormalized() { }
        public void AssertValid() { }
        public bool ContainedIn(JetBrains.ReSharper.Psi.TreeTextRange<TKind> treeRange, bool strict = False) { }
        public bool Contains(JetBrains.ReSharper.Psi.TreeTextRange<TKind> treeRange, bool strict = False) { }
        public bool Contains(JetBrains.ReSharper.Psi.TreeOffset offset, bool strictly = False) { }
        public bool ContainsCharIndex(JetBrains.ReSharper.Psi.TreeOffset charindex) { }
        public int DistanceTo(JetBrains.ReSharper.Psi.TreeOffset offset) { }
        public override bool Equals(object obj) { }
        public bool Equals(JetBrains.ReSharper.Psi.TreeTextRange<TKind> other) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> ExtendLeft(int length) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> ExtendRight(int length) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange<TKind> FromLength(JetBrains.ReSharper.Psi.TreeOffset offset, int length) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange<TKind> FromLength(int length) { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.TreeOffset GetMaxOffset() { }
        public JetBrains.ReSharper.Psi.TreeOffset GetMinOffset() { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> Intersect(JetBrains.ReSharper.Psi.TreeTextRange<TKind> treeRange) { }
        public bool Intersects(JetBrains.ReSharper.Psi.TreeTextRange<TKind> treeRange, bool strict = False) { }
        public bool IsLeftTo(JetBrains.ReSharper.Psi.TreeOffset offset) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> Join(JetBrains.ReSharper.Psi.TreeTextRange<TKind> treeRange) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> JoinLeft(JetBrains.ReSharper.Psi.TreeTextRange<TKind> treeRange) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> JoinRight(JetBrains.ReSharper.Psi.TreeTextRange<TKind> treeRange) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> Normalized() { }
        public static JetBrains.ReSharper.Psi.TreeTextRange<TKind> Parse(string s) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> SetEndTo(JetBrains.ReSharper.Psi.TreeOffset offset) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> SetStartTo(JetBrains.ReSharper.Psi.TreeOffset offset) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> Shift(int delta) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> Shift(JetBrains.ReSharper.Psi.TreeOffset delta) { }
        public bool StrictContainedIn(JetBrains.ReSharper.Psi.TreeTextRange<TKind> treeRange) { }
        public bool StrictIntersects(JetBrains.ReSharper.Psi.TreeTextRange<TKind> treeRange) { }
        public override string ToString() { }
        public JetBrains.ReSharper.Psi.TreeTextRange ToTreeTextRange() { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> TrimLeft(int length) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> TrimRight(int length) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<TKind> UpdateRange(JetBrains.ReSharper.Psi.TreeOffset startOffset, int oldLength, int newLength, bool greedyToLeft, bool greedyToRight) { }
    }
    public class TreeTextRangeComparer : System.Collections.Generic.IComparer<JetBrains.ReSharper.Psi.TreeTextRange>
    {
        public static readonly JetBrains.ReSharper.Psi.TreeTextRangeComparer Default;
        public int Compare(JetBrains.ReSharper.Psi.TreeTextRange x, JetBrains.ReSharper.Psi.TreeTextRange y) { }
    }
    public class TreeTextRangeComparer<TKind> : System.Collections.Generic.IComparer<JetBrains.ReSharper.Psi.TreeTextRange<TKind>>
        where TKind : JetBrains.ReSharper.Psi.ITreeTextRangeKind
    {
        public static readonly JetBrains.ReSharper.Psi.TreeTextRangeComparer<TKind> Default;
        public int Compare(JetBrains.ReSharper.Psi.TreeTextRange<TKind> x, JetBrains.ReSharper.Psi.TreeTextRange<TKind> y) { }
    }
    public sealed class TypeArgumentDoesNotSatisfy : JetBrains.ReSharper.Psi.TypeArgumentValidationResult
    {
        public TypeArgumentDoesNotSatisfy(JetBrains.ReSharper.Psi.IType constrainingType) { }
        public JetBrains.ReSharper.Psi.IType ConstrainingType { get; }
    }
    public class TypeArgumentValidationResult
    {
        public static readonly JetBrains.ReSharper.Psi.TypeArgumentValidationResult HasNoDefaultConstructor;
        public static readonly JetBrains.ReSharper.Psi.TypeArgumentValidationResult IsNotReference;
        public static readonly JetBrains.ReSharper.Psi.TypeArgumentValidationResult IsNotValueType;
        public static readonly JetBrains.ReSharper.Psi.TypeArgumentValidationResult OK;
    }
    public enum TypeClassification
    {
        VALUE_TYPE = 0,
        REFERENCE_TYPE = 1,
    }
    public enum TypeContainerStyle
    {
        NONE = 0,
        AFTER = 1,
        AFTER_WITH_KIND = 2,
        AFTER_IN_PARENTHESIS = 3,
        AFTER_IN_PARENTHESIS_WITH_KIND = 4,
    }
    public class static TypeElementExtensions
    {
        public static JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.ITypeParameter> GetAllTypeParameters(this JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.Resolve.ISubstitution> GetAncestorSubstitution([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITypeElement typeElement, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement ancestorTypeElement) { }
        [System.ObsoleteAttribute("Do not use this method. Use TypeElementUtil.EnumerateMembers or TypeElementUtil.H" +
            "asMember instead")]
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeMember> GetMembers(this JetBrains.ReSharper.Psi.ITypeElement element, string name) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ISignOperator> GetSignOperators([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static bool HasTypeParameters([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITypeElement element) { }
        public static bool IsClassLike(this JetBrains.ReSharper.Psi.ITypeElement element) { }
        public static bool IsDescendantOf([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITypeElement typeElement, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement otherType) { }
    }
    public class TypeElementPartIterator : JetBrains.ReSharper.Psi.IClrTypeNamePartIterator
    {
        public TypeElementPartIterator(JetBrains.ReSharper.Psi.ITypeElement element) { }
        public bool GetNextPart(out JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber name) { }
    }
    public class static TypeFactory
    {
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IArrayType CreateArrayType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType elementType, int rank, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeModifier> typeModifiers = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IDynamicType CreateDynamicType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType CreateMultitype(JetBrains.ReSharper.Psi.Modules.IPsiModule module, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> types, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateNullableType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType elementType, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IPointerType CreatePointerType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType elementType, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeModifier> typeModifiers = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement, params JetBrains.ReSharper.Psi.IType[] typeParameterValues) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeModifier> typeModifiers = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateTypeByCLRName([JetBrains.Annotations.NotNullAttribute()] string clrName, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateTypeByCLRName(JetBrains.ReSharper.Psi.IClrTypeName clrName, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateTypeWithDynamicSubsitution([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateUninferedType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateUnknownType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class TypeKeywordsManager
    {
        public TypeKeywordsManager(JetBrains.ReSharper.Psi.ILanguageManager languageManager, JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator projectFileTypeCoordinator) { }
        public static JetBrains.ReSharper.Psi.TypeKeywordsManager Instance { get; }
        public string GetFullQualifiedTypeName(JetBrains.ProjectModel.ProjectFileType language, string keyword) { }
        public string GetFullQualifiedTypeName(JetBrains.ReSharper.Psi.PsiLanguageType language, string keyword) { }
        public string GetKeyword(JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public string GetKeyword(JetBrains.ProjectModel.ProjectFileType language, JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public System.Collections.Generic.IEnumerable<string> GetTypeKeywords(JetBrains.ProjectModel.ProjectFileType language) { }
        public bool IsDynamicKeyword(JetBrains.ReSharper.Psi.PsiLanguageType language, string keyword) { }
        public bool IsTypeKeywordReference(JetBrains.ReSharper.Psi.PsiLanguageType keywordLanguage, JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        public string Print(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
    }
    public class TypeMemberInstance : JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.ITypeMember>
    {
        public TypeMemberInstance(JetBrains.ReSharper.Psi.ITypeMember member, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public TypeMemberInstance(JetBrains.ReSharper.Psi.ITypeMember element) { }
        public JetBrains.ReSharper.Psi.ITypeMember Member { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
    }
    public sealed class TypeMemberInstance<TMemeber> : JetBrains.ReSharper.Psi.TypeMemberInstance
        where TMemeber : JetBrains.ReSharper.Psi.ITypeMember
    {
        public TypeMemberInstance(TMemeber member, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public TypeMemberInstance(TMemeber element) { }
        public TMemeber Member { get; }
    }
    public sealed class TypeModifier
    {
        public TypeModifier(JetBrains.ReSharper.Psi.TypeModifier.TypeModifierKind kind, JetBrains.ReSharper.Psi.IType type) { }
        public JetBrains.ReSharper.Psi.TypeModifier.TypeModifierKind Kind { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public static bool CompareSet(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeModifier> set1, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeModifier> set2) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public enum TypeModifierKind
        {
            OPTIONAL = 0,
            REQUIRED = 1,
        }
    }
    public struct TypeNameAndTypeParameterNumber
    {
        public readonly string TypeName;
        public readonly int TypeParametersNumber;
        public TypeNameAndTypeParameterNumber(string typeName, int typeParametersNumber) { }
        public bool Equals(JetBrains.ReSharper.Psi.TypeNameAndTypeParameterNumber other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class static TypeParameterExtensions
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.TypeArgumentValidationResult ValidateTypeArgument(this JetBrains.ReSharper.Psi.ITypeParameter typeParameter, JetBrains.ReSharper.Psi.Resolve.ISubstitution constraintsSubstitution, JetBrains.ReSharper.Psi.IType typeArgument) { }
    }
    public class TypeParameterProcessor : JetBrains.ReSharper.Psi.TypeVisitor
    {
        public System.Action<JetBrains.ReSharper.Psi.ITypeParameter> Processor { get; set; }
        public static void Process(JetBrains.ReSharper.Psi.IType type, System.Action<JetBrains.ReSharper.Psi.ITypeParameter> processor) { }
        public override void VisitDeclaredType(JetBrains.ReSharper.Psi.IDeclaredType declaredType) { }
    }
    public sealed class TypeParametersCollectingVisitor : JetBrains.ReSharper.Psi.TypeVisitor
    {
        public TypeParametersCollectingVisitor() { }
        public TypeParametersCollectingVisitor(System.Func<JetBrains.ReSharper.Psi.ITypeParameter, bool> predicate) { }
        public System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public static System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.ITypeParameter> Collect(JetBrains.ReSharper.Psi.IType type) { }
        public override void VisitDeclaredType(JetBrains.ReSharper.Psi.IDeclaredType declaredType) { }
    }
    public enum TypeParameterStyle
    {
        NONE = 0,
        CLR = 1,
        INDICATE = 2,
        FULL = 3,
        FULL_WITH_VARIANCE = 4,
    }
    public enum TypeParameterVariance : byte
    {
        INVARIANT = 0,
        IN = 1,
        OUT = 2,
    }
    public class TypeParameterVerifier : JetBrains.ReSharper.Psi.TypeVisitor
    {
        public override bool IsFinished { get; }
        public bool Result { get; }
        public static bool ForAny(JetBrains.ReSharper.Psi.IType type, System.Func<JetBrains.ReSharper.Psi.ITypeParameter, bool> predicate) { }
        public override void VisitDeclaredType(JetBrains.ReSharper.Psi.IDeclaredType declaredType) { }
    }
    public class static TypePointerUtil
    {
        public static JetBrains.ReSharper.Psi.ITypePointer GetScalarTypePointer(this JetBrains.ReSharper.Psi.ITypePointer typePointer) { }
    }
    public enum TypeStyle
    {
        NONE = 0,
        DEFAULT = 1,
        AFTER = 2,
    }
    public abstract class TypeVisitor
    {
        public virtual bool IsFinished { get; }
        public virtual void VisitAnonymousType(JetBrains.ReSharper.Psi.IAnonymousType anonymousType) { }
        public virtual void VisitArrayType(JetBrains.ReSharper.Psi.IArrayType arrayType) { }
        public virtual void VisitDeclaredType(JetBrains.ReSharper.Psi.IDeclaredType declaredType) { }
        public virtual void VisitDynamicType(JetBrains.ReSharper.Psi.IDynamicType dynamicType) { }
        public virtual void VisitMultitype(JetBrains.ReSharper.Psi.IMultitype multitype) { }
        public virtual void VisitPointerType(JetBrains.ReSharper.Psi.IPointerType pointerType) { }
        public virtual void VisitType(JetBrains.ReSharper.Psi.IType type) { }
    }
    [JetBrains.ReSharper.Psi.LanguageDefinitionAttribute("UNKNOWN")]
    public sealed class UnknownLanguage : JetBrains.ReSharper.Psi.PsiLanguageType
    {
        [JetBrains.Annotations.UsedImplicitlyAttribute()]
        public static readonly JetBrains.ReSharper.Psi.UnknownLanguage Instance;
        public const string Name = "UNKNOWN";
        public UnknownLanguage() { }
    }
}
namespace JetBrains.ReSharper.Psi.Caches
{
    
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class AnnotatedMembersCache : JetBrains.ReSharper.Psi.Caches.ICache
    {
        public AnnotatedMembersCache(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.IShellLocks shellLocks, JetBrains.ReSharper.Psi.Caches.IPersistentIndexManager persistentIndexManager, JetBrains.ReSharper.Psi.IPsiConfiguration psiConfiguration, JetBrains.ReSharper.Psi.LanguageManager languageManager, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.IExternalAnnotationsAttributeWatcher> watchers) { }
        public int CacheVersion { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.HashSet<string> GetMembersByAttributeName([JetBrains.Annotations.NotNullAttribute()] string attributeName) { }
        public void MarkAsDirty(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public void SyncUpdate(bool underTransaction) { }
    }
    public class static AnnotatedMembersEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.ICollection<string> GetMembersByAttributeName([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ProjectModel.ISolution solution, [JetBrains.Annotations.NotNullAttribute()] string attributeName) { }
    }
    public class CacheChange
    {
        public CacheChange(JetBrains.ReSharper.Psi.Caches.ICache cache) { }
        public JetBrains.ReSharper.Psi.Caches.ICache Cache { get; }
    }
    public class CachesChange
    {
        public CachesChange(JetBrains.ReSharper.Psi.Caches.CachesChangeStatus status) { }
        public JetBrains.ReSharper.Psi.Caches.CachesChangeStatus Status { get; }
    }
    public enum CachesChangeStatus
    {
        Corrupted = 0,
        Ready = 1,
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class ExternalAnnotatedMembersCache : JetBrains.Application.IChangeProvider
    {
        public ExternalAnnotatedMembersCache(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.ChangeManager changeManager, JetBrains.ReSharper.Psi.Modules.IPsiModules psiModules, JetBrains.ReSharper.Psi.Caches.ISymbolCache symbolCache, JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.ExternalAnnotationsAttributesToWatchers externalAnnotationsAttributesToWatchers) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.ICollection<string> GetMembersByAttributeName([JetBrains.Annotations.NotNullAttribute()] string attributeName) { }
    }
    public interface IAnnotatedMembersCacheProcessor
    {
        void Process(JetBrains.ReSharper.Psi.Tree.IFile psiFile, System.Collections.Generic.ICollection<string> attributeNames, JetBrains.Util.OneToListMap<string, string> data);
    }
    public interface IAssemblyCache : JetBrains.ReSharper.Psi.Caches.ICache
    {
        object Build(JetBrains.ReSharper.Psi.IPsiAssembly assembly);
        void Drop(JetBrains.ReSharper.Psi.IPsiAssembly assembly);
        void Merge(JetBrains.ReSharper.Psi.IPsiAssembly assembly, object part);
    }
    public interface IBackgroundCache : JetBrains.ReSharper.Psi.Caches.ICache
    {
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IPsiSourceFile> DirtyFiles { get; }
    }
    public interface ICache
    {
        bool HasDirtyFiles { get; }
        object Build(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, bool isStartup);
        void Drop(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        object Load(JetBrains.Application.Progress.IProgressIndicator progress, bool enablePersistence);
        void MarkAsDirty(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        void Merge(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, object builtPart);
        void MergeLoaded(object data);
        void OnDocumentChange(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.DocumentManagers.impl.ProjectFileDocumentCopyChange change);
        void OnPsiChange(JetBrains.ReSharper.Psi.Tree.ITreeNode elementContainingChanges, JetBrains.ReSharper.Psi.PsiChangedElementType type);
        void Save(JetBrains.Application.Progress.IProgressIndicator progress, bool enablePersistence);
        void SyncUpdate(bool underTransaction);
        bool UpToDate(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
    }
    public interface ILibraryMemberNamesAccess
    {
        System.Collections.Generic.IEnumerable<string> GetAllMemberNames();
        int GetMembersCount();
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeElement> GetTypesWithMember(string name, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext);
    }
    public interface IMetadataTokenOwner
    {
        uint ModuleToken { get; }
        JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile PsiAssemblyFile { get; }
        uint Token { get; }
    }
    public class InvalidateCacheChange : JetBrains.ReSharper.Psi.Caches.CacheChange
    {
        public InvalidateCacheChange(JetBrains.ReSharper.Psi.Caches.ICache cache, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IPsiSourceFile> affectedFiles) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IPsiSourceFile> AffectedFiles { get; }
        public override string ToString() { }
    }
    public abstract class InvalidatingPsiCache : JetBrains.ReSharper.Psi.Caches.IPsiCache
    {
        public virtual void Invalidate(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.PsiChangedElementType elementType) { }
        protected virtual void InvalidateOnPhysicalChange() { }
    }
    public interface IPersistentCache
    {
        void Flush();
        void MergePersistent(JetBrains.ReSharper.Psi.IPsiSourceFile sf, object buildResult);
        void Reset();
    }
    public interface IPersistentIndexManager : JetBrains.Application.IChangeProvider
    {
        int Count { get; }
        JetBrains.ReSharper.Psi.IPsiSourceFile this[int id] { get; }
        int this[JetBrains.ReSharper.Psi.IPsiSourceFile id] { get; }
        public event System.Action AfterPersistentCachesReleased;
        bool CanBeReconciledWithPersistent(JetBrains.ReSharper.Psi.IPsiSourceFile sf);
        void ClearCachesAfterSolutionClose();
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetAllSourceFiles();
        int GetIdBySourceFile(JetBrains.ReSharper.Psi.IPsiSourceFile sf);
        JetBrains.Application.PersistentMap.IKeyValueDb GetPersistentDb();
        JetBrains.Application.PersistentMap.IPersistentSortedMap<JetBrains.ReSharper.Psi.IPsiSourceFile, TValue> GetPersistentMap<TValue>(JetBrains.ReSharper.Psi.Caches.PersistentCachesUniqueIds uniqueId, JetBrains.Application.PersistentMap.IUnsafeMarshaller<TValue> valueMarshaller);
        JetBrains.Application.PersistentMap.IPersistentSortedMap<TKey, TValue> GetPersistentMap<TKey, TValue>(JetBrains.ReSharper.Psi.Caches.PersistentCachesUniqueIds uniqueId, JetBrains.Application.PersistentMap.IUnsafeMarshaller<TKey> keyMarshaller, JetBrains.Application.PersistentMap.IUnsafeMarshaller<TValue> valueMarshaller);
        long GetPersistentTimestamp(JetBrains.ReSharper.Psi.IPsiSourceFile cache);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiSourceFile GetSourceFileById(int index);
        void OnPersistentCachesRemoved(JetBrains.ReSharper.Psi.IPsiSourceFile file);
        void OnPersistentCachesUpdated(JetBrains.ReSharper.Psi.IPsiSourceFile file);
        void ReopenPersistentDb();
    }
    public interface IPsiAssemblyFile
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.AssemblyExternalAnnotations ExternalAnnotations { get; }
        JetBrains.ReSharper.Psi.Caches.ILibraryMemberNamesAccess MemberNamesAccess { get; }
        JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        JetBrains.Metadata.Utils.AssemblyNameInfo[] ReferencedAssembliesNames { get; }
        System.DateTime Timestamp { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledType> Types { get; }
        JetBrains.ReSharper.Psi.IAttributesSet CreateAssemblyAttributes(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        JetBrains.ReSharper.Psi.IDeclaredElement FindElementByQualifiedName(string fullyQualifiedName);
        void LoadAllTypeMembers();
    }
    public interface IPsiCache
    {
        void Invalidate(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.PsiChangedElementType elementType);
    }
    public interface IPsiCacheRegistry
    {
        JetBrains.DataFlow.ViewableCollection<JetBrains.ReSharper.Psi.Caches.ICache> ActiveCaches { get; }
        JetBrains.DataFlow.ViewableCollection<JetBrains.ReSharper.Psi.Caches.IBackgroundCache> BackgroundCaches { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Caches.IPsiCache> InvalidatingPsiCaches { get; }
        JetBrains.DataFlow.ViewableCollection<JetBrains.ReSharper.Psi.Caches.ICache> ResolveCaches { get; }
        T GetPsiCache<T>()
            where T : JetBrains.ReSharper.Psi.Caches.IPsiCache;
    }
    public interface IPsiCaches
    {
        bool HasDirtyFiles { get; }
        JetBrains.DataFlow.IProperty<bool> IsBackgroundIdle { get; }
        bool IsCacheThread { get; }
        JetBrains.DataFlow.IProperty<bool> IsIdle { get; }
        JetBrains.DataFlow.IProperty<bool> IsInitialUpdateFinished { get; }
        JetBrains.DataFlow.IProperty<bool> IsLoadEnqued { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Caches.ISourceDeclaredElementsCache SourceDeclaredElementsCache { get; }
        void EnqueueJob(JetBrains.ReSharper.Psi.Caches.Job job);
        T GetPsiCache<T>()
            where T : JetBrains.ReSharper.Psi.Caches.IPsiCache;
        void MarkAsDirty(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        void SandBoxCreated(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.SandBox sandBox);
        void Update();
        bool WaitForCaches(string callerName, string cancelButtonContent = "Cancel");
    }
    public interface IPsiSourceFileInvalidatingCache : JetBrains.ReSharper.Psi.Caches.ICache
    {
        void Invalidate(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> sourceFiles);
    }
    public interface ISandBoxCache : JetBrains.ReSharper.Psi.Caches.ICache
    {
        void OnSandBoxCreated(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.SandBox sandBox);
        void OnSandBoxPsiChange(JetBrains.ReSharper.Psi.Tree.ITreeNode elementContainingChanges);
    }
    public interface ISourceDeclaredElementsCache
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IDeclaredElement GetOrCreateDeclaredElement<TDeclaration>([JetBrains.Annotations.NotNullAttribute()] TDeclaration declaration, System.Func<TDeclaration, JetBrains.ReSharper.Psi.IDeclaredElement> factory)
            where TDeclaration : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration;
    }
    public interface IStubTreeNodeCache
    {
        public event System.Action<JetBrains.ReSharper.Psi.Tree.IFile> StubPsiFileCreated;
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetCachedPsiFiles(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        JetBrains.ReSharper.Psi.Tree.IFile GetPsiFile(JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile, JetBrains.ReSharper.Psi.PsiLanguageType language);
        bool IsValid(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.FileElementBase fileElementBase);
    }
    public interface ISwitchingCache : JetBrains.ReSharper.Psi.Caches.ICache
    {
        JetBrains.DataFlow.IProperty<bool> Active { get; }
        void Initialize();
        void Release();
    }
    public interface ISymbolCache
    {
        JetBrains.ReSharper.Psi.Caches.SymbolCache.PartsMap Parts { get; }
        public event System.Action<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart> OnAfterTypePartAdded;
        public event System.Action<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart> OnBeforeTypePartRemoved;
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule> GetForwardedFromAssemblies(JetBrains.ReSharper.Psi.ITypeElement typeElement);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule> GetForwardedToAssemblies(JetBrains.Metadata.Utils.AssemblyNameInfo fromAssemblyName, JetBrains.ReSharper.Psi.IClrTypeName clrName);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule> GetForwardedToAssemblies(JetBrains.Metadata.Utils.AssemblyNameInfo fromAssemblyName);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IClrTypeName> GetForwardedTypes(JetBrains.Metadata.Utils.AssemblyNameInfo fromAssemblyName);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile GetLibraryFile(JetBrains.ReSharper.Psi.IPsiAssembly assembly);
        JetBrains.ReSharper.Psi.IAttributesSet GetModuleAttributes(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Caches.ISymbolScope GetSymbolScope(JetBrains.ReSharper.Psi.Caches.LibrarySymbolScope librarySymbolScope, bool caseSensitive, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Caches.ISymbolScope GetSymbolScope(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext, bool withReferences, bool caseSensitive);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredElement> GetTypesAndNamespacesInFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
    }
    public interface ISymbolScope
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.INamespace GlobalNamespace { get; }
        JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        bool Contains([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement);
        System.Collections.Generic.IEnumerable<string> GetAllShortNames();
        System.Collections.Generic.IEnumerable<string> GetAllShortNamesSorted();
        System.Collections.Generic.IEnumerable<string> GetAllTypeMemberNames();
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetCompiledMembers(string name);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IClrDeclaredElement> GetElementsAtQualifiedName(string qualifiedName);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IClrDeclaredElement> GetElementsByQualifiedName(string qualifiedName);
        JetBrains.ReSharper.Psi.IClrDeclaredElement[] GetElementsByShortName(string shortName);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.INamespace GetNamespace(string fullyQualifiedName);
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeElement> GetPossibleInheritors(string shortTypeName, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        int GetShortNamesCount();
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetSourceMembers(string name);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITypeElement GetTypeElementByCLRName([System.ComponentModel.LocalizableAttribute(false)] string clrName);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITypeElement GetTypeElementByCLRName(JetBrains.ReSharper.Psi.IClrTypeName clrName);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeElement> GetTypeElementsByCLRName([System.ComponentModel.LocalizableAttribute(false)] string clrName);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeElement> GetTypeElementsByCLRName(JetBrains.ReSharper.Psi.IClrTypeName clrName);
        int GetTypeMembersCount();
    }
    public interface IWordIndex
    {
        bool CanContainWord(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, string word);
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetFilesContainingWord(string word);
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetFilesContainingWords(System.Collections.Generic.IEnumerable<string> words);
        System.Collections.Generic.IEnumerable<string> GetWords(string text);
    }
    public abstract class Job
    {
        public virtual string DebugComment { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract string Description { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract string GroupId { get; }
        public void AssertValid() { }
        public abstract void Do([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progress, bool synchronous, System.Func<bool> finish);
        public virtual void Pause() { }
        public virtual void Resume() { }
        public override string ToString() { }
    }
    public enum LibrarySymbolScope
    {
        NONE = 0,
        REFERENCED = 1,
        TRANSITIVE = 2,
        FULL = 3,
    }
    public enum PersistentCachesUniqueIds : byte
    {
        PersistentIndex = 1,
        WordIndexCaseSensitive = 2,
        WordIndexCaseInsensitive = 3,
        TodoManager = 4,
        PdbScanner = 5,
        CSharpStubTreeNodeCache = 6,
        DaemonResults = 29,
        SolutionAnalysisDependencyToFiles = 30,
        SolutionAnalysisUsingsInfos = 31,
        SolutionAnalysisFileImages = 32,
        SolutionAnalysisProjectReferencesServiceToClient = 33,
        SolutionAnalysisProjectReferencesInternalsVisibleTo = 34,
        SolutionAnalysisIdToDependenciesAndHashes = 35,
        SolutionAnalysisDependencyToHash = 36,
        SolutionAnalysisTouchedDependencyToHash = 37,
        Service = 255,
    }
    public abstract class PsiCacheNotifier
    {
        protected JetBrains.DataFlow.StandardPreconditions.ReadonlyToken myExternalOwnershipCookie;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.DataFlow.Lifetime myLifetime;
        public PsiCacheNotifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<string> Description { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<string> Header { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<bool> IsActive { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<double> Progress { get; }
        public static JetBrains.ReSharper.Psi.Caches.PsiCacheNotifier GetInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution) { }
        public void TakeOwnership(JetBrains.DataFlow.StandardPreconditions.ReadonlyToken ownertoken) { }
        public abstract bool WaitForCaches([JetBrains.Annotations.NotNullAttribute()] string callerName, [JetBrains.Annotations.CanBeNullAttribute()] string cancelButtonContent);
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class PsiCacheRegistry : JetBrains.ReSharper.Psi.Caches.IPsiCacheRegistry
    {
        public PsiCacheRegistry(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.IShellLocks locks, JetBrains.DataFlow.IViewable<JetBrains.ReSharper.Psi.Caches.ICache> caches, JetBrains.DataFlow.IViewable<JetBrains.ReSharper.Psi.Caches.IPsiCache> psiCaches, JetBrains.ReSharper.Psi.Files.PsiFiles psiFiles) { }
        public JetBrains.DataFlow.ViewableCollection<JetBrains.ReSharper.Psi.Caches.ICache> ActiveCaches { get; }
        public JetBrains.DataFlow.ViewableCollection<JetBrains.ReSharper.Psi.Caches.IBackgroundCache> BackgroundCaches { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Caches.IPsiCache> InvalidatingPsiCaches { get; }
        public JetBrains.DataFlow.ViewableCollection<JetBrains.ReSharper.Psi.Caches.ICache> ResolveCaches { get; }
        public T GetPsiCache<T>()
            where T : JetBrains.ReSharper.Psi.Caches.IPsiCache { }
    }
    public class static SymbolCacheExtension
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule> GetForwardedToAssemblies(this JetBrains.ReSharper.Psi.Caches.ISymbolCache cache, JetBrains.ReSharper.Psi.Modules.IPsiModule fromModule, JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
    }
    public class static SymbolCacheVersion
    {
        public const int VERSION = 117440518;
    }
}
namespace JetBrains.ReSharper.Psi.Caches.Jobs
{
    
    public enum CacheJobPriority
    {
        High = 0,
        Normal = 1,
        Low = 2,
        Background = 3,
    }
    public abstract class CacheJobService : JetBrains.ReSharper.Psi.Caches.SymbolCache.CacheLogger
    {
        protected readonly JetBrains.ReSharper.Psi.Caches.PsiCacheNotifier myCacheNotifier;
        protected readonly JetBrains.DataFlow.StandardPreconditions.ReadonlyToken myCacheNotifierOwnershipCookie;
        protected readonly object mySyncRoot;
        protected System.Func<bool> CheckForInterrupt { get; }
        public bool IsCacheThread { get; }
        public abstract JetBrains.DataFlow.IProperty<bool> IsForegroundIdle { get; set; }
        public abstract JetBrains.DataFlow.IProperty<bool> IsIdle { get; set; }
        protected bool ShouldDie { get; set; }
        protected void AcquireThread() { }
        protected void DoJobWithLogging(JetBrains.ReSharper.Psi.Caches.Job job, JetBrains.Application.Progress.IProgressIndicator progress, bool sync) { }
        public abstract void EnqueueJob(JetBrains.ReSharper.Psi.Caches.Jobs.CacheJobPriority priority, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Caches.Job job, bool forceSync);
        public void ExecuteMultiCore<T>(System.Collections.Generic.ICollection<T> items, string description, JetBrains.Application.IShellLocks shellLocks, bool synchronous, System.Action<T> action) { }
        public void ExecuteMulticoreWithInterrupt<T>(System.Collections.Generic.ICollection<T> items, string description, bool synchronous, System.Action<T> action) { }
        protected void ReleaseThread() { }
    }
    public class CacheJobServiceSync : JetBrains.ReSharper.Psi.Caches.Jobs.CacheJobService
    {
        public CacheJobServiceSync(JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Caches.PsiCacheNotifier notifier, JetBrains.Application.IShellLocks shellLocks, JetBrains.Application.Env.RunsProducts.ProductConfigurations configuration) { }
        public virtual JetBrains.DataFlow.IProperty<bool> IsForegroundIdle { get; set; }
        public virtual JetBrains.DataFlow.IProperty<bool> IsIdle { get; set; }
        public override void EnqueueJob(JetBrains.ReSharper.Psi.Caches.Jobs.CacheJobPriority priority, JetBrains.ReSharper.Psi.Caches.Job job, bool forceSync) { }
    }
    public class JobAnonymous : JetBrains.ReSharper.Psi.Caches.Job
    {
        public JobAnonymous([JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.Application.Progress.IProgressIndicator, System.Func<bool>> runnable, [JetBrains.Annotations.NotNullAttribute()] string name) { }
        public override string DebugComment { get; }
        public override string Description { get; }
        public override string GroupId { get; }
        public override void Do(JetBrains.Application.Progress.IProgressIndicator progress, bool synchronous, System.Func<bool> finish) { }
    }
    public class JobAsyncUpdate : JetBrains.ReSharper.Psi.Caches.Job
    {
        public JobAsyncUpdate(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Caches.ICache> caches, JetBrains.ReSharper.Psi.Caches.IPersistentIndexManager persistentIndexManager, JetBrains.Application.IShellLocks shellLocks) { }
        public override string DebugComment { get; }
        public override string Description { get; }
        public override string GroupId { get; }
        public override void Do(JetBrains.Application.Progress.IProgressIndicator progress, bool synchronous, System.Func<bool> finish) { }
        public override void Pause() { }
        public override void Resume() { }
    }
    public abstract class JobUpdateProjectFiles : JetBrains.ReSharper.Psi.Caches.Job
    {
        protected readonly bool IsForegroundJob;
        protected JobUpdateProjectFiles(JetBrains.ReSharper.Psi.Caches.Jobs.CacheJobService jobService, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Caches.ICache> caches, string groupId, JetBrains.Application.IShellLocks shellLocks, JetBrains.ReSharper.Psi.Caches.IPersistentIndexManager persistentIndexManager, JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, bool isForegroundJob) { }
        public override string Description { get; }
        public override string GroupId { get; }
        protected void ExecuteUpdate(JetBrains.Application.Progress.IProgressIndicator progress, bool synchronous, System.Func<bool> finish, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> projectFiles) { }
    }
    public class JobUpdateProjectFilesList : JetBrains.ReSharper.Psi.Caches.Jobs.JobUpdateProjectFiles
    {
        public JobUpdateProjectFilesList(JetBrains.ReSharper.Psi.Caches.Jobs.CacheJobService jobService, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IPsiSourceFile> projectFiles, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Caches.ICache> caches, string groupId, JetBrains.Application.IShellLocks shellLocks, JetBrains.ReSharper.Psi.Caches.IPersistentIndexManager persistentIndexManager, JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, bool isForegroundJob) { }
        public override string DebugComment { get; }
        public override void Do(JetBrains.Application.Progress.IProgressIndicator progress, bool synchronous, System.Func<bool> finish) { }
    }
}
namespace JetBrains.ReSharper.Psi.Caches.StubTreeNodeCache
{
    
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class StubTreeNodeCache : JetBrains.ReSharper.Psi.Caches.ICache, JetBrains.ReSharper.Psi.Caches.IPersistentCache, JetBrains.ReSharper.Psi.Caches.IPsiSourceFileInvalidatingCache, JetBrains.ReSharper.Psi.Caches.IStubTreeNodeCache
    {
        public StubTreeNodeCache(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Util.ILogger logger, JetBrains.ProjectModel.ISolution solution, JetBrains.ReSharper.Psi.IPsiConfiguration psiConfiguration, JetBrains.ReSharper.Psi.Caches.IPersistentIndexManager persistentIndexManager, JetBrains.ReSharper.Psi.ILanguages languages, JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.Transactions.IPsiTransactions psiTransactions) { }
        public event System.Action<JetBrains.ReSharper.Psi.Tree.IFile> StubPsiFileCreated;
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetCachedPsiFiles(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.Tree.IFile GetPsiFile(JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile, JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public bool IsValid(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.FileElementBase fileElementBase) { }
    }
}
namespace JetBrains.ReSharper.Psi.Caches.SymbolCache
{
    
    public class static CachedDeclarationsCollector
    {
        public static System.Collections.Generic.IList<T> Run<T>(JetBrains.ReSharper.Psi.Tree.IFile file)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    }
    public class CacheLogger
    {
        protected CacheLogger() { }
        public void EndPhase(System.Exception ex) { }
        public void LogAssembly(JetBrains.ReSharper.Psi.IPsiAssembly assembly, string comment = "") { }
        public void LogException(System.Exception ex) { }
        public void LogFile(JetBrains.ReSharper.Psi.IPsiSourceFile file, string comment = "") { }
        public void StartPhase(JetBrains.ReSharper.Psi.Caches.Job job) { }
    }
    public enum CachePhase
    {
        None = 0,
        Load = 1,
        AddAssemblies = 2,
        RemoveFiles = 3,
        RemoveAssemblies = 4,
        Build = 5,
        Merge = 6,
        Save = 7,
    }
    public class CachingConverter<TInput, TOutput>
    
    
    {
        public static System.Converter<TInput, TOutput> CreateForLifetime(JetBrains.DataFlow.Lifetime lifetime, System.Converter<TInput, TOutput> converter) { }
    }
    public abstract class DeclarationsScopeBase : JetBrains.ReSharper.Psi.Caches.SymbolCache.IDeclarationsScope
    {
        public abstract JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public virtual bool Accepts(JetBrains.ReSharper.Psi.INamespace @namespace) { }
        public virtual bool Accepts(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public abstract bool Accepts(JetBrains.ReSharper.Psi.Modules.IPsiModule module);
        public virtual bool Equals(object obj) { }
        public virtual int GetHashCode() { }
    }
    public interface IDeclarationsScope
    {
        JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        bool Accepts([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.INamespace @namespace);
        bool Accepts([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement);
        bool Accepts([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module);
    }
    public interface IInheritorsIndex
    {
        void GetPossibleInheritors(string shortName, ref JetBrains.Util.LocalList<> result);
    }
    public class ModuleDeclarationsScope : JetBrains.ReSharper.Psi.Caches.SymbolCache.DeclarationsScopeBase
    {
        public ModuleDeclarationsScope([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext, bool withReferences) { }
        public override JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public override bool Accepts(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class OneToSetMap<TFirstKey, TSecondKey, TValue>
    
    
    
    {
        public OneToSetMap() { }
        public void Add(TFirstKey firstKey, TSecondKey secondKey, TValue value) { }
        public System.Collections.Generic.ICollection<TValue> GetValues(TFirstKey firstKey) { }
        public System.Collections.Generic.ICollection<TValue> GetValues(TFirstKey firstKey, TSecondKey secondKey) { }
        public bool Remove(TFirstKey firstKey, TSecondKey secondKey, TValue value) { }
        public void RemoveKey(TFirstKey firstKey) { }
        public void RemoveKey(TFirstKey firstKey, TSecondKey secondKey) { }
    }
    public class PartsMap
    {
        public PartsMap() { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ProjectFilePartsTree this[JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType languageType] { get; set; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ProjectFilePartsTree> this[JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile] { get; }
        public bool ContainsKey(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public void Dump(System.IO.TextWriter builder) { }
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.IPsiSourceFile, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ProjectFilePartsTree>>> EnumerateContents() { }
        public JetBrains.ReSharper.Psi.IAttributesSet GetSourceModuleAttributes(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public void Remove(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class SymbolCache : JetBrains.Application.IChangeProvider, JetBrains.ReSharper.Psi.Caches.IAssemblyCache, JetBrains.ReSharper.Psi.Caches.ICache, JetBrains.ReSharper.Psi.Caches.ISandBoxCache, JetBrains.ReSharper.Psi.Caches.ISymbolCache
    {
        public SymbolCache(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.ISolution solution, JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.Modules.IPsiModules psiModules, JetBrains.ReSharper.Psi.Transactions.IPsiTransactions psiTransactions, JetBrains.ReSharper.Psi.IGeneratedDocumentsManager generatedDocumentsManager, JetBrains.ReSharper.Psi.Impl.Reflection2.IPsiAssemblyFileLoader psiAssemblyFileLoader, JetBrains.ReSharper.Psi.ILanguages languages, JetBrains.Application.IShellLocks locks, JetBrains.ReSharper.Psi.IPsiConfiguration psiConfiguration, JetBrains.ReSharper.Psi.Caches.IPersistentIndexManager persistentIndexManager, JetBrains.Application.ChangeManager changeManager, JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator projectFileTypeCoordinator, JetBrains.ReSharper.Psi.Caches.IStubTreeNodeCache stubTreeNodeCache) { }
        public bool HasDirtyFiles { get; }
        public JetBrains.ReSharper.Psi.Caches.SymbolCache.PartsMap Parts { get; }
        public event System.Action<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart> OnAfterTypePartAdded;
        public event System.Action<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart> OnBeforeTypePartRemoved;
        public void AfterTypePartAdded([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart part) { }
        public void BeforeTypePartRemoved([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart removedPart) { }
        public object Build(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, bool isStartup) { }
        public object Build(JetBrains.ReSharper.Psi.IPsiAssembly assembly) { }
        public void Drop(JetBrains.ReSharper.Psi.IPsiAssembly assembly) { }
        public void Drop(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public string DumpCacheForFile(JetBrains.ReSharper.Psi.IPsiSourceFile file) { }
        public object Execute(JetBrains.Application.IChangeMap changeMap) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Caches.ILibraryMemberNamesAccess GetCompiledTypeMemberNames(JetBrains.ReSharper.Psi.IPsiAssembly assembly) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule> GetForwardedFromAssemblies(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule> GetForwardedToAssemblies(JetBrains.Metadata.Utils.AssemblyNameInfo fromAssemblyName, JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule> GetForwardedToAssemblies(JetBrains.Metadata.Utils.AssemblyNameInfo fromAssemblyName) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IClrTypeName> GetForwardedTypes(JetBrains.Metadata.Utils.AssemblyNameInfo fromAssemblyName) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile GetLibraryFile(JetBrains.ReSharper.Psi.IPsiAssembly assembly) { }
        public JetBrains.ReSharper.Psi.IAttributesSet GetModuleAttributes(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public int GetShortNamesCount() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetSourceMembers(string name) { }
        public JetBrains.ReSharper.Psi.IAttributesSet GetSourceModuleAttributes(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public System.Collections.Generic.IEnumerable<string> GetSourceTypeMemberNames() { }
        public int GetSourceTypeMembersCount() { }
        public JetBrains.ReSharper.Psi.Caches.ISymbolScope GetSymbolScope(JetBrains.ReSharper.Psi.Caches.LibrarySymbolScope librarySymbolScope, bool caseSensitive, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.ReSharper.Psi.Caches.ISymbolScope GetSymbolScope(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext, bool withReferences, bool caseSensitive) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredElement> GetTypesAndNamespacesInFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public object Load(JetBrains.Application.Progress.IProgressIndicator progress, bool enablePersistence) { }
        public JetBrains.Util.OneToListMap<JetBrains.ReSharper.Psi.IPsiSourceFile, JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ProjectFilePartsTree> LoadSourceCache(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader, JetBrains.Application.Progress.IProgressIndicator progress) { }
        public void MarkAsDirty(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public void Merge(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, object builtPart) { }
        public void Merge(JetBrains.ReSharper.Psi.IPsiAssembly assembly, object part) { }
        public void MergeLoaded(object data) { }
        public void OnDocumentChange(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.DocumentManagers.impl.ProjectFileDocumentCopyChange args) { }
        public void OnPsiChange(JetBrains.ReSharper.Psi.Tree.ITreeNode elementContainingChanges, JetBrains.ReSharper.Psi.PsiChangedElementType elementType) { }
        public void OnSandBoxCreated(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.SandBox sandBox) { }
        public void OnSandBoxPsiChange(JetBrains.ReSharper.Psi.Tree.ITreeNode elementContainingChanges) { }
        public void Save(JetBrains.Application.Progress.IProgressIndicator progress, bool enablePersistence) { }
        public void SaveSourceCache(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IWriter writer) { }
        public void SyncUpdate(bool underTransaction) { }
        public void TestDump(System.IO.TextWriter writer, bool onlySourceTrie) { }
        public void UpdateTypeElementIndices(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypeElement element) { }
        public bool UpToDate(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public class CacheLoadException : System.Exception { }
    }
    public class SymbolCacheReader : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader, System.IDisposable
    {
        public SymbolCacheReader(System.IO.Stream stream, JetBrains.ReSharper.Psi.ILanguages languages) { }
        public bool IsOk { get; }
        public void Dispose() { }
        public bool ReadBool() { }
        public byte ReadByte() { }
        public System.DateTime ReadDateTime() { }
        public JetBrains.ReSharper.Psi.PreProcessingDirective[] ReadDirectives() { }
        public int ReadInt() { }
        public JetBrains.ReSharper.Psi.PsiLanguageType ReadLanguageType() { }
        public string ReadString() { }
        public string[] ReadStringArray() { }
        public ushort ReadUShort() { }
    }
    public class SymbolCacheWriter : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IWriter, System.IDisposable
    {
        public SymbolCacheWriter(System.IO.Stream stream) { }
        public void Dispose() { }
        public void WriteBool(bool b) { }
        public void WriteByte(byte b) { }
        public void WriteDateTime(System.DateTime dateTime) { }
        public void WriteDirectives(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.PreProcessingDirective> directives) { }
        public void WriteInt(int i) { }
        public void WriteLanguageType(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public void WriteRecordNumber(int recordNumber) { }
        public void WriteString(string s) { }
        public void WriteStringArray(string[] array) { }
        public void WriteUShort(ushort u) { }
        public void WriteVersion(int version) { }
    }
    public class TypeMembersBucket
    {
        public TypeMembersBucket(long timestamp) { }
        public bool IsEmpty { get; }
        public long Timestamp { get; }
        public void Add([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.CachedTypeMemberBase member, JetBrains.ReSharper.Psi.TreeOffset offset) { }
        public bool Contains([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.CachedTypeMemberBase member) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.CachedTypeMemberBase, JetBrains.ReSharper.Psi.TreeOffset>> Members() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.CachedTypeMemberBase> Members(JetBrains.ReSharper.Psi.TreeOffset offset) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class TypeMembersCache : JetBrains.ReSharper.Psi.Caches.ICache, JetBrains.ReSharper.Psi.Caches.IPsiSourceFileInvalidatingCache, JetBrains.ReSharper.Psi.Caches.ISourceDeclaredElementsCache
    {
        public TypeMembersCache([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Transactions.IPsiTransactions psiTransactions, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Caches.IStubTreeNodeCache stubTreeNodeCache) { }
        public JetBrains.ReSharper.Psi.Tree.IFile BindStubDeclarations([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public JetBrains.ReSharper.Psi.IDeclaredElement GetOrCreateDeclaredElement<TDecl>(TDecl declaration, System.Func<TDecl, JetBrains.ReSharper.Psi.IDeclaredElement> factory)
            where TDecl : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration { }
        public System.Collections.Generic.IList<TDeclaredElement> GetTypeMembersInFile<TDeclaredElement>(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile)
            where TDeclaredElement :  class, JetBrains.ReSharper.Psi.IDeclaredElement { }
    }
}
namespace JetBrains.ReSharper.Psi.Caches.WordIndex
{
    
    public class static CaseInsensitiveHashCodeProvider
    {
        public static int CalculateHashCode(JetBrains.Text.IBuffer buffer, int offset, int length) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class WordIndex2 : JetBrains.ReSharper.Psi.Caches.ICache, JetBrains.ReSharper.Psi.Caches.IPersistentCache, JetBrains.ReSharper.Psi.Caches.IWordIndex
    {
        public WordIndex2(JetBrains.ProjectModel.ISolution solution, JetBrains.Application.IShellLocks locks, JetBrains.ReSharper.Psi.IPsiConfiguration psiConfiguration, JetBrains.ReSharper.Psi.Caches.IPersistentIndexManager persistentIndexManager, JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles) { }
        public bool CanContainWord(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, string word) { }
        public void Flush() { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetFilesContainingWord(string word) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetFilesContainingWords(System.Collections.Generic.IEnumerable<string> words) { }
        public System.Collections.Generic.IEnumerable<string> GetWords(string text) { }
        public void MergePersistent(JetBrains.ReSharper.Psi.IPsiSourceFile sf, object buildData) { }
        public void Reset() { }
        protected void TearDown() { }
    }
    public class static WordIndexTokenizerUtil
    {
        public static bool IsHexDigitFast(this char c) { }
        public static bool IsLetterFast(this char c) { }
        public static bool IsLetterOrDigitFast(this char c) { }
    }
}
namespace JetBrains.ReSharper.Psi.CodeAnnotations
{
    
    public enum CodeAnnotationNullableValue
    {
        NOT_NULL = 3,
        CAN_BE_NULL = 4,
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class CodeAnnotationsCache : JetBrains.ReSharper.Psi.Caches.InvalidatingPsiCache
    {
        public static readonly string[] AnnotationAttributes;
        public static readonly string AssertionConditionAttributeShortName;
        public static readonly string AssertionMethodAttributeShortName;
        public static readonly string BaseTypeRequiredAttributeShortName;
        public static readonly string CanBeNullAttributeShortName;
        public static readonly string CannotApplyEqualityOperatorAttributeShortName;
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName CodeContractsPureAttribute;
        public static readonly string ContractAnnotationAttributeShortName;
        public static readonly string InstantHandleAttributeShortName;
        public static readonly string InvokerParameterNameAttributeShortName;
        public static readonly string LinqTunnelAttributeShortName;
        public static readonly string MeansImplicitUseAttributeShortName;
        public static readonly string NoEnumerationAttributeShortName;
        public static readonly string NotifyPropertyChangedInvocatorAttributeShortName;
        public static readonly string NotNullAttributeShortName;
        public static readonly string PureAttributeShortName;
        public static readonly string StringFormatAttributeShortName;
        public static readonly string TerminatesProgramAttributeShortName;
        public static readonly string UsedImplicitlyAttributeShortName;
        public CodeAnnotationsCache(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.ISolution solution, JetBrains.Application.Settings.ISettingsStore settingsStore, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CodeAnnotations.ICustomCodeAnnotationProvider> customProviders) { }
        public bool CannotApplyEqualityOperator(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IClrTypeName> GetAnnotationAttributes(string shortName) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.ITypeElement GetAttributeTypeForElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode ownerElement, string shortName) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.CodeAnnotations.IContractAnnotationFDT GetContractAnnotation(JetBrains.ReSharper.Psi.IMethod method) { }
        public bool GetInstantHandle(JetBrains.ReSharper.Psi.IParameter parameter) { }
        public bool GetLinqTunnel(JetBrains.ReSharper.Psi.IMethod method) { }
        public bool GetNoEnumeration(JetBrains.ReSharper.Psi.IParameter parameter) { }
        public System.Nullable<JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationNullableValue> GetNullableAttribute(JetBrains.ReSharper.Psi.IAttributesOwner attributesOwner) { }
        public System.Nullable<JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationNullableValue> GetNullableAttributeMark(JetBrains.ReSharper.Psi.IAttributeInstance attributeInstance) { }
        public static string GetNullableAttributeShortName(JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationNullableValue mark) { }
        public string GetNullableAttributeShortName(JetBrains.ReSharper.Psi.IAttributeInstance nullableAttributeInstance) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.ITypeElement GetNullableAttributeTypeForElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode ownerElement, JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationNullableValue mark) { }
        public System.Nullable<JetBrains.Annotations.AssertionConditionType> GetParameterAssertionCondition(JetBrains.ReSharper.Psi.IParameter parameter) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> GetRequiredBaseTypes(JetBrains.ReSharper.Psi.IAttributeInstance instance) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> GetRequiredBaseTypes(JetBrains.ReSharper.Psi.IAttributesOwner attribute) { }
        public JetBrains.ReSharper.Psi.IParameter GetStringFormatMethodParameter(JetBrains.ReSharper.Psi.IFunction function) { }
        protected override void InvalidateOnPhysicalChange() { }
        public bool IsAnnotationAttribute(JetBrains.ReSharper.Psi.IAttributeInstance instance, string shortName) { }
        public bool IsAnnotationType(JetBrains.ReSharper.Psi.IClrTypeName clrName, string shortName) { }
        public bool IsAssertionMethod(JetBrains.ReSharper.Psi.IMethod method) { }
        public System.Nullable<JetBrains.Annotations.ImplicitUseKindFlags> IsImplicitlyUsed(JetBrains.ReSharper.Psi.IAttributesOwner element) { }
        public bool IsInvokerParameterName(JetBrains.ReSharper.Psi.IParameter parameter) { }
        public bool IsMeansImplicitUse(JetBrains.ReSharper.Psi.IAttributeInstance attributeInstance, out JetBrains.Annotations.ImplicitUseKindFlags useKindFlags, out JetBrains.Annotations.ImplicitUseTargetFlags targetFlags) { }
        public JetBrains.ReSharper.Psi.IAttributeInstance IsNotifyPropertyChangedInvocator(JetBrains.ReSharper.Psi.IMethod method) { }
        public bool IsNotifyPropertyChangedParameter(JetBrains.ReSharper.Psi.IParameter parameter) { }
        public bool IsPure(JetBrains.ReSharper.Psi.ITypeMember typeMember) { }
        public bool IsTerminatingMethod(JetBrains.ReSharper.Psi.IMethod method) { }
        public void UpdateAnnotationNamespaces() { }
    }
    public class static CodeAnnotationsCacheEx
    {
        public static JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationsCache GetCodeAnnotationsCache(this JetBrains.ReSharper.Psi.IPsiServices psiServices) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Settings.CodeInspectionSettings), "Code annotation settings")]
    public class CodeAnnotationsSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(null, "Default namespace")]
        public string DefaultNamespace;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Annotation namespaces")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, bool> NamespacesWithAnnotations;
    }
    public class static CodeAnnotationsSettingsAccessor
    {
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationsSettings, string>> DefaultNamespace;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationsSettings, JetBrains.Application.Settings.Store.IIndexedEntry<string, bool>>> Namespaces;
    }
    [JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgraderAttribute()]
    public class CodeAnnotationsSettingsUpgrader : JetBrains.Application.Configuration.IXmlReadable, JetBrains.Application.Configuration.Upgrade.ISettingsUpgrader, JetBrains.ProjectModel.Settings.Upgrade.ISolutionSettingsUpgrader
    {
        public void Upgrade(JetBrains.Application.Configuration.IComponentSettingsProvider legacySettingsProvider, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore, JetBrains.DataFlow.Lifetime upgradeLifetime) { }
    }
    public class static CodeAnnotationsUtil
    {
        public static JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationsUtil.NullableAttributeUsage CheckNullableAttributeUsage(JetBrains.ReSharper.Psi.IAttributesOwner attributesOwner, JetBrains.ReSharper.Psi.IAttributeInstance attributeInstance, JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationsCache codeAnnotationsCache) { }
        public enum NullableAttributeUsage
        {
            CORRECT = 0,
            REDUNDANCE_IN_HIERARCHY = 1,
            CONFLICT_IN_HIERARCHY = 2,
            REDUNDANCE_AT_VALUE_TYPE = 3,
            REDUNDANCE_AT_VOID_METHOD = 4,
        }
    }
    public class static ContractAnnotationFDTParser
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CodeAnnotations.IContractAnnotationFDT Parse([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IAttributeInstance attributeInstance, out string errorMessage) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CodeAnnotations.IContractAnnotationFDT Parse([JetBrains.Annotations.CanBeNullAttribute()] string fdtString, bool forceFullStates = False) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CodeAnnotations.IContractAnnotationFDT Parse([JetBrains.Annotations.CanBeNullAttribute()] string fdtString, bool forceFullStates, out string errorMessage) { }
    }
    public enum ContractAnnotationValue
    {
        TRUE = 0,
        FALSE = 1,
        NULL = 2,
        NOT_NULL = 3,
        CAN_BE_NULL = 4,
        HALT = 5,
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class DefaultCodeAnnotationsSettings : JetBrains.Application.Settings.IHaveDefaultSettingsStream { }
    public interface IContractAnnotationFDT
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CodeAnnotations.IContractAnnotationFDTRow> Rows { get; }
    }
    public interface IContractAnnotationFDTRow
    {
        bool ForceFullStates { get; }
        System.Collections.Generic.KeyValuePair<, >[] Input { get; }
        System.Nullable<JetBrains.ReSharper.Psi.CodeAnnotations.ContractAnnotationValue> MethodReturn { get; }
        System.Collections.Generic.KeyValuePair<, >[] OutParameters { get; }
    }
    public interface ICustomCodeAnnotationProvider
    {
        System.Nullable<JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationNullableValue> GetNullableAttribute(JetBrains.ReSharper.Psi.IDeclaredElement element);
    }
}
namespace JetBrains.ReSharper.Psi.CodeStyle
{
    
    public enum AlignmentTabFillStyle
    {
        [System.ComponentModel.DescriptionAttribute("Use spaces (looks aligned on any tab size)")]
        USE_SPACES = 0,
        [System.ComponentModel.DescriptionAttribute("Only use tabs (can be inaccurate)")]
        USE_TABS_ONLY = 1,
        [System.ComponentModel.DescriptionAttribute("Mix tabs and spaces for optimal fill")]
        OPTIMAL_FILL = 2,
    }
    public enum BraceFormatStyle
    {
        [System.ComponentModel.DescriptionAttribute("At end of line (K&R style)")]
        END_OF_LINE = 0,
        [System.ComponentModel.DescriptionAttribute("At end of line (no space)")]
        END_OF_LINE_NO_SPACE = 1,
        [System.ComponentModel.DescriptionAttribute("At next line (BSD style)")]
        NEXT_LINE = 2,
        [System.ComponentModel.DescriptionAttribute("At next line indented (Whitesmiths style)")]
        NEXT_LINE_SHIFTED = 3,
        [System.ComponentModel.DescriptionAttribute("At next line indented 2 (GNU style)")]
        NEXT_LINE_SHIFTED_2 = 4,
    }
    public enum Casing
    {
        AsEntered = 0,
        UpperCase = 1,
        LowerCase = 2,
        AsDefined = 3,
    }
    public class static CasingUtils
    {
        public static string ConvertTextAccordingToCasing(string declaredText, JetBrains.ReSharper.Psi.CodeStyle.Casing casing, string enteredText) { }
    }
    public enum CodeFormatProfile
    {
        DEFAULT = 0,
        INDENT = 1,
        GENERATOR = 2,
        SOFT = 3,
    }
    public class static CodeFormatterHelper
    {
        public static void Format([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter formatter, JetBrains.ReSharper.Psi.Tree.ITreeNode root, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null) { }
        public static void Format([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter formatter, JetBrains.ReSharper.Psi.Tree.ITreeNode root, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null) { }
        public static void Format([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter formatter, JetBrains.ReSharper.Psi.Tree.ITreeNode root, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public static void Format([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter formatter, JetBrains.ReSharper.Psi.Tree.ITreeNode firstElement, JetBrains.ReSharper.Psi.Tree.ITreeNode lastElement) { }
        public static void Format([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter formatter, JetBrains.ReSharper.Psi.Tree.ITreeNode firstElement, JetBrains.ReSharper.Psi.Tree.ITreeNode lastElement, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public static void Format([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter formatter, JetBrains.ReSharper.Psi.Tree.ITreeNode firstElement, JetBrains.ReSharper.Psi.Tree.ITreeNode lastElement, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile) { }
        public static void Format([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter formatter, JetBrains.ReSharper.Psi.Tree.ITreeNode firstElement, JetBrains.ReSharper.Psi.Tree.ITreeNode lastElement, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public static void Format([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter formatter, JetBrains.ReSharper.Psi.Tree.ITreeNode root, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile) { }
        public static void Format([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter formatter, JetBrains.ProjectModel.ISolution solution, JetBrains.DocumentModel.DocumentRange docRange, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, bool formatSpacesBefore, bool formatSpacesAfter) { }
        public static void FormatFile([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter formatter, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IFile file) { }
        public static void FormatFile([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter formatter, JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public static void FormatFile([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter formatter, JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile) { }
        public static void FormatFileRange(this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile = 0, JetBrains.Application.Progress.IProgressIndicator progressIndicator = null, JetBrains.ReSharper.Psi.CodeStyle.OuterSpaceFormatType formatSpacesBefore = 2, JetBrains.ReSharper.Psi.CodeStyle.OuterSpaceFormatType formatSpacesAfter = 2) { }
        public static void FormatNode([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode root, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progressIndicator = null) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Settings.CodeStyleSettings), "Code formatter settings")]
    public class CodeFormattingSettingsKey { }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Psi.CodeStyle.CodeFormattingSettingsKey), "Common formatter settings")]
    public class CommonFormatterSettingsKey
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CodeStyle.AlignmentTabFillStyle.USE_SPACES, "How to align when tabs are used for indents")]
        public JetBrains.ReSharper.Psi.CodeStyle.AlignmentTabFillStyle ALIGNMENT_TAB_FILL_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Use indent settings from main language in file as Visual Studio does")]
        public bool USE_INDENTS_FROM_MAIN_LANGUAGE_IN_FILE;
    }
    public enum CustomIndentType
    {
        RelativeLineCalculation = 0,
        RelativeNodeCalculation = 1,
        DirectCalculation = 2,
    }
    public enum EmptyBlockStyle
    {
        [System.ComponentModel.DescriptionAttribute("On different lines")]
        MULTILINE = 0,
        [System.ComponentModel.DescriptionAttribute("Place braces together")]
        TOGETHER = 1,
        [System.ComponentModel.DescriptionAttribute("Together on the same line")]
        TOGETHER_SAME_LINE = 2,
    }
    public enum ExpressionParsFormatStyle
    {
        [System.ComponentModel.DescriptionAttribute("Indent inside parenthesis (BSD/K&R style)")]
        INSIDE = 0,
        [System.ComponentModel.DescriptionAttribute("Indent parenthesis and inside (Whitesmiths style)")]
        OUTSIDE = 1,
        [System.ComponentModel.DescriptionAttribute("Indent parenthesis 1x, inside 2x (GNU style)")]
        OUTSIDE_AND_INSIDE = 2,
        [System.ComponentModel.DescriptionAttribute("No indent")]
        NONE = 3,
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Settings.CodeStyleSettings), "Default file header")]
    public class FileHeaderSettingsKey
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute("", "File header region name")]
        public string FileHeaderRegionName;
        [JetBrains.Application.Settings.SettingsEntryAttribute("", "File header text")]
        public string FileHeaderText;
    }
    public class GlobalFormatSettings
    {
        public GlobalFormatSettings(bool insertTabs, int indentSize) { }
        public int IndentSize { get; }
        public bool InsertTabs { get; }
    }
    public class static GlobalFormatSettingsHelper
    {
        public static string GetIndentStr(this JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings settings) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.CodeStyle.IGlobalFormatSettingsService GetService(JetBrains.ProjectModel.ISolution solution) { }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class GlobalFormatSettingsService : JetBrains.ReSharper.Psi.CodeStyle.IGlobalFormatSettingsService
    {
        public GlobalFormatSettingsService() { }
        protected virtual JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings GetDefaultSettings() { }
        protected virtual JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings GetLangSettings(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        protected virtual JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings GetLangSettings(JetBrains.ProjectModel.ProjectFileType projectFileType) { }
        public JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings GetSettingsForLanguage(JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ProjectModel.ProjectFileType projectFileType, bool useMainLanguage) { }
    }
    public interface ICodeFormatter
    {
        void Format(JetBrains.ReSharper.Psi.Tree.ITreeNode root, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null);
        JetBrains.ReSharper.Psi.ITreeRange Format(JetBrains.ReSharper.Psi.Tree.ITreeNode firstElement, JetBrains.ReSharper.Psi.Tree.ITreeNode lastElement, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null);
        void Format(JetBrains.ProjectModel.ISolution solution, JetBrains.DocumentModel.DocumentRange docRange, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, bool formatSpacesBefore, bool formatSpacesAfter, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null);
        void Format(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, JetBrains.ReSharper.Psi.CodeStyle.OuterSpaceFormatType formatSpacesBefore, JetBrains.ReSharper.Psi.CodeStyle.OuterSpaceFormatType formatSpacesAfter, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null);
        void FormatDeletedNodes([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode parent, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode prevNode, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode nextNode);
        void FormatFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null);
        void FormatInsertedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode nodeFirst, JetBrains.ReSharper.Psi.Tree.ITreeNode nodeLast, bool formatSurround);
        JetBrains.ReSharper.Psi.ITreeRange FormatInsertedRange(JetBrains.ReSharper.Psi.Tree.ITreeNode nodeFirst, JetBrains.ReSharper.Psi.Tree.ITreeNode nodeLast, JetBrains.ReSharper.Psi.ITreeRange origin);
        void FormatReplacedNode(JetBrains.ReSharper.Psi.Tree.ITreeNode oldNode, JetBrains.ReSharper.Psi.Tree.ITreeNode newNode);
    }
    public interface IGlobalFormatSettingsService
    {
        JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings GetSettingsForLanguage(JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ProjectModel.ProjectFileType projectFileType, bool useMainLanguageSettings);
    }
    public enum OuterSpaceFormatType
    {
        DoNotFormat = 0,
        AlwaysFormat = 1,
        FormatIfBoundTokenIsSpaceSafe = 2,
        FormatIfBoundTokenIsSpace = 3,
    }
    public enum SimpleEmbeddedStatementStyle
    {
        [System.ComponentModel.DescriptionAttribute("Do not change")]
        DO_NOT_CHANGE = 0,
        [System.ComponentModel.DescriptionAttribute("Put on single line")]
        ON_SINGLE_LINE = 1,
        [System.ComponentModel.DescriptionAttribute("Break line")]
        LINE_BREAK = 2,
    }
    public enum TernaryOperatorAlign
    {
        [System.ComponentModel.DescriptionAttribute("Align")]
        ALIGN_ALL = 0,
        [System.ComponentModel.DescriptionAttribute("Align except when nested")]
        ALIGN_NOT_NESTED = 1,
        [System.ComponentModel.DescriptionAttribute("No align")]
        NONE = 2,
    }
}
namespace JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade
{
    
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.Application.Configuration.IXmlReadable))]
    [JetBrains.Annotations.MeansImplicitUseAttribute(JetBrains.Annotations.ImplicitUseTargetFlags.Default | JetBrains.Annotations.ImplicitUseTargetFlags.Itself | JetBrains.Annotations.ImplicitUseTargetFlags.Members | JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers)]
    public class CodeStyleSettingsAttribute : JetBrains.Application.Parts.PartAttribute
    {
        public CodeStyleSettingsAttribute(string tagName) { }
        public string TagName { get; }
    }
    [System.ObsoleteAttribute("Deprecated settings, use new classes like CSharpMemberOrderPatternSettings and hi" +
        "s friends")]
    public class CodeStyleSettingsObsolete : JetBrains.Application.Configuration.IXmlReadable, System.ICloneable
    {
        public CodeStyleSettingsObsolete(JetBrains.ReSharper.Psi.Impl.CodeStyle.Obsolete.CodeStyleSettingsManager codeStyleSettingsManager) { }
        [System.ObsoleteAttribute()]
        public JetBrains.ReSharper.Psi.GenerateMemberBody.AccessorImplementationKind AccessorImplementationKind { get; }
        [System.ObsoleteAttribute()]
        public bool CopyXmlCommentsOnOverride { get; set; }
        [System.ObsoleteAttribute()]
        public string FileHeaderRegionName { get; set; }
        [System.ObsoleteAttribute()]
        public string FileHeaderText { get; set; }
        [System.ObsoleteAttribute()]
        public string[] GeneratedCodeRegionsObsolete { get; set; }
        [System.ObsoleteAttribute()]
        public string[] GeneratedFileMasksObsolete { get; set; }
        [System.ObsoleteAttribute()]
        public JetBrains.ReSharper.Psi.GenerateMemberBody.MethodImplementationKind MethodImplementationKind { get; }
        public JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete Clone() { }
        public T Get<T>()
            where T :  class { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Interfaces.INamingSettings GetNamingSettings2() { }
        public void ReadFromXml(System.Xml.XmlElement element) { }
        public void ReadFromXmlFile(JetBrains.Util.FileSystemPath filename) { }
        public void UpgradeFromXml(System.Xml.XmlElement element, System.Version version) { }
    }
    public enum CodeStyleSettingsSharing
    {
        USER = 0,
        SOLUTION = 1,
        EXTERNAL = 2,
    }
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    [JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgraderAttribute()]
    public class FileHeaderSettingUpgrade : JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.CodeStyleSettingsUpgrade
    {
        public FileHeaderSettingUpgrade(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected override void DoUpgrade(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore) { }
    }
}
namespace JetBrains.ReSharper.Psi.Colors
{
    
    public struct ColorBindOptions
    {
        public bool BindsToName;
        public bool BindsToValue;
        public bool IsBindable { get; }
    }
    public class ColorDeclaredElement : JetBrains.ReSharper.Psi.Colors.IColorDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public ColorDeclaredElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Colors.IColorElement colorElement, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType presentationLanguage) { }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Colors.IColorElement ColorElement { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public string ShortName { get; }
        protected bool Equals([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Colors.IColorDeclaredElement other) { }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class ColorDeclaredElementPresenter : JetBrains.ReSharper.Psi.IDeclaredElementPresenter
    {
        public static JetBrains.ReSharper.Psi.Colors.ColorDeclaredElementPresenter Instance { get; }
        public string Format(JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle style, JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, out JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking marking) { }
        public string Format(JetBrains.ReSharper.Psi.ParameterKind parameterKind) { }
        public string Format(JetBrains.ReSharper.Psi.AccessRights accessRights) { }
    }
    public sealed class ColorDeclaredElementType : JetBrains.ReSharper.Psi.DeclaredElementTypeBase
    {
        public ColorDeclaredElementType(JetBrains.UI.Icons.IconId imageName) { }
        protected internal override JetBrains.ReSharper.Psi.IDeclaredElementPresenter DefaultPresenter { get; }
    }
    public class ColorElement : JetBrains.ReSharper.Psi.Colors.IColorElement
    {
        public ColorElement(System.Drawing.Color color) { }
        public ColorElement(System.Drawing.Color color, string shortName) { }
        public System.Drawing.Color RGBColor { get; }
        public string ShortName { get; }
    }
    public class static ColorReferenceEx
    {
        public static bool IsValid([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Colors.IColorReference reference) { }
    }
    public interface IColorDeclaredElement : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Colors.IColorElement ColorElement { get; }
    }
    public interface IColorElement
    {
        System.Drawing.Color RGBColor { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        string ShortName { get; }
    }
    public interface IColorReference
    {
        JetBrains.ReSharper.Psi.Colors.ColorBindOptions BindOptions { get; }
        System.Nullable<JetBrains.DocumentModel.DocumentRange> ColorConstantRange { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Colors.IColorElement ColorElement { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode Owner { get; }
        void Bind([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Colors.IColorElement colorElement);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Colors.IColorElement> GetColorTable();
    }
    public class PredefinedColorTypes
    {
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Colors.PredefinedColorTypes.ColorDefiningType> ColorDefiningTypes { get; }
        public JetBrains.ReSharper.Psi.ITypeElement WinFormsBrushType { get; }
        public JetBrains.ReSharper.Psi.ITypeElement WinFormsColorType { get; }
        public JetBrains.ReSharper.Psi.ITypeElement WinFormsPenType { get; }
        public JetBrains.ReSharper.Psi.ITypeElement WinFormsPredefinedBrushesType { get; }
        public JetBrains.ReSharper.Psi.ITypeElement WinFormsPredefinedPensType { get; }
        public JetBrains.ReSharper.Psi.ITypeElement WinRTColorType { get; }
        public JetBrains.ReSharper.Psi.ITypeElement WinRTPredefinedColorsType { get; }
        public JetBrains.ReSharper.Psi.ITypeElement XamlColorType { get; }
        public JetBrains.ReSharper.Psi.ITypeElement XamlPredefinedBrushesType { get; }
        public JetBrains.ReSharper.Psi.ITypeElement XamlPredefinedColorsType { get; }
        public JetBrains.ReSharper.Psi.ITypeElement XamlSolidColorBrushType { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IProperty AsColorProperty([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ITypeMember member) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IProperty AsColorProperty([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Colors.PredefinedColorTypes predefinedColorTypes, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ITypeMember member) { }
        public JetBrains.ReSharper.Psi.Colors.ColorBindOptions BindingOptions(JetBrains.ReSharper.Psi.ITypeElement qualifierType) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Colors.IColorElement> ColorElementsByType(JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement containingType, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Colors.IColorElement> ColorElementsByType(JetBrains.ReSharper.Psi.ITypeElement containingType) { }
        public static JetBrains.ReSharper.Psi.Colors.IColorReference ColorReferenceFromInvocation(System.StringComparer comparer, JetBrains.ReSharper.Psi.Resolve.IReference quailifierReference, JetBrains.ReSharper.Psi.Resolve.IReference methodReference, JetBrains.ReSharper.Psi.Tree.IArgument[] args, System.Func<JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.Colors.IColorElement, JetBrains.ReSharper.Psi.Colors.IColorReference> factory) { }
        public static JetBrains.ReSharper.Psi.Colors.PredefinedColorTypes Get([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> GetStaticColorProperties(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public bool HasColorBuildingFunctionByUndelaying(JetBrains.ReSharper.Psi.ITypeElement underlaying) { }
        public bool HasPredefinedColorMembers([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement containingType) { }
        public bool IsColorUnderlayingType(JetBrains.ReSharper.Psi.ITypeElement type) { }
        public bool IsWinFormsBrushType(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public bool IsWinFormsColorType(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public bool IsWinFormsPenType(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public bool IsWinFormsPredefinedBrushesType(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public bool IsWinFormsPredefinedPensType(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public bool IsWinRTColorType(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public bool IsXamlColorType(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public bool IsXamlPredefinedBrushesType(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public bool IsXamlPredefinedColorsType(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public bool IsXamlSolidColorBrushType(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.ITypeElement PredefinedColorsTypeForUnderlying(JetBrains.ReSharper.Psi.ITypeElement underlying) { }
        public System.Nullable<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.IProperty>> PropertyFromColorElement(JetBrains.ReSharper.Psi.ITypeElement qualifier, JetBrains.ReSharper.Psi.Colors.IColorElement colorElement) { }
        public void TryReplaceAsInvocation(JetBrains.ReSharper.Psi.ITypeElement qualifierType, JetBrains.ReSharper.Psi.Colors.IColorElement colorElement, JetBrains.ReSharper.Psi.Colors.PredefinedColorTypes.LanguageSpecificReplaceInvocation replace) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.ITypeElement UnderlyingColorType(JetBrains.ReSharper.Psi.ITypeElement qualifierType) { }
        public class ColorDefiningType
        {
            public readonly JetBrains.ReSharper.Psi.ITypeElement ColorProvidingType;
            public bool DefinesColorProperties;
            public bool HasColorBuildingFunction;
            public JetBrains.ReSharper.Psi.ITypeElement UnderlyingColorType;
            public ColorDefiningType(JetBrains.ReSharper.Psi.ITypeElement colorProvidingType) { }
        }
        public delegate JetBrains.ReSharper.Psi.Tree.ITreeNode LanguageSpecificReplaceInvocation(JetBrains.ReSharper.Psi.IMethod fromArgb, [JetBrains.Annotations.CanBeNullAttribute()] string replaceAll, bool useHex, params JetBrains.Util.Pair<, >[] args);
    }
}
namespace JetBrains.ReSharper.Psi.ControlFlow
{
    
    public class static ControlFlowElementExtensions
    {
        public static bool Contains(this JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement element, JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement candidate) { }
        public static System.Collections.Generic.List<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> EnumerateAllChildren(this JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement element) { }
        public static System.Collections.Generic.List<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib> ReachableExits(this JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement element) { }
    }
    public enum ControlFlowRibType
    {
        NEXT = 0,
        GOTO = 1,
        THROW = 2,
        RETURN = 3,
        PHANTOM_NEXT = 4,
    }
    public interface IControlFlowContextFactory<T>
        where T :  class
    {
        T InitialContext { get; }
        T CloneContext(T context);
        T Merge(System.Collections.Generic.IList<T> contexts);
    }
    public interface IControlFlowElement
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> Children { get; }
        System.Collections.Generic.List<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib> Entries { get; }
        System.Collections.Generic.List<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib> Exits { get; }
        int Id { get; }
        bool IsReachable { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement Parent { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib PhantomExit { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode SourceElement { get; }
    }
    public interface IControlFlowGraf
    {
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> AllElements { get; }
        int AllElementsCount { get; }
        JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement BodyElement { get; }
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Tree.ITreeNode> DeadCodeElements { get; }
        int EdgesCount { get; }
        JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement EntryElement { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> LeafElements { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> ReachableSequence { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> GetLeafElementsFor(JetBrains.ReSharper.Psi.Tree.ITreeNode element);
    }
    public interface IControlFlowRib
    {
        int Id { get; }
        JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement Source { get; }
        JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement Target { get; }
        JetBrains.ReSharper.Psi.ControlFlow.ControlFlowRibType Type { get; set; }
        JetBrains.ReSharper.Psi.Tree.ITreeNode GetSourceElement();
    }
    public enum ValueAnalysisMode
    {
        OFF = 0,
        OPTIMISTIC = 1,
        PESSIMISTIC = 2,
    }
}
namespace JetBrains.ReSharper.Psi.ControlFlow.Impl
{
    
    public class AssignmentUsageTable
    {
        public AssignmentUsageTable() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> Assignments { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetExplicitUsages(JetBrains.ReSharper.Psi.Tree.ITreeNode assignment) { }
        public bool IsUsed(JetBrains.ReSharper.Psi.Tree.ITreeNode assignment) { }
        public void SetExplicitlyUsed(JetBrains.ReSharper.Psi.Tree.ITreeNode assignment, JetBrains.ReSharper.Psi.Tree.ITreeNode usage) { }
        public void SetImplicitlyUsed(JetBrains.ReSharper.Psi.Tree.ITreeNode assignment) { }
        public void SetMayBeUnused(JetBrains.ReSharper.Psi.Tree.ITreeNode assignment) { }
    }
    public abstract class CommonLanguageControlFlowGrafInspector<TContextFactory, TContext, TVariableInfo> : JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowGrafInspector<TContext>, JetBrains.ReSharper.Psi.ControlFlow.Impl.IControlFlowAnalysisResult
        where TContextFactory : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowContextFactory<>
        where TContext :  class, JetBrains.ReSharper.Psi.ControlFlow.Impl.ICommonLanguageControlFlowContext<, >
        where TVariableInfo :  class, JetBrains.ReSharper.Psi.ControlFlow.Impl.IControlFlowVariableInfo<>
    {
        protected readonly JetBrains.ReSharper.Psi.ControlFlow.Impl.AssignmentUsageTable myAssignmentUsageTable;
        protected CommonLanguageControlFlowGrafInspector([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowGraf controlFlowGraf, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ControlFlow.IControlFlowContextFactory<TContext> contextFactory) { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression>> AccessToExternalDisposedClosure { get; }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression>> AccessToExternalModifiedClosure { get; }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression>> AccessToForEachVariableInClosure { get; }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Tree.ITreeNode, System.Collections.Generic.List<JetBrains.ReSharper.Psi.Tree.ITreeNode>>> AssignmentsUsage { get; }
        protected TContextFactory ContextFactory { get; }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, System.Collections.Generic.List<JetBrains.ReSharper.Psi.Tree.ITreeNode>> ElementInitializers { get; }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, bool> FinalLocals { get; }
        public JetBrains.Util.OneToListMap<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.IDeclaredElement> NotInitializedVariables { get; }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.IDeclaredElement> ReadWithoutWriteExpressions { get; }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.IDeclaredElement> ReadWithoutWriteExternalVariables { get; }
        public abstract System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> UsedExternalVariables { get; }
        public event System.Action<TContext, TVariableInfo, JetBrains.ReSharper.Psi.Tree.ExpressionAccessType, JetBrains.ReSharper.Psi.Tree.ITreeNode> PatchAccessInfo;
        protected abstract System.Collections.Generic.IEnumerable<TVariableInfo> EnumerateVariables();
        protected void FirePatchAccessInfo(TContext context, TVariableInfo info, JetBrains.ReSharper.Psi.Tree.ExpressionAccessType access, JetBrains.ReSharper.Psi.Tree.ITreeNode accessExpression) { }
        public override void Inspect() { }
        protected abstract bool IsForeachVariableDeclaration(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement);
        protected void OnInfoDisposed(TContext context, TVariableInfo info) { }
        protected abstract class ClosureAnalyzerBase<TContextFactory, TContext, TVariableInfo, TGrafInspector>
            where TContextFactory : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowContextFactory<>
            where TContext :  class, JetBrains.ReSharper.Psi.ControlFlow.Impl.ICommonLanguageControlFlowContext<, >
            where TVariableInfo :  class, JetBrains.ReSharper.Psi.ControlFlow.Impl.IControlFlowVariableInfo<>
            where TGrafInspector : JetBrains.ReSharper.Psi.ControlFlow.Impl.CommonLanguageControlFlowGrafInspector<, , >
        {
            protected ClosureAnalyzerBase(TGrafInspector owner) { }
            protected TGrafInspector Owner { get; }
            protected abstract JetBrains.ReSharper.Psi.ControlFlow.Impl.CommonLanguageControlFlowGrafInspector<TContextFactory, TContext, TVariableInfo>.ClosureAnalyzerBase<TGrafInspector>.ClosureBehavior AnalyzeLambdaExecutionContext(JetBrains.ReSharper.Psi.Tree.ITreeNode closureNode, out JetBrains.ReSharper.Psi.Tree.ITreeNode contextNode);
            protected virtual void CopyVariableInfoFromParentContext(TVariableInfo info, TContext currentContext, TVariableInfo parentContextvariableInfo, TContext parentContext) { }
            protected TVariableInfo FindVariableInfoInParentContexts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, ref TContext containingContext) { }
            protected virtual void InspectClosure(TGrafInspector inspector, bool instantExecution) { }
            public bool IsClosureExecutedLocally(JetBrains.ReSharper.Psi.Tree.ITreeNode closureNode) { }
            protected abstract JetBrains.ReSharper.Psi.ControlFlow.Impl.CommonLanguageControlFlowGrafInspector<TContextFactory, TContext, TVariableInfo>.ClosureAnalyzerBase<TGrafInspector>.ClosureBehavior NextTunnelClauseContext(JetBrains.ReSharper.Psi.Tree.ITreeNode contextNode, out JetBrains.ReSharper.Psi.Tree.ITreeNode nextContextNode);
            protected enum ClosureBehavior<TContextFactory, TContext, TVariableInfo, TGrafInspector>
                where TContextFactory : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowContextFactory<>
                where TContext :  class, JetBrains.ReSharper.Psi.ControlFlow.Impl.ICommonLanguageControlFlowContext<, >
                where TVariableInfo :  class, JetBrains.ReSharper.Psi.ControlFlow.Impl.IControlFlowVariableInfo<>
                where TGrafInspector : JetBrains.ReSharper.Psi.ControlFlow.Impl.CommonLanguageControlFlowGrafInspector<, , >
            {
                RandomExecution = 0,
                InstantExecution = 1,
                Tunnel = 2,
            }
        }
    }
    public abstract class ControlFlowElement : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement
    {
        protected ControlFlowElement() { }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> Children { get; }
        public System.Collections.Generic.List<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib> Entries { get; }
        public virtual System.Collections.Generic.List<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib> Exits { get; }
        public int Id { get; set; }
        public bool IsReachable { get; set; }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowElement Parent { get; set; }
        public virtual JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib PhantomExit { get; }
        public virtual JetBrains.ReSharper.Psi.Tree.ITreeNode SourceElement { get; }
        public void AddEntry(JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib rib) { }
        public JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib AddExit(JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib rib) { }
        public virtual void RemovePhantomExits() { }
    }
    public abstract class ControlFlowGraf : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowGraf
    {
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> AllElements { get; }
        public int AllElementsCount { get; }
        public abstract JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement BodyElement { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Tree.ITreeNode> DeadCodeElements { get; }
        public int EdgesCount { get; }
        public abstract JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement EntryElement { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> LeafElements { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> ReachableSequence { get; }
        protected void FixUp() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> GetLeafElementsFor(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public abstract class ControlFlowGrafInspector<TContext>
        where TContext :  class
    {
        protected ControlFlowGrafInspector([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowGraf controlFlowGraf, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ControlFlow.IControlFlowContextFactory<TContext> contextFactory) { }
        protected JetBrains.ReSharper.Psi.ControlFlow.IControlFlowContextFactory<TContext> ContextFactory { get; }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowGraf ControlFlowGraf { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public TContext GetContext(JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib rib) { }
        public virtual void Inspect() { }
        protected virtual bool InspectionPass(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> sequence) { }
        protected abstract void InspectLeafElementAndSetContextToExits([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement element, TContext context);
        protected virtual bool InspectSingleLeaf(JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowElement element) { }
        protected void SetContext(JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib rib, TContext context) { }
        protected bool ShouldInspectSingleLeaf(JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowElement element, System.Collections.Generic.List<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib> controlFlowRibs) { }
        protected virtual bool ShouldInspectSingleLeaf(JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowElement element) { }
    }
    public class ControlFlowMultiplexor : JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowElement
    {
        public ControlFlowMultiplexor(JetBrains.ReSharper.Psi.Tree.ITreeNode referencedElement) { }
        public override JetBrains.ReSharper.Psi.Tree.ITreeNode SourceElement { get; }
    }
    public class ControlFlowRib : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib
    {
        protected ControlFlowRib(JetBrains.ReSharper.Psi.ControlFlow.ControlFlowRibType ribType, JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement source) { }
        public ControlFlowRib(JetBrains.ReSharper.Psi.ControlFlow.ControlFlowRibType ribType, JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement source, JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement target) { }
        public int Id { get; set; }
        public JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement Source { get; }
        public JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement Target { get; set; }
        public JetBrains.ReSharper.Psi.ControlFlow.ControlFlowRibType Type { get; set; }
        public virtual JetBrains.ReSharper.Psi.Tree.ITreeNode GetSourceElement() { }
    }
    [System.FlagsAttribute()]
    public enum ControlFlowVariableAccessState : ushort
    {
        NONE = 0,
        INITIALIZED = 1,
        ASSIGNED = 2,
        ACCESSED = 4,
        ACCESSED_IN_ANONYMOUS_METHOD = 16,
        ASSIGNED_IN_ANONYMOUS_METHOD = 32,
        ADDRESSOF_TAKEN = 128,
        DEFINITELY_ASSIGNED = 515,
        RANDOM_ASSIGNED = 160,
        ACCESSED_AS_ENUMERABLE = 256,
        INITIALIZED_OUTSIDE = 512,
        ALL = 65535,
    }
    public class ControlFlowVariableState
    {
        public ControlFlowVariableState(JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableAccessState access) { }
        public ControlFlowVariableState(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableState> states) { }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableAccessState Access { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> RecentAccessInClosure { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> RecentAssignments { get; }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableState AddToRecentAccessInClosure(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableState AddToRecentAssignments(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableState AddToRecentUsage(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableState ClearRecentAccessInClosure() { }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableState ClearRecentAssignments() { }
        public bool Compare(JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableState s) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetUsagesOfRecentAssignment(JetBrains.ReSharper.Psi.Tree.ITreeNode assignment) { }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableState SetAccessState(JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableAccessState accessState) { }
    }
    public class ControlFlowVariableStateCollection
    {
        public ControlFlowVariableStateCollection(int count) { }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableState this[int indx] { get; }
        public bool Compare(JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableStateCollection collection) { }
        public static JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableStateCollection Merge(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableStateCollection> collections) { }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableStateCollection Modify(int indx, [JetBrains.Annotations.InstantHandleAttribute()] System.Func<JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableState, JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableState> mutator) { }
    }
    public interface ICommonLanguageControlFlowContext<TContext, TVariableInfo>
        where TContext :  class, JetBrains.ReSharper.Psi.ControlFlow.Impl.ICommonLanguageControlFlowContext<, >
        where TVariableInfo :  class, JetBrains.ReSharper.Psi.ControlFlow.Impl.IControlFlowVariableInfo<>
    {
        JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableAccessState this[TVariableInfo info] { get; set; }
        TContext ParentContext { get; }
        void AddRecentAccessInClosure(TVariableInfo info, JetBrains.ReSharper.Psi.Tree.ITreeNode element);
        void AddToRecentAssignmentsList(TVariableInfo info, JetBrains.ReSharper.Psi.Tree.ITreeNode element);
        void AddToRecentUsagesList(TVariableInfo info, JetBrains.ReSharper.Psi.Tree.ITreeNode element);
        void ClearRecentAccessInClosure(TVariableInfo info);
        void ClearRecentAssignmentsList(TVariableInfo info);
        System.Collections.Generic.IEnumerable<TVariableInfo> EnumerateVariables();
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetRecentAccessInClosure(TVariableInfo info);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetRecentAssignmentsList(TVariableInfo info);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetUsagesOfRecentAssignments(TVariableInfo info, JetBrains.ReSharper.Psi.Tree.ITreeNode assignment);
        TVariableInfo GetVariableInfo(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement);
    }
    public interface IControlFlowAnalysisResult
    {
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression>> AccessToExternalDisposedClosure { get; }
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression>> AccessToExternalModifiedClosure { get; }
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression>> AccessToForEachVariableInClosure { get; }
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Tree.ITreeNode, System.Collections.Generic.List<JetBrains.ReSharper.Psi.Tree.ITreeNode>>> AssignmentsUsage { get; }
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, System.Collections.Generic.List<JetBrains.ReSharper.Psi.Tree.ITreeNode>> ElementInitializers { get; }
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, bool> FinalLocals { get; }
        JetBrains.Util.OneToListMap<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.IDeclaredElement> NotInitializedVariables { get; }
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.IDeclaredElement> ReadWithoutWriteExpressions { get; }
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.IDeclaredElement> ReadWithoutWriteExternalVariables { get; }
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> UsedExternalVariables { get; }
    }
    public interface IControlFlowVariableInfo<T>
        where T :  class, JetBrains.ReSharper.Psi.ControlFlow.Impl.IControlFlowVariableInfo<>
    {
        JetBrains.ReSharper.Psi.IClrDeclaredElement DeclaredElement { get; }
        JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableAccessState InitialAccessState { get; }
        T Parent { get; }
        bool ShouldBeAssignedUponExit { get; }
        System.Collections.Generic.IEnumerable<T> StructFields { get; }
    }
    public class static ListExt
    {
        public static System.Collections.Generic.IEnumerable<T> FastReverse<T>(this System.Collections.Generic.IList<T> list) { }
    }
}
namespace JetBrains.ReSharper.Psi.Dependencies
{
    
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class DependencyFactory
    {
        public DependencyFactory(JetBrains.ReSharper.Psi.Dependencies.ModuleIdFactory moduleIdFactory) { }
        public JetBrains.ReSharper.Psi.Dependencies.ModuleIdFactory ModuleIdFactory { get; }
        public JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency CreateAllowUnsafeCodeDependency(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency CreateConditionalCompilationConstantDependency(JetBrains.ReSharper.Psi.Modules.IPsiModule module, string name) { }
        public static JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency CreateDependency(string qualifierTypeClrName, string name) { }
        public JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency CreateDependency(string qualifierNamespaceName, JetBrains.ReSharper.Psi.Dependencies.MetaModuleId moduleId, string name) { }
        public JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency CreateDependency(string qualifierNamespaceName, JetBrains.ReSharper.Psi.Dependencies.MetaModuleId moduleId, int nameHash, string nameTestPresentation) { }
        public JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency CreateDependency(string qualifierTypeName, JetBrains.ReSharper.Psi.Dependencies.SpecialDependencyKind kind) { }
        public static JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency CreateFileDependency(JetBrains.ProjectModel.IProjectFolder folder, string fileName) { }
        public JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency CreateLanguageLevelDependency(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency CreateShouldHaveMainMethodDependency(JetBrains.ProjectModel.IProject project) { }
    }
    public class DependencySet
    {
        public DependencySet() { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency> Dependencies { get; }
        public bool IsEmpty { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Dependencies.UsingsDependency> UsingsDependencies { get; }
        public void AddDependency(JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency dependency) { }
        public void AddUsingsDependency(JetBrains.ReSharper.Psi.Dependencies.UsingsDependency dependency) { }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class DependencyStore : JetBrains.ReSharper.Psi.Dependencies.IDependencyStore
    {
        public DependencyStore(JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.Dependencies.DependencyFactory dependencyFactory, JetBrains.Application.IShellLocks shellLocks) { }
        public JetBrains.ReSharper.Psi.Dependencies.DependencyFactory DependencyFactory { get; }
        public bool HasDependencySet { get; }
        public void AddDependenciesOnSymbolTableAccess([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable, string name) { }
        public void AddDependency(JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency dependency, JetBrains.ReSharper.Psi.IPsiSourceFile localToFile = null) { }
        public void AddNamespaceDependency(string qualifierNamespaceName, JetBrains.ReSharper.Psi.Modules.IPsiModule module, string name) { }
        public void AddNamespaceDependency(string qualifierNamespaceName, JetBrains.ReSharper.Psi.Dependencies.MetaModuleId moduleId, string name) { }
        public void AddTypeElementDependency(JetBrains.ReSharper.Psi.IClrTypeName typeName, string name, JetBrains.ReSharper.Psi.IPsiSourceFile localToFile = null) { }
        public void AddTypeElementDependency(JetBrains.ReSharper.Psi.IClrTypeName typeName, JetBrains.ReSharper.Psi.Dependencies.SpecialDependencyKind dependencyKind, JetBrains.ReSharper.Psi.IPsiSourceFile localToFile = null) { }
        public void AddUsingsDependency(JetBrains.ReSharper.Psi.Dependencies.UsingsDependency dependency, JetBrains.ReSharper.Psi.IPsiSourceFile localToFile) { }
        public JetBrains.ReSharper.Psi.Dependencies.DependencyStore.IDependencySetHandle CreateDependencySet(JetBrains.ReSharper.Psi.IPsiSourceFile skipDependenciesToFile) { }
        public JetBrains.ReSharper.Psi.Dependencies.DependencySet ReleaseDependencySet(JetBrains.ReSharper.Psi.Dependencies.DependencyStore.IDependencySetHandle handle) { }
        public interface IDependencySetHandle { }
    }
    public class FolderQualifierInfo
    {
        public FolderQualifierInfo(JetBrains.ProjectModel.IProjectFolder folder) { }
        public void AddDependencies(JetBrains.ReSharper.Psi.Dependencies.IDependencyStore dependencyStore, string name) { }
        public bool Equals(JetBrains.ReSharper.Psi.Dependencies.FolderQualifierInfo other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public interface IDependencyStore
    {
        void AddDependency(JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency dependency, JetBrains.ReSharper.Psi.IPsiSourceFile localToFile = null);
        void AddNamespaceDependency(string qualifierNamespaceName, JetBrains.ReSharper.Psi.Modules.IPsiModule module, string name);
        void AddNamespaceDependency(string qualifierNamespaceName, JetBrains.ReSharper.Psi.Dependencies.MetaModuleId moduleId, string name);
        void AddTypeElementDependency(JetBrains.ReSharper.Psi.IClrTypeName typeName, string name, JetBrains.ReSharper.Psi.IPsiSourceFile localToFile = null);
        void AddTypeElementDependency(JetBrains.ReSharper.Psi.IClrTypeName typeName, JetBrains.ReSharper.Psi.Dependencies.SpecialDependencyKind dependencyKind, JetBrains.ReSharper.Psi.IPsiSourceFile localToFile = null);
        void AddUsingsDependency(JetBrains.ReSharper.Psi.Dependencies.UsingsDependency dependency, JetBrains.ReSharper.Psi.IPsiSourceFile localToFile);
    }
    public interface IFileImageContributor
    {
        System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency, JetBrains.ReSharper.Psi.Dependencies.Hash>> ModuleDependencies(JetBrains.ReSharper.Psi.Modules.IPsiModule module);
        System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency, JetBrains.ReSharper.Psi.Dependencies.Hash>> SolutionDependencies([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution);
    }
    public interface IFileWithDependencies
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Dependencies.ModuleProperty> ModulePropertyDependencies { get; }
        JetBrains.ReSharper.Psi.Dependencies.IHashableEntityInfo[] CalcAllEntityHashes(object hashableEntity, string parentQualifiedName, out string qualifiedName);
        System.Collections.IEnumerable EntityChildren(object hashableEntity);
        System.Collections.Generic.ICollection<string> GetEmptyNamespaceDeclarations();
        System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<object, JetBrains.ReSharper.Psi.Dependencies.IUsingsInfo>> GetTopLevelHashableEntities();
        bool IsEntityInternal(object hashableEntity);
    }
    public interface IHashableDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.Dependencies.Hash CalcHash();
    }
    public interface IHashableEntityInfo
    {
        JetBrains.ReSharper.Psi.Dependencies.Hash Hash { get; }
        void AddDependenciesAndHashes(JetBrains.ReSharper.Psi.Dependencies.DependencyFactory dependencyFactory, JetBrains.Util.OneToListMap<JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency, JetBrains.ReSharper.Psi.Dependencies.Hash> dependencyToHashes);
    }
    public class InNamespaceHashableEntityInfo : JetBrains.ReSharper.Psi.Dependencies.IHashableEntityInfo
    {
        public readonly string Name;
        public readonly string QualifierNamespace;
        public InNamespaceHashableEntityInfo(JetBrains.ReSharper.Psi.Dependencies.Hash hash, string qualifierNamespace, string name) { }
        public JetBrains.ReSharper.Psi.Dependencies.Hash Hash { get; }
        public void AddDependenciesAndHashes(JetBrains.ReSharper.Psi.Dependencies.DependencyFactory dependencyFactory, JetBrains.Util.OneToListMap<JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency, JetBrains.ReSharper.Psi.Dependencies.Hash> dependencyToHashes) { }
    }
    public interface ISymbolTableDependencySet
    {
        void AddDependenciesTo(JetBrains.ReSharper.Psi.Dependencies.IDependencyStore store, string accessName);
    }
    public interface IUsingsInfo
    {
        JetBrains.ReSharper.Psi.Dependencies.IUsingsInfoFactory Factory { get; }
        string FileName { get; }
        JetBrains.ReSharper.Psi.Dependencies.Hash GetHash();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTable(JetBrains.ReSharper.Psi.Modules.IPsiModule module);
        void TestDump(System.IO.TextWriter builder);
        void WriteTo(System.IO.BinaryWriter writer);
    }
    public interface IUsingsInfoFactory
    {
        string Id { get; }
        JetBrains.ReSharper.Psi.Dependencies.IUsingsInfo ReadInfoFrom(System.IO.BinaryReader reader);
    }
    public class MainMethodHashableEntityInfo : JetBrains.ReSharper.Psi.Dependencies.IHashableEntityInfo
    {
        public MainMethodHashableEntityInfo(JetBrains.ReSharper.Psi.Dependencies.Hash hash, JetBrains.ProjectModel.IProject project) { }
        public JetBrains.ReSharper.Psi.Dependencies.Hash Hash { get; }
        public void AddDependenciesAndHashes(JetBrains.ReSharper.Psi.Dependencies.DependencyFactory dependencyFactory, JetBrains.Util.OneToListMap<JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency, JetBrains.ReSharper.Psi.Dependencies.Hash> dependencyToHashes) { }
    }
    public class MemberHashableEntityInfo : JetBrains.ReSharper.Psi.Dependencies.IHashableEntityInfo
    {
        public readonly string Name;
        public readonly string QualifierTypeCLRName;
        public MemberHashableEntityInfo(JetBrains.ReSharper.Psi.Dependencies.Hash hash, string qualifierTypeCLRName, string name) { }
        public JetBrains.ReSharper.Psi.Dependencies.Hash Hash { get; }
        public void AddDependenciesAndHashes(JetBrains.ReSharper.Psi.Dependencies.DependencyFactory dependencyFactory, JetBrains.Util.OneToListMap<JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency, JetBrains.ReSharper.Psi.Dependencies.Hash> dependencyToHashes) { }
    }
    public struct MetaModuleId
    {
        public static readonly JetBrains.ReSharper.Psi.Dependencies.MetaModuleId Empty;
        public static readonly JetBrains.ReSharper.Psi.Dependencies.MetaModuleId SOLUTION_ID;
        public MetaModuleId(string id) { }
        public string StringId { get; }
        public override bool Equals(object obj) { }
        public bool Equals(JetBrains.ReSharper.Psi.Dependencies.MetaModuleId other) { }
        public override int GetHashCode() { }
        public static JetBrains.ReSharper.Psi.Dependencies.MetaModuleId ReadFrom(System.IO.BinaryReader reader) { }
        public override string ToString() { }
        [JetBrains.Annotations.PureAttribute()]
        public void WriteTo(System.IO.BinaryWriter writer) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class ModuleIdFactory
    {
        public ModuleIdFactory(JetBrains.ProjectModel.ISolution solution, JetBrains.ProjectModel.impl.ViewableProjectsCollection projectsCollection, JetBrains.ReSharper.Psi.Modules.IPsiModules psiModules, JetBrains.ProjectModel.ProjectModelElementPointerManager pointerManager, JetBrains.ReSharper.Psi.IPsiConfiguration psiConfiguration, JetBrains.DataFlow.Lifetime lifetime) { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule FindModuleById(JetBrains.ReSharper.Psi.Dependencies.MetaModuleId moduleId) { }
        public static JetBrains.ReSharper.Psi.Dependencies.ModuleIdFactory GetInstance(JetBrains.ProjectModel.ISolution solution) { }
        public JetBrains.ReSharper.Psi.Dependencies.MetaModuleId GetMetaModuleId(JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public JetBrains.ReSharper.Psi.Dependencies.MetaModuleId GetModuleId(JetBrains.ProjectModel.IModule module) { }
        public static string GetModuleId(JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public JetBrains.ReSharper.Psi.Dependencies.MetaModuleId InternModuleId(JetBrains.ReSharper.Psi.Dependencies.MetaModuleId id) { }
    }
    public class ModuleProperty
    {
        public static readonly JetBrains.ReSharper.Psi.Dependencies.ModuleProperty DEFAULT_NAMESPACE;
        public static readonly JetBrains.ReSharper.Psi.Dependencies.ModuleProperty IMPORTED_NAMESPACES;
        public static JetBrains.ReSharper.Psi.Dependencies.ModuleProperty CreateConditionalCompilationConstantProperty(string name) { }
        public JetBrains.ReSharper.Psi.Dependencies.Hash GetValueHashByModule(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.Dependencies.ModuleProperty ReadFrom(System.IO.BinaryReader reader) { }
        public void WriteTo(System.IO.BinaryWriter writer) { }
    }
    public class ModuleToNumberTable
    {
        public ModuleToNumberTable() { }
        public short this[JetBrains.ReSharper.Psi.Dependencies.MetaModuleId moduleId] { get; }
        public void RegisterModule(JetBrains.ReSharper.Psi.Dependencies.MetaModuleId moduleId) { }
        public void WriteTo(System.IO.BinaryWriter writer) { }
    }
    public class NumberToModuleTable
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.MetaModuleId> this[short number] { get; }
        public static JetBrains.ReSharper.Psi.Dependencies.NumberToModuleTable CreateForOneModule(JetBrains.ReSharper.Psi.Dependencies.ModuleIdFactory moduleIdFactory, JetBrains.ReSharper.Psi.Modules.IProjectPsiModule module) { }
        public static JetBrains.ReSharper.Psi.Dependencies.NumberToModuleTable ReadFrom(System.IO.BinaryReader reader) { }
    }
    public class static QualifierInfoExtensions { }
    public class SpecialDependencyKind
    {
        public static readonly JetBrains.ReSharper.Psi.Dependencies.SpecialDependencyKind ALL_ABSTRACT_MEMBERS;
        public static readonly JetBrains.ReSharper.Psi.Dependencies.SpecialDependencyKind FIELDS_CAN_AFFECT_UNMANAGED;
        public override string ToString() { }
    }
    public class SpecialHashableEntityInfo : JetBrains.ReSharper.Psi.Dependencies.IHashableEntityInfo
    {
        public SpecialHashableEntityInfo(JetBrains.ReSharper.Psi.Dependencies.Hash hash, string qualifierTypeCLRName, string name, JetBrains.ReSharper.Psi.Dependencies.SpecialDependencyKind kind) { }
        public JetBrains.ReSharper.Psi.Dependencies.Hash Hash { get; }
        public void AddDependenciesAndHashes(JetBrains.ReSharper.Psi.Dependencies.DependencyFactory dependencyFactory, JetBrains.Util.OneToListMap<JetBrains.ReSharper.ExternalProcessStorage.SolutionAnalysis.Dependency, JetBrains.ReSharper.Psi.Dependencies.Hash> dependencyToHashes) { }
    }
    public struct UsingsDependency
    {
        public static readonly System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.Dependencies.UsingsDependency> Comparer;
        public UsingsDependency(JetBrains.ReSharper.Psi.Dependencies.UsingsTypeInfo typeInfo, string name) { }
        public JetBrains.ReSharper.Psi.Dependencies.UsingsTypeInfo TypeInfo { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static void InitTestPresentationsMap() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static System.Nullable<JetBrains.ReSharper.Psi.Dependencies.UsingsDependency> ReadFrom(System.IO.BinaryReader reader, JetBrains.ReSharper.Psi.Dependencies.NumberToModuleTable table) { }
        public static void ReleaseTestPresentationsMap() { }
        public override string ToString() { }
        public void WriteTo(System.IO.BinaryWriter writer, JetBrains.ReSharper.Psi.Dependencies.ModuleToNumberTable table) { }
    }
    public struct UsingsTypeInfo
    {
        public readonly JetBrains.ReSharper.Psi.Dependencies.MetaModuleId ModuleId;
        public UsingsTypeInfo(string clrName, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static void InitTestPresentationsMap() { }
        public static System.Nullable<JetBrains.ReSharper.Psi.Dependencies.UsingsTypeInfo> ReadFrom(System.IO.BinaryReader reader, JetBrains.ReSharper.Psi.Dependencies.NumberToModuleTable table) { }
        public static void ReleaseTestPresentationsMap() { }
        public override string ToString() { }
        public void WriteTo(System.IO.BinaryWriter writer, JetBrains.ReSharper.Psi.Dependencies.ModuleToNumberTable table) { }
    }
}
namespace JetBrains.ReSharper.Psi.ExpectedTypes
{
    
    public class AnyTypeConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public AnyTypeConstraint([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IType defaultType) { }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, [JetBrains.Annotations.CanBeNullAttribute()] out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
    }
    public class ArrayTypeConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public ArrayTypeConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType defaultElementType) { }
        public ArrayTypeConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType defaultElementType, System.Nullable<int> expectedRank) { }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, [JetBrains.Annotations.CanBeNullAttribute()] out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
    public class CompositeConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint Create(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> constraints) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint Create(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> expectedTypes) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
    public abstract class ConvertibleFromConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        protected ConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType type) { }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public abstract bool Accepts(JetBrains.ReSharper.Psi.IType type);
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, [JetBrains.Annotations.CanBeNullAttribute()] out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        protected abstract JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType fromType);
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
    }
    public class ConvertibleFromExpressionTypeConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public ConvertibleFromExpressionTypeConstraint(JetBrains.ReSharper.Psi.IExpressionType expressionType, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule, bool acceptExplicit = False) { }
        public bool AcceptExplicit { get; }
        public JetBrains.ReSharper.Psi.IExpressionType Type { get; }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
    public abstract class ConvertibleToConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        protected ConvertibleToConstraint(JetBrains.ReSharper.Psi.IType type) { }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public abstract bool Accepts(JetBrains.ReSharper.Psi.IType type);
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        protected abstract JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType fromType);
        protected abstract JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleToConstraint(JetBrains.ReSharper.Psi.IType toType);
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        protected abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> SolveSubtypingForFrom(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters);
    }
    public abstract class ConvertibleToWithTypeInference : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        protected readonly System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> myInferrableTypeParameters;
        protected readonly bool myIsExactType;
        protected readonly JetBrains.ReSharper.Psi.Resolve.ISubstitution myOwnerSubstitution;
        protected readonly JetBrains.ReSharper.Psi.IType myTargetType;
        protected ConvertibleToWithTypeInference(JetBrains.ReSharper.Psi.IType targetType, bool isExactType, JetBrains.ReSharper.Psi.Resolve.ISubstitution ownerSubstitution, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, [JetBrains.Annotations.CanBeNullAttribute()] out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        protected abstract JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConstraintForArrayElementType(JetBrains.ReSharper.Psi.IType elementType);
        protected abstract JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConstraintForDelegateReturnType(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        protected abstract JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType type);
        protected abstract JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleToConstraint(JetBrains.ReSharper.Psi.IType type);
        public bool Equals(JetBrains.ReSharper.Psi.ExpectedTypes.ConvertibleToWithTypeInference other) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        protected abstract bool IsImplicitlyConvertible(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.IType inferredType);
    }
    public class EmptyConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.EmptyConstraint Instance;
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
    }
    public class ExactTypeConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public ExactTypeConstraint(JetBrains.ReSharper.Psi.IType type) { }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
    public class ExpectedType
    {
        public ExpectedType(JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint constraint, [JetBrains.Annotations.NotNullAttribute()] string expectedName, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeModifiers modifiers, JetBrains.ReSharper.Psi.ExpectedTypes.HeadType headType, JetBrains.ReSharper.Psi.ExpectedTypes.TailType tailType, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> nameRoots) { }
        public ExpectedType(JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint constraint) { }
        public ExpectedType(JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint constraint, JetBrains.ReSharper.Psi.ExpectedTypes.TailType tailType) { }
        public ExpectedType(JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint constraint, [JetBrains.Annotations.NotNullAttribute()] string expectedName, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeModifiers modifiers) { }
        public ExpectedType(JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType expectedType, JetBrains.ReSharper.Psi.ExpectedTypes.TailType newTailType) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint Constraint { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string ExpectedName { get; }
        public JetBrains.ReSharper.Psi.ExpectedTypes.HeadType Head { get; }
        public JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeModifiers Modifiers { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> NameRoots { get; }
        public JetBrains.ReSharper.Psi.ExpectedTypes.TailType Tail { get; }
        public bool Equals(JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class static ExpectedTypeConstraintExtensions
    {
        public static bool IsNullOrEmpty(this JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint constraint) { }
    }
    public enum ExpectedTypeMode
    {
        Completion = 0,
        BlackHole = 1,
        Precise = 2,
    }
    public enum ExpectedTypeModifiers
    {
        None = 0,
        LValue = 1,
        InitializedLValue = 2,
        Constant = 3,
    }
    public class static ExpectedTypesUtil
    {
        public static System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> GetEqualityConstraints(JetBrains.ReSharper.Psi.IType actualType, JetBrains.ReSharper.Psi.IType formalType, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IExpression expression, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeMode expectedTypeMode = 1) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypesForArrayElement(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> expectedTypesForArray) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType[] GetPossibleConcreteTypes([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint constraint) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType[] GetPossibleConcreteTypesForUnion([JetBrains.Annotations.NotNullAttribute()] this System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> expectedTypes) { }
        public static System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> GetSubtypingConstraintsForFrom(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParametersOfFrom, System.Func<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> createConvertibleTo, System.Func<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> createConvertibleFrom) { }
        public static System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> GetSubtypingConstraintsForTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParametersOfTo, System.Func<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> createConvertibleTo, System.Func<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> createConvertibleFrom) { }
        public static JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GuessTypesComposition(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> expressions) { }
        public static JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GuessTypesIntersection(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> expressions) { }
        public static JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GuessTypesIntersectionOrComposition(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> expressions) { }
    }
    public class HeadType : JetBrains.Util.EnumPattern
    {
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.HeadType None;
        protected HeadType([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] string text) { }
        public string GetText() { }
    }
    public interface IExpectedTypeConstraint
    {
        bool Accepts([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type);
        bool AcceptsWithTypeInference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, [JetBrains.Annotations.CanBeNullAttribute()] out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount);
        [JetBrains.Annotations.CanBeNullAttribute()]
        [System.ObsoleteAttribute("Use GetDefaultTypes instead")]
        JetBrains.ReSharper.Psi.IType GetDefaultType();
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IType[] GetTypesEffectively();
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters);
    }
    public interface IExpectedTypesProvider
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IExpression expression, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeMode mode = 1);
    }
    public class InvocationCandidate : JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner>
    {
        public InvocationCandidate([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IParametersOwner element) { }
        public InvocationCandidate([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IParametersOwner element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, bool isExtensionMethod = False) { }
        public bool IsExtensionMethod { get; }
        public JetBrains.ReSharper.Psi.ExpectedTypes.InvocationCandidate ApplySubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class IsEnumerableConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public IsEnumerableConstraint(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.Tree.ITreeNode context, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> possibleElementTypes) { }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, [JetBrains.Annotations.CanBeNullAttribute()] out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
    public class IsSubtypeOfConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public IsSubtypeOfConstraint(JetBrains.ReSharper.Psi.IType type) { }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
    public class JoinConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> Constraints { get; }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public static JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint Create(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> constraints) { }
        public static JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint Create(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> expectedTypes) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
    public class NullableTypeConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public NullableTypeConstraint(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleResolveContext) { }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
    }
    public class ReferenceTypeConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
    }
    public class SimpleTailType : JetBrains.ReSharper.Psi.ExpectedTypes.TailType
    {
        public SimpleTailType(string name, params JetBrains.ReSharper.Psi.Parsing.TokenNodeType[] nodeTypes) { }
        public override JetBrains.ReSharper.Psi.Parsing.TokenNodeType[] EvaluateTail(JetBrains.ProjectModel.ISolution solution, JetBrains.DocumentModel.IDocument document) { }
    }
    public abstract class SuperTypeConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        protected SuperTypeConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type) { }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        protected abstract JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertieblFrom(JetBrains.ReSharper.Psi.IType type);
        protected abstract JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertieblTo(JetBrains.ReSharper.Psi.IType type);
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        protected string GetPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType psiLanguageType) { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
    }
    public class TailType : JetBrains.Util.EnumPattern
    {
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType None;
        public TailType(string name) { }
        public virtual JetBrains.ReSharper.Psi.Parsing.TokenNodeType[] EvaluateTail(JetBrains.ProjectModel.ISolution solution, JetBrains.DocumentModel.IDocument document) { }
        public sealed class CaretTokenNodeType : JetBrains.ReSharper.Psi.Parsing.TokenNodeType
        {
            public static JetBrains.ReSharper.Psi.ExpectedTypes.TailType.CaretTokenNodeType Instance { get; }
            public override bool IsComment { get; }
            public override bool IsConstantLiteral { get; }
            public override bool IsIdentifier { get; }
            public override bool IsKeyword { get; }
            public override bool IsStringLiteral { get; }
            public override bool IsWhitespace { get; }
            public override string TokenRepresentation { get; }
            public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase Create(JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.TreeOffset startOffset, JetBrains.ReSharper.Psi.TreeOffset endOffset) { }
        }
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionMethods
{
    
    public interface IExtensionMethodRegistry
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery GetAllExtensionMethods(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext);
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionsAPI
{
    
    public abstract class AnonymousTypePointerBase : JetBrains.ReSharper.Psi.ITypePointer
    {
        protected AnonymousTypePointerBase(JetBrains.ReSharper.Psi.IAnonymousType anonymousType) { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        protected System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExtensionsAPI.AnonymousTypePointerBase.Descriptor> TypeDescriptor { get; }
        public abstract JetBrains.ReSharper.Psi.IType FindType();
        protected struct Descriptor
        {
            public bool IsKey;
            public string Name;
            public JetBrains.ReSharper.Psi.ITypePointer Pointer;
        }
    }
    public class static AttributeInstanceUtil
    {
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> CollectFromSuperMemberParameters(JetBrains.ReSharper.Psi.IParameter parameter, System.Func<JetBrains.ReSharper.Psi.IParameter, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance>> attributesGetter = null) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IAttributeInstance> CollectFromSuperMembers(JetBrains.ReSharper.Psi.IOverridableMember member, JetBrains.ReSharper.Psi.IClrTypeName clrName = null) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IAttributeInstance> CollectFromSuperMembers(JetBrains.ReSharper.Psi.IOverridableMember member, JetBrains.ReSharper.Psi.IClrTypeName clrName, System.Func<JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IAttributesSet> attributesGetter) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IAttributeInstance> CollectFromSuperMembers(JetBrains.ReSharper.Psi.IOverridableMember member, System.Func<JetBrains.ReSharper.Psi.IOverridableMember, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance>> attributesGetter) { }
        public static JetBrains.Util.LocalList<JetBrains.ReSharper.Psi.IAttributeInstance> CollectFromSuperTypes([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> Filter([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IAttributeInstance> attributes, JetBrains.ReSharper.Psi.IClrTypeName attributeClassClrName) { }
        public static bool HasAttributeInSuperMemberParameters(JetBrains.ReSharper.Psi.IParameter parameter, JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public static bool HasAttributeInSuperMembers(JetBrains.ReSharper.Psi.IOverridableMember member, JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public static bool HasAttributeInSuperMembers(JetBrains.ReSharper.Psi.IOverridableMember member, JetBrains.ReSharper.Psi.IClrTypeName clrName, System.Func<JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IAttributesSet> attributesGetter) { }
        public static bool HasAttributeInSuperTypes(JetBrains.ReSharper.Psi.ITypeElement typeElement, JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
    }
    public class static DebugUtil
    {
        public static void DumpNode(JetBrains.ReSharper.Psi.Tree.ITreeNode treeNode, System.IO.TextWriter writer) { }
        public static void DumpPsi(System.IO.TextWriter writer, JetBrains.ReSharper.Psi.Tree.ITreeNode root) { }
        public static void DumpPsi(System.IO.TextWriter writer, JetBrains.ReSharper.Psi.Tree.ITreeNode root, System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode, System.IO.TextWriter> nodeDumper) { }
        public static bool HasErrorElements(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public class DisableCodeFormatter : JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodecFactory
    {
        public override JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter GetCodeFormatter(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
    }
    public class EmptySecondaryLexingProcess : JetBrains.ReSharper.Psi.ExtensionsAPI.ISecondaryLexingProcess
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.ISecondaryLexingProcess Instance;
        public bool CanHandle(JetBrains.ProjectModel.ProjectFileType projectFileType) { }
        public JetBrains.ReSharper.Psi.Parsing.ILexer TryCreateCodeBehindLexer(JetBrains.ReSharper.Psi.Parsing.ILexer baseLexer) { }
    }
    public class ExplicitImplementation : JetBrains.ReSharper.Psi.IExplicitImplementation
    {
        public ExplicitImplementation(JetBrains.ReSharper.Psi.IOverridableMember member, JetBrains.ReSharper.Psi.IDeclaredType declaredType, string memberName, bool caseSensitive) { }
        public JetBrains.ReSharper.Psi.IDeclaredType DeclaringType { get; }
        public string MemberName { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.OverridableMemberInstance Resolve() { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class FileDependency
    {
        public FileDependency() { }
        public bool CanHandle(JetBrains.ProjectModel.IProjectFile projectFile) { }
        public string Dump(JetBrains.Util.FileSystemPath basePath) { }
        public System.Collections.Generic.ICollection<JetBrains.Util.FileSystemPath> GetContainerFiles(JetBrains.Util.FileSystemPath file) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.ICollection<JetBrains.Util.FileSystemPath> GetIncludedFiles(JetBrains.Util.FileSystemPath file) { }
        public void OnProjectFileRemoved(JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.Util.FileSystemPath path) { }
        public void UpdateDependencies(JetBrains.Util.OneToSetMap<JetBrains.Util.FileSystemPath, JetBrains.Util.FileSystemPath> immediateIncludes) { }
    }
    public class static FileDependencyEx
    {
        public static bool IsFileIncluded([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ExtensionsAPI.FileDependency fileDependency, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class FileDependencyTracker
    {
        public FileDependencyTracker(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.ISolution solution, JetBrains.ReSharper.Psi.ExtensionsAPI.FileDependency dependency, JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.DocumentManagers.DocumentManager documentManager, JetBrains.Application.ChangeManager changeManager, JetBrains.Application.IShellLocks shellLocks) { }
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.ReSharper.Psi.ExtensionsAPI.IGeneratedDocumentService))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    public class GeneratedDocumentServiceAttribute : JetBrains.ProjectModel.ProjectFileTypeAttribute
    {
        public GeneratedDocumentServiceAttribute(System.Type type) { }
    }
    public class static HashableEntityUtil
    {
        public static JetBrains.ReSharper.Psi.Dependencies.Hash CalcHashesForEnumMembers<TEnumMember>(System.Collections.Generic.Dictionary<TEnumMember, JetBrains.ReSharper.Psi.Dependencies.Hash> map, System.Collections.Generic.IEnumerable<TEnumMember> enumMembers, TEnumMember selectedMember, System.Func<TEnumMember, JetBrains.ReSharper.Psi.Tree.IExpression> getInitializerHandler)
            where TEnumMember :  class { }
        public static JetBrains.ReSharper.Psi.Dependencies.Hash PutGetterSetter(JetBrains.ReSharper.Psi.Dependencies.Hash hash, JetBrains.ReSharper.Psi.IProperty property) { }
    }
    public interface ICrossProjectAnonymousTypeImpl : JetBrains.ReSharper.Psi.IAnonymousType, JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType { }
    public interface IDomainSpecificSearcher
    {
        bool ProcessElement<TResult>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer);
        bool ProcessProjectItem<TResult>(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer);
    }
    public interface IDomainSpecificSearcherFactory
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateAnonymousTypeSearcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.AnonymousTypeDescriptor> typeDescription, bool caseSensitive);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateConstantExpressionSearcher(JetBrains.ReSharper.Psi.ConstantValue constantValue, bool onlyLiteralExpression);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateConstructorSpecialReferenceSearcher(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IConstructor> constructors);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateLateBoundReferenceSearcher(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> elements);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateMethodsReferencedByDelegateSearcher(JetBrains.ReSharper.Psi.IDelegate @delegate);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateReferenceSearcher(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> elements, bool findCandidates);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateTextOccurenceSearcher(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> elements);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateTextOccurenceSearcher(string subject);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<string> GetAllPossibleWordsInFile(JetBrains.ReSharper.Psi.IDeclaredElement element);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Search.ISearchDomain GetDeclaredElementSearchDomain([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement);
        JetBrains.Util.JetTuple<System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement>, System.Predicate<JetBrains.ReSharper.Psi.Search.IFindResultReference>, bool> GetDerivedFindRequest(JetBrains.ReSharper.Psi.Search.IFindResultReference result);
        JetBrains.Util.JetTuple<System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement>, bool> GetNavigateToTargets(JetBrains.ReSharper.Psi.IDeclaredElement element);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IDeclaredElement, System.Predicate<JetBrains.ReSharper.Psi.Search.FindResult>>> GetRelatedDeclaredElements(JetBrains.ReSharper.Psi.IDeclaredElement element);
        bool IsCompatibleWithLanguage(JetBrains.ReSharper.Psi.PsiLanguageType languageType);
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Search.FindResult> TransformNavigationTargets(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Search.FindResult> targets);
    }
    public interface IGeneratedDocumentService
    {
        void AssertValid(JetBrains.ReSharper.Psi.Tree.IFile generatedFile);
        bool CanHandle(JetBrains.ProjectModel.ProjectFileType projectFileType);
        JetBrains.ReSharper.Psi.ExtensionsAPI.ISecondaryLexingProcess CreateSecondaryLexingService(JetBrains.ProjectModel.ISolution solution, JetBrains.ReSharper.Psi.Parsing.MixedLexer mixedLexer, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile = null);
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Files.ICommitBuildResult> ExecuteSecondaryDocumentCommitWork(JetBrains.ReSharper.Psi.Files.PrimaryFileModificationInfo primaryFileModificationInfo, JetBrains.ReSharper.Psi.Files.CachedPsiFile cachedPsiFile, JetBrains.ReSharper.Psi.TreeTextRange oldTreeRange, string newText);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.ISecondaryDocumentGenerationResult Generate([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Files.PrimaryFileModificationInfo modificationInfo);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> GetSecondaryPsiLanguageTypes(JetBrains.ProjectModel.IProject project);
        bool IsSecondaryPsiLanguageType(JetBrains.ProjectModel.IProject project, JetBrains.ReSharper.Psi.PsiLanguageType language);
        JetBrains.ReSharper.Psi.Parsing.ILexerFactory LexerFactoryWithPreprocessor(JetBrains.ReSharper.Psi.PsiLanguageType primaryLanguage);
        void ProcessChangeFromGeneratedToPrimary(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.Util.TextRange range, string oldText, string newText, JetBrains.ReSharper.Psi.PsiLanguageType language);
        void ProcessChangeFromPrimaryToGenerated(JetBrains.ReSharper.Psi.TreeTextRange range, string oldText, string newText, JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator rangeTranslator, JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.Transactions.IPsiTransactionAction transactionAction);
        JetBrains.DocumentModel.DocumentRange TryFindNavigationRangeInPrimaryDocument(JetBrains.ReSharper.Psi.Tree.ITreeNode element);
    }
    public interface IIndependentInjectedPsiProvider : JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedPsiProvider
    {
        void CleanupNodeContextOnDelete(JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext nodeContext);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext CreateInjectedNodeContext(JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext fileContext, JetBrains.ReSharper.Psi.Tree.ITreeNode originalNode);
    }
    public interface IInjectedFileContext
    {
        JetBrains.ReSharper.Psi.Tree.IFile OriginalFile { get; }
        JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedPsiProvider Provider { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext> GetAllInjects();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext GetInjectForNode(JetBrains.ReSharper.Psi.Tree.ITreeNode originalNode);
        bool HasInjectedNodes();
    }
    public interface IInjectedFileHolder : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ICompositeElement, JetBrains.ReSharper.Psi.Impl.IResolveIsolationScope, JetBrains.ReSharper.Psi.ISandBox, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext FileContext { get; }
        JetBrains.ReSharper.Psi.Tree.IFile GeneratedFile { get; }
        JetBrains.ReSharper.Psi.Tree.ITreeNode OriginalNode { get; }
    }
    public interface IInjectedNodeContext
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext FileContext { get; }
        JetBrains.ReSharper.Psi.Tree.IFile GeneratedFile { get; }
        JetBrains.ReSharper.Psi.Tree.ITreeNode GeneratedNode { get; }
        JetBrains.ReSharper.Psi.Tree.ITreeNode OriginalContextNode { get; }
        JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator RangeTranslator { get; }
    }
    public interface IInjectedPsiProvider
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.PsiLanguageType GeneratedLanguage { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext CreateInjectedFileContext(JetBrains.ReSharper.Psi.Tree.IFile originalFile);
        void GeneratedFileChanged(JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext fileContext, JetBrains.ReSharper.Psi.Tree.ITreeNode generatedParent, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> deletedNodes, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> addedNodes, bool processImmediately);
        bool IsApplicable(JetBrains.ReSharper.Psi.PsiLanguageType originalLanguage);
        bool IsApplicableToNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext context);
        void OriginalFileChanged(JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext fileContext, JetBrains.ReSharper.Psi.Tree.ITreeNode originalParent, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> deletedNodes, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> addedNodes, bool processImmediately);
        void SynchronizeOriginalAndGenerated(JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext fileContext);
    }
    public class ImmediateChangeProcessingCookie { }
    public class static InjectedPsiExtensions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext GetInjectAt(this JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext context, JetBrains.ReSharper.Psi.TreeTextRange originalRange) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext GetInjectAt(this JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext context, JetBrains.DocumentModel.DocumentRange range) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext GetInjectForNodeOrParents(this JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext context, JetBrains.ReSharper.Psi.Tree.ITreeNode originalNode) { }
    }
    public interface IReferenceContextCodec : System.IDisposable
    {
        public event JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodeBindHandler OnReferenceBinded;
        public event JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodeSetDeclarationIdentityHandler OnSetDeclarationIdentity;
        public event JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodecIdentityHandler OnSetReferenceIdentity;
        public event JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodecSubtreeInsertedHandler OnSubtreeInserted;
        void CopyWithResolve(JetBrains.ReSharper.Psi.Tree.ITreeNode original, JetBrains.ReSharper.Psi.Tree.ITreeNode clone);
        JetBrains.ReSharper.Psi.ExtensionsAPI.IReferenceContextDecoder Encode(JetBrains.ReSharper.Psi.Tree.ITreeNode original, JetBrains.ReSharper.Psi.Tree.ITreeNode clone);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.IReference> ExtractBindableReferences(JetBrains.ReSharper.Psi.Tree.ITreeNode element);
    }
    public interface IReferenceContextDecoder
    {
        JetBrains.ReSharper.Psi.Tree.ITreeNode Decode();
    }
    public interface ISecondaryDocumentGenerationResult
    {
        JetBrains.Text.IBuffer Buffer { get; }
        JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        JetBrains.ReSharper.Psi.Parsing.ILexerFactory LexerFactory { get; }
        JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator SecondaryRangeTranslator { get; }
        void CommitChanges();
    }
    public interface ISecondaryLexingProcess
    {
        bool CanHandle(JetBrains.ProjectModel.ProjectFileType projectFileType);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Parsing.ILexer TryCreateCodeBehindLexer(JetBrains.ReSharper.Psi.Parsing.ILexer baseLexer);
    }
    public class static LowLevelModificationUtil
    {
        public static void AddChild(JetBrains.ReSharper.Psi.Tree.ITreeNode root, params JetBrains.ReSharper.Psi.Tree.ITreeNode[] nodes) { }
        public static void AddChildAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, [JetBrains.Annotations.NotNullAttribute()] params JetBrains.ReSharper.Psi.Tree.ITreeNode[] nodes) { }
        public static void AddChildBefore(JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, params JetBrains.ReSharper.Psi.Tree.ITreeNode[] nodes) { }
        public static void DeleteChild(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static void DeleteChildRange(JetBrains.ReSharper.Psi.Tree.ITreeNode first, JetBrains.ReSharper.Psi.Tree.ITreeNode last) { }
        public static void ReplaceChildRange(JetBrains.ReSharper.Psi.Tree.ITreeNode first, JetBrains.ReSharper.Psi.Tree.ITreeNode last, params JetBrains.ReSharper.Psi.Tree.ITreeNode[] nodes) { }
    }
    public delegate void ReferenceContextCodeBindHandler(JetBrains.ReSharper.Psi.Resolve.IReference oldReference, JetBrains.ReSharper.Psi.Resolve.IReference newReference, JetBrains.ReSharper.Psi.DeclaredElementInstance target);
    public class ReferenceContextCodec : JetBrains.ReSharper.Psi.ExtensionsAPI.IReferenceContextCodec, System.IDisposable
    {
        public ReferenceContextCodec() { }
        public event JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodeBindHandler OnReferenceBinded;
        public event JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodeSetDeclarationIdentityHandler OnSetDeclarationIdentity;
        public event JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodecIdentityHandler OnSetReferenceIdentity;
        public event JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodecSubtreeInsertedHandler OnSubtreeInserted;
        public void CopyWithResolve(JetBrains.ReSharper.Psi.Tree.ITreeNode original, JetBrains.ReSharper.Psi.Tree.ITreeNode clone) { }
        public void Dispose() { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IReferenceContextDecoder Encode(JetBrains.ReSharper.Psi.Tree.ITreeNode original, JetBrains.ReSharper.Psi.Tree.ITreeNode clone) { }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.IReference> ExtractBindableReferences(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        protected virtual System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.IReference> FindDependentReferences(JetBrains.ReSharper.Psi.Resolve.IReference reference, bool strict) { }
        public virtual JetBrains.ReSharper.Psi.Resolve.IReference MakeSafeReference(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
    }
    public class ReferenceContextCodecFactory : System.IDisposable
    {
        protected ReferenceContextCodecFactory() { }
        public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.IReferenceContextCodec CreateCodec(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        protected JetBrains.ReSharper.Psi.ExtensionsAPI.IReferenceContextCodec DelegateToPreviousFactory(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public virtual void Dispose() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public virtual JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter GetCodeFormatter(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
    }
    public delegate void ReferenceContextCodecIdentityHandler([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference orgReference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference clnReference);
    public delegate void ReferenceContextCodecSubtreeInsertedHandler([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode originalTree, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode copyTree);
    public delegate void ReferenceContextCodeSetDeclarationIdentityHandler(System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.Tree.IDeclaration> table);
    public class ReferenceIdentitySaver : JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodecFactory
    {
        public ReferenceIdentitySaver() { }
        public ReferenceIdentitySaver(JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceIdentitySaver previousIdentitySaver) { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.Tree.IDeclaration> DeclarationIdentityMap { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceIdentitySaver PreviousIdentitySaver { get; set; }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.IReference> ReferenceMap { get; }
        public event JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodecSubtreeInsertedHandler OnSubtreeInserted;
        public JetBrains.ReSharper.Psi.Resolve.IReference ClosureRemap(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.IReferenceContextCodec CreateCodec(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
    }
    public class SecondaryDocumentGenerationResult : JetBrains.ReSharper.Psi.ExtensionsAPI.ISecondaryDocumentGenerationResult
    {
        public SecondaryDocumentGenerationResult(string text, JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator secondaryRangeTranslator, JetBrains.ReSharper.Psi.Parsing.ILexerFactory lexerFactory) { }
        public JetBrains.Text.IBuffer Buffer { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        public JetBrains.ReSharper.Psi.Parsing.ILexerFactory LexerFactory { get; }
        public JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator SecondaryRangeTranslator { get; }
        public virtual void CommitChanges() { }
    }
    public class static SharedImplUtil
    {
        public const string MISSING_DECLARATION_NAME = "???";
        public static bool BindingTransaction<T>(ref T reference, [JetBrains.Annotations.InstantHandleAttribute()] System.Func<T, T> processor, [JetBrains.Annotations.InstantHandleAttribute()] System.Func<T, bool> resolveChecker)
            where T : JetBrains.ReSharper.Psi.Resolve.IReference { }
        public static T BindingTransaction<T>(T reference, [JetBrains.Annotations.InstantHandleAttribute()] System.Func<T, T> processor, [JetBrains.Annotations.InstantHandleAttribute()] System.Func<T, bool> resolveChecker)
            where T : JetBrains.ReSharper.Psi.Resolve.IReference { }
        public static JetBrains.ReSharper.Psi.AccessibilityDomain CalcAccessibilityDomain(JetBrains.ReSharper.Psi.ITypeMember member) { }
        public static JetBrains.ReSharper.Psi.AccessibilityDomain CalcAccessibilityDomain(JetBrains.ReSharper.Psi.ITypeMember member, JetBrains.ReSharper.Psi.AccessRights accessRights) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public static JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode GetDocCommentBlockNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetTypeParameterSuperTypes(JetBrains.ReSharper.Psi.ITypeParameter typeParameter, bool isValueType, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> constraints) { }
        public static bool IsDefaultConstructor(JetBrains.ReSharper.Psi.IConstructor ctor) { }
        public static void SetDocCommentBlockNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode block) { }
        public static void SetKeywordAtFirstPlace(bool value, JetBrains.ReSharper.Psi.Tree.ITreeNode root, JetBrains.ReSharper.Psi.Tree.ITokenNode keyword, JetBrains.ReSharper.Psi.Parsing.TokenNodeType keywordType) { }
    }
    public class TrivialContextCodecFactory : JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodecFactory
    {
        public TrivialContextCodecFactory(bool suppressCodeFormatter = False) { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.IReferenceContextCodec CreateCodec(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public override JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter GetCodeFormatter(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
    }
    public class TrivialExplicitImplementation : JetBrains.ReSharper.Psi.IExplicitImplementation
    {
        public TrivialExplicitImplementation(JetBrains.ReSharper.Psi.OverridableMemberInstance instance) { }
        public JetBrains.ReSharper.Psi.IDeclaredType DeclaringType { get; }
        public string MemberName { get; }
        public JetBrains.ReSharper.Psi.OverridableMemberInstance Resolve() { }
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2
{
    
    public abstract class CacheDeclaredElementBase : JetBrains.ReSharper.Psi.Caches.SymbolCache.ICacheTrieNodeOwner { }
    public abstract class CachedTypeMemberBase
    {
        protected CachedTypeMemberBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        protected internal JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration WeakDeclaration { get; set; }
        protected internal JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration WeakStubDeclaration { get; set; }
        public void AssertIsValid() { }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected internal abstract bool CanBindTo(JetBrains.ReSharper.Psi.Tree.IDeclaration declaration);
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration GetDeclaration() { }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile GetSingleOrDefaultSourceFile() { }
        public virtual JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedTypeMemberDeclaration GetStubOrFullDeclaration() { }
        protected virtual JetBrains.ReSharper.Psi.ITypeElement GetTypeElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
        public virtual bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public virtual bool IsValid() { }
    }
    public class Class : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ClassLikeTypeElement, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClass, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public Class(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Class.IClassPart part) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> Constants { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> Fields { get; }
        protected internal override bool AcceptsPart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart part) { }
        protected override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> CalcSuperTypes() { }
        public JetBrains.ReSharper.Psi.IDeclaredType GetBaseClassType() { }
        public override JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public JetBrains.ReSharper.Psi.MemberPresenceFlag GetMemberPresenceFlag() { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public override string ToString() { }
        public interface IClassPart : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ClassLikeTypeElement.IClassLikePart
        {
            JetBrains.ReSharper.Psi.IDeclaredType GetBaseClassType();
            JetBrains.ReSharper.Psi.MemberPresenceFlag GetMemberPresenceFlag();
        }
    }
    public abstract class ClassLikeTypeElement : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypeElement
    {
        protected ClassLikeTypeElement(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ClassLikeTypeElement.IClassLikePart part) { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        protected virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> CalcSuperTypes() { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes() { }
        public interface IClassLikePart
        {
            System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes();
            System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetTypeMembers();
        }
    }
    public abstract class DeclarationPart : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Part
    {
        protected DeclarationPart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedDeclaration2 cachedDeclaration, JetBrains.ReSharper.Psi.TreeOffset offset) { }
        protected DeclarationPart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader) { }
        protected JetBrains.ReSharper.Psi.TreeOffset Offset { get; set; }
        protected abstract byte SerializationTag { get; }
        protected void AssignDeclaredElement() { }
        protected abstract void AssignDeclaredElement(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedDeclaration2 declaration);
        protected static void AssignToCachedDeclaration(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedDeclaration2 declaration, JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        protected abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedDeclaration2 FindDeclaration(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedDeclaration2 candidateDeclaration);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public virtual JetBrains.ReSharper.Psi.Tree.IDeclaration GetDeclaration() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public virtual JetBrains.ReSharper.Psi.Tree.IDeclaration GetStubOrFullDeclaration() { }
        protected static JetBrains.ReSharper.Psi.TreeOffset OffsetByDeclaration(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedDeclaration2 declaration) { }
        protected internal override void Write(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IWriter writer) { }
    }
    public class Delegate : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypeElement, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IDelegate, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public Delegate(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Delegate.IDelegatePart part) { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        public JetBrains.ReSharper.Psi.IMethod InvokeMethod { get; }
        public override System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        protected internal override bool AcceptsPart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart part) { }
        public override JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes() { }
        public override string ToString() { }
        public interface IDelegatePart
        {
            JetBrains.ReSharper.Psi.IParameter[] Parameters { get; }
            JetBrains.ReSharper.Psi.IType ReturnType { get; }
            JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        }
    }
    public class Enum : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypeElement, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IEnum, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public Enum(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Enum.IEnumPart part) { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IField> EnumMembers { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        protected internal override bool AcceptsPart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart part) { }
        public override JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes() { }
        public JetBrains.ReSharper.Psi.IType GetUnderlyingType() { }
        public override string ToString() { }
        public interface IEnumPart
        {
            System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IField> Fields { get; }
            JetBrains.ReSharper.Psi.IType GetUnderlyingType();
        }
    }
    public interface ICacheBuilder
    {
        void AddDeclaredMemberName(string name);
        void AddImplicitMemberName(string name);
        void CreateProjectFilePart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ProjectFilePart projectFilePart);
        void EndPart();
        string Intern(string str);
        void StartPart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Part part);
    }
    public interface ICachedDeclaration2 : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IDeclaredElement CacheDeclaredElement { get; set; }
    }
    public interface ICachedTypeMemberDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IDeclaredElement CachedDeclaredElement { get; set; }
    }
    public interface ILanguageCacheProvider : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IPartReader
    {
        System.Nullable<JetBrains.ReSharper.Psi.Caches.PersistentCachesUniqueIds> StubTreeNodeCacheUniqueId { get; }
        void BuildCache([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IFile file, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICacheBuilder builder);
        void BuildCache([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ISandBox sandBox, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICacheBuilder builder);
        bool CacheEmptyCompositeElement(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ICompositeElement compositeElement);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> GetAffectedOnPsiModulePropertiesChange([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType GetNodeType(int index);
        bool IsCachableTreeNode(JetBrains.ReSharper.Psi.Tree.ITreeNode treeNode);
        bool IsCaseSensitive(JetBrains.ReSharper.Psi.Modules.IPsiModule module);
        bool NeedCacheUpdate([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode elementContainingChanges, JetBrains.ReSharper.Psi.PsiChangedElementType type);
    }
    public class Interface : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ClassLikeTypeElement, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IInterface, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public Interface(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Interface.IInterfacePart part) { }
        protected override JetBrains.ReSharper.Psi.MemberDecoration Modifiers { get; }
        protected internal override bool AcceptsPart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart part) { }
        protected override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> CalcSuperTypes() { }
        public override JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public override string ToString() { }
        public interface IInterfacePart : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ClassLikeTypeElement.IClassLikePart { }
    }
    public interface IPartReader
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ProjectFilePart LoadProjectFilePart([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ProjectFilePartsTree tree, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Part ReadPart(byte tag, JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader);
    }
    public interface IReader
    {
        bool IsOk { get; }
        bool ReadBool();
        byte ReadByte();
        System.DateTime ReadDateTime();
        JetBrains.ReSharper.Psi.PreProcessingDirective[] ReadDirectives();
        int ReadInt();
        JetBrains.ReSharper.Psi.PsiLanguageType ReadLanguageType();
        string ReadString();
        string[] ReadStringArray();
        ushort ReadUShort();
    }
    public interface IWriter
    {
        void WriteBool(bool b);
        void WriteByte(byte b);
        void WriteDateTime(System.DateTime dateTime);
        void WriteDirectives(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.PreProcessingDirective> directives);
        void WriteInt(int i);
        void WriteLanguageType(JetBrains.ReSharper.Psi.PsiLanguageType languageType);
        void WriteRecordNumber(int recordNumber);
        void WriteString(string s);
        void WriteStringArray(string[] array);
        void WriteUShort(ushort u);
        void WriteVersion(int version);
    }
    public abstract class NamespacePart : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.DeclarationPart
    {
        protected NamespacePart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedDeclaration2 declaration, JetBrains.ReSharper.Psi.TreeOffset offset, string shortName) { }
        protected NamespacePart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader) { }
        public JetBrains.ReSharper.Psi.INamespace Namespace { get; }
        public string ShortName { get; }
        protected override void AssignDeclaredElement(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedDeclaration2 declaration) { }
        public void Unbind() { }
        protected internal override void Write(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IWriter writer) { }
    }
    public abstract class Part
    {
        protected Part() { }
        public JetBrains.ReSharper.Psi.PsiLanguageType LanguageType { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Part Parent { get; }
        public virtual void BuildStub(System.Text.StringBuilder text, System.Func<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Part, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Part>> childrenSelector, System.Collections.Generic.Dictionary<int, JetBrains.Util.Pair<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.DeclarationPart, JetBrains.ReSharper.Psi.IDeclaredElement>> offsetMap) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Part> Children() { }
        public virtual JetBrains.ReSharper.Psi.Tree.IFile GetFile() { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Part GetRoot() { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile GetSourceFile() { }
        protected internal abstract void Write(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IWriter writer);
    }
    public abstract class PartsTree
    {
        protected JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Part[] myParts;
        protected PartsTree(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public bool HasRoot { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType LanguageType { get; }
        public abstract JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Part Root { get; }
    }
    public enum PartType
    {
        TYPE = 0,
        NAMESPACE = 1,
    }
    public abstract class ProjectFilePart : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Part
    {
        protected ProjectFilePart(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        protected ProjectFilePart(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader) { }
        public abstract string[] AttributeClassNames { get; }
        public abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> AttributeInstances { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        public override JetBrains.ReSharper.Psi.Tree.IFile GetFile() { }
    }
    public class ProjectFilePartsTree : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.PartsTree
    {
        public ProjectFilePartsTree(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public override JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ProjectFilePart Root { get; }
        public bool ShouldSave { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public T BuildStub<T>(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.DeclarationPart part)
            where T : JetBrains.ReSharper.Psi.Tree.IDeclaration { }
        public string Dump(string indent, bool dumpHeader) { }
        public void ForceDirty() { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ProjectFilePartsTree ReadTree(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution) { }
        public void SaveTree(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IWriter writer) { }
    }
    public sealed class SandBoxPart : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Part
    {
        public JetBrains.ReSharper.Psi.ISandBox SandBox { get; }
        public override JetBrains.ReSharper.Psi.Tree.IFile GetFile() { }
        protected internal override void Write(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IWriter writer) { }
    }
    public class SandBoxPartsTree : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.PartsTree
    {
        public SandBoxPartsTree(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.SandBox sandBox, JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public override JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.ISandBox SandBox { get; }
    }
    public class SerializationError : System.Exception
    {
        public SerializationError(string message) { }
    }
    public abstract class SimpleProjectFilePart : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ProjectFilePart
    {
        protected SimpleProjectFilePart(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        protected SimpleProjectFilePart(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader) { }
        public override string[] AttributeClassNames { get; }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> AttributeInstances { get; }
    }
    public class Struct : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ClassLikeTypeElement, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IStruct, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public Struct(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.Struct.IStructPart part) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> Constants { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> Fields { get; }
        public bool HasHiddenInstanceFields { get; }
        protected override JetBrains.ReSharper.Psi.MemberDecoration Modifiers { get; }
        protected internal override bool AcceptsPart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart part) { }
        protected override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> CalcSuperTypes() { }
        public override JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public JetBrains.ReSharper.Psi.MemberPresenceFlag GetMemberPresenceFlag() { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public override string ToString() { }
        public interface IStructPart : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ClassLikeTypeElement.IClassLikePart
        {
            bool HasHiddenInstanceFields { get; }
            JetBrains.ReSharper.Psi.MemberPresenceFlag GetMembersPresenceFlag();
        }
    }
    public abstract class TypeElement : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.CacheDeclaredElementBase, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        protected JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart myParts;
        protected TypeElement(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart part) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        protected JetBrains.ReSharper.Psi.IConstructor DefaultConstructor { get; }
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExtern { get; }
        public bool IsOverride { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public virtual System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        protected virtual JetBrains.ReSharper.Psi.MemberDecoration Modifiers { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeElement> NestedTypes { get; }
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart Parts { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public string XMLDocId { get; }
        protected internal abstract bool AcceptsPart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart part);
        public void AddPart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart part) { }
        protected string BuildTypeParameterString() { }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart> EnumerateParts() { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.INamespace GetContainingNamespace() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public abstract JetBrains.ReSharper.Psi.DeclaredElementType GetElementType();
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers();
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile GetSingleOrDefaultSourceFile() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes();
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public virtual bool IsSynthetic() { }
        public bool IsValid() { }
        protected System.Collections.Generic.IList<TResult> ProcessParts<TPart, TResult>(System.Func<TPart, System.Collections.Generic.IEnumerable<TResult>> converter)
            where TPart :  class
            where TResult :  class { }
        public void RemovePart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart part) { }
    }
    [System.FlagsAttribute()]
    public enum TypeParameterConstraintFlags : byte
    {
        STRUCT = 1,
        CLASS = 2,
        NEW = 4,
    }
    public abstract class TypePart : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.DeclarationPart
    {
        protected TypePart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedDeclaration2 declaration, string shortName, int typeParameters) { }
        protected TypePart(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader) { }
        public abstract string[] AttributeClassNames { get; }
        public abstract bool CanBePartial { get; }
        public abstract string[] ExtendsListShortNames { get; }
        public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ExtensionMethodInfo[] ExtensionMethodInfos { get; }
        public abstract JetBrains.ReSharper.Psi.MemberDecoration Modifiers { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart NextPart { get; set; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypeElement TypeElement { get; }
        public int TypeParameterNumber { get; }
        protected override void AssignDeclaredElement(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ICachedDeclaration2 declaration) { }
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypeElement CreateTypeElement();
        public virtual JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IMethod> FindExtensionMethod(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ExtensionMethodInfo info) { }
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances();
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypeParameterConstraintFlags GetTypeParameterConstraintFlags(int index);
        public abstract JetBrains.ReSharper.Psi.Tree.IDeclaration GetTypeParameterDeclaration(int index);
        public abstract string GetTypeParameterName(int index);
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> GetTypeParameterSuperTypes(int index);
        public abstract JetBrains.ReSharper.Psi.TypeParameterVariance GetTypeParameterVariance(int index);
        public abstract bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrTypeName);
        protected internal override void Write(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IWriter writer) { }
    }
    public abstract class TypePartImplBase<T> : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart
        where T :  class, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration
    {
        protected TypePartImplBase(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader) { }
        protected TypePartImplBase(T declaration, string shortName, int typeParameters) { }
        protected static bool CheckDeclaration(JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected T GetStubDeclarationForSuperTypeResolve() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected T GetStubOrFullDeclaration() { }
        protected System.Collections.Generic.IList<TDeclaredElement> ProcessSubDeclaration<TDeclaredElement, TSubDeclaration>(System.Func<T, System.Collections.Generic.IEnumerable<TSubDeclaration>> converter)
            where TDeclaredElement :  class, JetBrains.ReSharper.Psi.IDeclaredElement
            where TSubDeclaration :  class, JetBrains.ReSharper.Psi.Tree.IDeclaration { }
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods
{
    
    public class static AdditionalQueries
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup(this JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodsIndex index, JetBrains.ReSharper.Psi.IType type, bool isCaseSensitive) { }
    }
    public sealed class AnyCandidateType : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ArrayElementCandidateType
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.AnyCandidateType INSTANCE;
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateTypeKind Kind { get; }
        public override string ToString() { }
    }
    public sealed class ArrayCandidateType : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateType
    {
        public ArrayCandidateType(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ArrayElementCandidateType elementType) { }
        public ArrayCandidateType(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ArrayElementCandidateType ElementType { get; }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateTypeKind Kind { get; }
        public override string ToString() { }
        public override void Write(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IWriter writer) { }
    }
    public abstract class ArrayElementCandidateType : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateType { }
    public abstract class CandidateType
    {
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateTypeKind Kind { get; }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateType Read(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader) { }
        public virtual string ToString() { }
        public virtual void Write(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IWriter writer) { }
    }
    public enum CandidateTypeKind
    {
        ANY = 0,
        DECLARED = 1,
        ARRAY = 2,
    }
    public class CompiledCandidateType
    {
        public CompiledCandidateType([JetBrains.Annotations.CanBeNullAttribute()] string typeName, bool isArray) { }
        public bool IsArray { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public string TypeName { get; }
    }
    public sealed class DeclaredCandidateType : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ArrayElementCandidateType
    {
        public DeclaredCandidateType(System.Collections.Generic.IEnumerable<string> e) { }
        public DeclaredCandidateType(string s) { }
        public DeclaredCandidateType(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader) { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateTypeKind Kind { get; }
        public System.Collections.Generic.IEnumerable<string> PossibleNames { get; }
        public override string ToString() { }
        public override void Write(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IWriter writer) { }
    }
    public sealed class EmptyExtensionMethodsIndex : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodsIndex
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.EmptyExtensionMethodsIndex INSTANCE;
        public System.Collections.Generic.IEnumerable<string> GetNames(bool isCaseSensitive) { }
        public bool HasExtensionMethods(string name, bool caseSensitive) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup(JetBrains.ReSharper.Psi.ITypeElement typeElement, bool arrayType) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup(string shortName, JetBrains.ReSharper.Psi.ITypeElement typeElement, bool isArray, bool isCaseSensitive) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup(string name) { }
    }
    public enum ExtensionMethodAccessibility
    {
        Accessible = 0,
        AccessibleWithReference = 1,
        NotAccessible = 2,
    }
    public class ExtensionMethodInfo : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy
    {
        public ExtensionMethodInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateType candidateType, int hash, string shortName) { }
        public ExtensionMethodInfo(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IReader reader) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateType CandidateType { get; }
        public int Hash { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypePart Owner { get; set; }
        public string ShortName { get; }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IMethod> GetMethods(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override string ToString() { }
        public void Write(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.IWriter writer) { }
    }
    public abstract class ExtensionMethodsIndex<TTypeRepr, TMethodRepr> : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodsIndex
    
        where TMethodRepr : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy
    {
        protected ExtensionMethodsIndex() { }
        public bool IsEmpty { get; }
        public void Add(TMethodRepr info) { }
        protected abstract TTypeRepr GetCandidateType(TMethodRepr methodRepr);
        protected abstract TTypeRepr GetElementRepr(TTypeRepr type);
        public System.Collections.Generic.IEnumerable<string> GetNames(bool isCaseSensitive) { }
        protected abstract string GetTypeName(JetBrains.ReSharper.Psi.ITypeElement element);
        public bool HasExtensionMethods(string name, bool caseSensitive) { }
        protected abstract bool IsAny(TTypeRepr type);
        protected abstract bool IsArray(TTypeRepr type);
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup(string shortName, JetBrains.ReSharper.Psi.ITypeElement typeElement, bool arrayType, bool isCaseSensitive) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup(JetBrains.ReSharper.Psi.ITypeElement typeElement, bool arrayType) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup(string name) { }
        protected abstract System.Collections.Generic.IEnumerable<string> PossibleTypes(TTypeRepr type);
        public void Remove(TMethodRepr info) { }
    }
    public class static ExtensionMethodsOfNamespace
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodsIndex> CompiledExtensionMethods(this JetBrains.ReSharper.Psi.INamespace @namespace) { }
        public static void FillExtensionMethods(this JetBrains.ReSharper.Psi.INamespace @namespace, ref JetBrains.Util.LocalList<> result) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodsIndex> SourceExtensionMethods(this JetBrains.ReSharper.Psi.INamespace @namespace) { }
    }
    public interface IExtensionMethodProxy
    {
        string ShortName { get; }
        JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IMethod> GetMethods(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
    }
    public interface IExtensionMethodsIndex
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<string> GetNames(bool isCaseSensitive);
        bool HasExtensionMethods(string name, bool caseSensitive);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup(string shortName, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement, bool arrayType, bool isCaseSensitive);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement, bool arrayType);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup();
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy> Lookup(string name);
    }
    public class SourceExtensionMethodsIndex : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ExtensionMethodsIndex<JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateType, JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ExtensionMethodInfo>
    {
        protected override JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateType GetCandidateType(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ExtensionMethodInfo methodRepr) { }
        protected override JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateType GetElementRepr(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateType type) { }
        protected override string GetTypeName(JetBrains.ReSharper.Psi.ITypeElement element) { }
        protected override bool IsAny(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateType type) { }
        protected override bool IsArray(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateType type) { }
        protected override System.Collections.Generic.IEnumerable<string> PossibleTypes(JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CandidateType type) { }
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries
{
    
    public class ApplicableToTypeQuery : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod>, System.Collections.IEnumerable
    {
        public System.Collections.Generic.IEnumerable<string> Names { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery ByName(string name, bool caseSensitive) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery CandidatesApplicableForType(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery CandidatesForType(JetBrains.ReSharper.Psi.IType type) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery FilterBy(System.Func<JetBrains.ReSharper.Psi.IMethod, bool> predicate) { }
        public System.Collections.IEnumerator GetEnumerator() { }
        public bool HasExtensionMethods(string name, bool caseSensitive) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery OfNamespace(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.INamespace> namespaces) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery OfNamespace(JetBrains.ReSharper.Psi.INamespace @namespace) { }
    }
    public class ClrRequest : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IRequest
    {
        public ClrRequest(JetBrains.ReSharper.Psi.IType type, string name, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.INamespace> namespaces) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> BaseTypes { get; }
        public bool IsCaseSensitive { get; }
        public string Name { get; set; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.INamespace> Namespaces { get; set; }
        public JetBrains.ReSharper.Psi.IType Type { get; set; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IRequest Clone() { }
    }
    public sealed class EmptyExtensionMethodsQuery : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod>, System.Collections.IEnumerable
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery INSTANCE;
        public System.Collections.Generic.IEnumerable<string> Names { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery ByName(string name, bool caseSensitive) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery CandidatesApplicableForType(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery CandidatesForType(JetBrains.ReSharper.Psi.IType type) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery FilterBy(System.Func<JetBrains.ReSharper.Psi.IMethod, bool> predicate) { }
        public System.Collections.IEnumerator GetEnumerator() { }
        public bool HasExtensionMethods(string name, bool caseSensitive) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery OfNamespace(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.INamespace> namespaces) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery OfNamespace(JetBrains.ReSharper.Psi.INamespace @namespace) { }
    }
    public class ExtensionMethodsQuery : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod>, System.Collections.IEnumerable
    {
        public ExtensionMethodsQuery(JetBrains.ReSharper.Psi.Caches.ISymbolCache symbolCache, JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IRequest request, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public System.Collections.Generic.IEnumerable<string> Names { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery ByName(string name, bool caseSensitive) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery CandidatesApplicableForType(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery CandidatesForType(JetBrains.ReSharper.Psi.IType type) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery FilterBy(System.Func<JetBrains.ReSharper.Psi.IMethod, bool> predicate) { }
        public System.Collections.IEnumerator GetEnumerator() { }
        public bool HasExtensionMethods(string name, bool caseSensitive) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery OfNamespace(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.INamespace> namespaces) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery OfNamespace(JetBrains.ReSharper.Psi.INamespace @namespace) { }
    }
    public class FilteringQuery : JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod>, System.Collections.IEnumerable
    {
        public System.Collections.Generic.IEnumerable<string> Names { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery ByName(string name, bool caseSensitive) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery CandidatesApplicableForType(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery CandidatesForType(JetBrains.ReSharper.Psi.IType type) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery FilterBy(System.Func<JetBrains.ReSharper.Psi.IMethod, bool> predicate) { }
        public System.Collections.Generic.IEnumerator<JetBrains.ReSharper.Psi.IMethod> GetEnumerator() { }
        public bool HasExtensionMethods(string name, bool caseSensitive) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery OfNamespace(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.INamespace> namespaces) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery OfNamespace(JetBrains.ReSharper.Psi.INamespace @namespace) { }
    }
    public interface IExtensionMethodsQuery : System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod>, System.Collections.IEnumerable
    {
        System.Collections.Generic.IEnumerable<string> Names { get; }
        JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery ByName(string name, bool caseSensitive);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery CandidatesApplicableForType(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery CandidatesForType(JetBrains.ReSharper.Psi.IType type);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery FilterBy(System.Func<JetBrains.ReSharper.Psi.IMethod, bool> predicate);
        bool HasExtensionMethods(string name, bool caseSensitive);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery OfNamespace(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.INamespace> namespaces);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery OfNamespace(JetBrains.ReSharper.Psi.INamespace @namespace);
    }
    public interface IRequest
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> BaseTypes { get; }
        bool IsCaseSensitive { get; }
        string Name { get; set; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.INamespace> Namespaces { get; set; }
        JetBrains.ReSharper.Psi.IType Type { get; set; }
        JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IRequest Clone();
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionsAPI.DeclaredElements
{
    
    public sealed class ArrayIndexer : JetBrains.ReSharper.Psi.ExtensionsAPI.DeclaredElements.SpecialIndexer
    {
        public ArrayIndexer(JetBrains.ReSharper.Psi.IArrayType type) { }
        public ArrayIndexer(JetBrains.ReSharper.Psi.IArrayType type, JetBrains.ReSharper.Psi.IType[] argumentTypes) { }
        public override JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public override JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public override JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public override bool Equals(object obj) { }
        public override JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public override JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public override int GetHashCode() { }
        public override JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public override bool IsValid() { }
        public override string ToString() { }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Identity")]
    public abstract class IdSubstitution : JetBrains.ReSharper.Psi.Resolve.ISubstitution
    {
        public abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> Domain { get; }
        public JetBrains.ReSharper.Psi.IType this[JetBrains.ReSharper.Psi.ITypeParameter tp] { get; }
        public JetBrains.ReSharper.Psi.IType this[JetBrains.ReSharper.Psi.IType t] { get; }
        public JetBrains.ReSharper.Psi.IType Apply(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public JetBrains.ReSharper.Psi.IType Apply(JetBrains.ReSharper.Psi.IType type) { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Apply(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Extend(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> typeParameters, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> values) { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Extend(System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.IType> map) { }
        public override int GetHashCode() { }
        public bool HasInDomain(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public bool IsIdempotent(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public abstract bool IsValid();
        public override string ToString() { }
    }
    public class MethodIdSubstitution : JetBrains.ReSharper.Psi.ExtensionsAPI.DeclaredElements.IdSubstitution, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeParameter>, System.Collections.IEnumerable
    {
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> Domain { get; }
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution Create(JetBrains.ReSharper.Psi.IMethod method) { }
        public System.Collections.Generic.IEnumerator<JetBrains.ReSharper.Psi.ITypeParameter> GetEnumerator() { }
        public override bool IsValid() { }
    }
    public sealed class PointerIndexer : JetBrains.ReSharper.Psi.ExtensionsAPI.DeclaredElements.SpecialIndexer
    {
        public PointerIndexer(JetBrains.ReSharper.Psi.IPointerType type, JetBrains.ReSharper.Psi.IType argumentType) { }
        public override JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public override JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public override JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public override bool Equals(object obj) { }
        public override JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public override JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public override int GetHashCode() { }
        public override JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public override bool IsValid() { }
        public override string ToString() { }
    }
    public abstract class SpecialIndexer : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.IProperty, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CanBeImplicitImplementation { get; }
        public bool CaseSensistiveName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExplicitImplementation> ExplicitImplementations { get; }
        public JetBrains.ReSharper.Psi.IAccessor Getter { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsDefault { get; }
        public bool IsExplicitImplementation { get; }
        public bool IsExtern { get; }
        public bool IsOverride { get; }
        public bool IsReadable { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public bool IsWritable { get; }
        public abstract JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public abstract JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public abstract JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAccessor Setter { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public abstract JetBrains.ReSharper.Psi.ITypeElement GetContainingType();
        public abstract JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember();
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public abstract JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public abstract bool IsValid();
    }
    public class TypeElementIdSubstitution : JetBrains.ReSharper.Psi.ExtensionsAPI.DeclaredElements.IdSubstitution
    {
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> Domain { get; }
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution Create(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public override bool IsValid() { }
    }
    public class static TypeElementImplUtil
    {
        public static JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.Resolve.ISubstitution> ComputeSubstitution([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement subtype, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement type) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetStubDeclarations(this JetBrains.ReSharper.Psi.ITypeElement iTypeElemennt) { }
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionsAPI.ExpectedTypes
{
    
    public abstract class TypeArgumentAnalyzer<TTypeUsageNode, TTypeArgumentList>
    
        where TTypeArgumentList :  class
    {
        protected readonly TTypeUsageNode myTypeUsageNode;
        protected TypeArgumentAnalyzer(TTypeUsageNode node) { }
        protected static void AddAllParameterizedMethods(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference, System.Collections.Generic.List<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter>>> types, bool forReferenceName) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType[] Calc() { }
        protected abstract JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConstraint(JetBrains.ReSharper.Psi.IType type);
        protected abstract JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint[] GetAdditionalTypes(JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter>> type);
        protected abstract JetBrains.ReSharper.Psi.ExpectedTypes.TailType GetTailType(int index, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> typeParameters);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract TTypeArgumentList GetTypeArgumentList(TTypeUsageNode typeUsage, out int index);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetTypeArgumentListContext(TTypeArgumentList typeArgumentList, out System.Collections.Generic.List<> types);
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionsAPI.Finder
{
    
    public interface ISearchGuru
    {
        bool CanContainReferences(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, object elementId);
        object GetElementId(JetBrains.ReSharper.Psi.IDeclaredElement element);
    }
    public class LateBoundReferenceSourceFileProcessor<TResult> : JetBrains.ReSharper.Psi.ExtensionsAPI.Finder.NamedThingsSearchSourceFileProcessor
    
    {
        public LateBoundReferenceSourceFileProcessor(JetBrains.ReSharper.Psi.Tree.ITreeNode treeNode, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> resultConsumer, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredElement> elements, System.Collections.Generic.ICollection<string> wordsInText, System.Collections.Generic.ICollection<string> referenceNames) { }
        protected override bool PreFilterReference(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        protected override JetBrains.ReSharper.Psi.Search.FindExecution ProcessReference(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
    }
    public abstract class NamedThingsSearchSourceFileProcessor
    {
        protected NamedThingsSearchSourceFileProcessor(JetBrains.ReSharper.Psi.Tree.ITreeNode root, System.Collections.Generic.ICollection<string> wordsInText, System.Collections.Generic.ICollection<string> referenceNames, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredElement> elements) { }
        protected System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.IDeclaredElement> Elements { get; }
        protected virtual JetBrains.ReSharper.Psi.Tree.ReferenceCollection GetReferences(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        protected abstract bool PreFilterReference(JetBrains.ReSharper.Psi.Resolve.IReference reference);
        protected abstract JetBrains.ReSharper.Psi.Search.FindExecution ProcessReference(JetBrains.ReSharper.Psi.Resolve.IReference reference);
        public JetBrains.ReSharper.Psi.Search.FindExecution Run() { }
        protected virtual bool ShouldVisitScope(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        protected bool SubTreeContainsText(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
    }
    public class ReferenceSearchSourceFileProcessor<TResult> : JetBrains.ReSharper.Psi.ExtensionsAPI.Finder.NamedThingsSearchSourceFileProcessor
    
    {
        public ReferenceSearchSourceFileProcessor(JetBrains.ReSharper.Psi.Tree.ITreeNode treeNode, bool findCandidates, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> resultConsumer, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredElement> elements, System.Collections.Generic.ICollection<string> wordsInText, System.Collections.Generic.ICollection<string> referenceNames) { }
        protected override bool PreFilterReference(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        protected override JetBrains.ReSharper.Psi.Search.FindExecution ProcessReference(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        protected virtual JetBrains.ReSharper.Psi.Resolve.IResolveResult Resolve(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.ReSharper.Psi.ExtensionsAPI.Finder.ISearchGuru))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    public class SearchGuruAttribute : JetBrains.ProjectModel.SolutionComponentAttribute { }
    public abstract class TextOccurrenceSearcherBase<TLanguage>
        where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType
    {
        protected TextOccurrenceSearcherBase(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredElement> elements) { }
        protected TextOccurrenceSearcherBase(string subject) { }
        protected abstract System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> Predicate { get; }
        public bool ProcessElement<TResult>(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer) { }
        public bool ProcessProjectItem<TResult>(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer) { }
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve
{
    
    public class CachingAccessContext : JetBrains.ReSharper.Psi.Resolve.IAccessContext
    {
        public CachingAccessContext(JetBrains.ReSharper.Psi.Resolve.IAccessContext context) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetAccessContainingTypeElement() { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public JetBrains.ReSharper.Psi.Resolve.QualifierKind GetQualifierKind() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement() { }
        public JetBrains.ReSharper.Psi.Resolve.Staticness GetStaticness() { }
    }
    public abstract class CheckedReferenceBase<TOwnerElement> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.TreeReferenceBase<TOwnerElement>, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ICheckedReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
        where TOwnerElement : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        protected CheckedReferenceBase(TOwnerElement owner) { }
        public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo GetResolveResult(JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable, string referenceName) { }
        public abstract JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] GetSymbolFilters();
    }
    public class static CheckedReferenceImplUtil
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ICheckedReference reference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable) { }
    }
    public class DistinctSymbolTable : JetBrains.ReSharper.Psi.Resolve.ISymbolTable
    {
        public DistinctSymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable baseTable) { }
        public DistinctSymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable baseTable, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> comparer) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> Comparer { get; }
        public void ForAllSymbolInfos(System.Action<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> processor) { }
        public JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet GetDependencySet() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfos(string name) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfosConstitutingResolveResult(string name, out JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
        public System.Collections.Generic.IEnumerable<string> Names() { }
    }
    public class EmptySymbolTable : JetBrains.ReSharper.Psi.Resolve.ISymbolTable
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ISymbolTable INSTANCE;
        public void ForAllSymbolInfos(System.Action<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> processor) { }
        public JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet GetDependencySet() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfos(string name) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfosConstitutingResolveResult(string name, out JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
        public System.Collections.Generic.IEnumerable<string> Names() { }
    }
    public interface ICachingScope : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.Resolve.ISymbolTable, int, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode> CachedTable { get; set; }
    }
    public interface ICheckedReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo GetResolveResult([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable, [JetBrains.Annotations.NotNullAttribute()] string referenceName);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] GetSymbolFilters();
    }
    public interface IDocCommentReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        string TagName { get; }
    }
    public interface IExtensionMethodResolveResult : JetBrains.ReSharper.Psi.Resolve.IResolveResult
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement>> CandidateExtensionInstances { get; }
        JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement> ElementExtensionInstance { get; }
    }
    public interface IIncrementalScope : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Resolve.ISymbolTable AddDeclarationsAfterElement(JetBrains.ReSharper.Psi.Resolve.ISymbolTable parentTable, JetBrains.ReSharper.Psi.Tree.ITreeNode element, int level, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode);
        JetBrains.ReSharper.Psi.Resolve.ISymbolTable AddDeclarationsBeforeElement(JetBrains.ReSharper.Psi.Resolve.ISymbolTable parentTable, JetBrains.ReSharper.Psi.Tree.ITreeNode element, int level, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode);
    }
    public abstract class ImplicitBaseConstructorInvocationReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.ManagedNonQualifiableReferenceBase<JetBrains.ReSharper.Psi.Tree.IDeclaration>
    {
        protected ImplicitBaseConstructorInvocationReference(JetBrains.ReSharper.Psi.Tree.IDeclaration ownerElement, JetBrains.ReSharper.Psi.IClass baseClass) { }
        public override JetBrains.ReSharper.Psi.Resolve.IReference BindTo(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public override JetBrains.ReSharper.Psi.Resolve.IReference BindTo(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public override JetBrains.ReSharper.Psi.Resolve.IAccessContext GetAccessContext(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override string GetName() { }
        public override JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetReferenceSymbolTable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override JetBrains.ReSharper.Psi.TreeTextRange GetTreeTextRange() { }
        public override bool IsValid() { }
        public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
    }
    public interface IQualifiableReferenceBase : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        bool IsQualified { get; }
    }
    public interface IQualifiableReferenceWithGlobalSymbolTable : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder { }
    public interface IReferenceWithGlobalSymbolTable : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable, JetBrains.ReSharper.Psi.Resolve.IAccessContext context);
    }
    public interface IReferenceWithQualifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IQualifier GetQualifier();
    }
    public interface IResolveInfo
    {
        JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ResolveErrorType { get; }
    }
    public interface IScope : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        int LevelDelta { get; }
        JetBrains.ReSharper.Psi.Resolve.ISymbolTable AddGlobalDeclarations(JetBrains.ReSharper.Psi.Resolve.ISymbolTable parentTable, int level, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode);
    }
    public class MultipleFilterSymbolTable : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.SymbolTableBase
    {
        public MultipleFilterSymbolTable(JetBrains.ReSharper.Psi.Resolve.ISymbolTable baseTable, params JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] filters) { }
        public override void ForAllSymbolInfos(System.Action<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> processor) { }
        public override JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet GetDependencySet() { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfos(string name) { }
        public override System.Collections.Generic.IEnumerable<string> Names() { }
    }
    public abstract class QualifiableCheckedReferenceBase<T> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.CheckedReferenceBase<T>, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
        where T : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        protected QualifiableCheckedReferenceBase(T owner) { }
        public abstract bool IsQualified { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        protected virtual JetBrains.ReSharper.Psi.Resolve.SymbolTableMode SymbolTableMode { get; }
        public abstract JetBrains.ReSharper.Psi.Resolve.IQualifier GetQualifier();
        public override JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetReferenceSymbolTable(bool useReferenceName) { }
        public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable, JetBrains.ReSharper.Psi.Resolve.IAccessContext context) { }
        public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveWithoutCache() { }
    }
    public class ReferenceCollector<T> : JetBrains.ReSharper.Psi.IRecursiveElementProcessor
        where T :  class, JetBrains.ReSharper.Psi.Resolve.IReference
    {
        public ReferenceCollector() { }
        public ReferenceCollector(System.Func<T, bool> acceptReference) { }
        public ReferenceCollector(System.Func<T, bool> acceptReference, bool firstClassOnly) { }
        public bool ProcessingIsFinished { get; }
        public System.Collections.Generic.IList<T> References { get; }
        public bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessAfterInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessBeforeInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public class static ReferenceCollectorExtensions
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ReferenceCollector<T> Process<T>(this JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ReferenceCollector<T> referenceCollector, JetBrains.ReSharper.Psi.Tree.ITreeNode element)
            where T :  class, JetBrains.ReSharper.Psi.Resolve.IReference { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ReferenceCollector<T> ProcessIncludingElement<T>(this JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ReferenceCollector<T> referenceCollector, JetBrains.ReSharper.Psi.Tree.ITreeNode element)
            where T :  class, JetBrains.ReSharper.Psi.Resolve.IReference { }
    }
    public sealed class ResolveResultWithInfo
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Dynamic;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo EmptyDynamic;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Ignore;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo Info;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.ReSharper.Psi.Resolve.IResolveResult Result;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Unresolved;
        public ResolveResultWithInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IResolveResult result, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo info) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ResolveErrorType { get; }
        public bool IsValid() { }
    }
    public class static ResolveResultWithInfoExtensions
    {
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> GetDynamicDeclaredElements(this JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo resultWithInfo) { }
    }
    public class static ResolveUtil
    {
        public static readonly JetBrains.Util.Key<JetBrains.ReSharper.Psi.DeclaredElementInstance> InProcessKey;
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable AddDeclarationsForProperDeclaredType(JetBrains.ReSharper.Psi.IDeclaredType type, int level, bool addObjectMembersForInterfaces, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode, JetBrains.ReSharper.Psi.Modules.IPsiModule module, System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.IDeclaredType> visited) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable AddTypeMembers(JetBrains.ReSharper.Psi.IDeclaredType type, int level, System.Nullable<int> inheritanceLevel, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode, System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.IDeclaredType> visited) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable BuildSymbolTableForReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
        public static bool CheckThatAllReferencesBelongToElement<T>(JetBrains.ReSharper.Psi.Resolve.IReference[] references, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static void ClearFakedResolveTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable CreateConstructorSymbolTable(JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable CreateConstructorSymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredType declaredType) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable CreateParametersTable(JetBrains.ReSharper.Psi.IParametersOwner function, int level) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CreateResolveResult<T>([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<T> elements)
            where T : JetBrains.ReSharper.Psi.IDeclaredElement { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable CreateSingletonSymbolTable(string alias, JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable CreateSingletonSymbolTable(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable CreateSymbolTable([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance> elements) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable CreateSymbolTable([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement>> elements, System.Func<string, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution, JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> extensionInfoCreator) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable CreateSymbolTable<T>([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<T> elements, int level)
            where T : JetBrains.ReSharper.Psi.IDeclaredElement { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable CreateSymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, int level = 0) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ITypeElement GetAccessContainingTypeElement(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ITypeMember GetAccessContainingTypeMember(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetOwnMembersSymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Impl.IResolveIsolationScope GetResolveIsolationScope(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTableByNamespace(JetBrains.ReSharper.Psi.INamespace element, JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool withReferences, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTableByReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTableByTypeElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTableByTypeElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement, int level, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveWithCache<T>([JetBrains.Annotations.NotNullAttribute()] T reference, [JetBrains.Annotations.NotNullAttribute()] System.Func<T, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo> resolveWithoutCache)
            where T : JetBrains.ReSharper.Psi.Resolve.IReference { }
        public static void SetFakedResolveTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IResolveResult result) { }
        public static void SetFakedResolveTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class SymbolInfo : JetBrains.ReSharper.Psi.Resolve.ISymbolInfo
    {
        public SymbolInfo(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public SymbolInfo(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public SymbolInfo(string aliasName, JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public SymbolInfo(string aliasName, JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, int importLevel, System.Nullable<int> inheritanceLevel) { }
        public System.Nullable<int> InheritanceLevel { get; }
        public int Level { get; }
        public string ShortName { get; }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.IDeclaredElement GetDeclaredElement() { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution GetSubstitution() { }
        public virtual JetBrains.ReSharper.Psi.Resolve.ISymbolInfo ReplaceLevel(int level) { }
        public virtual JetBrains.ReSharper.Psi.Resolve.ISymbolInfo ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution composedSubstitution) { }
        public override string ToString() { }
    }
    public class SymbolTable : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.SymbolTableBase
    {
        [System.ObsoleteAttribute("Use overload with IPsiServices instead")]
        public SymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution) { }
        public SymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiServices psiServices, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet dependencySet = null) { }
        public SymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Dependencies.DependencyStore dependencyStore, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet dependencySet = null) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo AddSymbol([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo AddSymbol([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, int level) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo AddSymbol([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, int level) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo AddSymbol([JetBrains.Annotations.NotNullAttribute()] string alias, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo AddSymbol([JetBrains.Annotations.NotNullAttribute()] string alias, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, int level = 0) { }
        public override void ForAllSymbolInfos(System.Action<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> processor) { }
        public override JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet GetDependencySet() { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfos(string name) { }
        public override System.Collections.Generic.IEnumerable<string> Names() { }
    }
    public abstract class SymbolTableBase : JetBrains.ReSharper.Psi.Resolve.ISymbolTable
    {
        protected static readonly System.Collections.Generic.IEqualityComparer<string> NameComparer;
        protected const System.StringComparison NameComparison = 5;
        public abstract void ForAllSymbolInfos(System.Action<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> processor);
        public abstract JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet GetDependencySet();
        public abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfos(string name);
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfosConstitutingResolveResult(string name, out JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
        public abstract System.Collections.Generic.IEnumerable<string> Names();
    }
    public abstract class TreeReferenceBase<TOwnerElement> : JetBrains.Util.UserDataHolder, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
        where TOwnerElement : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly TOwnerElement myOwner;
        protected TreeReferenceBase([JetBrains.Annotations.NotNullAttribute()] TOwnerElement owner) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CurrentResolveResult { get; set; }
        public virtual bool HasMultipleNames { get; }
        public abstract JetBrains.ReSharper.Psi.Resolve.IReference BindTo(JetBrains.ReSharper.Psi.IDeclaredElement element);
        public abstract JetBrains.ReSharper.Psi.Resolve.IReference BindTo(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        public abstract JetBrains.ReSharper.Psi.Resolve.IAccessContext GetAccessContext();
        public virtual System.Collections.Generic.IEnumerable<string> GetAllNames() { }
        public TOwnerElement GetElement() { }
        public abstract string GetName();
        public abstract JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
        public JetBrains.ReSharper.Psi.Tree.ITreeNode GetTreeNode() { }
        public abstract JetBrains.ReSharper.Psi.TreeTextRange GetTreeTextRange();
        public virtual bool IsValid() { }
        public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve() { }
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveWithoutCache();
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters
{
    
    public class AccessRightsFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public AccessRightsFilter(JetBrains.ReSharper.Psi.Resolve.IAccessContext context) { }
        protected JetBrains.ReSharper.Psi.Resolve.IAccessContext Context { get; }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class AttributeFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public AttributeFilter(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public abstract class BetterMembersFilterBase : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.BetterMembersSelector<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo>, JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
    }
    public abstract class BetterMembersSelector<SYMBOL>
    
    {
        public System.Collections.Generic.IList<SYMBOL> FilterArray(System.Collections.Generic.IList<SYMBOL> data) { }
        protected virtual void InitializeData(System.Collections.Generic.IList<SYMBOL> data, out bool succeed) { }
        protected abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.BetterMembersSelector<SYMBOL>.OrderValues IsBetterCandidate(SYMBOL s1, SYMBOL s2);
        protected enum OrderValues<SYMBOL>
        
        {
            Worse = 0,
            NotComparable = 1,
            Better = 2,
            Equals = 3,
        }
    }
    public class EmbeddedInteropTypeFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.EmbeddedInteropTypeFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class EqualsAndReferenceEqualsFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public EqualsAndReferenceEqualsFilter(JetBrains.ReSharper.Psi.Resolve.IAccessContext context, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class ExplicitSubstitutionProvider : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public ExplicitSubstitutionProvider(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> typeParameterValues) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class ForwardedTypeCompletionFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public ForwardedTypeCompletionFilter(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class ForwardedTypeFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public ForwardedTypeFilter(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public abstract class ImportedElementsFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.Resolve.ISymbolFilter INSTANCE;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ISymbolFilter INSTANCE_FOR_COMPLETION;
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data);
        public static int GetMaxLevel(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data, out bool containsLowLevelElements) { }
    }
    public class InitializerReferenceFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public InitializerReferenceFilter(JetBrains.ReSharper.Psi.Resolve.IAccessContext context, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
        protected virtual JetBrains.ReSharper.Psi.IDeclaredElement GetInitializerOwner(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public class IsMethodFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.IsMethodFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class IsPublicFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.IsPublicFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class LocalModuleNamesFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public LocalModuleNamesFilter(JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool caseSensitive, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class NamespaceOnlyFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.NamespaceOnlyFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class NoEmptyNamespaceFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public NoEmptyNamespaceFilter(JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, bool isCompletion, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class OverriddenFilter : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.OverriddenFilter<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo>, JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.OverriddenFilter CASE_SENSITIVE_INSTANCE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.OverriddenFilter INSTANCE;
        public OverriddenFilter(bool caseSensitiveNames) { }
        protected override JetBrains.ReSharper.Psi.Resolve.ISymbolInfo Info(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo s) { }
    }
    public abstract class OverriddenFilter<TSymbol> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.OverridenFilterBase<TSymbol>
    
    {
        protected OverriddenFilter() { }
        protected OverriddenFilter(bool caseSensitiveNames) { }
        protected override bool IsShadowedImpl(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo left, JetBrains.ReSharper.Psi.Resolve.ISymbolInfo byRight) { }
    }
    public sealed class OverridenByNameFilter : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.OverridenByNameFilter<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo>, JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.OverridenByNameFilter INSTANCE;
        protected override JetBrains.ReSharper.Psi.Resolve.ISymbolInfo Info(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo s) { }
    }
    public abstract class OverridenByNameFilter<TSymbol> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.OverridenFilterBase<TSymbol>
    
    {
        protected override bool IsShadowedImpl(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo left, JetBrains.ReSharper.Psi.Resolve.ISymbolInfo byRight) { }
    }
    public abstract class OverridenFilterBase<TSymbol>
    
    {
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<TSymbol> FilterArray(System.Collections.Generic.IList<TSymbol> data) { }
        protected abstract JetBrains.ReSharper.Psi.Resolve.ISymbolInfo Info(TSymbol s);
        protected abstract bool IsShadowedImpl(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo left, JetBrains.ReSharper.Psi.Resolve.ISymbolInfo byRight);
    }
    public class PreImportedElementsFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.PreImportedElementsFilter INSTANCE;
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class SkipPrivateImplementationsFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.SkipPrivateImplementationsFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class StaticEnumMethodsFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public StaticEnumMethodsFilter(JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class StaticFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public StaticFilter(JetBrains.ReSharper.Psi.Resolve.IAccessContext context) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class TypeOrNamespaceFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.TypeOrNamespaceFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class TypeParameterNumberFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public TypeParameterNumberFilter(int n) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public abstract class UseLocalVariableBeforeDeclarationFilterBase : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        protected readonly JetBrains.ReSharper.Psi.Tree.ITreeNode myUsage;
        protected UseLocalVariableBeforeDeclarationFilterBase(JetBrains.ReSharper.Psi.Tree.ITreeNode usage) { }
        public abstract JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        protected abstract bool IsCaseSensitive { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> datas) { }
        protected virtual JetBrains.ReSharper.Psi.Tree.ITreeNode GetDeclarationNode(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        protected virtual bool UsedBeforeDeclaration(JetBrains.ReSharper.Psi.Tree.ITreeNode declaration) { }
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed
{
    
    [System.Diagnostics.DebuggerDisplayAttribute("{Name}")]
    public sealed class CascadingCacheKey
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey[] AllKeys;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey CONSTANT_VALUE_CACHE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey IMPLICITLY_CONVERTED_TO_CACHE;
        public readonly int Index;
        [JetBrains.Annotations.UsedImplicitlyAttribute()]
        public readonly string Name;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey PRERESOLVE_CACHE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey RESOLVE_CACHE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey TYPE_CACHE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey VERIFICATION_CACHE;
    }
    public interface IManagedAccessContext
    {
        JetBrains.ReSharper.Psi.ITypeElement GetAccessContainingTypeElement(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule();
        JetBrains.ReSharper.Psi.Resolve.QualifierKind GetQualifierKind(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.Resolve.Staticness GetStaticness(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
    }
    public interface IManagedCheckedReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] GetSymbolFilters(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
    }
    public interface IManagedConstantValueOwnerImpl : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner
    {
        JetBrains.ReSharper.Psi.ConstantValue CachedConstantValue { get; set; }
        JetBrains.ReSharper.Psi.ConstantValue GetConstantValue(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
    }
    public interface IManagedConvertibleImpl : JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType CalculateImplicitlyConvertedTo(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
    }
    public interface IManagedExpressionImpl : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedConstantValueOwnerImpl, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.IExpressionType CachedExpressionType { get; set; }
        JetBrains.ReSharper.Psi.IExpressionType CalculateExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.ConstantValue GetConstantValue(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.Managed.ICalculationInfo info);
    }
    public interface IManagedNonQualifiableReferenceImpl : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedReferenceImpl, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedNonQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
    }
    public interface IManagedOnePhaseReferenceImpl : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedReferenceImpl, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedOnePhaseReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable);
    }
    public interface IManagedReferenceImpl : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
    {
        string Dump();
    }
    public interface IManagedTwoPhaseReferenceImpl : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedReferenceImpl, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedTwoPhaseReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CurrentPreResolveResult { get; set; }
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo PreResolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
    }
    public interface IManagedVariableImpl : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IType CachedType { get; set; }
        JetBrains.ReSharper.Psi.IType CalculateType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
    }
    public class ManagedAccessContextWrapper : JetBrains.ReSharper.Psi.Resolve.IAccessContext
    {
        public ManagedAccessContextWrapper(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedAccessContext accessContext, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetAccessContainingTypeElement() { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public JetBrains.ReSharper.Psi.Resolve.QualifierKind GetQualifierKind() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement() { }
        public JetBrains.ReSharper.Psi.Resolve.Staticness GetStaticness() { }
    }
    public abstract class ManagedCheckedReferenceBase<TOwner> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.ManagedNonQualifiableReferenceBase<TOwner>, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedCheckedReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
        where TOwner : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public ManagedCheckedReferenceBase(TOwner owner) { }
        public abstract JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] GetSymbolFilters(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
    }
    public class static ManagedCheckedReferenceUtil
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedCheckedReference reference, JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable) { }
    }
    public abstract class ManagedNonQualifiableReferenceBase<T> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.ManagedReferenceBase<T>, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedNonQualifiableReferenceImpl, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedReferenceImpl, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedNonQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
        where T : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        protected ManagedNonQualifiableReferenceBase(T owner) { }
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
    }
    public abstract class ManagedOnePhaseReferenceImplBase<TElement> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.ManagedQualifiedReferenceBase<TElement>, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedOnePhaseReferenceImpl, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedReferenceImpl, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedOnePhaseReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
        where TElement : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        protected ManagedOnePhaseReferenceImplBase(TElement owner) { }
        protected override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo FullResolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable) { }
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable);
    }
    public abstract class ManagedQualifiableCheckedReferenceBase<TOwner> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.ManagedOnePhaseReferenceImplBase<TOwner>, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedCheckedReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
        where TOwner : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        protected ManagedQualifiableCheckedReferenceBase(TOwner owner) { }
        public abstract JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] GetSymbolFilters(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable) { }
    }
    public abstract class ManagedQualifiedReferenceBase<T> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.ManagedReferenceBase<T>, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
        where T : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        protected ManagedQualifiedReferenceBase(T owner) { }
        public abstract bool IsQualified { get; }
        protected abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo FullResolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable);
        public abstract JetBrains.ReSharper.Psi.Resolve.IQualifier GetQualifier(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        public override JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetReferenceSymbolTable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public virtual JetBrains.ReSharper.Psi.Resolve.SymbolTableMode GetSymbolTableMode() { }
    }
    public abstract class ManagedReferenceBase<T> : JetBrains.Util.UserDataHolder, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedReferenceImpl, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
        where T : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly T myOwner;
        protected ManagedReferenceBase([JetBrains.Annotations.NotNullAttribute()] T owner) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CurrentResolveResult { get; set; }
        public virtual bool HasMultipleNames { get; }
        public abstract JetBrains.ReSharper.Psi.Resolve.IReference BindTo(JetBrains.ReSharper.Psi.IDeclaredElement element);
        public abstract JetBrains.ReSharper.Psi.Resolve.IReference BindTo(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        public virtual string Dump() { }
        public abstract JetBrains.ReSharper.Psi.Resolve.IAccessContext GetAccessContext(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        public JetBrains.ReSharper.Psi.Resolve.IAccessContext GetAccessContext() { }
        public virtual System.Collections.Generic.IEnumerable<string> GetAllNames() { }
        public abstract string GetName();
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public abstract JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetReferenceSymbolTable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetReferenceSymbolTable(bool useReferenceName) { }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode GetTreeNode() { }
        public abstract JetBrains.ReSharper.Psi.TreeTextRange GetTreeTextRange();
        public virtual bool IsValid() { }
    }
    public abstract class ManagedTwoPhaseReferenceImplBase<TElement> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.ManagedQualifiedReferenceBase<TElement>, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedReferenceImpl, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedTwoPhaseReferenceImpl, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedTwoPhaseReference, JetBrains.Util.IUserDataHolder
        where TElement : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        protected ManagedTwoPhaseReferenceImplBase(TElement owner) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CurrentPreResolveResult { get; set; }
        protected override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo FullResolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable) { }
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo PreResolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable);
        protected virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo RefineResolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo preResolve) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
    }
    public class ResolveContext : JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext
    {
        public ResolveContext([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        protected ResolveContext([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess calculationProcess) { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        public JetBrains.ReSharper.Psi.ConstantValue ConstantValue(JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner constantValueOwner) { }
        public JetBrains.ReSharper.Psi.ConstantValue ConstantValue(JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression expression, JetBrains.ReSharper.Psi.Resolve.Managed.ICalculationInfo info) { }
        public virtual JetBrains.ReSharper.Psi.IExpressionType ExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression expression) { }
        public JetBrains.ReSharper.Psi.IType GetImplicitlyConvertedTo(JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible convertible) { }
        public void Join(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo PreResolve(JetBrains.ReSharper.Psi.Resolve.Managed.IManagedTwoPhaseReference reference, JetBrains.ReSharper.Psi.Resolve.ISymbolTable table = null) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedOnePhaseReferenceImpl managedReference, JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveWithInfo(JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference reference) { }
        public JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext TryFork(System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.IType>> assumptions) { }
        public JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext TryForkOnImplicitlyConvertedTo(System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible, JetBrains.ReSharper.Psi.IType>> assumptions) { }
        public JetBrains.ReSharper.Psi.IType TypeOf(JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable managedVariable) { }
        public object Verify(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier verifier) { }
    }
    public class UniversalContext : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.ResolveContext
    {
        public UniversalContext([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference managedReference) { }
        public UniversalContext([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public UniversalContext([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public override JetBrains.ReSharper.Psi.IExpressionType ExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression expression) { }
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification
{
    
    public class ExpressionVerifier : JetBrains.ReSharper.Psi.IRecursiveElementProcessor
    {
        public ExpressionVerifier(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public bool ProcessingIsFinished { get; }
        public bool Success { get; }
        public bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessAfterInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessBeforeInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public interface IVerifier
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element);
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    public class VerifierAttribute : JetBrains.ReSharper.Psi.PsiSharedComponentAttribute { }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class VerifierRegistry
    {
        public VerifierRegistry(JetBrains.DataFlow.Lifetime lifetime, JetBrains.DataFlow.IViewable<JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier> verifiers) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier> this[JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType nodeType] { get; }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierRegistry GetInstance(JetBrains.ProjectModel.ISolution solution) { }
    }
}
namespace JetBrains.ReSharper.Psi.ExtensionsAPI.Tree
{
    
    public abstract class AbstractNodeTypeIndexer
    {
        protected AbstractNodeTypeIndexer() { }
        public void Add(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType nodeType, int index) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType GetNodeType(int index) { }
    }
    public abstract class BindedToBufferLeafElement : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase
    {
        protected BindedToBufferLeafElement(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType nodeType, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.TreeOffset startOffset, JetBrains.ReSharper.Psi.TreeOffset endOffset) { }
        public JetBrains.Text.IBuffer Buffer { get; }
        public int Length { get; }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType { get; }
        public JetBrains.ReSharper.Psi.TreeOffset Offset { get; }
        public override System.Text.StringBuilder GetText(System.Text.StringBuilder to) { }
        public override string GetText() { }
        public override JetBrains.Text.IBuffer GetTextAsBuffer() { }
        public override int GetTextLength() { }
        public override string ToString() { }
    }
    public class ClosedChameleonElement : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.BindedToBufferLeafElement, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.IClosedChameleonBody, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public ClosedChameleonElement(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType nodeType, JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.TreeOffset startOffset, JetBrains.ReSharper.Psi.TreeOffset endOffset) { }
        public override JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode Parse(System.Func<JetBrains.ReSharper.Psi.Parsing.IParser, JetBrains.ReSharper.Psi.Tree.ITreeNode> parseFunc) { }
    }
    public abstract class CompositeElement : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ICompositeElement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement firstChild;
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement lastChild;
        protected CompositeElement() { }
        public override JetBrains.ReSharper.Psi.Tree.ITreeNode FirstChild { get; }
        public override JetBrains.ReSharper.Psi.Tree.ITreeNode LastChild { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode AddChild(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode AddChildAfter(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor) { }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode AddChildBefore(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor) { }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode AddChildRange(JetBrains.ReSharper.Psi.Tree.ITreeNode first, JetBrains.ReSharper.Psi.Tree.ITreeNode last) { }
        public void AppendNewChild(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) { }
        public JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<T> AsChildrenEnumerable<T>(short role)
            where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        protected virtual void ClearCachedData() { }
        protected internal override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement DeepClone(JetBrains.ReSharper.Psi.Impl.TreeNodeCopyContext context) { }
        public void DeleteChildRange(JetBrains.ReSharper.Psi.Tree.ITreeNode first, JetBrains.ReSharper.Psi.Tree.ITreeNode last) { }
        public override JetBrains.ReSharper.Psi.Tree.IChameleonNode FindChameleonWhichCoversRange(JetBrains.ReSharper.Psi.TreeTextRange textRange) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement FindChildByRole(short childRole) { }
        public T FindChildByRole<T>(short childRole, System.Predicate<T> predicate)
            where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<T> FindChildrenByRole<T>(short childRole)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<T> FindChildrenByRole<T>(System.Predicate<short> rolePredicate)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<T> FindChildrenByRole<T>(params short[] childRoles)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public T FindDescendant<T>([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Predicate<T> predicate)
            where T : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement { }
        public override int FindElementsAtInternal(JetBrains.ReSharper.Psi.TreeOffset offset, System.Collections.Generic.List<JetBrains.ReSharper.Psi.Tree.ITreeNode> result) { }
        public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<T> FindListOfChildrenByRole<T>(short childRole)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<T> FindListOfChildrenByRole<T>(short childRole, System.Predicate<T> predicate)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public override JetBrains.ReSharper.Psi.Tree.ITreeNode FindNodeAt(JetBrains.ReSharper.Psi.TreeTextRange textRange) { }
        public virtual short GetChildRole(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement GetNextFilteredChild([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) { }
        public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement GetPrevFilteredChild([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) { }
        public override System.Text.StringBuilder GetText(System.Text.StringBuilder to) { }
        public override string GetText() { }
        public override JetBrains.Text.IBuffer GetTextAsBuffer() { }
        public override int GetTextLength() { }
        public override bool IsStub() { }
        protected override void PreInit() { }
        public void SetFakeTextLength(int textLength) { }
        public virtual void SubTreeChanged(JetBrains.ReSharper.Psi.Tree.ITreeNode elementContainingChanges, JetBrains.ReSharper.Psi.PsiChangedElementType changeType) { }
    }
    public class static CompositeElementExtensions
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement GetChildByRole([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ICompositeElement element, short childRole) { }
    }
    public abstract class CompositeNodeType : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement>
    {
        protected CompositeNodeType(string s, int index) { }
    }
    public abstract class CompositeNodeType<T> : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ICompositeNodeType
        where T : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement
    {
        protected CompositeNodeType(string s, int index) { }
        public abstract T Create();
    }
    public class ErrorElement : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement, JetBrains.ReSharper.Psi.Tree.IErrorElement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType NODE_TYPE;
        public ErrorElement(string errorDescription) { }
        public virtual string ErrorDescription { get; set; }
        public override JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType { get; }
        public override bool IsFiltered() { }
        public override string ToString() { }
    }
    public abstract class FileElementBase : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.IFileImpl, JetBrains.ReSharper.Psi.Impl.INodeUserDataHolderOwner, JetBrains.ReSharper.Psi.Tree.IFile, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        protected FileElementBase() { }
        public JetBrains.ReSharper.Psi.Parsing.CachingLexer CachingLexer { get; }
        public virtual bool CanContainCaseInsensitiveReferences { get; }
        public JetBrains.ReSharper.Psi.Files.IDocumentRangeTranslator DocumentRangeTranslator { get; set; }
        public JetBrains.ReSharper.Psi.Parsing.ILexerFactory LexerFactory { get; set; }
        public JetBrains.ReSharper.Psi.Impl.NodeUserDataHolder NodeUserDataHolder { get; }
        public JetBrains.ReSharper.Psi.Resolve.IReferenceProvider ReferenceProvider { get; set; }
        public JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator SecondaryRangeTranslator { get; set; }
        public JetBrains.ReSharper.Psi.Parsing.TokenBuffer TokenBuffer { get; set; }
        public long GetAggregatedTimestampOnCreation() { }
        public override JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public override JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.Files.PsiFileModificationInfo GetReParseResult(JetBrains.ReSharper.Psi.TreeTextRange modifiedRange, string text) { }
        public override JetBrains.ReSharper.Psi.IPsiSourceFile GetSourceFile() { }
        public void Invalidate() { }
        public bool IsInjected() { }
        public override bool IsValid() { }
        protected override void PreInit() { }
        public virtual JetBrains.ReSharper.Psi.Tree.IFile ReParse(JetBrains.ReSharper.Psi.TreeTextRange modifiedRange, string text) { }
        public void SetAggregatedTimestampOnCreation(long aggregatedTimestampOnCreation) { }
        public void SetSourceFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public void SetSourceFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, bool setAggregatedTimestamp) { }
        public override void SubTreeChanged(JetBrains.ReSharper.Psi.Tree.ITreeNode elementContainingChanges, JetBrains.ReSharper.Psi.PsiChangedElementType changeType) { }
    }
    public interface IClosedChameleonBody : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITreeNode Parse(System.Func<JetBrains.ReSharper.Psi.Parsing.IParser, JetBrains.ReSharper.Psi.Tree.ITreeNode> parseFunc);
    }
    public interface ICompositeElement : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement FindChildByRole(short childRole);
        short GetChildRole(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child);
    }
    public interface ICompositeNodeType
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create();
    }
    public interface IFileImpl : JetBrains.ReSharper.Psi.Impl.INodeUserDataHolderOwner, JetBrains.ReSharper.Psi.Tree.IFile, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Files.IDocumentRangeTranslator DocumentRangeTranslator { get; set; }
        JetBrains.ReSharper.Psi.Parsing.ILexerFactory LexerFactory { get; set; }
        JetBrains.ReSharper.Psi.Resolve.IReferenceProvider ReferenceProvider { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator SecondaryRangeTranslator { get; set; }
        JetBrains.ReSharper.Psi.Parsing.TokenBuffer TokenBuffer { get; set; }
        JetBrains.ReSharper.Psi.Tree.IChameleonNode FindChameleonWhichCoversRange(JetBrains.ReSharper.Psi.TreeTextRange range);
        void SetSourceFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
    }
    public abstract class LeafElementBase : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement
    {
        public override JetBrains.ReSharper.Psi.Tree.ITreeNode FirstChild { get; }
        public override JetBrains.ReSharper.Psi.Tree.ITreeNode LastChild { get; }
        public override int FindElementsAtInternal(JetBrains.ReSharper.Psi.TreeOffset offset, System.Collections.Generic.List<JetBrains.ReSharper.Psi.Tree.ITreeNode> result) { }
        public override JetBrains.ReSharper.Psi.Tree.ITreeNode FindNodeAt(JetBrains.ReSharper.Psi.TreeTextRange textRange) { }
        public override bool IsStub() { }
    }
    public class static ModificationUtil
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static T AddChild<T>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode root, [JetBrains.Annotations.NotNullAttribute()] T child)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static T AddChildAfter<T>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, [JetBrains.Annotations.NotNullAttribute()] T child)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static T AddChildAfter<T>(JetBrains.ReSharper.Psi.Tree.ITreeNode parent, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, T child)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static T AddChildBefore<T>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, [JetBrains.Annotations.NotNullAttribute()] T child)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static T AddChildBefore<T>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode parent, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, T child)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ITreeRange AddChildRangeAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITreeRange range) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ITreeRange AddChildRangeAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode parent, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITreeRange range) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ITreeRange AddChildRangeBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITreeRange range) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ITreeRange AddChildRangeBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode parent, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITreeRange range) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode CloneNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode> clonedNodeAction) { }
        public static void DeferredDecode(System.Action action) { }
        public static void DeleteChild([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode child) { }
        public static void DeleteChildRange([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode first, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode last) { }
        public static void DeleteChildRange([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITreeRange range) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static T ReplaceChild<T>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode oldChild, [JetBrains.Annotations.NotNullAttribute()] T newChild)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    }
    public abstract class NodeType
    {
        protected JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType myBaseNodeType;
        protected NodeType(string s, int index) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType BaseNodeType { get; }
        public override string ToString() { }
    }
    public class NodeTypeDictionary<TValue>
    
    {
        public NodeTypeDictionary(System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, TValue>> contents) { }
        public NodeTypeDictionary(int count, System.Func<int, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> nodes, System.Func<int, TValue> values) { }
        protected NodeTypeDictionary(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<TValue> instance1, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<TValue> instance2, System.Func<TValue, TValue, TValue> conversion) { }
        protected TValue this[int i] { get; }
        public TValue this[JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType type] { get; }
    }
    public class NodeTypeSet : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeDictionary<bool>, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType>, System.Collections.IEnumerable
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet Empty;
        public NodeTypeSet(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> types) { }
        public NodeTypeSet(params JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType[] types) { }
        protected NodeTypeSet(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet instance1, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet instance2, System.Func<bool, bool, bool> conversion) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet Except(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet set) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet Except(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType nodeType) { }
        public System.Collections.Generic.IEnumerator<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> GetEnumerator() { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet Intersect(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet set) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet Union(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet set) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet Union(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType nodeType) { }
    }
    public struct NodeUserData : JetBrains.Util.IUserDataHolder
    {
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<object, object>> EnumerateData() { }
        public T GetData<T>(JetBrains.Util.Key<T> key)
            where T :  class { }
        public void PutData<T>(JetBrains.Util.Key<T> key, T val)
            where T :  class { }
    }
    public class SandBox : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope, JetBrains.ReSharper.Psi.Impl.INodeUserDataHolderOwner, JetBrains.ReSharper.Psi.Impl.IResolveIsolationScope, JetBrains.ReSharper.Psi.ISandBox, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public JetBrains.ReSharper.Psi.Tree.ITreeNode ContextNode { get; }
        public JetBrains.ReSharper.Psi.SandBoxContextType ContextType { get; }
        public override JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        public int LevelDelta { get; }
        public System.Nullable<int> ModificationStamp { get; set; }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType { get; }
        public JetBrains.ReSharper.Psi.Impl.NodeUserDataHolder NodeUserDataHolder { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable AddGlobalDeclarations(JetBrains.ReSharper.Psi.Resolve.ISymbolTable parentTable, int level, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
        public static void CreateSandBoxFor([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule, JetBrains.ReSharper.Psi.PsiLanguageType sandBoxLanguage = null) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.SandBox CreateSandBoxFor_NoCache([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType sandBoxLanguage) { }
        public override JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public override JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public override bool IsValid() { }
        public void SetContext(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.SandBoxContextType type) { }
        public override void SubTreeChanged(JetBrains.ReSharper.Psi.Tree.ITreeNode elementContainingChanges, JetBrains.ReSharper.Psi.PsiChangedElementType changeType) { }
    }
    public abstract class TreeElement : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public System.Int32 modreq(System.Runtime.CompilerServices.IsVolatile) myCachedOffsetData;
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement nextSibling;
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement parent;
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement prevSibling;
        protected TreeElement() { }
        public abstract JetBrains.ReSharper.Psi.Tree.ITreeNode FirstChild { get; }
        public abstract JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.ReSharper.Psi.PsiLanguageType LanguageFromParent { get; }
        public abstract JetBrains.ReSharper.Psi.Tree.ITreeNode LastChild { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode NextSibling { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode Parent { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeUserData PersistentUserData { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode PrevSibling { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeUserData UserData { get; }
        public bool Contains(JetBrains.ReSharper.Psi.Tree.ITreeNode other) { }
        protected internal JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement DeepClone(JetBrains.ReSharper.Psi.Impl.TreeNodeCopyContext context) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public virtual JetBrains.ReSharper.Psi.Tree.IChameleonNode FindChameleonWhichCoversRange(JetBrains.ReSharper.Psi.TreeTextRange textRange) { }
        public abstract int FindElementsAtInternal(JetBrains.ReSharper.Psi.TreeOffset offset, System.Collections.Generic.List<JetBrains.ReSharper.Psi.Tree.ITreeNode> result);
        public abstract JetBrains.ReSharper.Psi.Tree.ITreeNode FindNodeAt(JetBrains.ReSharper.Psi.TreeTextRange treeTextRange);
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Tree.ITreeNode> FindNodesAt(JetBrains.ReSharper.Psi.TreeOffset treeTextOffset) { }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode FindTokenAt(JetBrains.ReSharper.Psi.TreeOffset treeTextOffset) { }
        public T GetContainingNode<T>(bool returnThis = False)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public virtual JetBrains.ReSharper.Psi.Tree.ReferenceCollection GetFirstClassReferences() { }
        public virtual JetBrains.DocumentModel.DocumentRange GetNavigationRange() { }
        public virtual JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public virtual JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public virtual JetBrains.ReSharper.Psi.IPsiSourceFile GetSourceFile() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public abstract System.Text.StringBuilder GetText(System.Text.StringBuilder to);
        public abstract string GetText();
        public abstract JetBrains.Text.IBuffer GetTextAsBuffer();
        public abstract int GetTextLength();
        public JetBrains.ReSharper.Psi.TreeOffset GetTreeStartOffset() { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public virtual bool IsFiltered() { }
        public bool IsPhysical() { }
        public abstract bool IsStub();
        public virtual bool IsValid() { }
        protected virtual void PreInit() { }
        public virtual void ProcessDescendantsForResolve(JetBrains.ReSharper.Psi.IRecursiveElementProcessor processor) { }
        public virtual JetBrains.ReSharper.Psi.Tree.ITreeNode SemanticDeepClone(JetBrains.ReSharper.Psi.Impl.TreeNodeCopyContext context) { }
        public override string ToString() { }
    }
    public class static TreeElementFactory
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement CreateCompositeElement(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ICompositeNodeType type) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement CreateErrorElement(string description) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase CreateLeafElement(this JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase CreateLeafElement(JetBrains.ReSharper.Psi.Parsing.ILexer lexer) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase CreateLeafElement(JetBrains.ReSharper.Psi.Parsing.TokenNodeType type, JetBrains.Text.IBuffer buffer, int startOffset, int endOffset) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement CreateTreeElement(this JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType type) { }
    }
}
namespace JetBrains.ReSharper.Psi.Files
{
    
    public class AllowNotCommitedPsiCookie : System.IDisposable
    {
        public AllowNotCommitedPsiCookie(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public void Dispose() { }
        public static bool Exists() { }
        public static bool Exists(JetBrains.ReSharper.Psi.IPsiSourceFile sf) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles() { }
    }
    public class CachedPsiFile
    {
        public JetBrains.ReSharper.Psi.Files.PsiFilesBucket Bucket { get; set; }
        public JetBrains.DocumentModel.IDocument Document { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.IFileImpl PsiFile { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        public void AssertCommited() { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.Files.CachedPsiFile.ReparseResult GetIncrementalReparseResult(out JetBrains.Util.TextRange modifiedRange, out string newText) { }
        public JetBrains.ReSharper.Psi.Files.CachedPsiFile.ReparseResult GetIncrementalReparseResultForSecondaryPsi([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.ISecondaryDocumentGenerationResult generationResult, out JetBrains.DocumentModel.DocumentChange documentChange) { }
        public void OnDocumentChanged(JetBrains.DocumentModel.DocumentChange args) { }
        public void ResetDocumentUpdates() { }
        public void UpdateReferenceProvider() { }
        public JetBrains.ReSharper.Psi.Files.CachedPsiFile.ReparseResult WorkIncrementalParse(JetBrains.DocumentModel.DocumentChange documentChange) { }
        public class ReparseResult
        {
            public ReparseResult([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Files.CachedPsiFile cachedPsiFile, JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator secondaryRangeTranslator, JetBrains.ReSharper.Psi.Parsing.TokenBuffer newTokenBuffer, JetBrains.ReSharper.Psi.Tree.ITreeNode oldElement, JetBrains.ReSharper.Psi.Tree.ITreeNode newElement) { }
            public JetBrains.ReSharper.Psi.Files.CachedPsiFile CachedPsiFile { get; }
            public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
            public JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode> CommitIncrementalReparse() { }
            public JetBrains.ReSharper.Psi.Files.PsiFileModificationInfo GetModificationInfo() { }
        }
    }
    public class CommitBuildResult : JetBrains.ReSharper.Psi.Files.ICommitBuildResult
    {
        public CommitBuildResult([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Files.CachedPsiFile.ReparseResult reparseResult, JetBrains.ReSharper.Psi.Files.CachedPsiFile newCachedPsiFile, JetBrains.DocumentModel.DocumentChange postponedDocumentChange, JetBrains.ReSharper.Psi.ExtensionsAPI.ISecondaryDocumentGenerationResult generationResult, JetBrains.Util.TextRange modifiedRange, string newLength) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Files.CachedPsiFile CachedPsiFile { get; }
        public JetBrains.Util.TextRange ModifiedRange { get; }
        public string NewText { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        public void FinishCommit() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Files.PsiFileModificationInfo GetModificationInfo() { }
    }
    public class CommitBuildResults
    {
        public CommitBuildResults(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Files.ICommitBuildResult> results) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Files.ICommitBuildResult> Results { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
    }
    public struct CommitCookie : System.IDisposable
    {
        public bool Cancelled { get; }
        public JetBrains.ReSharper.Psi.IPsiServices PsiServices { get; }
        public JetBrains.ProjectModel.ISolution Solution { get; }
        public static JetBrains.ReSharper.Psi.Files.CommitCookie Commit(JetBrains.ProjectModel.ISolution solution) { }
        public static JetBrains.ReSharper.Psi.Files.CommitCookie Commit(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public void Dispose() { }
        public JetBrains.ReSharper.Psi.Files.CommitCookie WaitForCaches(string actionText, string cancelText = "Cancel") { }
    }
    public class CommitProcessAsync
    {
        public CommitProcessAsync(JetBrains.Application.IShellLocks shellLocks, JetBrains.Application.CheckForInterrupt checkForInterrupt, JetBrains.ReSharper.Psi.Files.PsiFilesCommit commitProcess, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IPsiSourceFile> sourceFilesToCommit, bool reparse, JetBrains.ReSharper.Psi.Files.IPsiFilesCache psiFilesCache, JetBrains.ReSharper.Psi.Files.PsiFiles psiFiles, System.Action finalAction, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Files.IBuildMergeParticipant<JetBrains.ReSharper.Psi.IPsiSourceFile>> buildMergeParticipants) { }
        public void Attach(System.Action success = null, System.Action interrupted = null) { }
        public void Execute() { }
        public void ExecuteAsync() { }
        public void Wait() { }
    }
    public class CommitProcessAsync2
    {
        public CommitProcessAsync2(JetBrains.ProjectModel.ISolution solution, JetBrains.Application.IShellLocks shellLocks, JetBrains.ReSharper.Psi.Files.PsiFiles psiFiles, JetBrains.ReSharper.Psi.Files.PsiFilesCommit psiFilesCommit, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IPsiSourceFile> sourceFiles, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Files.IBuildMergeParticipant<JetBrains.ReSharper.Psi.IPsiSourceFile>> buildMergeParticipants, System.Action syncFinalAction, bool synchronous) { }
        public bool IsFailured { get; }
        public void Attach(System.Action onSuccess, System.Action onInterrupt) { }
        public void Execute() { }
        public void Wait() { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.KnownLanguage))]
    public class DefaultPsiFileSizeEstimateService : JetBrains.ReSharper.Psi.Files.IPsiFileSizeEstimateService
    {
        public int SizeOfPsiInBytes(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IDocument document) { }
    }
    public class EmptyDocumentRangeTranslator : JetBrains.ReSharper.Psi.Files.IDocumentRangeTranslator
    {
        public static readonly JetBrains.ReSharper.Psi.Files.EmptyDocumentRangeTranslator Instance;
        public JetBrains.DocumentModel.DocumentRange Translate(JetBrains.ReSharper.Psi.TreeTextRange range) { }
        public JetBrains.ReSharper.Psi.TreeTextRange Translate(JetBrains.DocumentModel.DocumentRange documentRange) { }
    }
    public struct GeneratedDocumentCommitResult
    {
        public readonly JetBrains.DocumentModel.DocumentChange DocumentChange;
        public readonly JetBrains.ReSharper.Psi.PsiLanguageType Language;
        public readonly JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator NewRangeTranslator;
        public GeneratedDocumentCommitResult(JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator newRangeTranslator, JetBrains.DocumentModel.DocumentChange documentChange, JetBrains.ReSharper.Psi.PsiLanguageType language) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class GeneratedDocumentsManager : JetBrains.ReSharper.Psi.IGeneratedDocumentsManager
    {
        public GeneratedDocumentsManager(JetBrains.DataFlow.Lifetime lifetime, JetBrains.DocumentModel.IInMemoryDocumentFactory documentFactory, JetBrains.ProjectModel.FileTypes.IProjectFileTypeServices projectFileTypeServices, JetBrains.DocumentModel.Transactions.IDocumentTransactionManager transactionManager) { }
        public void ApplyTransactionDocumentChange(JetBrains.DocumentModel.DocumentChange documentChange, string oldText, JetBrains.ReSharper.Psi.Transactions.IPsiTransactionAction transactionAction) { }
        public virtual void AssertGeneratedFilesValid(JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile) { }
        public JetBrains.DocumentModel.IDocument CreateGeneratedDocument(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, string text, JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IGeneratedDocumentService GetGeneratedDocumentService([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType generatedFileLanguage) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> GetPossibleLanguageTypes(JetBrains.ProjectModel.IProject project, JetBrains.ProjectModel.ProjectFileType projectFileType) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.IGeneratedDocumentService> GetServices(JetBrains.ProjectModel.ProjectFileType projectFileType) { }
    }
    public interface IBuildMergeParticipant<in T>
    
    {
        object Build(T key);
        void Merge(T key, object buildResult);
        bool UpToDate(T key);
    }
    public interface ICommitBuildResult
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Files.CachedPsiFile CachedPsiFile { get; }
        void FinishCommit();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Files.PsiFileModificationInfo GetModificationInfo();
    }
    public class IdenticalDocumentRangeTranslator : JetBrains.ReSharper.Psi.Files.IDocumentRangeTranslator
    {
        public IdenticalDocumentRangeTranslator(JetBrains.DocumentModel.IDocument document) { }
        public JetBrains.DocumentModel.DocumentRange Translate(JetBrains.ReSharper.Psi.TreeTextRange range) { }
        public JetBrains.ReSharper.Psi.TreeTextRange Translate(JetBrains.DocumentModel.DocumentRange documentRange) { }
    }
    public interface IDocumentRangeTranslator
    {
        JetBrains.DocumentModel.DocumentRange[] GetIntersectedOriginalRanges(JetBrains.ReSharper.Psi.TreeTextRange range);
        JetBrains.DocumentModel.DocumentRange Translate(JetBrains.ReSharper.Psi.TreeTextRange range);
        JetBrains.ReSharper.Psi.TreeTextRange Translate(JetBrains.DocumentModel.DocumentRange documentRange);
    }
    public class InjectedFileContextList
    {
        public InjectedFileContextList() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext> GetAllContexts() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext GetInjectedFileContext(JetBrains.ReSharper.Psi.Tree.IFile originalFile, JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedPsiProvider provider, bool createIfNeeded) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class InternalsVisibleToCache : JetBrains.ReSharper.Psi.Caches.InvalidatingPsiCache
    {
        public InternalsVisibleToCache(JetBrains.ReSharper.Psi.Modules.PsiModules psiModules, JetBrains.DataFlow.Lifetime lifetime) { }
        public bool this[JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.Modules.IPsiModule dependsUpon] { get; }
        protected override void InvalidateOnPhysicalChange() { }
    }
    public interface IPsiFiles
    {
        bool AllDocumentsAreCommited { get; }
        bool CommitDocumentsIsInProgress { get; }
        int PsiCacheAnyChangesTimestamp { get; }
        int PsiCacheTimestamp { get; }
        JetBrains.ReSharper.Psi.Files.IPsiFilesCache PsiFilesCache { get; }
        int PsiTimestamp { get; }
        public event System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.PsiChangedElementType> AfterPsiChanged;
        public event System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode> BeforePhysicalPsiChanged;
        public event System.Action<JetBrains.ReSharper.Psi.IPsiSourceFile, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IFile>, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IFile>> BeforePsiFileCreated;
        public event System.Action<JetBrains.ReSharper.Psi.Tree.IFile> PsiFileCreated;
        void AssertAllDocumentAreCommited(string customText = null);
        void CommitAllDocuments();
        void CommitAllDocumentsAsync(System.Action success, System.Action interrupted);
        JetBrains.ReSharper.Psi.Files.CachedPsiFile GetCachedPsiFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language);
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Files.CachedPsiFile> GetCachedPsiFiles([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> GetLanguages(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Files.PsiLanguageCategories categories);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.DocumentModel.DocumentRange range, JetBrains.ReSharper.Psi.Files.PsiLanguageCategories categories);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles<TLanguage>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.DocumentModel.DocumentRange range, JetBrains.ReSharper.Psi.Files.PsiLanguageCategories categories);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ReSharper.Psi.Files.PsiLanguageCategories categories);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles<TLanguage>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Files.PsiLanguageCategories categories);
        void IncrementModificationTimestamp(JetBrains.ReSharper.Psi.Tree.ITreeNode treeNode);
        void InvalidatePsiFilesCache(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        bool IsCommitted(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        bool IsValid(JetBrains.ReSharper.Psi.Tree.IFile file);
        void MarkAsDirty([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile);
        void Observe(JetBrains.DataFlow.Lifetime lifetime, System.Action commit);
        void PsiChanged(JetBrains.ReSharper.Psi.Tree.ITreeNode treeNode, JetBrains.ReSharper.Psi.PsiChangedElementType contentsChanged);
        void RaiseBeforePsiChanged(JetBrains.ReSharper.Psi.Tree.ITreeNode treeNode);
    }
    public interface IPsiFilesCache
    {
        void ClearHardReferences();
        void Drop(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        JetBrains.ReSharper.Psi.Transactions.IPsiTransactionAction DropWithRollback(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        JetBrains.ReSharper.Psi.Files.CachedPsiFile GetOrCreateCachedPsiFile(JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType language);
        System.IDisposable GetTransientCookie(JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        void Merge(JetBrains.ReSharper.Psi.Files.PsiFiles psiFiles, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Files.CommitBuildResults> commitBuildResults);
        JetBrains.ReSharper.Psi.Files.CachedPsiFile TryGetCachedPsiFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType language);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Files.CachedPsiFile> TryGetCachedPsiFilesOrEmpty(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        void UpdateReferenceProviders();
    }
    public interface IPsiFileSizeEstimateService
    {
        int SizeOfPsiInBytes(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IDocument document);
    }
    public interface ISecondaryRangeTranslator
    {
        JetBrains.ReSharper.Psi.Tree.IFile OriginalFile { get; }
        string Dump(JetBrains.ReSharper.Psi.Tree.IFile generatedFile);
        JetBrains.ReSharper.Psi.TreeTextRange GeneratedToOriginal(JetBrains.ReSharper.Psi.TreeTextRange generatedRange);
        JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.TreeTextRange> GetCoveringRange(JetBrains.ReSharper.Psi.TreeTextRange originalRange);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TreeTextRange> GetIntersectedOriginalRanges(JetBrains.ReSharper.Psi.TreeTextRange generatedRange);
        JetBrains.ReSharper.Psi.TreeTextRange OriginalToGenerated(JetBrains.ReSharper.Psi.TreeTextRange originalRange);
    }
    public class PrimaryFileModificationInfo : System.IDisposable
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public readonly JetBrains.ReSharper.Psi.Tree.ITreeNode NewElement;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.ReSharper.Psi.Tree.IFile NewPsiFile;
        [JetBrains.Annotations.CanBeNullAttribute()]
        public readonly JetBrains.ReSharper.Psi.Tree.ITreeNode OldElement;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile;
        public PrimaryFileModificationInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IFile newPsiFile) { }
        public PrimaryFileModificationInfo(JetBrains.ReSharper.Psi.Files.PsiFileModificationInfo info) { }
        public void Dispose() { }
        public bool IsFullyReparsed() { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class PsiFileLanguages
    {
        public PsiFileLanguages(JetBrains.DataFlow.IViewable<JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedPsiProvider> providers, JetBrains.ReSharper.Psi.IGeneratedDocumentsManager generatedDocumentsManager, JetBrains.DataFlow.Lifetime lifetime) { }
        public void DropCache(JetBrains.ReSharper.Psi.IPsiSourceFile projectFile) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedPsiProvider> FindPathToLanguage(JetBrains.ReSharper.Psi.PsiLanguageType primaryPsiLanguage, System.Type languageType) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.PsiLanguageType> GetLanguages(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Files.PsiLanguageCategories categories) { }
    }
    public class PsiFileModificationInfo
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.ReSharper.Psi.Tree.ITreeNode NewElement;
        [JetBrains.Annotations.CanBeNullAttribute()]
        public readonly JetBrains.ReSharper.Psi.Tree.ITreeNode OldElement;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.ReSharper.Psi.Tree.IFile PsiFile;
        public readonly JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile;
        public PsiFileModificationInfo(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Tree.IFile psiFile, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode oldElement, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode newElement) { }
        public JetBrains.ReSharper.Psi.Files.PrimaryFileModificationInfo TemporaryApplyPsiChange() { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class PsiFiles : JetBrains.Application.IChangeProvider, JetBrains.ReSharper.Psi.Files.IPsiFiles
    {
        public PsiFiles(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.ISolution solution, JetBrains.Application.IShellLocks locks, JetBrains.ReSharper.Psi.Files.PsiFileLanguages psiFileLanguages, JetBrains.ReSharper.Psi.Files.IPsiFilesCache psiFilesCache, JetBrains.ReSharper.Psi.Files.PsiFilesCommit psiFilesCommit, JetBrains.ReSharper.Psi.Transactions.IPsiTransactions psiTransactions, JetBrains.ReSharper.Psi.Modules.IPsiModules psiModules, JetBrains.ReSharper.Psi.Files.ReferenceProviderFactory referenceProviderFactory, JetBrains.DocumentManagers.DocumentManager documentManager, JetBrains.Application.ChangeManager changeManager, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedPsiProvider> injectionProviders) { }
        public bool AllDocumentsAreCommited { get; }
        public bool CommitDocumentsIsInProgress { get; }
        public int PsiCacheAnyChangesTimestamp { get; }
        public int PsiCacheTimestamp { get; }
        public JetBrains.ReSharper.Psi.Files.IPsiFilesCache PsiFilesCache { get; }
        public int PsiTimestamp { get; }
        public event System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.PsiChangedElementType> AfterPsiChanged;
        public event System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode> BeforePhysicalPsiChanged;
        public event System.Action<JetBrains.ReSharper.Psi.IPsiSourceFile, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IFile>, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IFile>> BeforePsiFileCreated;
        public event System.Action<JetBrains.ReSharper.Psi.Tree.IFile> PsiFileCreated;
        public void AddBuildMergeParticipant(JetBrains.ReSharper.Psi.Files.IBuildMergeParticipant<JetBrains.ReSharper.Psi.IPsiSourceFile> participant) { }
        public void AssertAllDocumentAreCommited(string customText = null) { }
        public void CommitAllDocuments() { }
        public void CommitAllDocumentsAsync(System.Action success, System.Action interrupted) { }
        public object Execute(JetBrains.Application.IChangeMap map) { }
        public JetBrains.ReSharper.Psi.Files.CachedPsiFile GetCachedPsiFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Files.CachedPsiFile> GetCachedPsiFiles(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> GetLanguages(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Files.PsiLanguageCategories categories) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.DocumentModel.DocumentRange range, JetBrains.ReSharper.Psi.Files.PsiLanguageCategories categories) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ReSharper.Psi.Files.PsiLanguageCategories categories) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles<TLanguage>(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Files.PsiLanguageCategories categories) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles<TLanguage>(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.DocumentModel.DocumentRange range, JetBrains.ReSharper.Psi.Files.PsiLanguageCategories categories) { }
        public void IncrementModificationTimestamp(JetBrains.ReSharper.Psi.Tree.ITreeNode ceed) { }
        public void InvalidatePsiFilesCache(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsCommitted(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsValid(JetBrains.ReSharper.Psi.Tree.IFile file) { }
        public void MarkAsDirty([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public void Observe(JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Action commit) { }
        public void PsiChanged(JetBrains.ReSharper.Psi.Tree.ITreeNode elementContainingChanges, JetBrains.ReSharper.Psi.PsiChangedElementType elementType) { }
        public void RaiseBeforePsiChanged(JetBrains.ReSharper.Psi.Tree.ITreeNode elementContainingChanges) { }
        public void RemoveBuildMergeParticipant(JetBrains.ReSharper.Psi.Files.IBuildMergeParticipant<JetBrains.ReSharper.Psi.IPsiSourceFile> participant) { }
    }
    public class PsiFilesBucket
    {
        public PsiFilesBucket(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Files.CachedPsiFile> files, int documentLength) { }
        public int DocumentLength { get; }
        public JetBrains.ReSharper.Psi.Files.CachedPsiFile[] Files { get; }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class PsiFilesCache2 : JetBrains.Application.IChangeProvider, JetBrains.ReSharper.Psi.Files.IPsiFilesCache
    {
        public PsiFilesCache2(JetBrains.Util.ILogger logger, JetBrains.Application.IShellLocks locks, JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.ChangeManager changeManager, JetBrains.ReSharper.Psi.Modules.PsiModules psiModules, JetBrains.ReSharper.Psi.Files.PsiFilesCommit psiFilesCommit, JetBrains.ProjectModel.Tasks.ISolutionLoadTasksScheduler loadTasksScheduler, JetBrains.ReSharper.Psi.LanguageManager languageManager) { }
        public void ClearHardReferences() { }
        public void Drop(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.Transactions.IPsiTransactionAction DropWithRollback(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public object Execute(JetBrains.Application.IChangeMap changeMap) { }
        public JetBrains.ReSharper.Psi.Files.CachedPsiFile GetOrCreateCachedPsiFile(JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public System.IDisposable GetTransientCookie(JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sf) { }
        public void Merge(JetBrains.ReSharper.Psi.Files.PsiFiles psiFiles, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Files.CommitBuildResults> commitBuildResults) { }
        public void TestDump(System.IO.StreamWriter sw) { }
        public JetBrains.ReSharper.Psi.Files.CachedPsiFile TryGetCachedPsiFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Files.CachedPsiFile> TryGetCachedPsiFilesOrEmpty(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public void UpdateReferenceProviders() { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class PsiFilesCommit
    {
        public PsiFilesCommit(JetBrains.Application.IShellLocks locks, JetBrains.ReSharper.Psi.Files.ReferenceProviderFactory referenceProviderFactory, JetBrains.ReSharper.Psi.IGeneratedDocumentsManager generatedDocumentsManager) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Files.CommitBuildResults> Build(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IPsiSourceFile> sourceFilesToCommit, bool reparse, JetBrains.ReSharper.Psi.Files.IPsiFilesCache psiFilesCache) { }
    }
    public class static PsiFilesExtensions
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> GetDominantLanguages([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile) { }
        public static JetBrains.ReSharper.Psi.Tree.IFile GetDominantPsiFile<TLanguage>(this JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.DocumentModel.DocumentRange range)
            where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType { }
        public static JetBrains.ReSharper.Psi.Tree.IFile GetDominantPsiFile(this JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.DocumentModel.DocumentRange range) { }
        public static JetBrains.ReSharper.Psi.Tree.IFile GetDominantPsiFile<TLanguage>(this JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile)
            where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType { }
        public static JetBrains.ReSharper.Psi.Tree.IFile GetDominantPsiFile(this JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.IFile GetDominantPsiFile<TLanguageType>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile)
            where TLanguageType : JetBrains.ReSharper.Psi.PsiLanguageType { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PsiLanguageType> GetLanguages([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.IFile GetPrimaryPsiFile(this JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.IFile GetPrimaryPsiFile([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public static JetBrains.ReSharper.Psi.Tree.IFile GetPsiFile<TLanguage>(this JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.DocumentModel.DocumentRange range)
            where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType { }
        public static JetBrains.ReSharper.Psi.Tree.IFile GetPsiFile<TLanguage>(this JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.DocumentModel.DocumentRange range)
            where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType { }
        public static JetBrains.ReSharper.Psi.Tree.IFile GetPsiFile(this JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.DocumentModel.DocumentRange range) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.IFile GetPsiFile([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.DocumentModel.DocumentRange range) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.IFile GetPsiFile<TLanguageType>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.DocumentModel.DocumentRange range)
            where TLanguageType : JetBrains.ReSharper.Psi.PsiLanguageType { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles(this JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.DocumentModel.DocumentRange range) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles(this JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.DocumentModel.DocumentRange range) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles<TLanguage>(this JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.DocumentModel.DocumentRange range)
            where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles(this JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.DocumentModel.DocumentRange range) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles<TLanguage>(this JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.DocumentModel.DocumentRange range)
            where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles(this JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.DocumentModel.DocumentRange range) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles(this JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles<TLanguage>(this JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile)
            where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles(this JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IFile> GetPsiFiles<TLanguageType>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile)
            where TLanguageType : JetBrains.ReSharper.Psi.PsiLanguageType { }
    }
    public class PsiInjectedFiles { }
    [System.FlagsAttribute()]
    public enum PsiLanguageCategories
    {
        None = 0,
        Primary = 1,
        Secondary = 2,
        Injected = 4,
        All = 7,
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class ReferenceProviderFactory
    {
        public ReferenceProviderFactory(JetBrains.DataFlow.Lifetime lifetime, JetBrains.DataFlow.IViewable<JetBrains.ReSharper.Psi.Resolve.IReferenceProviderFactory> factories, JetBrains.Threading.IThreading threading) { }
        public event System.Action OnChanged;
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.IReferenceProvider Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IFile file) { }
    }
}
namespace JetBrains.ReSharper.Psi.GeneratedCode
{
    
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class DaemonExcludedFilesManager : JetBrains.Application.Settings.Extentions.ICachedSettingsReader<JetBrains.ReSharper.Psi.GeneratedCode.ExcludedFilesInfo>, JetBrains.ReSharper.Psi.GeneratedCode.IFileSkipChecker
    {
        public DaemonExcludedFilesManager(JetBrains.Application.IShellLocks locks, JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.ProjectModel.ISolution solution, JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.ProjectModelElementPointerManager elementPointerManager, JetBrains.ProjectModel.Settings.Cache.SettingsCacheManager settingsCacheManager) { }
        public JetBrains.ReSharper.Psi.GeneratedCode.Settings.ProjectModelElementPointersSet FilesAndFoldersToForceEnable { get; }
        public JetBrains.ReSharper.Psi.GeneratedCode.Settings.ProjectModelElementPointersSet FilesAndFoldersToSkip { get; }
        public void AddFileToForceEnable(JetBrains.ProjectModel.IProjectFile file) { }
        public void AddFileToSkip(JetBrains.ProjectModel.IProjectFile file) { }
        public void AddFolderToSkip(JetBrains.ProjectModel.IProjectFolder folder) { }
        public JetBrains.ReSharper.Psi.GeneratedCode.IFileSkipChecker GetFastMassiveFileSkipChecker() { }
        public static JetBrains.ReSharper.Psi.GeneratedCode.DaemonExcludedFilesManager GetInstance(JetBrains.ProjectModel.ISolution solution) { }
        public bool IsForceEnable(JetBrains.ProjectModel.IProjectFile projectFile) { }
        public bool IsGeneratedFileByPath(JetBrains.ProjectModel.IProjectFile projectFile) { }
        public bool IsToSkip(JetBrains.ProjectModel.IProjectFile projectFile) { }
        public JetBrains.ReSharper.Psi.GeneratedCode.ExcludedFilesInfo ReadData(JetBrains.Application.Settings.IContextBoundSettingsStore store) { }
        public void RemoveFileToForceEnable(JetBrains.ProjectModel.IProjectFile file) { }
        public void RemoveFileToSkip(JetBrains.ProjectModel.IProjectFile file) { }
        public void RemoveFolderToSkip(JetBrains.ProjectModel.IProjectFolder folder) { }
    }
    public class ExcludedFilesInfo
    {
        public ExcludedFilesInfo(JetBrains.Application.Settings.IContextBoundSettingsStore store, JetBrains.ProjectModel.ProjectModelElementPointerManager projectModelElementPointerManager) { }
        public System.Collections.Generic.IList<System.Text.RegularExpressions.Regex> FileMasksToSkip { get; }
        public JetBrains.ReSharper.Psi.GeneratedCode.Settings.ProjectModelElementPointersSet FilesAndFoldersToForceEnable { get; }
        public JetBrains.ReSharper.Psi.GeneratedCode.Settings.ProjectModelElementPointersSet FilesAndFoldersToSkip { get; }
        public JetBrains.ReSharper.Psi.GeneratedCode.Settings.ProjectModelElementPointersSet GeneratedFilesAndFolders { get; }
    }
    public abstract class GeneratedCodeRegionChecker
    {
        protected abstract JetBrains.ReSharper.Psi.Impl.CodeStyle.IGeneratedCodeRegionDetector CreateDetector(JetBrains.Application.Settings.IContextBoundSettingsStore settingsStore);
        public bool IsInGeneratedRegion(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public class static GeneratedCodeSettingsAccessor
    {
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.GeneratedCode.Settings.GeneratedCodeSettingsKey, JetBrains.Application.Settings.Store.IIndexedEntry<string, string>>> GeneratedCodeRegions;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.GeneratedCode.Settings.GeneratedCodeSettingsKey, JetBrains.Application.Settings.Store.IIndexedEntry<string, string>>> GeneratedFileMasks;
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class GeneratedFilesCache : JetBrains.ReSharper.Psi.Caches.ICache
    {
        public GeneratedFilesCache(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.IShellLocks locks, JetBrains.ReSharper.Psi.LanguageManager languageManager, JetBrains.ReSharper.Psi.IPsiConfiguration psiConfiguration, JetBrains.ReSharper.Psi.Caches.IPersistentIndexManager persistentIndexManager) { }
        public bool HasDirtyFiles { get; }
        public static JetBrains.ReSharper.Psi.GeneratedCode.GeneratedFilesCache GetInstance(JetBrains.ProjectModel.ISolution solution) { }
        public bool IsGeneratedFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public void MarkAsDirty(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
    public class static GeneratedUtils
    {
        public static System.Text.RegularExpressions.Regex GetRegex(string mask) { }
        public static bool IsElementInGeneratedFileOrRegion([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static bool IsGeneratedDeclaration(JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
        public static bool IsGeneratedFile([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ProjectModel.IProjectFile projectFile) { }
        public static bool IsValidGeneratedFilesMask(string mask) { }
    }
    public interface IFileSkipChecker
    {
        bool IsForceEnable(JetBrains.ProjectModel.IProjectFile file);
        bool IsToSkip(JetBrains.ProjectModel.IProjectFile file);
    }
    public interface IGeneratedFilesCacheProvider
    {
        bool IsGeneratedFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
    }
}
namespace JetBrains.ReSharper.Psi.GeneratedCode.Settings
{
    
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Settings.CodeInspectionSettings), "Files excluded from code analysis")]
    public class ExcludedFilesSettingsKey
    {
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("File masks to skip")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, bool> FileMasksToSkip;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Files and folders to skip")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, JetBrains.ReSharper.Psi.GeneratedCode.Settings.ExcludedFileState> FilesAndFoldersToSkip2;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Generated files and folders to skip")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, string> GeneratedFilesAndFolders;
    }
    [JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgraderAttribute()]
    public class ExcludedFilesSettingsUpgrader : JetBrains.Application.Configuration.Upgrade.ISettingsUpgrader, JetBrains.ProjectModel.Settings.Upgrade.ISolutionSettingsUpgrader
    {
        public ExcludedFilesSettingsUpgrader(JetBrains.ProjectModel.ProjectModelElementPointerManager elementPointerManager) { }
        public void Upgrade(JetBrains.Application.Configuration.IComponentSettingsProvider legacySettingsProvider, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore, JetBrains.DataFlow.Lifetime upgradeLifetime) { }
    }
    public enum ExcludedFileState
    {
        ExplicitlyExcluded = 0,
        ForceIncluded = 1,
    }
    [System.ObsoleteAttribute()]
    public class FilesToSkipSettingsObsolete : JetBrains.Application.Configuration.IXmlReadable
    {
        public FilesToSkipSettingsObsolete(JetBrains.Application.Configuration.IComponentSettingsProvider settingsProvider, JetBrains.ProjectModel.ProjectModelElementPointerManager pointerManager) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Settings.CodeInspectionSettings), "Generated code detection")]
    public class GeneratedCodeSettingsKey
    {
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Generated code regions")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, string> GeneratedCodeRegions;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Generated files mask")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, string> GeneratedFileMasks;
    }
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    [JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgraderAttribute()]
    public class GeneratedCodeSettingsUpgrade : JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.CodeStyleSettingsUpgrade
    {
        public GeneratedCodeSettingsUpgrade(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected override void DoUpgrade(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class PredefinedGeneratedCodeSettings : JetBrains.Application.Settings.IHaveDefaultSettingsStream { }
    public sealed class ProjectModelElementPointersSet
    {
        public ProjectModelElementPointersSet(JetBrains.ProjectModel.ProjectModelElementPointerManager pointerManager) { }
        public bool IsEmpty { get; }
        public event System.Action<JetBrains.ProjectModel.IProjectFile> FileAdded;
        public event System.Action<JetBrains.ProjectModel.IProjectFile> FileRemoved;
        public event System.Action<JetBrains.ProjectModel.IProjectFolder> FolderAdded;
        public event System.Action<JetBrains.ProjectModel.IProjectFolder> FolderRemoved;
        public bool Contains(JetBrains.ProjectModel.IProjectFile file) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ProjectModel.IProjectModelElement> GetAllValidProjectItems() { }
        public void Update(JetBrains.ReSharper.Psi.GeneratedCode.Settings.ProjectModelElementPointersSet otherSet) { }
        public void Update(System.Collections.Generic.IEnumerable<string> fileIds) { }
    }
}
namespace JetBrains.ReSharper.Psi.GenerateMemberBody
{
    
    public enum AccessorImplementationKind
    {
        Default = 0,
        BackingField = 1,
        AutomaticProperty = 2,
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Settings.CodeEditingSettings), "Member generation settings")]
    public class GenerateMemberBodySettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.GenerateMemberBody.AccessorImplementationKind.AutomaticProperty, "Accessor implementation kind")]
        public JetBrains.ReSharper.Psi.GenerateMemberBody.AccessorImplementationKind AccessorImplementationKind;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Copy XML documentation")]
        public bool CopyXmlDocumentation;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Debugger step through accessors")]
        public bool DebuggerStepThroughAccessors;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.GenerateMemberBody.MethodImplementationKind.ThrowNotImplemented, "Method implementation kind")]
        public JetBrains.ReSharper.Psi.GenerateMemberBody.MethodImplementationKind MethodImplementationKind;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Wrap generated members in region")]
        public bool WrapIntoRegions;
    }
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    public class GenerateMemberBodySettingsUpgrader : JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.CodeStyleSettingsUpgrade
    {
        public GenerateMemberBodySettingsUpgrader(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected override void DoUpgrade(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore) { }
    }
    public enum MethodImplementationKind
    {
        ThrowNotImplemented = 0,
        ReturnDefaultValue = 1,
        NotCompiledCode = 2,
    }
}
namespace JetBrains.ReSharper.Psi.Impl
{
    
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class AsyncCommitServiceImpl : JetBrains.ReSharper.Psi.AsyncCommitService
    {
        public AsyncCommitServiceImpl(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.IShellLocks locks, JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, JetBrains.ReSharper.Psi.Transactions.IPsiTransactions psiTransactions) { }
        public override void DropRequest(JetBrains.ReSharper.Psi.IAsyncCommitClient client) { }
        public override void RequestCommit(JetBrains.ReSharper.Psi.IAsyncCommitClient client) { }
    }
    public class CLRTypePresenter : JetBrains.ReSharper.Psi.ITypePresenter
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.ITypePresenter Instance;
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.IType type) { }
        public string GetPresentableName(JetBrains.ReSharper.Psi.IType type) { }
        public string GetUnresolvedScalarTypePresentation(string name, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> typeArguments, JetBrains.ProjectModel.ISolution solution) { }
    }
    public class DeclaredElementEqualityComparer : System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.IDeclaredElement>, System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.ITypeElement>, System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.ITypeMember>
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.IDeclaredElement> ElementComparer;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.ITypeMember> MemberComparer;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.ITypeElement> TypeElementComparer;
    }
    public abstract class DefaultPropertiesForFileInProject : JetBrains.ReSharper.Psi.IPsiSourceFileProperties
    {
        protected DefaultPropertiesForFileInProject(JetBrains.ProjectModel.IProject project, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public abstract bool IsGeneratedFile { get; }
        public abstract bool IsICacheParticipant { get; }
        public abstract bool IsNonUserFile { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.ProjectModel.IProject Project { get; }
        public abstract bool ProvidesCodeModel { get; }
        public abstract bool ShouldBuildPsi { get; }
        public virtual string GetDefaultNamespace() { }
        public virtual System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.PreProcessingDirective> GetDefines() { }
        public virtual System.Collections.Generic.IEnumerable<string> GetPreImportedNamespaces() { }
    }
    public class DefaultPsiProjectFileProperties : JetBrains.ReSharper.Psi.Impl.DefaultPropertiesForFileInProject
    {
        public DefaultPsiProjectFileProperties(JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public override bool IsGeneratedFile { get; }
        public override bool IsICacheParticipant { get; }
        public override bool IsNonUserFile { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.ProjectModel.IProjectFile ProjectFile { get; }
        public override bool ProvidesCodeModel { get; }
        public override bool ShouldBuildPsi { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
    }
    public class DefaultTypePresenter : JetBrains.ReSharper.Psi.ITypePresenter
    {
        public static readonly JetBrains.ReSharper.Psi.Impl.DefaultTypePresenter Instance;
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.IType type) { }
        public string GetPresentableName(JetBrains.ReSharper.Psi.IType type) { }
        public string GetUnresolvedScalarTypePresentation(string name, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> typeArguments, JetBrains.ProjectModel.ISolution solution) { }
    }
    public class EnumPredefinedOperator : JetBrains.ReSharper.Psi.Impl.PredefinedOperator
    {
        public EnumPredefinedOperator(JetBrains.ReSharper.Psi.PsiLanguageType language, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IEnum @enum, string name, JetBrains.ReSharper.Psi.IType returnType, params JetBrains.ReSharper.Psi.IType[] parameterTypes) { }
        public EnumPredefinedOperator(JetBrains.ReSharper.Psi.PsiLanguageType language, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IEnum @enum, string name, JetBrains.ReSharper.Psi.IType type, int parameterNumber) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IEnum Enum { get; }
    }
    public class FileAssemblyPsiModule : JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule, JetBrains.ReSharper.Psi.Modules.IPsiModule
    {
        public FileAssemblyPsiModule(JetBrains.ProjectModel.ISolution solution, JetBrains.Util.FileSystemPath location) { }
        public JetBrains.ReSharper.Psi.IPsiAssembly Assembly { get; }
        public JetBrains.ProjectModel.IModule ContainingProjectModule { get; }
        public virtual string DisplayName { get; }
        public virtual string Name { get; }
        public JetBrains.ProjectModel.ProjectFileType ProjectFileType { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PsiLanguage { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> SourceFiles { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.PreProcessingDirective> GetAllDefines() { }
        public string GetPersistentID() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public virtual System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModuleReference> GetReferences(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext) { }
        public JetBrains.ProjectModel.ISolution GetSolution() { }
        public bool IsValid() { }
    }
    public class static HiddenMemberImpl
    {
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers(JetBrains.ReSharper.Psi.ITypeMember member) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers(JetBrains.ReSharper.Psi.TypeMemberInstance member) { }
    }
    public interface INodeUserDataHolderOwner : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Impl.NodeUserDataHolder NodeUserDataHolder { get; }
    }
    public interface IResolveIsolationScope : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        System.Nullable<int> ModificationStamp { get; set; }
    }
    public abstract class LanguageLevelPropertyBase<TLanguageLevelSetting, TLanguageLevelEntry, TLanguageLevel>
    
    
    
    {
        protected LanguageLevelPropertyBase(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.IProject project, JetBrains.ProjectModel.Settings.Store.ProjectSettings projectSettings, JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.ProjectModel.Transaction.IProjectModelBatchChangeManager projectModelBatchChangeManager, JetBrains.Application.IShellLocks locks) { }
        protected abstract System.Linq.Expressions.Expression<System.Func<TLanguageLevelSetting, TLanguageLevelEntry>> Expression { get; }
        public TLanguageLevel LanguageLevel { get; set; }
        protected abstract string PropertyName { get; }
        public void ExecuteWithLanguageLevel(TLanguageLevel newValue, System.Action action) { }
        protected abstract TLanguageLevel GetDefaultLanguageLevel();
        protected TLanguageLevel GetEffectiveLanguageLevel(TLanguageLevel languageLevel) { }
        protected abstract TLanguageLevel GetLanguageLevelByEntry(TLanguageLevelEntry entryValue);
        protected abstract TLanguageLevelEntry GetLanguageLevelEntryByValue(TLanguageLevel languageLevel);
    }
    public class NodeUserDataHolder
    {
        public NodeUserDataHolder() { }
        public bool ContainsPersistentData { get; }
        public void ApplyPersistentDataCopy(System.Collections.Generic.Dictionary<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.Util.UserDataHolder> data) { }
        public JetBrains.Util.UserDataHolder CopyPersistentData(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeUserData GetNodePersistentUserData(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeUserData GetNodeUserData(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
    }
    public class static OverridableMemberImpl
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.OverridableMemberInstance> FindOverridableInTypeByExample(JetBrains.ReSharper.Psi.ITypeElement type, JetBrains.ReSharper.Psi.Resolve.ISubstitution typeSubstitution, JetBrains.ReSharper.Psi.OverridableMemberInstance origin, bool checkReturnType) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetAllSuperMembers([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IOverridableMember member, bool searchQuasi) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetAllSuperMembers([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.OverridableMemberInstance member, bool searchQuasi) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetImmediateImplement(JetBrains.ReSharper.Psi.OverridableMemberInstance member, bool searchQuasi) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetImmediateOverride(JetBrains.ReSharper.Psi.OverridableMemberInstance member) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetImmediateSuperMembers(JetBrains.ReSharper.Psi.OverridableMemberInstance member, bool searchQuasi) { }
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetRootOverride(JetBrains.ReSharper.Psi.OverridableMemberInstance derived) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetRootSuperMembers([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IOverridableMember member, bool searchQuasi) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetRootSuperMembers([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.OverridableMemberInstance member, bool searchQuasi) { }
        public static bool OverridesOrImplements(JetBrains.ReSharper.Psi.OverridableMemberInstance derived, JetBrains.ReSharper.Psi.OverridableMemberInstance super) { }
        public static bool OverridesOrImplements(JetBrains.ReSharper.Psi.IOverridableMember derived, JetBrains.ReSharper.Psi.IOverridableMember super) { }
    }
    public class PathDeclaredElement : JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IPathDeclaredElement, System.IEquatable<JetBrains.ReSharper.Psi.Impl.PathDeclaredElement>
    {
        public const string CURRENT_DIR_NAME = ".";
        public const string LEVEL_UP_NAME = "..";
        public const string ROOT_NAME = "~";
        public static readonly JetBrains.Util.FileSystemPath WebRootPath;
        public PathDeclaredElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiServices psiServices, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFileWithLocation sourceFileWithLocation) { }
        public PathDeclaredElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiServices psiServices, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProjectItem projectItem) { }
        public PathDeclaredElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.Util.FileSystemPath path) { }
        public PathDeclaredElement(string shortName, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.Util.FileSystemPath path) { }
        public bool CaseSensistiveName { get; }
        public JetBrains.Util.FileSystemPath Path { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public string ShortName { get; }
        public bool Equals(JetBrains.ReSharper.Psi.Impl.PathDeclaredElement pathDeclaredElement) { }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public JetBrains.ProjectModel.IProjectItem GetProjectItem() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public virtual JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
    }
    public class PathDeclaredElementPresenter : JetBrains.ReSharper.Psi.IDeclaredElementPresenter
    {
        public static readonly JetBrains.ReSharper.Psi.IDeclaredElementPresenter Instance;
        public string Format(JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle style, JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, out JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking marking) { }
        public string Format(JetBrains.ReSharper.Psi.ParameterKind parameterKind) { }
        public string Format(JetBrains.ReSharper.Psi.AccessRights accessRights) { }
    }
    public class PathDeclaredElementType : JetBrains.ReSharper.Psi.DeclaredElementType
    {
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType Instance;
        protected internal override JetBrains.ReSharper.Psi.IDeclaredElementPresenter DefaultPresenter { get; }
        public override string PresentableName { get; }
        protected internal override JetBrains.UI.Icons.IconId GetImage() { }
        public override bool IsPresentable(JetBrains.ReSharper.Psi.PsiLanguageType language) { }
    }
    public class PredefinedOperator : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOperator, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ISignOperator, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public PredefinedOperator(JetBrains.ReSharper.Psi.PsiLanguageType language, string name, JetBrains.ReSharper.Psi.IType returnType, params JetBrains.ReSharper.Psi.IType[] parameterTypes) { }
        public PredefinedOperator(JetBrains.ReSharper.Psi.PsiLanguageType language, string name, JetBrains.ReSharper.Psi.IType type, int parameterNumber) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExtern { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class PsiBuilderLexer : JetBrains.ReSharper.Psi.Parsing.FilteringLexerBase
    {
        public PsiBuilderLexer(JetBrains.ReSharper.Psi.Parsing.ILexer lexer, System.Predicate<JetBrains.ReSharper.Psi.Parsing.TokenNodeType> skip) { }
        public bool HasSkippedTokens { get; }
        public int SkippedTokenCount { get; }
        public void AppendChildren(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement parent, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement oldParent) { }
        public void AppendNewChild([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement parent, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement child) { }
        public void AppendSkippedTokens(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement parent) { }
        protected virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase CreateSkippedElement(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) { }
        public void DropSkippedTokens(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) { }
        protected override bool Skip(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) { }
        protected override void SkipFilteredTokens() { }
    }
    [JetBrains.ProjectModel.SolutionInstanceComponentAttribute()]
    public class PsiConfigurationImpl : JetBrains.ReSharper.Psi.IPsiConfiguration
    {
        public PsiConfigurationImpl(JetBrains.ProjectModel.ISolution solution, JetBrains.ProjectModel.Caches.ISolutionCachesConfiguration solutionCachesConfiguration) { }
        public virtual bool CacheJobServiceSynchronous { get; }
        public virtual bool EagerMetadataLoad { get; }
        public virtual bool FullMetadataLoad { get; }
        public virtual bool PersistCaches { get; }
        public JetBrains.ProjectModel.ISolution Solution { get; }
        public JetBrains.ProjectModel.Caches.ISolutionCachesConfiguration SolutionCachesConfiguration { get; }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("{DisplayName}")]
    public class PsiProjectFile : JetBrains.Util.UserDataHolder, JetBrains.ReSharper.Psi.IPsiProjectFile, JetBrains.ReSharper.Psi.IPsiSourceFile, JetBrains.ReSharper.Psi.IPsiSourceFileWithLocation, JetBrains.Util.IUserDataHolder
    {
        public PsiProjectFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProjectFile projectFile, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ProjectModel.IProjectFile, JetBrains.ReSharper.Psi.IPsiSourceFile, JetBrains.ReSharper.Psi.IPsiSourceFileProperties> propertiesProvider, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ProjectModel.IProjectFile, JetBrains.ReSharper.Psi.IPsiSourceFile, bool> validityChecks, JetBrains.DocumentManagers.DocumentManager documentManager, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public string DisplayName { get; }
        public JetBrains.DocumentModel.IDocument Document { get; }
        public System.Nullable<int> InMemoryModificationStamp { get; }
        public JetBrains.ProjectModel.ProjectFileType LanguageType { get; }
        public System.DateTime LastWriteTimeUtc { get; }
        public JetBrains.Util.FileSystemPath Location { get; }
        public string Name { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PrimaryPsiLanguage { get; }
        public JetBrains.ProjectModel.IProjectFile ProjectFile { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFileProperties Properties { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFileStorage PsiStorage { get; }
        public virtual JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string GetPersistentID() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class PsiServicesImpl : JetBrains.ReSharper.Psi.IPsiServices
    {
        public PsiServicesImpl(
                    JetBrains.Application.IShellLocks locks, 
                    JetBrains.ReSharper.Psi.Search.SearchDomainFactory searchDomainFactory, 
                    JetBrains.ProjectModel.ISolution solution, 
                    JetBrains.Application.Settings.ISettingsStore settingsStorage, 
                    JetBrains.ReSharper.Psi.IGeneratedDocumentsManager generatedDocumentsManager, 
                    JetBrains.DocumentManagers.DocumentManager documentManager, 
                    [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Caches.IPsiCaches caches, 
                    [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Dependencies.DependencyStore dependencyStore, 
                    JetBrains.ReSharper.Psi.Modules.IPsiModules modules, 
                    JetBrains.ReSharper.Psi.Naming.NamingManager namingManager, 
                    System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Finder.ISearchGuru> searchGurus, 
                    System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcherFactory> domainSpecificSearcherFactories, 
                    JetBrains.ReSharper.Psi.IPsiConfiguration psiConfiguration, 
                    JetBrains.ReSharper.Psi.Transactions.IPsiTransactions transactions, 
                    [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Files.IPsiFiles psiFiles, 
                    [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Caches.ISymbolCache symbols, 
                    JetBrains.ReSharper.Psi.Caches.IWordIndex wordIndex, 
                    JetBrains.ReSharper.Psi.Pointers.IPsiPointers pointers, 
                    JetBrains.Application.Env.RunsProducts.ProductConfigurations configuration, 
                    JetBrains.ReSharper.Psi.Caches.IStubTreeNodeCache stubTreeNodeCache) { }
        public JetBrains.ReSharper.Psi.Search.IFinder AsyncFinder { get; }
        public JetBrains.ReSharper.Psi.Caches.IPsiCaches Caches { get; }
        public JetBrains.ReSharper.Psi.IPsiConfiguration Configuration { get; }
        public JetBrains.ReSharper.Psi.Dependencies.DependencyStore DependencyStore { get; }
        public JetBrains.ReSharper.Psi.Files.IPsiFiles Files { get; }
        public JetBrains.ReSharper.Psi.Search.IFinder Finder { get; }
        public JetBrains.ReSharper.Psi.IGeneratedDocumentsManager GeneratedDocumentsManager { get; }
        public JetBrains.Application.IShellLocks Locks { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModules Modules { get; }
        public JetBrains.ReSharper.Psi.Naming.NamingManager Naming { get; }
        public JetBrains.ReSharper.Psi.Pointers.IPsiPointers Pointers { get; }
        public JetBrains.Application.Settings.ISettingsStore SettingsStore { get; }
        public JetBrains.ProjectModel.ISolution Solution { get; }
        public JetBrains.ReSharper.Psi.Caches.IStubTreeNodeCache StubTreeNodes { get; }
        public JetBrains.ReSharper.Psi.Caches.ISymbolCache Symbols { get; }
        public JetBrains.ReSharper.Psi.Transactions.IPsiTransactions Transactions { get; }
        public JetBrains.ReSharper.Psi.Caches.IWordIndex WordIndex { get; }
        public T GetComponent<T>()
            where T :  class { }
    }
    public class ReferencesSet
    {
        public ReferencesSet(System.Collections.Generic.List<JetBrains.ReSharper.Psi.Modules.IPsiModuleReference> references) { }
        public System.Collections.Generic.List<JetBrains.ReSharper.Psi.Modules.IPsiModuleReference> SortedReferences { get; }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.ReferencesSet other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class RetargetedPsiModuleEqualityComparer : System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.Modules.IPsiModule>
    {
        public static readonly JetBrains.ReSharper.Psi.Impl.RetargetedPsiModuleEqualityComparer Comparer;
        public bool Equals([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module1, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module2) { }
        public int GetHashCode(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
    }
    public class static RuntimeAssembliesUtil
    {
        public static JetBrains.Util.FileSystemPath GetRuntimeAssemblyLocation(this JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule assemblyPsiModule) { }
    }
    public abstract class SimpleLanguageLevelPropertyBase<TLanguageLevelSettings, TLanguageLevel> : JetBrains.ReSharper.Psi.Impl.LanguageLevelPropertyBase<TLanguageLevelSettings, TLanguageLevel, TLanguageLevel>
    
    
    {
        protected SimpleLanguageLevelPropertyBase(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.IProject project, JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.ProjectModel.Transaction.IProjectModelBatchChangeManager projectModelBatchChangeManager, JetBrains.Application.IShellLocks locks, JetBrains.ProjectModel.Settings.Store.ProjectSettings projectSettings) { }
        protected override TLanguageLevel GetLanguageLevelByEntry(TLanguageLevel entryValue) { }
        protected override TLanguageLevel GetLanguageLevelEntryByValue(TLanguageLevel languageLevel) { }
    }
    public class TreeNodeCopyContext
    {
        public JetBrains.ReSharper.Psi.Tree.ITreeNode this[JetBrains.ReSharper.Psi.Tree.ITreeNode original] { get; }
        public void ApplyPersistentData(JetBrains.ReSharper.Psi.Tree.ITreeNode copiedElement) { }
        public static JetBrains.ReSharper.Psi.Impl.TreeNodeCopyContext CreateFrom(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public void OnNodeCopied(JetBrains.ReSharper.Psi.Tree.ITreeNode original, JetBrains.ReSharper.Psi.Tree.ITreeNode clone) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class TypeElementInheritanceCache : JetBrains.ReSharper.Psi.Caches.InvalidatingPsiCache
    {
        public TypeElementInheritanceCache() { }
        public JetBrains.ReSharper.Psi.IDeclaredType CacheBaseClass(JetBrains.ReSharper.Psi.IClass derived, System.Func<JetBrains.ReSharper.Psi.IDeclaredType> calculator) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> CacheImmediateSuperTypes<T>(T typeElement, System.Func<T, JetBrains.ReSharper.Psi.IDeclaredType[]> calculator)
            where T : JetBrains.ReSharper.Psi.ITypeElement { }
        public static JetBrains.ReSharper.Psi.Impl.TypeElementInheritanceCache GetInstance(JetBrains.ReSharper.Psi.IPsiServices psiServices) { }
        public bool HasInheritors([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        protected override void InvalidateOnPhysicalChange() { }
        public bool IsDescendantOf(JetBrains.ReSharper.Psi.ITypeElement subType, JetBrains.ReSharper.Psi.ITypeElement superType) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Caches2
{
    
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class DbDriverManager
    {
        public virtual JetBrains.Application.PersistentMap.IKeyValueDbDriver<JetBrains.Util.FileSystemPath, JetBrains.Application.PersistentMap.PersistentMapOpenParamsBase> GetDriver() { }
    }
    public interface INamedArgumentsCacheProvider
    {
        bool CanBuildArgumentsFast(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        string[] GetPossibleNamedArguments(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
    }
}
namespace JetBrains.ReSharper.Psi.Impl.CodeStyle
{
    
    public class ChainedBinaryIndentingRule<TSettings, TNode> : JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentingRuleBase<TSettings>
        where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase
        where TNode :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public ChainedBinaryIndentingRule(string name, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern operatorNodePattern, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern ignorableNodePattern, System.Func<TSettings, object> keyGetterForAlign, System.Linq.Expressions.LambdaExpression settingForAlign, object valueForAlign, System.Func<TSettings, object> keyGetterForOperatorPos, System.Linq.Expressions.LambdaExpression settingForOperatorPos, object valueForOperatorAtStart, object valueForOperatorAtEnd) { }
        protected bool CanSkipExpression(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public override JetBrains.ReSharper.Psi.Tree.ITreeNode GetClosingNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        protected JetBrains.ReSharper.Psi.Tree.ITreeNode GetLeftOperand(TNode node) { }
        protected JetBrains.ReSharper.Psi.Tree.ITreeNode GetOperator(TNode node) { }
        public override JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionNode<TSettings> GetOptionTree(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingStageCallback<TSettings> callback) { }
        protected bool IsLeftOperand(TNode parent, JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        protected bool IsOperator(TNode parent, JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        protected bool IsOurBinaryExpression(TNode node) { }
        protected bool IsRightOperand(TNode parent, JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public override bool MatchesPatterns(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext context) { }
    }
    public abstract class CodeFormatterBase : JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter, JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl, JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker
    {
        protected CodeFormatterBase(JetBrains.Application.Settings.ISettingsStore settingsStore) { }
        protected abstract JetBrains.ReSharper.Psi.PsiLanguageType LanguageType { get; }
        public virtual bool CanModifyInsideNodeRange(JetBrains.ReSharper.Psi.Tree.ITreeNode leftElement, JetBrains.ReSharper.Psi.Tree.ITreeNode rightElement, JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext context) { }
        public virtual bool CanModifyNode(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext context) { }
        public abstract JetBrains.ReSharper.Psi.Tree.ITreeNode CreateNewLine();
        public abstract JetBrains.ReSharper.Psi.Tree.ITreeNode CreateSpace(string indent, JetBrains.ReSharper.Psi.Tree.ITreeNode replacedSpace);
        public virtual JetBrains.ReSharper.Psi.Tree.ITreeNode CreateSpace() { }
        public virtual void Format(JetBrains.ReSharper.Psi.Tree.ITreeNode root, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null) { }
        public virtual void Format(JetBrains.ProjectModel.ISolution solution, JetBrains.DocumentModel.DocumentRange docRange, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, bool formatSpacesBefore, bool formatSpacesAfter, JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null) { }
        public void Format(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, JetBrains.ReSharper.Psi.CodeStyle.OuterSpaceFormatType formatSpacesBefore, JetBrains.ReSharper.Psi.CodeStyle.OuterSpaceFormatType formatSpacesAfter, JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null) { }
        public abstract JetBrains.ReSharper.Psi.ITreeRange Format(JetBrains.ReSharper.Psi.Tree.ITreeNode firstElement, JetBrains.ReSharper.Psi.Tree.ITreeNode lastElement, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null);
        public abstract void FormatDeletedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode parent, JetBrains.ReSharper.Psi.Tree.ITreeNode prevNode, JetBrains.ReSharper.Psi.Tree.ITreeNode nextNode);
        public virtual void FormatFile(JetBrains.ReSharper.Psi.Tree.IFile fileNode, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null) { }
        public abstract void FormatInsertedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode nodeFirst, JetBrains.ReSharper.Psi.Tree.ITreeNode nodeLast, bool formatSurround);
        public abstract JetBrains.ReSharper.Psi.ITreeRange FormatInsertedRange(JetBrains.ReSharper.Psi.Tree.ITreeNode nodeFirst, JetBrains.ReSharper.Psi.Tree.ITreeNode nodeLast, JetBrains.ReSharper.Psi.ITreeRange origin);
        public abstract void FormatReplacedNode(JetBrains.ReSharper.Psi.Tree.ITreeNode oldNode, JetBrains.ReSharper.Psi.Tree.ITreeNode newNode);
        protected virtual JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings GetGlobalFormatSettings(JetBrains.ReSharper.Psi.Tree.ITreeNode firstNode, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore) { }
        public abstract JetBrains.ReSharper.Psi.Tree.ITokenNode GetMinimalSeparator(JetBrains.ReSharper.Psi.Tree.ITokenNode leftToken, JetBrains.ReSharper.Psi.Tree.ITokenNode rightToken);
        protected JetBrains.Application.Settings.IContextBoundSettingsStore GetProperContextBoundSettingsStore(JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore, JetBrains.ReSharper.Psi.Tree.ITreeNode firstNode) { }
        protected abstract bool IsFormatNextSpaces(JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile);
        public virtual bool IsNewLine(JetBrains.ReSharper.Psi.Tree.ITreeNode ws) { }
        public virtual bool IsWhitespaceToken(JetBrains.ReSharper.Psi.Tree.ITokenNode token) { }
        public bool IsWhitespaceToken(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        protected virtual bool IsWhitespaceTokenForFindFormattingRange(JetBrains.ReSharper.Psi.Tree.ITokenNode token) { }
        protected virtual void RemoveLeadingAndTrailingSpacesInFile(JetBrains.ReSharper.Psi.Tree.IFile fileNode) { }
    }
    public class CodeFormattingContext
    {
        public CodeFormattingContext(JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl codeFormatter, JetBrains.ReSharper.Psi.Tree.ITreeNode firstNode, JetBrains.ReSharper.Psi.Tree.ITreeNode lastNode) { }
        public JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl CodeFormatter { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode FirstNode { get; }
        public bool IsPhysical { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode LastNode { get; }
        public bool CanModifyInsideNodeRange(JetBrains.ReSharper.Psi.Tree.ITreeNode leftElement, JetBrains.ReSharper.Psi.Tree.ITreeNode rightElement) { }
        public bool CanModifyNode(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public bool IsNodeInOurDocument(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public bool IsStickless(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public void MarkAsStickless(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
    }
    public class FormatResult<T>
    
    {
        public FormatResult(JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange range, T result) { }
        public JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange Range { get; }
        public T ResultValue { get; }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class FormatterDebugInfoLoggersProvider : JetBrains.ReSharper.Psi.Impl.CodeStyle.IFormatterDebugInfoLoggersProvider
    {
        public JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingDebugInfoLogger IndentingLogger { get; set; }
    }
    public class static FormatterImplHelper
    {
        public static readonly JetBrains.Text.StringBuffer NewLineBuffer;
        public static readonly JetBrains.Text.StringBuffer SpaceBuffer;
        public static string AddIndent(string sourceIndent, string addedIndent) { }
        public static string AddIndent(string sourceIndent, string addedIndent, string addedIndent1) { }
        public static void AddSpaceBetween([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITokenNode token1, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITokenNode token2, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITokenNode separator) { }
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode AdjustFirstNode(JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl codeFormatter, JetBrains.ReSharper.Psi.Tree.ITreeNode firstNode, JetBrains.ReSharper.Psi.Tree.ITreeNode lastNode) { }
        public static void BeforeFormatInsertedNodeRangeHelper(JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl codeFormatter, JetBrains.ReSharper.Psi.Tree.ITreeNode nodeFirst, JetBrains.ReSharper.Psi.Tree.ITreeNode nodeLast, JetBrains.ReSharper.Psi.ITreeRange origin) { }
        public static string CalcLineIndent([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker codeFormatter) { }
        public static string CalcNodeIndent([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker codeFormatter) { }
        public static void CheckForMinimumSeparator(JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl codeFormatter, JetBrains.ReSharper.Psi.Tree.ITreeNode newNode) { }
        public static int ComputeEndColumnOfNode(this JetBrains.ReSharper.Psi.Tree.ITreeNode node, System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> hasLineBreak, System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool, int> getTokenLength) { }
        public static int ComputeEndColumnOfNode(this JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet lineBreaks) { }
        public static int ComputeNodeLengthBeforeLineBreak(this JetBrains.ReSharper.Psi.Tree.ITreeNode node, System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> hasLineBreak, System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool, int> getTokenLength, JetBrains.ReSharper.Psi.Tree.ITokenNode token, out bool lineBreakEncountered) { }
        public static int ComputeNodePosition(this JetBrains.ReSharper.Psi.Tree.ITreeNode node, System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> hasLineBreak, System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool, int> getTokenLength, JetBrains.ReSharper.Psi.Tree.ITokenNode token) { }
        public static string ConvertAlignmentFromSpacesToTabsIfNeeded(string alignment, JetBrains.ReSharper.Psi.CodeStyle.AlignmentTabFillStyle style, JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings settings) { }
        public static void DecoratingIterateNodes(JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext context, JetBrains.ReSharper.Psi.Tree.ITreeNode firstNode, JetBrains.ReSharper.Psi.Tree.ITreeNode lastNode, JetBrains.ReSharper.Psi.Impl.CodeStyle.IDecoratingStage formattingStage) { }
        public static void DeleteSpaces(JetBrains.ReSharper.Psi.Tree.ITreeNode leftNode, JetBrains.ReSharper.Psi.Tree.ITreeNode rightNode) { }
        public static JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange FindFormattingRange([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, bool formatPrevSpaces, bool formatNextSpaces, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker = null) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode FindFormattingRangeToLeft([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker = null) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode FindFormattingRangeToRight([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker = null) { }
        public static JetBrains.ReSharper.Psi.ITreeRange FindSolidInnerRange(JetBrains.ReSharper.Psi.Tree.ITreeNode nodeFirst, JetBrains.ReSharper.Psi.Tree.ITreeNode nodeLast, JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker checker) { }
        public static void ForeachResult<T>([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.CodeStyle.FormatResult<T>> items, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progress, [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.ReSharper.Psi.Impl.CodeStyle.FormatResult<T>> action) { }
        public static void Format(JetBrains.ProjectModel.ISolution solution, JetBrains.DocumentModel.DocumentRange docRange, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, bool formatSpacesBefore, bool formatSpacesAfter, JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null) { }
        public static void Format(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, JetBrains.ReSharper.Psi.CodeStyle.OuterSpaceFormatType formatSpacesBefore, JetBrains.ReSharper.Psi.CodeStyle.OuterSpaceFormatType formatSpacesAfter, JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null) { }
        public static void FormatDeletedNodesHelper([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl codeFormatter, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode parent, JetBrains.ReSharper.Psi.Tree.ITreeNode prevNode, JetBrains.ReSharper.Psi.Tree.ITreeNode nextNode, bool checkForNulls) { }
        public static void FormatInsertedNodesHelper(JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl codeFormatter, JetBrains.ReSharper.Psi.Tree.ITreeNode nodeFirst, JetBrains.ReSharper.Psi.Tree.ITreeNode nodeLast, bool formatSurround, System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode> customFormatLeftOuterSpace = null, System.Action<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode> customFormatRightOuterSpace = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string GetIndent([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentCache indentCache, bool align) { }
        public static string GetIndentFromDocumentRange(this JetBrains.DocumentModel.DocumentRange documentRange) { }
        public static string GetIndentViaDocument(this JetBrains.ReSharper.Psi.Tree.ITreeNode originalNode) { }
        public static int GetLineFeedsCountTo(this JetBrains.ReSharper.Psi.Tree.ITreeNode fromNode, JetBrains.ReSharper.Psi.Tree.ITreeNode toNode, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker checker) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetLineFeedsTo([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode fromNode, JetBrains.ReSharper.Psi.Tree.ITreeNode toNode, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker checker) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string GetLineIndent([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentCache indentCache) { }
        public static string GetLineIndentFromOriginalNode(this JetBrains.ReSharper.Psi.Tree.ITreeNode originalNode, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode, bool> isOurCodeToken, JetBrains.ReSharper.Psi.TreeOffset position) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string GetNodeIndent([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentCache indentCache) { }
        public static System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> GetNodeTypeSetChecker([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet nodeTypeSet) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Text.StringBuffer GetPooledWhitespace([JetBrains.Annotations.NotNullAttribute()] string wsText) { }
        public static JetBrains.ProjectModel.ProjectFileType GetProjectFileType(this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings GetSettingsForLanguage(this JetBrains.ReSharper.Psi.CodeStyle.IGlobalFormatSettingsService service, JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ProjectModel.ProjectFileType projectFileType, JetBrains.Application.Settings.IContextBoundSettingsStore store) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetWhitespacesTo([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode fromNode, JetBrains.ReSharper.Psi.Tree.ITreeNode toNode, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker = null) { }
        public static bool HasLineBreakInside(this JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker checker) { }
        public static bool HasLineBreaksBetween([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node1, JetBrains.ReSharper.Psi.Tree.ITreeNode node2, JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker checker) { }
        public static bool HasLineFeedsTo([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode fromNode, JetBrains.ReSharper.Psi.Tree.ITreeNode toNode, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker checker) { }
        public static bool HasNewLineAfter([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker checker) { }
        public static bool HasNewLineBefore([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker checker) { }
        public static bool HasTokenBetween([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node1, JetBrains.ReSharper.Psi.Tree.ITreeNode node2, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet tokens) { }
        public static bool HasWhitespaceBefore([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker checker) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange> HierarchicalEnumNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode firstNode, JetBrains.ReSharper.Psi.Tree.ITreeNode lastNode, System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker = null) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange> HierarchicalEnumNodes([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext context) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange> HierarchicalEnumNodes(this JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange range, System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker) { }
        public static void HierarchicalIterateNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode firstNode, JetBrains.ReSharper.Psi.Tree.ITreeNode lastNode, JetBrains.ReSharper.Psi.Impl.CodeStyle.IFormattingStage formattingStage, System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker = null) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> LeftWhitespaces([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker = null) { }
        public static void MakeIndent(this JetBrains.ReSharper.Psi.Tree.ITreeNode indentNode, string indent, JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl codeFormatter) { }
        public static void MakeRangeConsistent([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode left, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode right) { }
        public static void OptimizeImportsAndRefs([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptimizeImportsServiceProvider optimizeProvider, JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IRangeMarker rangeMarker, bool optimizeUsings, bool shortenReferences, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public static void RemoveExtraLines(JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl codeFormatter, JetBrains.ReSharper.Psi.Tree.ITreeNode parent, JetBrains.ReSharper.Psi.Tree.ITreeNode prevNode, JetBrains.ReSharper.Psi.Tree.ITreeNode nextNode) { }
        public static void ReplaceSpaces(JetBrains.ReSharper.Psi.Tree.ITreeNode leftNode, JetBrains.ReSharper.Psi.Tree.ITreeNode rightNode, params JetBrains.ReSharper.Psi.Tree.ITreeNode[] wsNodes) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> RightWhitespaces([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker = null) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> SelfAndLeftWhitespaces([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker = null) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> SelfAndRightWhitespaces([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker = null) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange> SequentialEnumNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode firstNode, JetBrains.ReSharper.Psi.Tree.ITreeNode lastNode, System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker = null) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange> SequentialEnumNodes([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext context) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange> SequentialEnumNodes(this JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange range) { }
        public static void SequentialIterateNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode firstNode, JetBrains.ReSharper.Psi.Tree.ITreeNode lastNode, JetBrains.ReSharper.Psi.Impl.CodeStyle.IFormattingStage formattingStage) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode SkipLeftWhitespaces([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITokenNode token) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode SkipLeftWhitespaces([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITokenNode token, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode SkipLeftWhitespaces([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode SkipLeftWhitespaces([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode SkipRightWhitespaces([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITokenNode token) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode SkipRightWhitespaces([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode SkipRightWhitespaces([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode SkipRightWhitespaces([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITokenNode token, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Tree.ITokenNode, bool> customChecker) { }
        public static bool TokensAreOnDifferentLines(JetBrains.ReSharper.Psi.Tree.ITokenNode token1, JetBrains.ReSharper.Psi.Tree.ITokenNode token2, JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker checker) { }
        public static void TrimLeft([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static void TrimRight([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static string TurnToWhitespace(string s) { }
        public struct TokenTypePair
        {
            public TokenTypePair(JetBrains.ReSharper.Psi.Parsing.TokenNodeType type1, JetBrains.ReSharper.Psi.Parsing.TokenNodeType type2) { }
            public JetBrains.ReSharper.Psi.Parsing.TokenNodeType Type1 { get; }
            public JetBrains.ReSharper.Psi.Parsing.TokenNodeType Type2 { get; }
            public override bool Equals(object obj) { }
            public override int GetHashCode() { }
        }
    }
    public abstract class FormatterStageBase<TContext>
        where TContext : JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext
    {
        protected FormatterStageBase(TContext context) { }
        protected TContext Context { get; }
    }
    public struct FormattingRange
    {
        public readonly JetBrains.ReSharper.Psi.Tree.ITreeNode First;
        public readonly JetBrains.ReSharper.Psi.Tree.ITreeNode Last;
        public FormattingRange(JetBrains.ReSharper.Psi.Tree.ITreeNode first, JetBrains.ReSharper.Psi.Tree.ITreeNode last) { }
    }
    public class FormattingSettingsBase
    {
        public readonly JetBrains.ReSharper.Psi.CodeStyle.CommonFormatterSettingsKey CommonSettings;
        public readonly JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings GlobalSettings;
        public FormattingSettingsBase(JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings globalSettings, JetBrains.ReSharper.Psi.CodeStyle.CommonFormatterSettingsKey commonSettings) { }
    }
    public class FormattingSettingsBase<TSettingsKey> : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase
    
    {
        public readonly TSettingsKey Settings;
        public FormattingSettingsBase(TSettingsKey settings, JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings globalSettings, JetBrains.ReSharper.Psi.CodeStyle.CommonFormatterSettingsKey commonSettings) { }
    }
    public class FormattingStageContext
    {
        public FormattingStageContext(JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange range) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Tree.ITreeNode LeftChild { get; }
        public short LeftRole { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Parent { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Tree.ITreeNode RightChild { get; }
        public short RightRole { get; }
    }
    public class static FormattingStageContextExtensions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Parsing.TokenNodeType GetLeftTokenType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingStageContext context) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Parsing.TokenNodeType GetRightTokenType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingStageContext context) { }
    }
    public interface ICodeFormatterImpl : JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter, JetBrains.ReSharper.Psi.Impl.CodeStyle.IWhitespaceChecker
    {
        bool CanModifyInsideNodeRange(JetBrains.ReSharper.Psi.Tree.ITreeNode leftElement, JetBrains.ReSharper.Psi.Tree.ITreeNode rightElement, JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext context);
        bool CanModifyNode(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext context);
        JetBrains.ReSharper.Psi.Tree.ITreeNode CreateNewLine();
        JetBrains.ReSharper.Psi.Tree.ITreeNode CreateSpace(string indent, JetBrains.ReSharper.Psi.Tree.ITreeNode replacedSpace);
        JetBrains.ReSharper.Psi.Tree.ITreeNode CreateSpace();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITokenNode GetMinimalSeparator(JetBrains.ReSharper.Psi.Tree.ITokenNode leftToken, JetBrains.ReSharper.Psi.Tree.ITokenNode rightToken);
    }
    public interface IDecoratingStage
    {
        void Decorate(JetBrains.ReSharper.Psi.Tree.ITreeNode node);
    }
    public interface IFormatterDebugInfoLoggersProvider
    {
        JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingDebugInfoLogger IndentingLogger { get; }
    }
    public interface IFormattingStage
    {
        void Format(JetBrains.ReSharper.Psi.Tree.ITreeNode leftChild, JetBrains.ReSharper.Psi.Tree.ITreeNode rightChild);
    }
    public interface IGeneratedCodeRegionDetector
    {
        bool InGeneratedCode { get; }
        void Process(JetBrains.ReSharper.Psi.Tree.ITreeNode element);
    }
    public interface IIndentCache
    {
        [JetBrains.Annotations.NotNullAttribute()]
        string GetLineIndent([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node);
        [JetBrains.Annotations.NotNullAttribute()]
        string GetNodeIndent([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node);
    }
    public interface IIndentingDebugInfoLogger
    {
        void AfterNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node);
        void BeforeNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node);
        void CloseRegion(string regionName, JetBrains.ReSharper.Psi.Tree.ITreeNode node, string indent, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType indentType);
        void Ended();
        void OpenRegion(string regionName, JetBrains.ReSharper.Psi.Tree.ITreeNode node, string indent, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType indentType);
        void Started();
    }
    public interface IIndentingInfoProvider<in TContext, TSettings>
        where in TContext : JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext
        where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase
    {
        void FindAndProcessIndentingRegions(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType typeMask, JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingStageCallback<TSettings> callback, TContext context);
        void ModifyAndProcessIndent(JetBrains.ReSharper.Psi.Tree.ITreeNode prevNode, JetBrains.ReSharper.Psi.Tree.ITreeNode nodeToIndent, string defaultIndent, TContext context, JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingStageCallback<TSettings> callback);
    }
    public interface IIndentingInfoProviderWithOneSettingsKey<TContext, TSettings, TSettingsKey> : JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingInfoProvider<TContext, TSettings>
        where TContext : JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext
        where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase<> { }
    public interface IIndentingRule<TSettings>
        where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase
    {
        long Group { get; set; }
        string Name { get; }
        JetBrains.ReSharper.Psi.Tree.ITreeNode GetClosingNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node);
        JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionNode<TSettings> GetOptionTree(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingStageCallback<TSettings> callback);
        bool MatchesPatterns(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext context);
    }
    public interface IIndentingStageCallback<TSettings>
        where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase
    {
        object GetOptionValue(System.Func<TSettings, object> keyGetter, System.Linq.Expressions.LambdaExpression setting);
        void ProcessIndent(JetBrains.ReSharper.Psi.Tree.ITreeNode prevNode, JetBrains.ReSharper.Psi.Tree.ITreeNode current, string defaultIndent, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentModificationType type = 0, int standardIndentMultiplier = 0, string additionalIndent = null);
        void ProcessIndentingRegion(string regionName, JetBrains.ReSharper.Psi.Tree.ITreeNode current, JetBrains.ReSharper.Psi.Tree.ITreeNode closingNode, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType typeMask, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType indentType, int standardIndentMultiplier, string additionalIndent);
    }
    public interface IIndentOptionValue : JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionValue
    {
        string AdditionalIndent { get; }
        JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType IndentType { get; }
        int StandardIndentMultiplier { get; }
    }
    public class IndentCache<TNode> : JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentCache
        where TNode :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public IndentCache(JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl codeFormatter, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.CodeStyle.CustomIndentType, string> customLineIndenter, JetBrains.ReSharper.Psi.CodeStyle.AlignmentTabFillStyle tabFillStyle, JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings formatSettings) { }
        public JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl CodeFormatter { get; }
        protected string CalcLineIndent(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        protected string CalcNodeIndent(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public string GetCustomIndent(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.CodeStyle.CustomIndentType customIndentType) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string GetLineIndent([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string GetNodeIndent([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
    }
    public class IndentingInfoProviderBase<TContext, TSettings> : JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingInfoProvider<TContext, TSettings>
        where TContext : JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext
        where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase
    {
        public IndentingInfoProviderBase(JetBrains.ReSharper.Psi.Impl.CodeStyle.IFormatterDebugInfoLoggersProvider formatterDebugInfoLoggersProvider) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentOptionValue Align(object value, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType indentType) { }
        public virtual JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentingStage<TContext, TSettings> CreateStage(TContext context, TSettings settings, JetBrains.Application.Progress.IProgressIndicator progress) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentingRule<TSettings> Indent(string name, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern openNodePattern, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern closeNodePattern, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType indentType) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentingRule<TSettings> Indent(string name, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern openNodePattern, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern closeNodePattern, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType indentType, int indent, string additionalIndent = "") { }
        protected virtual void ModifyAndProcessIndent(JetBrains.ReSharper.Psi.Tree.ITreeNode prevNode, JetBrains.ReSharper.Psi.Tree.ITreeNode nodeToIndent, string defaultIndent, TContext context, JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingStageCallback<TSettings> callback) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern Node(JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern parentPattern) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern Node<TParent>(short childRole) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern Node<TParent>(short childRole, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> predicate) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern Node(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet nodeTypeSet) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern Node(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet nodeTypeSet, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> predicate) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern Node(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet nodeTypeSet, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern parentPattern) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern Node(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet nodeTypeSet, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern parentPattern, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> predicate) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern Node(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType nodeType, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern parentPattern) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern Node(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType nodeType) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern Node(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType nodeType, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> predicate) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern Node(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType nodeType, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern parentPattern, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> predicate) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern Node<TParent>(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType nodeType) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern NodeOfType<T>() { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern NodeOfType<T>(JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern parentPattern) { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentOptionValue Option(object value, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType indentType, int indent, string additionalIndent = "") { }
        protected static JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentOptionValue Option(object value, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType indentType) { }
        public void RegisterIndentingRuleGroup(long group, params JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingRule<>[] indentingRules) { }
        public void RegisterIndentingRules(params JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingRule<>[] indentingRules) { }
    }
    public class static IndentingInfoProviderWithOneSettingsKey
    {
        public static T GetOptionValue<TContext, TSettings, TSettingsKey, T>(this JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingInfoProviderWithOneSettingsKey<TContext, TSettings, TSettingsKey> obj, JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingStageCallback<TSettings> callback, System.Linq.Expressions.Expression<System.Func<TSettingsKey, T>> setting)
            where TContext : JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext
            where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase<> { }
        public static JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentingRule<TSettings> Indent<TContext, TSettings, TSettingsKey>(this JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingInfoProviderWithOneSettingsKey<TContext, TSettings, TSettingsKey> obj, string name, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern openNodePattern, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern closeNodePattern, System.Linq.Expressions.Expression<System.Func<TSettingsKey, object>> setting, params JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentOptionValue[] settingValueToRegion)
            where TContext : JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext
            where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase<> { }
        public static JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentingRule<TSettings> Indent<TContext, TSettings, TSettingsKey>(this JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingInfoProviderWithOneSettingsKey<TContext, TSettings, TSettingsKey> obj, string name, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern openNodePattern, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern closeNodePattern, string setting, params JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentOptionValue[] settingValueToRegion)
            where TContext : JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext
            where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase<> { }
        public static object SettingKeyGetter<TSettingsKey, TSettings>(TSettings settings)
        
            where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase<> { }
    }
    public class IndentingRule<TSettings> : JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentingRuleBase<TSettings>
        where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase
    {
        public IndentingRule(string name, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern openNodePattern, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern closeNodePattern, System.Func<TSettings, object> keyGetter, System.Linq.Expressions.LambdaExpression setting, params JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionValue[] optionValues) { }
        public JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern CloseNodePattern { get; }
        public JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern OpenNodePattern { get; }
        public override JetBrains.ReSharper.Psi.Tree.ITreeNode GetClosingNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public override bool MatchesPatterns(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext context) { }
    }
    public abstract class IndentingRuleBase<TSettings> : JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingRule<TSettings>
        where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase
    {
        protected IndentingRuleBase(string name, System.Func<TSettings, object> keyGetter, System.Linq.Expressions.LambdaExpression setting, params JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionValue[] optionValues) { }
        public long Group { get; set; }
        public string Name { get; }
        public JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionNode<TSettings> OptionTree { get; }
        public abstract JetBrains.ReSharper.Psi.Tree.ITreeNode GetClosingNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node);
        public virtual JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionNode<TSettings> GetOptionTree(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingStageCallback<TSettings> callback) { }
        public abstract bool MatchesPatterns(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext context);
    }
    public class IndentingStage<TContext, TSettings> : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormatterStageBase<TContext>, JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingStageCallback<TSettings>
        where TContext : JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext
        where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase
    {
        public IndentingStage(TContext context, TSettings settings, JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingInfoProvider<TContext, TSettings> provider, JetBrains.Application.Progress.IProgressIndicator progress, JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentingDebugInfoLogger debugInfoLogger) { }
        public void DoIndent() { }
        public void DoIndent(JetBrains.ReSharper.Psi.Tree.ITreeNode onlyChange) { }
        public void Initialize() { }
    }
    public enum IndentModificationType
    {
        UseDefault = 0,
        DoNotChangeIndent = 1,
        Remove = 2,
        Set = 3,
    }
    public class IndentOptionValue : JetBrains.ReSharper.Psi.Impl.CodeStyle.IIndentOptionValue, JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionValue
    {
        public IndentOptionValue(object value, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType indentType, int standardIndentMultiplier = 1, string additionalIndent = "") { }
        public string AdditionalIndent { get; }
        public JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType IndentType { get; }
        public int StandardIndentMultiplier { get; }
        public object Value { get; }
    }
    public class IndentRegionInfo
    {
        public IndentRegionInfo(string name, JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType indentType, JetBrains.ReSharper.Psi.Tree.ITreeNode openingNode, JetBrains.ReSharper.Psi.Tree.ITreeNode closingNode, string indent) { }
        public IndentRegionInfo(string indent) { }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode ClosingNode { get; }
        public string Indent { get; }
        public JetBrains.ReSharper.Psi.Impl.CodeStyle.IndentType IndentType { get; }
        public string Name { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode OpeningNode { get; }
        public bool Used { get; set; }
        public override string ToString() { }
    }
    [System.FlagsAttribute()]
    public enum IndentType
    {
        StartAtInternal = 1,
        StartAtExternal = 2,
        EndAtInternal = 4,
        EndAtExternal = 8,
        Alignment = 16,
        NoIndentAtExternal = 32,
        StartAfterFirstToken = 64,
        NonSticky = 128,
        IgnoreOverlappingRegions = 256,
        AbsoluteIndent = 512,
        LeaveAsIs = 1024,
        BothAtStart = 3,
        BothAtEnd = 12,
        Internal = 5,
        External = 10,
        InternalAndExternal = 15,
        IndentWhenWrapped = 9,
        AlignTill = 52,
        AlignThrough = 56,
        AlignAndIndentFromInternalThrough = 57,
        AlignAtExternalAndIndentAtInternal = 61,
        AlignAtExternalAndIndentAfterFirstToken = 88,
        None = 0,
    }
    public interface IOptimizeImportsServiceProvider
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.ReferenceContextCodec ReferenceContextCodec { get; }
        JetBrains.ReSharper.Psi.Impl.CodeStyle.IGeneratedCodeRegionDetector CreateGeneratedCodeRegionDetector(JetBrains.Application.Settings.IContextBoundSettingsStore settingsStore);
        JetBrains.ReSharper.Psi.Impl.CodeStyle.OptimizeImportReferenceType GetReferenceType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement target);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetUsedImports(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IRangeMarker rangeMarker);
        void RemoveImportsAndAddMandatory(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IRangeMarker rangeMarker, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> usedImports, JetBrains.DataFlow.Lifetime lifetime);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable ShortenReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.DeclaredElementInstance instance);
    }
    public interface IOptionNode<TSettings>
        where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase
    {
        System.Func<TSettings, object> KeyGetter { get; }
        System.Linq.Expressions.LambdaExpression Setting { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionValue> Values { get; }
    }
    public interface IOptionValue
    {
        object Value { get; }
    }
    public interface IWhitespaceChecker
    {
        bool IsNewLine(JetBrains.ReSharper.Psi.Tree.ITreeNode ws);
        bool IsWhitespaceToken(JetBrains.ReSharper.Psi.Tree.ITokenNode token);
        bool IsWhitespaceToken(JetBrains.ReSharper.Psi.Tree.ITreeNode node);
    }
    public class NestedOptionNode<TSettings> : JetBrains.ReSharper.Psi.Impl.CodeStyle.OptionNode<TSettings>, JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionValue
        where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase
    {
        public NestedOptionNode(object value, System.Func<TSettings, object> keyGetter, System.Linq.Expressions.LambdaExpression setting, params JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionValue[] values) { }
        public object Value { get; }
    }
    public class NodePattern
    {
        public NodePattern(short childRole = 0, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet nodeTypeSet = null, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType nodeType = null, System.Type type = null, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> predicate = null, JetBrains.ReSharper.Psi.Impl.CodeStyle.NodePattern parentPattern = null) { }
        public bool Matches(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
    }
    public enum OptimizeImportReferenceType
    {
        IGNORE = 0,
        DO_NOT_TOUCH = 1,
        SIGNATURE = 2,
        CODE_BLOCK = 3,
    }
    public class OptimizeImportsEngine
    {
        public OptimizeImportsEngine(JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptimizeImportsServiceProvider provider) { }
        public void Optimize(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IRangeMarker rangeMarker, bool optimizeUsings, bool shortenReferences, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
    }
    public class OptionNode<TSettings> : JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionNode<TSettings>
        where TSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase
    {
        public OptionNode(System.Func<TSettings, object> keyGetter, System.Linq.Expressions.LambdaExpression setting, params JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionValue[] values) { }
        public System.Func<TSettings, object> KeyGetter { get; }
        public System.Linq.Expressions.LambdaExpression Setting { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.CodeStyle.IOptionValue> Values { get; }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.CodeStyle.Obsolete
{
    
    [System.ObsoleteAttribute()]
    public class CodeStyleSettingsManager
    {
        public CodeStyleSettingsManager(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Parts.IPartsCatalogueSet catalog) { }
    }
    [System.ObsoleteAttribute()]
    public class CodeStyleSettingsShellStore : JetBrains.Application.Configuration.IXmlReadable, JetBrains.Application.Configuration.IXmlUpgradable
    {
        public CodeStyleSettingsShellStore(JetBrains.Application.Configuration.IComponentSettingsProvider settings, JetBrains.ReSharper.Psi.Impl.CodeStyle.Obsolete.CodeStyleSettingsManager codeStyleSettingsManager) { }
        public JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete CodeStyleSettings { get; set; }
        public virtual JetBrains.ReSharper.Psi.Impl.CodeStyle.Obsolete.CodeStyleSettingsManager CodeStyleSettingsManager { get; }
        public System.Collections.Generic.IEnumerable<string> LegacyTagNames { get; }
        public event System.Action CodeStyleSettingsChanged;
        public bool UpgradeFromXml(System.Xml.XmlElement element, System.Version version) { }
    }
    [System.ObsoleteAttribute()]
    public class CodeStyleSettingsSolutionStore : JetBrains.Application.Configuration.IXmlReadable
    {
        public CodeStyleSettingsSolutionStore(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Configuration.IComponentSettingsProvider solutionSettingsComponent, JetBrains.ReSharper.Psi.Impl.CodeStyle.Obsolete.CodeStyleSettingsShellStore codeStyleSettingsStore, JetBrains.ReSharper.Psi.Impl.CodeStyle.Obsolete.CodeStyleSettingsManager codeStyleSettingsManager, JetBrains.ProjectModel.ISolution solution) { }
        public virtual JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete CodeStyleSettings { get; }
        public JetBrains.ReSharper.Psi.Impl.CodeStyle.Obsolete.CodeStyleSettingsManager CodeStyleSettingsManager { get; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(null)]
        public virtual JetBrains.DataFlow.IProperty<string> ExternalPath { get; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsSharing.USER)]
        public virtual JetBrains.DataFlow.IProperty<JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsSharing> Sharing { get; }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.ControlFlow.Util
{
    
    public class OneToCompactListMap<TKey, TValue> : JetBrains.Util.IOneToManyMap<TKey, TValue, System.Collections.Generic.IList<TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>>, System.Collections.IEnumerable
    
    
    {
        public OneToCompactListMap() { }
        public System.Collections.Generic.IList<TValue> this[TKey key] { get; }
        public int ValueCount { get; }
        public void Add(TKey key, TValue value) { }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>> GetEnumerator() { }
        public System.Collections.Generic.IList<TValue> GetValuesSafe(TKey key) { }
        public bool Remove(TKey key, TValue value) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Paths
{
    
    public class ModuleDeclaredElement : JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModuleDeclaredElement
    {
        public ModuleDeclaredElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IModule module) { }
        public ModuleDeclaredElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IModule module, [JetBrains.Annotations.NotNullAttribute()] string name) { }
        public JetBrains.Metadata.Utils.AssemblyNameInfo AssemblyName { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.Util.FileSystemPath Location { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.ProjectModel.IModule ProjectModule { get; }
        public string ShortName { get; }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public JetBrains.ProjectModel.IProjectItem GetProjectItem() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class PathMappingManagerImpl : JetBrains.ReSharper.Psi.Paths.PathMappingManager
    {
        public PathMappingManagerImpl(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.ISolution solution, JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.Application.ChangeManager changeManager) { }
        protected override JetBrains.ReSharper.Psi.Paths.IProjectPathMapping GetPathMappingImpl(JetBrains.ProjectModel.IProject project) { }
        protected override void RunPathMappingEditorImpl(JetBrains.ProjectModel.IProject project, JetBrains.Util.FileSystemPath preselectedPath) { }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class VirtualPathsServiceImpl : JetBrains.ReSharper.Psi.Paths.IVirtualFilesProvider, JetBrains.ReSharper.Psi.Paths.IVirtualFoldersProvider, JetBrains.ReSharper.Psi.Paths.IVirtualPathsService
    {
        public VirtualPathsServiceImpl(JetBrains.DataFlow.Lifetime lifetime) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.FileSystemPath> GetAbsolutePathsToVirtualFiles(JetBrains.ProjectModel.IProject project) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.FileSystemPath> GetAbsolutePathsToVirtualFolders(JetBrains.ProjectModel.IProject project) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.FileSystemPath> GetPathPartsIn(JetBrains.ProjectModel.IProject project, JetBrains.Util.FileSystemPath virtualPrefixPath) { }
        public JetBrains.ProjectModel.IProjectFile GetProjectFileByVirtualPath(JetBrains.ProjectModel.IProject project, JetBrains.Util.FileSystemPath virtualPath) { }
        public JetBrains.ProjectModel.IProjectFolder GetProjectFolderByVirtualPath(JetBrains.ProjectModel.IProject project, JetBrains.Util.FileSystemPath virtualPath) { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile GetPsiSourceFileByVirtualPath(JetBrains.ProjectModel.IProject project, JetBrains.Util.FileSystemPath virtualPath) { }
        public bool IsVirtualPathOrPrefix(JetBrains.ProjectModel.IProject project, JetBrains.Util.FileSystemPath virtualPath) { }
        public void RegisterFilesProvider(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ReSharper.Psi.Paths.IVirtualFilesProvider filesProvider) { }
        public void RegisterFoldersProvider(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ReSharper.Psi.Paths.IVirtualFoldersProvider foldersProvider) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Reflection2
{
    
    public class AssemblyAttribures : JetBrains.ReSharper.Psi.IAttributesSet
    {
        public AssemblyAttribures(JetBrains.ReSharper.Psi.Impl.Reflection2.AssemblyPsiFile assemblyPsiFile, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
    }
    public class AssemblyPsiFile : JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile, JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity
    {
        public AssemblyPsiFile([JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.Util.FileSystemPath, JetBrains.ReSharper.Psi.Modules.IPsiModule, JetBrains.Metadata.Reader.API.MetadataLoader> metadataLoaderFactory, JetBrains.ReSharper.Psi.IPsiConfiguration psiConfiguration, JetBrains.Util.Caches.IExternalProviderCache<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext>, JetBrains.ReSharper.Psi.IType> decodedTypeCache, JetBrains.Util.Caches.IWeakRefRetainerCache<object> compiledMembersBucketCache) { }
        public JetBrains.Metadata.Utils.AssemblyNameInfo AssemblyName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.AssemblyExternalAnnotations ExternalAnnotations { get; }
        public JetBrains.ReSharper.Psi.Caches.ILibraryMemberNamesAccess MemberNamesAccess { get; }
        public System.Func<JetBrains.Util.FileSystemPath, JetBrains.ReSharper.Psi.Modules.IPsiModule, JetBrains.Metadata.Reader.API.MetadataLoader> MetadataLoaderFactory { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Guid Mvid { get; }
        public virtual JetBrains.Metadata.Utils.AssemblyNameInfo[] ReferencedAssembliesNames { get; }
        public System.DateTime Timestamp { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledType> Types { get; }
        public void BindToModule([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public JetBrains.ReSharper.Psi.IAttributesSet CreateAssemblyAttributes(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        protected virtual JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionElementAccessibility CreateReflectionElementAccessibility(bool fullMetadataLoad) { }
        protected virtual JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionElementPropertiesProvider CreateReflectionElementPropertiesProvider() { }
        protected virtual JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionTypeBuilder CreateReflectionTypeBuilder(JetBrains.ReSharper.Psi.Impl.Reflection2.IAssemblyDataCache cache, JetBrains.Metadata.Reader.API.IMetadataAssembly assembly) { }
        public JetBrains.ReSharper.Psi.ICompiledElement CreateWrapper(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public void Dump(System.IO.TextWriter writer, string indent, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.ReSharper.Psi.IDeclaredElement FindElementByQualifiedName(string qualifiedName) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public bool IsValid() { }
        public void LoadAllTypeMembers() { }
        public virtual void LoadAssembly([JetBrains.Annotations.NotNullAttribute()] JetBrains.Metadata.Reader.API.IMetadataAssembly assembly, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule containingModule) { }
        public override string ToString() { }
        public void UnbindFromModule() { }
    }
    public class ClrNameInternTrie
    {
        public ClrNameInternTrie() { }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.ClrNameInternTrie.INode Add([JetBrains.Annotations.NotNullAttribute()] string namespaceName, string typeName = null) { }
        public interface INode
        {
            JetBrains.ReSharper.Psi.IClrTypeName ClrTypeName { get; }
            JetBrains.Util.dataStructures.StringConcat FullNameConcat { get; }
            JetBrains.ReSharper.Psi.Impl.Reflection2.ClrNameInternTrie.INode Parent { get; }
            string PartName { get; }
            System.Collections.Generic.ICollection<string> Parts { get; }
            string GetFullName();
            JetBrains.ReSharper.Psi.Impl.Reflection2.ClrNameInternTrie.INode GetOrCreate(string shortName);
            JetBrains.ReSharper.Psi.Impl.Reflection2.ClrNameInternTrie.INode GetOrCreate(JetBrains.Util.StringSlice shortName);
        }
    }
    public abstract class CompiledElementBase : JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity
    {
        protected System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Impl.Reflection2.MetadataAttributeInstance> myAttributeInstances;
        protected readonly JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity myParent;
        protected CompiledElementBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity parent, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Metadata.Reader.API.IMetadataEntity entity, bool loadAttributes = True) { }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        protected virtual System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IAttributeInstance> BuildAttributeInstances(JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public abstract JetBrains.ReSharper.Psi.ICompiledElement CreateWrapper(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        public virtual void Dump(System.IO.TextWriter writer, string indent, JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.Member GetContainingCompiledMember() { }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledType GetContainingCompiledType() { }
        protected virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Impl.Reflection2.MetadataAttributeInstance> GetMetadataAttributeInstances() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public virtual System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit, JetBrains.ReSharper.Psi.ICompiledElement wrapper) { }
        public abstract string GetXMLDocId(JetBrains.ReSharper.Psi.ICompiledElement typeElement);
        public System.Xml.XmlNode GetXMLDocNode(bool inherit, JetBrains.ReSharper.Psi.ICompiledElement wrapper) { }
        protected virtual bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName qualifiedTypeName, JetBrains.ReSharper.Psi.ICompiledElement typeMember) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        protected virtual bool HasMetadataAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName qualifiedTypeName) { }
        public virtual bool IsValid() { }
        public override string ToString() { }
    }
    public abstract class CompiledType : JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase, JetBrains.ReSharper.Psi.Caches.IMetadataTokenOwner, JetBrains.ReSharper.Psi.Caches.SymbolCache.ICacheTrieNodeOwner
    {
        protected JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionTypeFlags TypeFlags;
        protected CompiledType(JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity parent, JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledTypeElementFactory factory, JetBrains.Metadata.Reader.API.IMetadataTypeInfo info) { }
        public System.Collections.Generic.HashSet<string> ExtendsListNames { get; }
        public virtual System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.Method> ExtensionMethods { get; }
        protected bool HasBaseClass { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public bool IsAbstract { get; }
        public bool IsExtern { get; }
        public bool IsOverride { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public abstract System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        public uint ModuleToken { get; }
        public JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile PsiAssemblyFile { get; }
        public string ShortName { get; }
        public uint Token { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.TypeParameter> TypeParameters { get; }
        protected override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IAttributeInstance> BuildAttributeInstances(JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected virtual JetBrains.ReSharper.Psi.Dependencies.Hash CalculateHashInternal() { }
        public override void Dump(System.IO.TextWriter writer, string indent, JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain GetAccessibilityDomain(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.ITypeElement contextTypeElement, bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.ICompiledElement contextTypeElement, JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.IDeclaredType GetBaseClassType(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> GetConstructors(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        public JetBrains.ReSharper.Psi.INamespace GetContainingNamespace(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public abstract JetBrains.ReSharper.Psi.DeclaredElementType GetElementType();
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> GetEvents(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        protected override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Impl.Reflection2.MetadataAttributeInstance> GetMetadataAttributeInstances() { }
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> GetMethods(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        public System.Collections.Generic.IEnumerable<string> GetNamespaceNames() { }
        public abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledType> GetNestedCompiledTypes();
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> GetOperators(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> GetProperties(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public virtual string GetXMLDocId(JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.ICompiledElement compiledElement, JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        protected override bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName qualifiedTypeName, JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        protected override bool HasMetadataAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName qualifiedTypeName) { }
        public bool IsSynthetic() { }
        public override bool IsValid() { }
        public override string ToString() { }
        public void Unbind() { }
    }
    public abstract class CompiledTypeElementFactory
    {
        public virtual JetBrains.ReSharper.Psi.MemberDecoration GetDecoration(JetBrains.Metadata.Reader.API.IMetadataTypeInfo info) { }
        public virtual System.Collections.Generic.KeyValuePair<string, string> GetName(JetBrains.Metadata.Reader.API.IMetadataTypeInfo info) { }
        public virtual bool IsImplementsInterface(JetBrains.Metadata.Reader.API.IMetadataTypeInfo typeInfo, JetBrains.Metadata.Reader.API.IMetadataClassType implementedInterface) { }
    }
    public interface IAssemblyDataCache
    {
        JetBrains.Metadata.Utils.AssemblyNameInfo AddAssemblyName(JetBrains.Metadata.Utils.AssemblyNameInfo name);
        int[] AddAttributeHash(int[] hash);
        string AddMemberName(string str);
        JetBrains.ReSharper.Psi.Impl.Reflection2.ClrNameInternTrie.INode AddNamespaceName(string namespaceName);
        string AddString(string str);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionType AddType([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionType repr);
        JetBrains.ReSharper.Psi.Impl.Reflection2.ClrNameInternTrie.INode AddTypeName(string namespaceName, string typeName);
        void OnAssemblyLoadingFinished();
    }
    public interface ICompiledEntity
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity Parent { get; }
        JetBrains.ReSharper.Psi.ICompiledElement CreateWrapper([JetBrains.Annotations.NotNullAttribute()] JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        bool IsValid();
    }
    public struct ImplementsMethodSpecification
    {
        public readonly string myName;
        public readonly JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionType myType;
        public ImplementsMethodSpecification(JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, JetBrains.Metadata.Reader.API.MethodSpecification specification) { }
        public void Dump(System.IO.TextWriter sb, string indent) { }
    }
    public interface IPsiAssemblyFileLoader
    {
        JetBrains.Util.Caches.IExternalProviderCache<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext>, JetBrains.ReSharper.Psi.IType> DecodedTypeCache { get; }
        JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile LoadAssembly(JetBrains.ReSharper.Psi.IPsiAssembly assembly);
    }
    public interface IReflectionBuilder : System.IDisposable
    {
        JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionElementAccessibility Accessibility { get; }
        JetBrains.ReSharper.Psi.Impl.Reflection2.IAssemblyDataCache AssemblyDataCache { get; }
        bool EagerMetadataLoad { get; }
        JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionElementPropertiesProvider ElementFactory { get; }
        JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionTypeBuilder ReflectionTypeBuilder { get; }
    }
    public class static MarshalSpecConverter
    {
        public static JetBrains.ReSharper.Psi.IAttributeInstance CreateMarshalAsAttribute(JetBrains.Metadata.Reader.API.MarshalSpec.IMarshalSpec marshalSpec, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.IAttributeInstance CreateMarshalAsAttribute(byte[] marshalSpec, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
    }
    public abstract class MemberOwner : JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledType
    {
        protected MemberOwner(JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity parent, JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledTypeElementFactory factory, JetBrains.Metadata.Reader.API.IMetadataTypeInfo info) { }
        public override System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.Method> ExtensionMethods { get; }
        protected bool HasPrivateConstructors { get; }
        public override System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        public override void Dump(System.IO.TextWriter writer, string indent, JetBrains.ReSharper.Psi.ICompiledElement compiledElement) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> GetConstants(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> GetConstructors(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> GetEvents(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> GetFields(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public virtual JetBrains.ReSharper.Psi.MemberPresenceFlag GetMemberPresenceFlag() { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> GetMethods(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledType> GetNestedCompiledTypes() { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> GetOperators(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> GetProperties(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        protected JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.Method[] GetRawMethods() { }
    }
    public class MetadataAccessFileWithDependencies : JetBrains.ReSharper.Psi.Dependencies.IFileWithDependencies, System.IDisposable
    {
        public MetadataAccessFileWithDependencies([JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.FileSystemPath location) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Dependencies.ModuleProperty> ModulePropertyDependencies { get; }
        public JetBrains.ReSharper.Psi.Dependencies.IHashableEntityInfo[] CalcAllEntityHashes(object hashableEntity, string parentQualifiedName, out string qualifiedName) { }
        public void Dispose() { }
        public System.Collections.IEnumerable EntityChildren(object hashableEntity) { }
        public System.Collections.Generic.ICollection<string> GetEmptyNamespaceDeclarations() { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<object, JetBrains.ReSharper.Psi.Dependencies.IUsingsInfo>> GetTopLevelHashableEntities() { }
        public bool IsEntityInternal(object hashableEntity) { }
    }
    public class MetadataAccessHasher
    {
        public MetadataAccessHasher([JetBrains.Annotations.NotNullAttribute()] JetBrains.Metadata.Access.IMetadataAccess metadata) { }
        public JetBrains.Metadata.Access.IMetadataAccess Metadata { get; }
        public System.Collections.Generic.IList<JetBrains.Metadata.Access.MetadataToken> GetEntityChildren(JetBrains.Metadata.Access.MetadataToken entityToken) { }
        public JetBrains.ReSharper.Psi.Dependencies.IHashableEntityInfo[] GetEntityHashes(JetBrains.Metadata.Access.MetadataToken token, string parentQualifiedName, out string qualifiedName) { }
        public bool IsEntityInternal(JetBrains.Metadata.Access.MetadataToken entityToken) { }
    }
    public class MetadataAttributeInstance
    {
        public int PositionParameterCount { get; }
        public JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        public JetBrains.ReSharper.Psi.IAttributeInstance CreateWrapper(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public void Dump(System.IO.TextWriter writer, string indent) { }
        public static JetBrains.ReSharper.Psi.Impl.Reflection2.MetadataAttributeInstance FromCompilerSpecificAttribute(JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity psiOwner, JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, JetBrains.Metadata.Reader.API.ICompilerSpecificAttribute compilerSpecificAttribute, JetBrains.Metadata.Reader.API.IMetadataAssembly declaringAssembly) { }
        public static JetBrains.ReSharper.Psi.Impl.Reflection2.MetadataAttributeInstance FromMetadataCustomAttribute(JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity parent, JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, JetBrains.Metadata.Reader.API.IMetadataCustomAttribute customAttribute) { }
        public static JetBrains.ReSharper.Psi.Impl.Reflection2.MetadataAttributeInstance FromMetadataSecurityAttribute(JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity parent, JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, JetBrains.Metadata.Reader.API.IMetadataSecurityAttribute securityAttribute, JetBrains.Metadata.Reader.API.IMetadataAssembly declaringAssembly, JetBrains.Metadata.Reader.API.SecurityAction securityAction) { }
        public JetBrains.ReSharper.Psi.IDeclaredType GetAttributeType(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext referenceResolveContext) { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.IConstructor GetConstructor(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.ReSharper.Psi.AttributeValue NamedParameter(string name, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<string, JetBrains.ReSharper.Psi.AttributeValue>> NamedParameters(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.ReSharper.Psi.AttributeValue PositionParameter(int paramIndex, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.AttributeValue> PositionParameters(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
    }
    public class MetadataAttributeInstanceWrapper : JetBrains.ReSharper.Psi.IAttributeInstance
    {
        public JetBrains.ReSharper.Psi.IConstructor Constructor { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.MetadataAttributeInstance Owner { get; }
        public int PositionParameterCount { get; }
        public JetBrains.ReSharper.Psi.IDeclaredType GetAttributeType() { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.AttributeValue NamedParameter(string name) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<string, JetBrains.ReSharper.Psi.AttributeValue>> NamedParameters() { }
        public JetBrains.ReSharper.Psi.AttributeValue PositionParameter(int paramIndex) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.AttributeValue> PositionParameters() { }
    }
    public abstract class MethodBase : JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.Member
    {
        protected readonly JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.Parameter myParametersHead;
        protected MethodBase(JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity element, JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, JetBrains.Metadata.Reader.API.IMetadataMethod method, string shortName, JetBrains.ReSharper.Psi.MemberDecoration decoration, JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledTypeElementFactory ownerFactory) { }
        public bool IsPredefined { get; }
        protected JetBrains.ReSharper.Psi.Impl.Reflection2.ImplementsMethodSpecification[] MethodSpecifications { get; }
        protected override JetBrains.ReSharper.Psi.Dependencies.Hash CalculateHashInternal() { }
        protected bool CalculateIsIterator(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override void Dump(System.IO.TextWriter writer, string indent, JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExplicitImplementation> GetExplicitImplementations(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> GetParameters(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public virtual JetBrains.ReSharper.Psi.IType GetReturnType(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.ReSharper.Psi.IAttributesSet GetReturnTypeAttributes(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.IParametersOwner parametersOwner, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public override string ToString() { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class PsiAssemblyFileLoader : JetBrains.Application.IChangeProvider, JetBrains.ReSharper.Psi.Impl.Reflection2.IPsiAssemblyFileLoader
    {
        protected JetBrains.Util.Caches.LRUWeakRefRetainerCache<object> CompiledBucketCache;
        public PsiAssemblyFileLoader(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.ExternalAnnotationsManager externalAnnotationsManager, JetBrains.ProjectModel.model2.Assemblies.AssemblyToAssemblyResolvers.AssemblyToAssemblyReferencesResolveManager resolveManager, JetBrains.ReSharper.Psi.IPsiConfiguration psiConfiguration, JetBrains.ProjectModel.PlatformManager platformManager, JetBrains.ProjectModel.ISolution solution, JetBrains.ReSharper.Psi.Modules.IPsiModules psiModules, JetBrains.Application.ChangeManager changeManager, JetBrains.Application.Env.Components.ProductSettingsLocation productSettingsLocation) { }
        public JetBrains.Util.Caches.IExternalProviderCache<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext>, JetBrains.ReSharper.Psi.IType> DecodedTypeCache { get; set; }
        public object Execute(JetBrains.Application.IChangeMap changeMap) { }
        protected virtual void InitCaches(JetBrains.DataFlow.Lifetime lifetime) { }
        public virtual JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile LoadAssembly(JetBrains.ReSharper.Psi.IPsiAssembly psiAssembly) { }
    }
    public class ReflectionBuilder : JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder, System.IDisposable
    {
        public ReflectionBuilder(JetBrains.ReSharper.Psi.Impl.Reflection2.IAssemblyDataCache assemblyDataCache, JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionTypeBuilder reflectionTypeBuilder, JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionElementAccessibility accessibility, JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionElementPropertiesProvider elementFactory, bool eagerMetadataLoad, System.Action onDispose) { }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionElementAccessibility Accessibility { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.IAssemblyDataCache AssemblyDataCache { get; }
        public bool EagerMetadataLoad { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionElementPropertiesProvider ElementFactory { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionTypeBuilder ReflectionTypeBuilder { get; }
        public void Dispose() { }
    }
    public class ReflectionClassType : JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionClassTypeBase
    {
        public ReflectionClassType(JetBrains.ReSharper.Psi.Impl.Reflection2.ClrNameInternTrie.INode name, JetBrains.Metadata.Utils.AssemblyNameInfo assemblyName, JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionType[] typeArguments, JetBrains.Util.Pair<, >[] typeModifiers) { }
        public override JetBrains.ReSharper.Psi.IClrTypeName ClrName { get; }
        protected override bool CompareClrName(JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionClassTypeBase otherType) { }
        protected override int GetClrNameHash() { }
    }
    public abstract class ReflectionClassTypeBase : JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionType
    {
        protected ReflectionClassTypeBase(JetBrains.Metadata.Utils.AssemblyNameInfo assemblyName, JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionType[] typeArguments, JetBrains.Util.Pair<, >[] typeModifiers) { }
        public JetBrains.Metadata.Utils.AssemblyNameInfo AssemblyName { get; }
        public abstract JetBrains.ReSharper.Psi.IClrTypeName ClrName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionType[] TypeArguments { get; }
        public override JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        protected virtual bool CompareClrName(JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionClassTypeBase otherType) { }
        public virtual JetBrains.ReSharper.Psi.IType DecodeType(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.ITypeMember context, JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool[] dynamic, ref int dynamicIndx, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public override bool Equals(object obj) { }
        protected virtual int GetClrNameHash() { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class ReflectionElementAccessibility
    {
        public ReflectionElementAccessibility(bool fullMetadataLoad) { }
        protected bool IsCompilerGenerated(JetBrains.Metadata.Reader.API.IMetadataEntity entity) { }
        public virtual bool IsFieldAccessible(JetBrains.Metadata.Reader.API.IMetadataField field) { }
        public virtual bool IsTypeAccessible(JetBrains.Metadata.Reader.API.IMetadataTypeInfo typeInfo) { }
    }
    public class ReflectionElementPropertiesProvider
    {
        public virtual JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledTypeElementFactory ClassProperties { get; }
        public virtual JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledTypeElementFactory DelegateProperties { get; }
        public virtual JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledTypeElementFactory EnumProperties { get; }
        public virtual JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledTypeElementFactory InterfaceProperties { get; }
        public virtual JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledTypeElementFactory StructProperties { get; }
    }
    public abstract class ReflectionType
    {
        protected ReflectionType(JetBrains.Util.Pair<, >[] typeModifiers) { }
        public abstract JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash);
        public abstract JetBrains.ReSharper.Psi.IType DecodeType(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.ITypeMember context, JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool[] dynamic, ref int dynamicIndx, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext);
        protected JetBrains.ReSharper.Psi.TypeModifier[] DecodeTypeModifiers(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.ITypeMember context, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public virtual bool Equals(object obj) { }
        public virtual int GetHashCode() { }
        public virtual string ToString() { }
        protected bool TypeModifierEquals(JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionType type) { }
        protected int TypeModifiersHashCode() { }
    }
    public class ReflectionTypeBuilder
    {
        public ReflectionTypeBuilder([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.Reflection2.IAssemblyDataCache cache) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionClassType Create(JetBrains.Metadata.Reader.API.IMetadataTypeInfo info) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionClassType Create(JetBrains.Metadata.Utils.AssemblyNameInfo declaringAssemblyName, string fqn) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionClassType Create(JetBrains.Metadata.Utils.AssemblyNameInfo declaringAssemblyName, string namespaceName, string typeName) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionType Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.Metadata.Reader.API.IMetadataType type) { }
        public virtual JetBrains.Metadata.Reader.API.MetadataTypeReference ProjectTypeReference(JetBrains.Metadata.Reader.API.MetadataTypeReference reference) { }
    }
    [System.FlagsAttribute()]
    public enum ReflectionTypeFlags : ushort
    {
        HasBaseClass = 1,
        HasHiddenInstanceFields = 8,
        StrippedTypeParametersFromName = 16,
        InvalidTypeParametersCount = 32,
        OldTypeParametersSymbol = 64,
    }
    public class ReflectionTypeNameCache
    {
        public ReflectionTypeNameCache() { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName(JetBrains.Metadata.Reader.API.IMetadataTypeInfo typeInfo) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled
{
    
    public sealed class Interface : JetBrains.ReSharper.Psi.Impl.Reflection2.MemberOwner
    {
        public Interface(JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity parent, JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, JetBrains.Metadata.Reader.API.IMetadataTypeInfo info) { }
        public override JetBrains.ReSharper.Psi.ICompiledElement CreateWrapper(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override void Dump(System.IO.TextWriter writer, string indent, JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> GetConstructors(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
    }
    public abstract class Member : JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase, JetBrains.ReSharper.Psi.Caches.IMetadataTokenOwner, System.IEquatable<JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.Member>
    {
        protected Member(JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity parent, JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, JetBrains.Metadata.Reader.API.IMetadataEntity entity, string shortName, JetBrains.ReSharper.Psi.MemberDecoration decoration) { }
        public virtual bool IsAbstract { get; }
        public virtual bool IsExtern { get; }
        public virtual bool IsOverride { get; }
        public virtual bool IsReadonly { get; }
        public virtual bool IsSealed { get; }
        public virtual bool IsStatic { get; }
        public virtual bool IsUnsafe { get; }
        public virtual bool IsVirtual { get; }
        public virtual bool IsVolatile { get; }
        public uint ModuleToken { get; }
        public JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile PsiAssemblyFile { get; }
        public virtual string ShortName { get; }
        public uint Token { get; }
        protected override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IAttributeInstance> BuildAttributeInstances(JetBrains.ReSharper.Psi.ICompiledElement xmlDocIdOwner) { }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected virtual JetBrains.ReSharper.Psi.Dependencies.Hash CalculateHashInternal() { }
        public override void Dump(System.IO.TextWriter writer, string indent, JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.Member other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain GetAccessibilityDomain(JetBrains.ReSharper.Psi.ITypeMember typeMember) { }
        public virtual JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit, JetBrains.ReSharper.Psi.ITypeMember typeMember) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit, JetBrains.ReSharper.Psi.ITypeMember typeMember) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public abstract JetBrains.ReSharper.Psi.DeclaredElementType GetElementType();
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers(JetBrains.ReSharper.Psi.ITypeMember typeMember) { }
        public virtual JetBrains.ReSharper.Psi.MemberHidePolicy GetHidePolicy(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolve) { }
        public virtual JetBrains.ReSharper.Psi.Resolve.ISubstitution GetIdSubstitution(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public override string GetXMLDocId(JetBrains.ReSharper.Psi.ICompiledElement typeMember) { }
        protected override bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName qualifiedTypeName, JetBrains.ReSharper.Psi.ICompiledElement typeMember) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit, JetBrains.ReSharper.Psi.ITypeMember typeMember) { }
        public bool IsSynthetic() { }
        public override string ToString() { }
    }
    public sealed class Method : JetBrains.ReSharper.Psi.Impl.Reflection2.MethodBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.IExtensionMethodProxy
    {
        public Method(JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledType element, JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, JetBrains.Metadata.Reader.API.IMetadataMethod method, JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledTypeElementFactory ownerFactory) { }
        public bool CanBeImplicitImplementation { get; }
        public bool IsExplicitImplementation { get; }
        public bool IsExtensionMethod { get; }
        public bool IsVarArg { get; }
        protected override JetBrains.ReSharper.Psi.Dependencies.Hash CalculateHashInternal() { }
        public override JetBrains.ReSharper.Psi.ICompiledElement CreateWrapper(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override void Dump(System.IO.TextWriter writer, string indent, JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public override JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CompiledCandidateType GetExtendedTypePattern() { }
        public override JetBrains.ReSharper.Psi.Resolve.ISubstitution GetIdSubstitution(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IMethod> GetMethods(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> GetParameters(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> GetTypeParameters(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public bool IsIterator(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
    }
    public sealed class Parameter : JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase, System.IEquatable<JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.Parameter>
    {
        public Parameter(JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity element, JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, JetBrains.Metadata.Reader.API.IMetadataParameter parameter) { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsOptional { get; }
        public bool IsParameterArray { get; }
        public bool IsValueVariable { get; }
        public bool IsVarArg { get; }
        public JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        protected override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IAttributeInstance> BuildAttributeInstances(JetBrains.ReSharper.Psi.ICompiledElement wrapper) { }
        public override JetBrains.ReSharper.Psi.ICompiledElement CreateWrapper(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override void Dump(System.IO.TextWriter writer, string indent, JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.Parameter other) { }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit, JetBrains.ReSharper.Psi.IParameter parameter) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit, JetBrains.ReSharper.Psi.IParameter parameter) { }
        public JetBrains.ReSharper.Psi.IParametersOwner GetContainingParametersOwnerRaw(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DefaultValue GetDefaultValue(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IType GetType(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit, JetBrains.ReSharper.Psi.ICompiledElement wrapper) { }
        public override string GetXMLDocId(JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit, JetBrains.ReSharper.Psi.IParameter parameter) { }
        protected override bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName qualifiedTypeName, JetBrains.ReSharper.Psi.ICompiledElement wrapper) { }
        public bool IsSynthetic() { }
        public override string ToString() { }
    }
    public sealed class TypeParameter : JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase, System.IEquatable<JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.TypeParameter>
    {
        public TypeParameter(JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity element, JetBrains.ReSharper.Psi.Impl.Reflection2.IReflectionBuilder builder, JetBrains.Metadata.Reader.API.IMetadataGenericArgument typeParameter) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public int Index { get; }
        public System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeElement> NestedTypes { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public JetBrains.ReSharper.Psi.TypeParameterVariance Variance { get; }
        public JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        protected override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IAttributeInstance> BuildAttributeInstances(JetBrains.ReSharper.Psi.ICompiledElement typeMember) { }
        public override JetBrains.ReSharper.Psi.ICompiledElement CreateWrapper(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public override void Dump(System.IO.TextWriter writer, string indent, JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.TypeParameter other) { }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit, JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit, JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.INamespace GetContainingNamespace(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public JetBrains.ReSharper.Psi.ITypeParametersOwner GetOwner(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.ReSharper.Psi.IMethod GetOwnerMethod(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetOwnerTypeElement(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> GetTypeConstraints(JetBrains.ReSharper.Psi.ITypeParameter parameter) { }
        public override string GetXMLDocId(JetBrains.ReSharper.Psi.ICompiledElement typeElement) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit, JetBrains.ReSharper.Psi.ITypeParameter typMember) { }
        protected override bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName qualifiedTypeName, JetBrains.ReSharper.Psi.ICompiledElement typeMember) { }
        public bool HasDefaultConstructor(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public bool IsClassType(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public bool IsSynthetic() { }
        public bool IsValueType(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context
{
    
    public class AccessorElement : JetBrains.ReSharper.Psi.IAccessor, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IMethod, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CanBeImplicitImplementation { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExplicitImplementation> ExplicitImplementations { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExplicitImplementation { get; }
        public bool IsExtensionMethod { get; }
        public bool IsExtern { get; }
        public bool IsIterator { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVarArg { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.AccessorKind Kind { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.IOverridableMember OwnerMember { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public JetBrains.ReSharper.Psi.IParameter ValueVariable { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.AccessorElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class ClassElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClass, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> Constants { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> Fields { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExtern { get; }
        public bool IsOverride { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeElement> NestedTypes { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.ClassElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.IDeclaredType GetBaseClassType() { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.INamespace GetContainingNamespace() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public JetBrains.ReSharper.Psi.MemberPresenceFlag GetMemberPresenceFlag() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile GetSingleOrDefaultSourceFile() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class ConstantElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IField, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public JetBrains.ReSharper.Psi.ConstantValue ConstantValue { get; }
        public System.Nullable<int> FixedBufferSize { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsConstant { get; }
        public bool IsEnumMember { get; }
        public bool IsExtern { get; }
        public bool IsField { get; }
        public bool IsOverride { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.ConstantElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class ConstructorElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IConstructor, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsDefault { get; }
        public bool IsExtern { get; }
        public bool IsImplicit { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.ConstructorElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class ConversionOperatorElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IConversionOperator, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOperator, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExplicitCast { get; }
        public bool IsExtern { get; }
        public bool IsImplicitCast { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.ConversionOperatorElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class DelegateElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IDelegate, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public JetBrains.ReSharper.Psi.IMethod InvokeMethod { get; }
        public bool IsAbstract { get; }
        public bool IsExtern { get; }
        public bool IsOverride { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeElement> NestedTypes { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.DelegateElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.INamespace GetContainingNamespace() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile GetSingleOrDefaultSourceFile() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class EnumElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IEnum, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IField> EnumMembers { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExtern { get; }
        public bool IsOverride { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeElement> NestedTypes { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.EnumElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.INamespace GetContainingNamespace() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile GetSingleOrDefaultSourceFile() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes() { }
        public JetBrains.ReSharper.Psi.IType GetUnderlyingType() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class EnumMemberElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IField, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public JetBrains.ReSharper.Psi.ConstantValue ConstantValue { get; }
        public System.Nullable<int> FixedBufferSize { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsConstant { get; }
        public bool IsEnumMember { get; }
        public bool IsExtern { get; }
        public bool IsField { get; }
        public bool IsOverride { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.EnumMemberElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class EventElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IEvent, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public JetBrains.ReSharper.Psi.IAccessor Adder { get; }
        public bool CanBeImplicitImplementation { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExplicitImplementation> ExplicitImplementations { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExplicitImplementation { get; }
        public bool IsExtern { get; }
        public bool IsFieldLikeEvent { get; }
        public bool IsOverride { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.ReSharper.Psi.IAccessor Raiser { get; }
        public JetBrains.ReSharper.Psi.IAccessor Remover { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.EventElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class FieldElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IField, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public JetBrains.ReSharper.Psi.ConstantValue ConstantValue { get; }
        public System.Nullable<int> FixedBufferSize { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsConstant { get; }
        public bool IsEnumMember { get; }
        public bool IsExtern { get; }
        public bool IsField { get; }
        public bool IsOverride { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.FieldElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class InterfaceElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IInterface, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public InterfaceElement(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Compiled.Interface compiledOwner, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExtern { get; }
        public bool IsOverride { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeElement> NestedTypes { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.InterfaceElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.INamespace GetContainingNamespace() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile GetSingleOrDefaultSourceFile() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class MethodElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IMethod, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CanBeImplicitImplementation { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExplicitImplementation> ExplicitImplementations { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExplicitImplementation { get; }
        public bool IsExtensionMethod { get; }
        public bool IsExtern { get; }
        public bool IsIterator { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVarArg { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.MethodElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.CompiledCandidateType GetExtendedTypePattern() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IMethod> GetMethods(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class ParameterElement : JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParameter, JetBrains.ReSharper.Psi.ITypeOwner
    {
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public JetBrains.ReSharper.Psi.IParametersOwner ContainingParametersOwner { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsOptional { get; }
        public bool IsParameterArray { get; }
        public bool IsValueVariable { get; }
        public bool IsVarArg { get; }
        public JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.ParameterElement other) { }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DefaultValue GetDefaultValue() { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class PropertyElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.IProperty, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CanBeImplicitImplementation { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExplicitImplementation> ExplicitImplementations { get; }
        public JetBrains.ReSharper.Psi.IAccessor Getter { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsDefault { get; }
        public bool IsExplicitImplementation { get; }
        public bool IsExtern { get; }
        public bool IsOverride { get; }
        public bool IsReadable { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public bool IsWritable { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAccessor Setter { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.PropertyElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class SignOperatorElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOperator, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ISignOperator, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExtern { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.SignOperatorElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class StructElement : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IStruct, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> Constants { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IField> Fields { get; }
        public bool HasHiddenInstanceFields { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExtern { get; }
        public bool IsOverride { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeElement> NestedTypes { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.StructElement other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.INamespace GetContainingNamespace() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public JetBrains.ReSharper.Psi.MemberPresenceFlag GetMemberPresenceFlag() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile GetSingleOrDefaultSourceFile() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class TypeParameterElement : JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.ICompiledElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ITypeParametersOwner
    {
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.CompiledElementBase CompiledOwner { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        public bool HasDefaultConstructor { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public int Index { get; }
        public bool IsClassType { get; }
        public bool IsValueType { get; }
        public System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeElement> NestedTypes { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        public JetBrains.ReSharper.Psi.ITypeParametersOwner Owner { get; }
        public JetBrains.ReSharper.Psi.IMethod OwnerMethod { get; }
        public JetBrains.ReSharper.Psi.ITypeElement OwnerType { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> TypeConstraints { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public JetBrains.ReSharper.Psi.TypeParameterVariance Variance { get; }
        protected bool Equals(JetBrains.ReSharper.Psi.Impl.reflection2.elements.Context.TypeParameterElement other) { }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.INamespace GetContainingNamespace() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile GetSingleOrDefaultSourceFile() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations
{
    
    public class AssemblyExternalAnnotations
    {
        public AssemblyExternalAnnotations([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Metadata.Utils.AssemblyNameInfo assemblyName, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Util.FileSystemPath assemblyLocation, bool syncLoad, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.ExternalAnnotationsManager externalAnnotationsManager, JetBrains.Application.Env.Components.ProductSettingsLocation productSettingsLocation, JetBrains.ReSharper.Psi.XmlIndex.XmlIndexThread xmlIndexThread = null) { }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.ExternalAnnotationsAttributesToWatchers AttributesToWatchers { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule HostModule { get; set; }
        public bool IsEmpty { get; }
        public bool ContainsAnnotation(string clrTypeName) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributesForAssembly() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributesForMember(string xmlDocId) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributesForParameter(string xmlDocId, string paramName) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributesForReturnValue(string xmlDocId) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributesForTypeParameter(string xmlDocId, string paramName) { }
        public System.Collections.Generic.ICollection<string> GetMembersByAttribute(string clrTypeName, JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.ExternalAnnotationsAttributesToWatchers attributesToWatchers) { }
    }
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Product)]
    public class ExtensionsExternalAnnotationsFileProvider : JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.IExternalAnnotationsFileProvider
    {
        public const string FileType = "annotations";
        public ExtensionsExternalAnnotationsFileProvider(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Extensions.ExtensionManager extensionManager) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.FileSystemPath> GetAnnotationsFiles(JetBrains.Metadata.Utils.AssemblyNameInfo assemblyName, JetBrains.Util.FileSystemPath assemblyLocation) { }
        public void ReportAddingAnnotationsFiles(JetBrains.Application.Extensions.IExtension extension, System.Collections.Generic.IList<JetBrains.Util.FileSystemPath> annotationsFiles) { }
        public void ReportDiscoveredAnnotationsFiles(JetBrains.Application.Extensions.IExtension extension, System.Collections.Generic.IList<JetBrains.Util.FileSystemPath> annotationsFiles) { }
        public void ReportDiscoveringAnnotationsFiles(JetBrains.Application.Extensions.IExtension extension) { }
        public void ReportRemovingAnnotationsFiles(JetBrains.Application.Extensions.IExtension extension, System.Collections.Generic.IList<JetBrains.Util.FileSystemPath> annotationsFiles) { }
    }
    [JetBrains.Annotations.LocalizationRequiredAttribute(false)]
    public class ExternalAnnotationAttributeInstance : JetBrains.ReSharper.Psi.IAttributeInstance
    {
        public ExternalAnnotationAttributeInstance(JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.AssemblyExternalAnnotations assembly, System.Xml.XmlElement element) { }
        public JetBrains.ReSharper.Psi.IConstructor Constructor { get; }
        public int PositionParameterCount { get; }
        public JetBrains.ReSharper.Psi.IDeclaredType GetAttributeType() { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.AttributeValue NamedParameter(string name) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<string, JetBrains.ReSharper.Psi.AttributeValue>> NamedParameters() { }
        public JetBrains.ReSharper.Psi.AttributeValue PositionParameter(int paramIndex) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.AttributeValue> PositionParameters() { }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class ExternalAnnotationsAttributesToWatchers
    {
        public ExternalAnnotationsAttributesToWatchers(JetBrains.DataFlow.IViewable<JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.IExternalAnnotationsAttributeWatcher> wathers, JetBrains.DataFlow.Lifetime lifetime) { }
        public System.Collections.Generic.JetHashSet<string> AttributesFullNameToWatch { get; }
        public System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.IClrTypeName> AttributesToWatch { get; }
    }
    public class ExternalAnnotationsFile : JetBrains.ReSharper.Psi.XmlIndex.XmlIndexableBase
    {
        public ExternalAnnotationsFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.AssemblyExternalAnnotations owner, JetBrains.Util.FileSystemPath path, bool syncLoad, System.Func<JetBrains.Metadata.Utils.AssemblyNameInfo, bool> assemblyNameCheck, JetBrains.Util.FileSystemPath cacheDirectory, bool persistCaches, JetBrains.ReSharper.Psi.XmlIndex.XmlIndexThread indexThread = null) { }
        public ExternalAnnotationsFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.FileSystemPath fileName) { }
        public System.Collections.Generic.IEnumerable<string> AnnotationAttributes { get; }
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.ICollection<string>>> AnnotationAttributesToMembersMap { get; }
        protected override int FormatVersion { get; }
        public JetBrains.Metadata.Utils.AssemblyNameInfo TargetAssemblyName { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.ExternalAnnotationAttributeInstance> GetAttributesForAssembly() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.ExternalAnnotationAttributeInstance> GetAttributesForMember(string xmlDocId) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.ExternalAnnotationAttributeInstance> GetAttributesForParameter(string xmlDocId, string paramName) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.ExternalAnnotationAttributeInstance> GetAttributesForReturnValue(string xmlDocId) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.ExternalAnnotationAttributeInstance> GetAttributesForTypeParameter(string xmlDocId, string paramName) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public System.Xml.XmlElement GetXml([JetBrains.Annotations.NotNullAttribute()] string xmlDocId = "") { }
        protected override JetBrains.ReSharper.Psi.XmlIndex.XmlIndexableBase.OperationResult Load(System.IO.BinaryReader reader) { }
        protected override JetBrains.Util.DataStructures.ChunkList<JetBrains.ReSharper.Psi.XmlIndex.XmlIndexableBase.IndexEntry> ReIndex(JetBrains.ReSharper.Psi.XmlIndex.XmlIndexingLexer lexer) { }
        protected override void Save(System.IO.BinaryWriter writer) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class ExternalAnnotationsManager
    {
        public ExternalAnnotationsManager(JetBrains.Application.Env.Components.ProductSettingsLocation productSettingsLocation, JetBrains.ReSharper.Psi.ILanguageManager languageManager, JetBrains.ReSharper.Psi.IPsiConfiguration psiConfiguration, JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.ExternalAnnotationsAttributesToWatchers attributesToWatchers, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.IExternalAnnotationsFileProvider> externalAnnotationsFileProviders) { }
        public JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.ExternalAnnotationsAttributesToWatchers AttributesToWatchers { get; }
        public JetBrains.ReSharper.Psi.IPsiConfiguration PsiConfiguration { get; }
        public bool Annotate(JetBrains.ReSharper.Psi.IClrDeclaredElement element, string attributeConstructorId, JetBrains.ReSharper.Psi.AttributeValue[] constructorParameters, JetBrains.Util.Pair<, >[] namedParameters) { }
    }
    [JetBrains.ReSharper.Psi.Modules.PsiModuleFactoryAttribute()]
    public class ExternalAnnotationsModuleFactory : JetBrains.ReSharper.Psi.Modules.IPsiModuleFactory
    {
        public const string JETBRAINS_ANNOTATIONS_DLL = "JetBrains.Annotations.dll";
        public ExternalAnnotationsModuleFactory(JetBrains.ProjectModel.ISolution solution, JetBrains.Application.Env.Components.ProductSettingsLocation productSettingsLocation) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> Modules { get; }
    }
    public interface IExternalAnnotationPsiModule : JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule, JetBrains.ReSharper.Psi.Modules.IPsiModule { }
    public interface IExternalAnnotationsAttributeWatcher
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IClrTypeName> AttributeClrNamesToWatch { get; }
    }
    public interface IExternalAnnotationsFileProvider
    {
        System.Collections.Generic.IEnumerable<JetBrains.Util.FileSystemPath> GetAnnotationsFiles(JetBrains.Metadata.Utils.AssemblyNameInfo assemblyName, JetBrains.Util.FileSystemPath assemblyLocation);
    }
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Product)]
    public class ProductExternalAnnotationsFileProvider : JetBrains.ReSharper.Psi.Impl.Reflection2.ExternalAnnotations.IExternalAnnotationsFileProvider
    {
        public ProductExternalAnnotationsFileProvider(JetBrains.Application.Env.Components.ProductSettingsLocation productSettingsLocation) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.FileSystemPath> GetAnnotationsFiles(JetBrains.Metadata.Utils.AssemblyNameInfo assemblyName, JetBrains.Util.FileSystemPath assemblyLocation) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Reflection2.WinMD
{
    
    public interface IWinMDClass : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClass, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredType> GetProjectedSuperInterfaces();
    }
    public interface IWinMDTypeProjectionModuleCache
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITypeElement IVector { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITypeElement IVectorView { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITypeElement GetTypeProjection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement);
        JetBrains.Util.Pair<JetBrains.ReSharper.Psi.ITypeElement, bool> GetTypeProjectionAndDirection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITypeElement GetTypeProjectionFromClrToWinMD([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITypeElement GetTypeProjectionFromClrToWinMD([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredType type);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITypeElement GetTypeProjectionFromWinMDToClr([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement);
    }
    public class static WinMDProjectedTypes
    {
        public static readonly System.Collections.Generic.Dictionary<JetBrains.Util.Pair<string, string>, JetBrains.Util.Pair<string, string>> WinMDToClr;
    }
    public class WinMDPsiFile : JetBrains.ReSharper.Psi.Impl.Reflection2.AssemblyPsiFile
    {
        public WinMDPsiFile([JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.Util.FileSystemPath, JetBrains.ReSharper.Psi.Modules.IPsiModule, JetBrains.Metadata.Reader.API.MetadataLoader> metadataLoaderFactory, JetBrains.ReSharper.Psi.IPsiConfiguration psiConfiguration, JetBrains.Util.Caches.IExternalProviderCache<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Impl.Reflection2.ICompiledEntity, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext>, JetBrains.ReSharper.Psi.IType> decodedTypeCache, JetBrains.Util.Caches.IWeakRefRetainerCache<object> compiledMembersBucketCache) { }
        protected override JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionElementAccessibility CreateReflectionElementAccessibility(bool fullMetadataLoad) { }
        protected override JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionElementPropertiesProvider CreateReflectionElementPropertiesProvider() { }
        protected override JetBrains.ReSharper.Psi.Impl.Reflection2.ReflectionTypeBuilder CreateReflectionTypeBuilder(JetBrains.ReSharper.Psi.Impl.Reflection2.IAssemblyDataCache cache, JetBrains.Metadata.Reader.API.IMetadataAssembly assembly) { }
        public override void LoadAssembly(JetBrains.Metadata.Reader.API.IMetadataAssembly assembly, JetBrains.ReSharper.Psi.Modules.IPsiModule containingModule) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class WinMDTypeProjectionCache
    {
        public WinMDTypeProjectionCache([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.ChangeManager changeManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModules psiModules) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Impl.Reflection2.WinMD.IWinMDTypeProjectionModuleCache GetCache([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Impl.Reflection2.WinMD.IWinMDTypeProjectionModuleCache GetCache([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Impl.Reflection2.WinMD.IWinMDTypeProjectionModuleCache GetModuleCache([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Resolve
{
    
    public class DeclaredElementInstancesSymbolTable : JetBrains.ReSharper.Psi.Impl.Resolve.DeclaredElementsSymbolTableBase<JetBrains.ReSharper.Psi.DeclaredElementInstance>
    {
        public DeclaredElementInstancesSymbolTable(JetBrains.ReSharper.Psi.IPsiServices psiServices, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance> elements, int level, System.Nullable<int> inheritanceLevel) { }
        protected override JetBrains.ReSharper.Psi.Resolve.ISymbolInfo CreateSymbolInfo(string name, JetBrains.ReSharper.Psi.DeclaredElementInstance element) { }
        protected override JetBrains.ReSharper.Psi.IDeclaredElement GetDeclaredElement(JetBrains.ReSharper.Psi.DeclaredElementInstance element) { }
        protected override string GetName(JetBrains.ReSharper.Psi.DeclaredElementInstance element) { }
    }
    public class DeclaredElementsSymbolTable<T> : JetBrains.ReSharper.Psi.Impl.Resolve.DeclaredElementsSymbolTableBase<T>
        where T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public DeclaredElementsSymbolTable(JetBrains.ReSharper.Psi.IPsiServices psiServices, System.Collections.Generic.IEnumerable<T> elements, int level = 0, System.Nullable<int> inheritanceLevel = null) { }
        protected override JetBrains.ReSharper.Psi.Resolve.ISymbolInfo CreateSymbolInfo(string name, T declaredElement) { }
        protected JetBrains.ReSharper.Psi.Resolve.ISubstitution ElementSubstitution(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        protected override JetBrains.ReSharper.Psi.IDeclaredElement GetDeclaredElement(T element) { }
        protected override string GetName(T element) { }
    }
    public abstract class DeclaredElementsSymbolTableBase<T> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.SymbolTableBase
    
    {
        protected DeclaredElementsSymbolTableBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiServices psiServices, System.Collections.Generic.IEnumerable<T> elements, int level, System.Nullable<int> inheritanceLevel) { }
        protected System.Nullable<int> InheritanceLevel { get; }
        protected int Level { get; }
        protected abstract JetBrains.ReSharper.Psi.Resolve.ISymbolInfo CreateSymbolInfo(string name, T element);
        public override void ForAllSymbolInfos(System.Action<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> processor) { }
        protected abstract JetBrains.ReSharper.Psi.IDeclaredElement GetDeclaredElement(T element);
        public override JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet GetDependencySet() { }
        protected abstract string GetName(T element);
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfos(string name) { }
        public override System.Collections.Generic.IEnumerable<string> Names() { }
    }
    public class ExtensionMethodResolveResult : JetBrains.ReSharper.Psi.Resolve.ResolveResult, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IExtensionMethodResolveResult, JetBrains.ReSharper.Psi.Resolve.IResolveResult
    {
        public ExtensionMethodResolveResult(JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement>> CandidateExtensionInstances { get; }
        public JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement> ElementExtensionInstance { get; }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution candidateSubstitution) { }
    }
    public class MixedResolveResult : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IExtensionMethodResolveResult, JetBrains.ReSharper.Psi.Resolve.IResolveResult
    {
        public MixedResolveResult(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement>> candidates) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement>> CandidateExtensionInstances { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> Candidates { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> CandidateSubstitutions { get; }
        public JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        public JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement> ElementExtensionInstance { get; }
        public bool IsEmpty { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Substitution { get; }
        public string Dump() { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution candidateSubstitution) { }
    }
    public class NamespaceSymbolTable : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.SymbolTableBase, JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet
    {
        public NamespaceSymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.INamespace @namespace, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool withReferences, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context, int level = 0) { }
        public JetBrains.ReSharper.Psi.INamespace Namespace { get; }
        protected JetBrains.ReSharper.Psi.Caches.ISymbolScope SymbolScope { get; }
        public void AddDependenciesTo(JetBrains.ReSharper.Psi.Dependencies.IDependencyStore store, string accessName) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected virtual JetBrains.ReSharper.Psi.Resolve.ISymbolInfo CreateSymbolInfo(JetBrains.ReSharper.Psi.IClrDeclaredElement declaredElement) { }
        public override void ForAllSymbolInfos(System.Action<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> processor) { }
        public override JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet GetDependencySet() { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfos(string name) { }
        public override System.Collections.Generic.IEnumerable<string> Names() { }
    }
    public class SubstitutionImpl : JetBrains.ReSharper.Psi.Resolve.ISubstitution
    {
        public SubstitutionImpl() { }
        public SubstitutionImpl([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> args, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> values) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> Domain { get; }
        public JetBrains.ReSharper.Psi.IType this[JetBrains.ReSharper.Psi.ITypeParameter tp] { get; }
        public JetBrains.ReSharper.Psi.IType this[JetBrains.ReSharper.Psi.IType t] { get; }
        public JetBrains.ReSharper.Psi.IType Apply(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public JetBrains.ReSharper.Psi.IType Apply(JetBrains.ReSharper.Psi.IType type) { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Apply(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Extend(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> typeParameters, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> values) { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Extend(System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.IType> map) { }
        public override int GetHashCode() { }
        public bool HasInDomain([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public bool IsIdempotent(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class SymbolTableCache : JetBrains.ReSharper.Psi.Caches.InvalidatingPsiCache
    {
        public SymbolTableCache(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.ChangeManager changeManager, JetBrains.ReSharper.Psi.Modules.IPsiModules psiModules) { }
        [System.ObsoleteAttribute("Use overload with parameter of type SymbolTableFactory")]
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetOrCreate(JetBrains.ReSharper.Psi.ITypeElement element, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode, JetBrains.ReSharper.Psi.Modules.IPsiModule requestFromModule, System.Func<JetBrains.ReSharper.Psi.Resolve.SymbolTableMode, JetBrains.ReSharper.Psi.Resolve.ISymbolTable> factory) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetOrCreate(JetBrains.ReSharper.Psi.ITypeElement element, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode, JetBrains.ReSharper.Psi.Modules.IPsiModule requestFromModule, JetBrains.ReSharper.Psi.Impl.Resolve.SymbolTableCache.SymbolTableFactory factory) { }
        [System.ObsoleteAttribute("Use overload with parameter of type SymbolTableFactory")]
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetOrCreateOwnTable(JetBrains.ReSharper.Psi.ITypeElement element, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode, System.Func<JetBrains.ReSharper.Psi.Resolve.SymbolTableMode, JetBrains.ReSharper.Psi.Resolve.ISymbolTable> factory) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetOrCreateOwnTable(JetBrains.ReSharper.Psi.ITypeElement element, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode, JetBrains.ReSharper.Psi.Impl.Resolve.SymbolTableCache.SymbolTableFactory factory) { }
        protected override void InvalidateOnPhysicalChange() { }
        public delegate JetBrains.ReSharper.Psi.Resolve.ISymbolTable SymbolTableFactory(JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode, JetBrains.ReSharper.Psi.ITypeElement element, JetBrains.ReSharper.Psi.Modules.IPsiModule module);
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Resolve.Managed
{
    
    public struct Calculation : System.IEquatable<JetBrains.ReSharper.Psi.Impl.Resolve.Managed.Calculation>
    {
        public Calculation(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey cache, object key) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey Cache { get; }
        public object Key { get; }
        public bool Equals(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.Calculation calculation) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class CalculationProcess : JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess
    {
        public CalculationProcess() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICascadingCache> Caches { get; }
        public JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess ParentProcess { get; }
        public virtual void AssignResult(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.Calculation calculation, object result) { }
        public virtual TValue Get<TKey, TParameter, TValue>(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey cacheKey, TKey key, TParameter param, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, System.Func<TKey, TParameter, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext, TValue> calculator) { }
        public void Join(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess process) { }
        public void OnAccessingForkedValueFrom(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess recalledFrom) { }
        public JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess TryFork(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.Forking forking) { }
        public JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess TryFork(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.Forking[] forkings) { }
    }
    public class CascadingCache : JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICascadingCache
    {
        public static readonly object FORGET;
        public CascadingCache(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey key, JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess calculationProcess) { }
        public CascadingCache(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICascadingCache parentCache, JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess calculationProcess) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey Key { get; }
        public JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICascadingCache ParentCache { get; }
        public void Assign(object key, object result) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<object, object>> Contents() { }
        public bool HasValue(object key) { }
        public void Join(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICascadingCache cache) { }
        public object Recall(object key, out JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess recalledFrom) { }
    }
    public class CircularCalculationException : System.Exception
    {
        public string Dump { get; set; }
        public override string Message { get; }
    }
    public struct Forking
    {
        public readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey Cache;
        public readonly object Key;
        public readonly object Value;
        public Forking(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey cache, object key, object value) { }
    }
    public interface ICalculationProcess
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICascadingCache> Caches { get; }
        JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess ParentProcess { get; }
        void AssignResult(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.Calculation calculation, object result);
        TValue Get<TKey, TParameter, TValue>(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey cacheKey, TKey key, TParameter param, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, System.Func<TKey, TParameter, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext, TValue> calculator);
        void Join(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess process);
        void OnAccessingForkedValueFrom(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess recalledFrom);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess TryFork(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.Forking forkings);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess TryFork(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.Forking[] forkings);
    }
    public interface ICascadingCache
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey Key { get; }
        JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICascadingCache ParentCache { get; }
        void Assign(object key, object result);
        bool HasValue(object key);
        void Join(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICascadingCache cache);
        object Recall(object key, out JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess recalledFrom);
    }
    public class static PrecalculatedData
    {
        public static object Get(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey cacheKey, object key) { }
        public static void Set(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey cache, object key, object result) { }
    }
    public class UniversalCalculationProcess : JetBrains.ReSharper.Psi.Impl.Resolve.Managed.CalculationProcess
    {
        public override void AssignResult(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.Calculation calculation, object result) { }
        public override TValue Get<TKey, TParameter, TValue>(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey cacheKey, TKey key, TParameter param, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, System.Func<TKey, TParameter, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext, TValue> calculator) { }
    }
    public class UniversalCascadingCache : JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICascadingCache
    {
        public UniversalCascadingCache(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey key, JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess calculationProcess) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.CascadingCacheKey Key { get; }
        public JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICascadingCache ParentCache { get; }
        public void Assign(object key, object result) { }
        public bool HasValue(object key) { }
        public void Join(JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICascadingCache cache) { }
        public object Recall(object key, out JetBrains.ReSharper.Psi.Impl.Resolve.Managed.ICalculationProcess recalledFrom) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Search
{
    
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class CLRDeclaredElementSearcherFactory : JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcherFactory
    {
        public CLRDeclaredElementSearcherFactory(JetBrains.ReSharper.Psi.Search.SearchDomainFactory searchDomainFactory) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateAnonymousTypeSearcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.AnonymousTypeDescriptor> typeDescription, bool caseSensitive) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateConstantExpressionSearcher(JetBrains.ReSharper.Psi.ConstantValue constantValue, bool onlyLiteralExpression) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateConstructorSpecialReferenceSearcher(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IConstructor> constructors) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateLateBoundReferenceSearcher(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> elements) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateMethodsReferencedByDelegateSearcher(JetBrains.ReSharper.Psi.IDelegate @delegate) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateReferenceSearcher(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> elements, bool findCandidates) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateTextOccurenceSearcher(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> elements) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher CreateTextOccurenceSearcher(string subject) { }
        public System.Collections.Generic.IEnumerable<string> GetAllPossibleWordsInFile(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public JetBrains.ReSharper.Psi.Search.ISearchDomain GetDeclaredElementSearchDomain(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public JetBrains.Util.JetTuple<System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement>, System.Predicate<JetBrains.ReSharper.Psi.Search.IFindResultReference>, bool> GetDerivedFindRequest(JetBrains.ReSharper.Psi.Search.IFindResultReference result) { }
        public JetBrains.Util.JetTuple<System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement>, bool> GetNavigateToTargets(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IDeclaredElement, System.Predicate<JetBrains.ReSharper.Psi.Search.FindResult>>> GetRelatedDeclaredElements(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public bool IsCompatibleWithLanguage(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Search.FindResult> TransformNavigationTargets(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Search.FindResult> targets) { }
    }
    public class static FinderUtil
    {
        public static JetBrains.Util.Pair<System.Collections.Generic.JetHashSet<string>, int> GetInheritorsClosure([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static JetBrains.Util.Pair<System.Collections.Generic.JetHashSet<string>, int> GetInheritorsClosure(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.IClrTypeName clrName, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.Search.ISearchDomain NarrowSearchDomain(JetBrains.ReSharper.Psi.Search.ISearchDomain searchDomain, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> elements, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Finder.ISearchGuru> searchGurus) { }
        public static JetBrains.ReSharper.Psi.Search.ISearchDomain NarrowSearchDomainByAllWords(JetBrains.ProjectModel.ISolution solution, JetBrains.ReSharper.Psi.Search.ISearchDomain searchDomain, string[] words) { }
    }
    public interface ISearchProcessor
    {
        bool ProcessElement<TResult>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer);
        bool ProcessLibraryFile<TResult>(JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile libraryFile, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer);
        bool ProcessProjectItem<TResult>(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer);
    }
    public class MethodUsageInfo
    {
        public MethodUsageInfo(JetBrains.ReSharper.Psi.IDeclaredElement searchTarget, JetBrains.ReSharper.Psi.IDeclaredElement containingElement) { }
        public JetBrains.ReSharper.Psi.IDeclaredElement ContainingElement { get; }
        public JetBrains.ReSharper.Psi.IDeclaredElement SearchTarget { get; }
    }
    public abstract class SearchProcessorBase : JetBrains.ReSharper.Psi.Impl.Search.ISearchProcessor
    {
        protected SearchProcessorBase(JetBrains.ReSharper.Psi.Search.IFinder finder, System.Func<JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcherFactory, JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher> createSearcher) { }
        protected virtual bool FilterByWordIndex(JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcherFactory factory, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool ProcessElement<TResult>(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer) { }
        public abstract bool ProcessLibraryFile<TResult>(JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile libraryFile, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer);
        public bool ProcessProjectItem<TResult>(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer) { }
    }
    public class TextOccurenceStringSearchProcessor : JetBrains.ReSharper.Psi.Impl.Search.SearchProcessorBase
    {
        public override bool ProcessLibraryFile<TResult>(JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile libraryFile, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Search.Occurences
{
    
    public class ElementsIndex
    {
        public ElementsIndex(JetBrains.ReSharper.Psi.Impl.Search.Occurences.IOccurrencesFinderImpl languageSpecific) { }
        public System.Collections.Generic.Dictionary<JetBrains.ReSharper.Psi.IDeclaredElement, int> Map { get; }
        public int GetNewIndex() { }
        public void ProcessDelcaration(JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
        public void ProcessElementForReferences(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public interface IOccurrencesFinderImpl
    {
        bool CompareLeafNodex(JetBrains.ReSharper.Psi.Tree.ITreeNode node1, JetBrains.ReSharper.Psi.Tree.ITreeNode node2);
        JetBrains.ReSharper.Psi.IDeclaredElement GetOriginalElement(JetBrains.ReSharper.Psi.IDeclaredElement element);
    }
    public class OccurrencesFinderImplBase : JetBrains.ReSharper.Psi.Impl.Search.Occurences.IOccurrencesFinderImpl
    {
        public virtual bool CompareLeafNodex(JetBrains.ReSharper.Psi.Tree.ITreeNode node1, JetBrains.ReSharper.Psi.Tree.ITreeNode node2) { }
        public virtual JetBrains.ReSharper.Psi.IDeclaredElement GetOriginalElement(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Search.SearchDomain
{
    
    public class static DomainMeasuringHelper
    {
        public static int Measure(JetBrains.ReSharper.Psi.Search.ISearchDomain searchDomain) { }
    }
    public class DomainMeasuringVisitor : JetBrains.ReSharper.Psi.Search.SearchDomainVisitor
    {
        public int Count { get; }
        public override bool ProcessingIsFinished { get; }
        public override void VisitAssembly(JetBrains.ReSharper.Psi.IPsiAssembly assembly) { }
        public override void VisitElement(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public override void VisitPsiSourceFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
    public class static EmptySearchDomain
    {
        public static readonly JetBrains.ReSharper.Psi.Search.ISearchDomain Instance;
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Shared
{
    
    public class AllowCustomPropagation { }
    public class static CustomGeneratedChangePromotionCookie
    {
        public static System.IDisposable Create(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static System.IDisposable Create<TLanguage>(JetBrains.ReSharper.Psi.Transactions.IPsiTransactions psiTransactions)
            where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType { }
        public static bool IsSet(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
    }
    public class DisableChecks { }
    public class DisablePromotionOfChangesAndRangesFromGeneratedToPrimaryCookie { }
    public class DisablePromotionOfChangesFromGeneratedToPrimaryCookie
    {
        public DisablePromotionOfChangesFromGeneratedToPrimaryCookie(JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode FirstGeneratedOuterBound { get; set; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode LastGeneratedOuterBound { get; set; }
        public static System.IDisposable Create(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static JetBrains.ReSharper.Psi.Impl.Shared.DisablePromotionOfChangesFromGeneratedToPrimaryCookie GetCookie(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static bool IsSet(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
    }
    public class DisablePromotionOfChangesFromPrimaryToGeneratedCookie { }
    public class ElementRange<T>
        where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public static readonly JetBrains.ReSharper.Psi.Impl.Shared.ElementRange<T> InvalidRange;
        public readonly JetBrains.ReSharper.Psi.TreeTextRange RangeWithin;
        [JetBrains.Annotations.CanBeNullAttribute()]
        public readonly T Token;
        public ElementRange([JetBrains.Annotations.CanBeNullAttribute()] T token) { }
        public ElementRange([JetBrains.Annotations.CanBeNullAttribute()] T token, JetBrains.ReSharper.Psi.TreeTextRange rangeWithin) { }
        public bool IsValid { get; }
        public bool Equals(JetBrains.ReSharper.Psi.Impl.Shared.ElementRange<T> other) { }
        public override bool Equals(object obj) { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected virtual string GetElementText() { }
        public override int GetHashCode() { }
        public string GetText() { }
        public JetBrains.ReSharper.Psi.TreeTextRange GetTreeTextRange() { }
    }
    public class static GeneratedRangeMapFactory
    {
        public static JetBrains.ReSharper.Psi.Impl.Shared.IGeneratedRangeMap CreateGeneratedRangeMap(JetBrains.ReSharper.Psi.Tree.IFile originalFile) { }
    }
    public class GeneratedRangeMapTree : JetBrains.ReSharper.Psi.Impl.Shared.IGeneratedRangeMap
    {
        public GeneratedRangeMapTree(JetBrains.ReSharper.Psi.Tree.IFile originalFile) { }
        public bool IsEmpty { get; }
        public JetBrains.ReSharper.Psi.Tree.IFile OriginalFile { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        public void Add(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange) { }
        public void Add(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType rangeType, bool greedyOnLeft = True, bool greedyOnRight = True) { }
        public void AddOrMerge(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType rangeType, bool greedyOnLeft = True, bool greedyOnRight = True, bool mapIsOrdered = False) { }
        public void AddProjectionItem(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange) { }
        public void AddProjectionItem(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType rangeType, bool greedyOnLeft, bool greedyOnRight) { }
        public void AppendWithShiftToGenerated(JetBrains.ReSharper.Psi.Impl.Shared.IGeneratedRangeMap anotherMap1, int offset, bool mapIsOrdered = False) { }
        public void AppendWithShiftToOriginal(JetBrains.ReSharper.Psi.Impl.Shared.IGeneratedRangeMap anotherMap1, JetBrains.ReSharper.Psi.TreeOffset offset) { }
        public void CheckValidity(JetBrains.ReSharper.Psi.Tree.IFile generatedFile, System.Text.StringBuilder text, bool checkTranslation) { }
        public void CloseAddedRange(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType rangeType) { }
        public string Dump(JetBrains.ReSharper.Psi.Tree.IFile generatedFile) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> FindNearestRangeOriginal(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, bool before) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetCoveredRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> coveringRange) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetCoveredRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> coveringRange) { }
        public JetBrains.ReSharper.Psi.Impl.Shared.RangesPair GetCoveringRange(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange) { }
        public JetBrains.ReSharper.Psi.Impl.Shared.RangesPair GetCoveringRangeExceptZeroLengthAtBounds(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated>> GetIntersectedGeneratedRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, bool strict = True) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated>> GetIntersectedGeneratedRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter, bool strict = True) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated>> GetIntersectedGeneratedRangesForModification(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original>> GetIntersectedOriginalRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, bool strict = True) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original>> GetIntersectedOriginalRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter, bool strict = True) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectedPairs(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter, bool strict = True) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectedPairs(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter, bool strict = True) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectingRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, bool strict = True) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectingRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, bool strict = True) { }
        public System.IDisposable MoveToPointers() { }
        public void OnGeneratedRangeModified(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> modifiedGeneratedRange, int newTextLength, bool alwaysNotGreedy) { }
        public void OnOriginalRangeModified(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> modifiedOriginalRange, int newLength, bool addTransactionAction) { }
        public bool OnSharedRangeModified(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> modifiedOriginalRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> modifiedGeneratedRange, int newTextLength, bool addTransactionAction) { }
        public void RemoveCoveredProjectionItems(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange) { }
        public void RemoveOrCutIntersectingRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange) { }
        public void RemoveOrCutIntersectingRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange) { }
        public void ReplaceWith(JetBrains.ReSharper.Psi.Impl.Shared.IGeneratedRangeMap rangeMap) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> Translate(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> Translate(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> TranslateForModification(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange) { }
    }
    public struct GreedType
    {
        public static readonly JetBrains.ReSharper.Psi.Impl.Shared.GreedType GREEDY;
        public static readonly JetBrains.ReSharper.Psi.Impl.Shared.GreedType NOT_GREEDY;
        public bool GreedyOnLeft { get; }
        public bool GreedyOnRight { get; }
    }
    public interface IGeneratedRangeMap
    {
        bool IsEmpty { get; }
        JetBrains.ReSharper.Psi.Tree.IFile OriginalFile { get; }
        void Add(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange);
        void Add(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType rangeType, bool greedyOnLeft = True, bool greedyOnRight = True);
        void AddOrMerge(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType rangeType, bool greedyOnLeft = True, bool greedyOnRight = True, bool mapIsOrdered = False);
        void AddProjectionItem(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange);
        void AddProjectionItem(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType rangeType, bool greedyOnLeft, bool greedyOnRight);
        void AppendWithShiftToGenerated(JetBrains.ReSharper.Psi.Impl.Shared.IGeneratedRangeMap anotherMap, int offset, bool mapIsOrdered = False);
        void AppendWithShiftToOriginal(JetBrains.ReSharper.Psi.Impl.Shared.IGeneratedRangeMap anotherMap, JetBrains.ReSharper.Psi.TreeOffset offset);
        void CheckValidity(JetBrains.ReSharper.Psi.Tree.IFile generatedFile, System.Text.StringBuilder text, bool checkTranslation);
        void CloseAddedRange(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType rangeType);
        string Dump(JetBrains.ReSharper.Psi.Tree.IFile generatedFile);
        JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> FindNearestRangeOriginal(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, bool before);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetCoveredRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> coveringRange);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetCoveredRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> coveringRange);
        JetBrains.ReSharper.Psi.Impl.Shared.RangesPair GetCoveringRange(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange);
        JetBrains.ReSharper.Psi.Impl.Shared.RangesPair GetCoveringRangeExceptZeroLengthAtBounds(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange);
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated>> GetIntersectedGeneratedRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, bool strict = True);
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated>> GetIntersectedGeneratedRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter, bool strict = True);
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated>> GetIntersectedGeneratedRangesForModification(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange);
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original>> GetIntersectedOriginalRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, bool strict = True);
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original>> GetIntersectedOriginalRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter, bool strict = True);
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectedPairs(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter, bool strict = True);
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectedPairs(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter, bool strict = True);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectingRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, bool strict = True);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectingRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, bool strict = True);
        System.IDisposable MoveToPointers();
        void OnGeneratedRangeModified(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> modifiedGeneratedRange, int newTextLength, bool alwaysNotGreedy);
        void OnOriginalRangeModified(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> modifiedOriginalRange, int newLength, bool addTransactionAction);
        bool OnSharedRangeModified(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> modifiedOriginalRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> modifiedGeneratedRange, int newTextLength, bool addTransactionAction);
        void RemoveCoveredProjectionItems(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange);
        void RemoveOrCutIntersectingRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange);
        void RemoveOrCutIntersectingRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange);
        void ReplaceWith(JetBrains.ReSharper.Psi.Impl.Shared.IGeneratedRangeMap rangeMap);
        JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> Translate(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter);
        JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> Translate(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter);
        JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> TranslateForModification(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange);
    }
    public class MappedRangeType : System.Collections.IEnumerable
    {
        public static readonly JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType DEFAULT;
        public const string DefaultRangeType = "Default";
        public static readonly JetBrains.Util.Key FORBID_TRANSLATE;
        public MappedRangeType(string name, string type, JetBrains.ReSharper.Psi.Impl.Shared.GreedType generatedGreedType) { }
        public JetBrains.ReSharper.Psi.Impl.Shared.GreedType GeneratedGreedType { get; }
        public string Name { get; }
        public JetBrains.Util.IUserDataHolder RangeProperties { get; }
        public string Type { get; }
        public void Add(JetBrains.Util.Key key) { }
        public void Add<T>(JetBrains.Util.Key<T> key, T value)
            where T :  class { }
        public bool Equals(JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType other) { }
        public override bool Equals(object obj) { }
        public System.Collections.IEnumerator GetEnumerator() { }
        public override int GetHashCode() { }
    }
    public struct RangesPair
    {
        public static readonly JetBrains.ReSharper.Psi.Impl.Shared.RangesPair InvalidPair;
        public RangesPair(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType rangeType, bool greedyOnLeft = True, bool greedyOnRight = True) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> GeneratedRange { get; }
        public bool GreedyOnLeft { get; }
        public bool GreedyOnRight { get; }
        public bool IsValid { get; }
        public JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> OriginalRange { get; }
        public JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType RangeType { get; }
        public bool Equals(JetBrains.ReSharper.Psi.Impl.Shared.RangesPair other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> Translate(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> Translate(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange) { }
    }
    public class RangesPairComparerByGenerated : System.Collections.Generic.IComparer<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair>
    {
        public static readonly JetBrains.ReSharper.Psi.Impl.Shared.RangesPairComparerByGenerated Default;
        public RangesPairComparerByGenerated() { }
        public int Compare(JetBrains.ReSharper.Psi.Impl.Shared.RangesPair x, JetBrains.ReSharper.Psi.Impl.Shared.RangesPair y) { }
    }
    public class RangesPairComparerByOriginal : System.Collections.Generic.IComparer<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair>
    {
        public static readonly JetBrains.ReSharper.Psi.Impl.Shared.RangesPairComparerByOriginal Default;
        public RangesPairComparerByOriginal() { }
        public int Compare(JetBrains.ReSharper.Psi.Impl.Shared.RangesPair x, JetBrains.ReSharper.Psi.Impl.Shared.RangesPair y) { }
    }
    public class RangeTranslatorWithGeneratedRangeMap : JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator
    {
        public RangeTranslatorWithGeneratedRangeMap(JetBrains.ReSharper.Psi.Impl.Shared.IGeneratedRangeMap generatedRangeMap) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Tree.IFile OriginalFile { get; }
        public void AddProjectionItem(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange) { }
        public void AddProjectionItem(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange, JetBrains.ReSharper.Psi.Impl.Shared.MappedRangeType rangeType, bool greedyOnLeft = True, bool greedyOnRight = True) { }
        public void AppendWithShiftToOriginal(JetBrains.ReSharper.Psi.Impl.Shared.IGeneratedRangeMap anotherMap, JetBrains.ReSharper.Psi.TreeOffset offset) { }
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public void AssertValid(JetBrains.ReSharper.Psi.Tree.IFile generatedFile) { }
        public string Dump(JetBrains.ReSharper.Psi.Tree.IFile generatedFile) { }
        public static bool ExplicitTranslationFilter(JetBrains.Util.IUserDataHolder h) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> FindRangeOriginal(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange, bool before) { }
        public JetBrains.ReSharper.Psi.TreeTextRange GeneratedToOriginal(JetBrains.ReSharper.Psi.TreeTextRange generatedRange) { }
        public JetBrains.ReSharper.Psi.TreeTextRange GeneratedToOriginal(JetBrains.ReSharper.Psi.TreeTextRange generatedRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter) { }
        public JetBrains.ReSharper.Psi.TreeTextRange GeneratedToOriginalForModification(JetBrains.ReSharper.Psi.TreeTextRange generatedRange) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetCoveredRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> coveringRange) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetCoveredRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> coveringRange) { }
        public JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.TreeTextRange> GetCoveringRange(JetBrains.ReSharper.Psi.TreeTextRange originalRange) { }
        public JetBrains.ReSharper.Psi.Impl.Shared.RangesPair GetCoveringRange(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange) { }
        public JetBrains.ReSharper.Psi.Impl.Shared.RangesPair GetCoveringRangeExceptZeroLengthAtBounds(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<>[] GetIntersectedGeneratedRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalTreeRange) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<>[] GetIntersectedGeneratedRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalTreeRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TreeTextRange> GetIntersectedGeneratedRangesForModification(JetBrains.ReSharper.Psi.TreeTextRange generatedRange) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TreeTextRange> GetIntersectedGeneratedRangesLowLevel(JetBrains.ReSharper.Psi.TreeTextRange generatedRange) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<>[] GetIntersectedGeneratedRangesLowLevel(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedTreeRange) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<>[] GetIntersectedGeneratedRangesLowLevel(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalTreeRange) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TreeTextRange> GetIntersectedOriginalRanges(JetBrains.ReSharper.Psi.TreeTextRange generatedRange) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TreeTextRange> GetIntersectedOriginalRanges(JetBrains.ReSharper.Psi.TreeTextRange generatedRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<>[] GetIntersectedOriginalRangesLowLevel(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalTreeRange) { }
        public JetBrains.ReSharper.Psi.TreeTextRange<>[] GetIntersectedOriginalRangesLowLevel(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedTreeRange) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectedPairs(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> range, System.Predicate<JetBrains.Util.IUserDataHolder> filter, bool strict = True) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectedPairs(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> range, System.Predicate<JetBrains.Util.IUserDataHolder> filter, bool strict = True) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectedPairs(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> range, bool strict = True) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectedPairs(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> range, bool strict = True) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectedPairsLowLevel(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> range, bool strict = True) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectedPairsLowLevel(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> range, bool strict = True) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectingPairs(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> range, bool strict) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Impl.Shared.RangesPair> GetIntersectingPairs(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> range, bool strict) { }
        public System.IDisposable MoveToPointers() { }
        public void OnGeneratedRangeModified(JetBrains.ReSharper.Psi.TreeTextRange modifiedGeneratedRange, int newText, bool alwaysNotGreedy) { }
        public void OnOriginalRangeModified(JetBrains.ReSharper.Psi.TreeTextRange modifiedOriginalRange, int newLength, bool addTransactionAction) { }
        public bool OnSharedRangeModified(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> modifiedOriginalRange, JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> modifiedGeneratedRange, int newText, bool addTransactionAction) { }
        public JetBrains.ReSharper.Psi.TreeTextRange OriginalToGenerated(JetBrains.ReSharper.Psi.TreeTextRange originalTreeRange) { }
        public JetBrains.ReSharper.Psi.TreeTextRange OriginalToGenerated(JetBrains.ReSharper.Psi.TreeTextRange originalTreeRange, System.Predicate<JetBrains.Util.IUserDataHolder> filter) { }
        public void RemoveCoveredProjectionItems(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange) { }
        public void RemoveOrCutIntersectingRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Original> originalRange) { }
        public void RemoveOrCutIntersectingRanges(JetBrains.ReSharper.Psi.TreeTextRange<JetBrains.ReSharper.Psi.Generated> generatedRange) { }
        public void ReplaceWith(JetBrains.ReSharper.Psi.Impl.Shared.RangeTranslatorWithGeneratedRangeMap newTranslator) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Shared.InjectedPsi
{
    
    public class IndependentInjectedFileContext : JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext
    {
        public IndependentInjectedFileContext(JetBrains.ReSharper.Psi.ExtensionsAPI.IIndependentInjectedPsiProvider provider, JetBrains.ReSharper.Psi.Tree.IFile originalFile) { }
        public JetBrains.ReSharper.Psi.Tree.IFile OriginalFile { get; }
        public int PromoteToGeneratedInProgress { get; set; }
        public int PromoteToPrimaryInProgress { get; set; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IIndependentInjectedPsiProvider Provider { get; }
        protected virtual JetBrains.ReSharper.Psi.IRecursiveElementProcessor<System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.Tree.ITreeNode>> CreateInjectedNodeCollector() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext> GetAllInjects() { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext GetInjectForNode(JetBrains.ReSharper.Psi.Tree.ITreeNode originalNode) { }
        public bool HasInjectedNodes() { }
        public void InvalidateNodeContext(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public void ResetInjectionPointList() { }
        public void UpdateInjectionPointListOnFileChange(JetBrains.ReSharper.Psi.Tree.ITreeNode originalParent, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> deletedNodes, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> addedNodes) { }
        protected class InjectedElementCollector<T> : JetBrains.ReSharper.Psi.IRecursiveElementProcessor<System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.Tree.ITreeNode>>
            where T :  class, JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext
        {
            public InjectedElementCollector(T fileContext) { }
            public T FileContext { get; }
            public virtual bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element, System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.Tree.ITreeNode> context) { }
            public virtual bool IsProcessingFinished(System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.Tree.ITreeNode> context) { }
            public virtual void ProcessAfterInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element, System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.Tree.ITreeNode> context) { }
            public virtual void ProcessBeforeInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element, System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.Tree.ITreeNode> context) { }
        }
    }
    public class IndependentInjectedNodeContext : JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext
    {
        public IndependentInjectedNodeContext(JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext fileContext, JetBrains.ReSharper.Psi.Tree.ITreeNode originalContextNode, JetBrains.ReSharper.Psi.Tree.IFile generatedFile, JetBrains.ReSharper.Psi.Tree.ITreeNode generatedNode, JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator rangeTranslator) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext FileContext { get; }
        public JetBrains.ReSharper.Psi.Tree.IFile GeneratedFile { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode GeneratedNode { get; }
        public bool NeedsRegeneration { get; set; }
        public JetBrains.ReSharper.Psi.Impl.Shared.InjectedPsi.InjectedHolderNode NodeHolder { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode OriginalContextNode { get; }
        public JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator RangeTranslator { get; set; }
        [JetBrains.Annotations.AssertionMethodAttribute()]
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public void IsValid() { }
    }
    public abstract class IndependentInjectedPsiProvider : JetBrains.ReSharper.Psi.ExtensionsAPI.IIndependentInjectedPsiProvider, JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedPsiProvider
    {
        public abstract JetBrains.ReSharper.Psi.PsiLanguageType GeneratedLanguage { get; }
        protected abstract bool CanBeGeneratedNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node);
        protected abstract bool CanBeOriginalNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node);
        public virtual void CleanupNodeContextOnDelete(JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext nodeContext) { }
        protected virtual JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext CreateInjectedFileAndContext(JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext fileContext, JetBrains.ReSharper.Psi.Tree.ITreeNode originalNode, JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.LanguageService languageService, int originalStartOffset, int originalEndOffset, int generatedStartOffset = 0, int generatedEndOffset = -1) { }
        public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext CreateInjectedFileContext(JetBrains.ReSharper.Psi.Tree.IFile originalFile) { }
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedNodeContext CreateInjectedNodeContext(JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext fileContext, JetBrains.ReSharper.Psi.Tree.ITreeNode originalNode);
        public void GeneratedFileChanged(JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext fileContext, JetBrains.ReSharper.Psi.Tree.ITreeNode generatedParent, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> deletedNodes, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> addedNodes, bool processImmediately) { }
        public abstract bool IsApplicable(JetBrains.ReSharper.Psi.PsiLanguageType originalLanguage);
        public abstract bool IsApplicableToNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext context);
        public void OriginalFileChanged(JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext fileContext, JetBrains.ReSharper.Psi.Tree.ITreeNode originalParent, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> deletedNodes, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> addedNodes, bool processImmediately) { }
        public abstract void Regenerate(JetBrains.ReSharper.Psi.Impl.Shared.InjectedPsi.IndependentInjectedNodeContext nodeContext);
        public void SynchronizeOriginalAndGenerated(JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext fileContext) { }
    }
    public class InjectedHolderNode : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement, JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileHolder, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.ICompositeElement, JetBrains.ReSharper.Psi.Impl.INodeUserDataHolderOwner, JetBrains.ReSharper.Psi.Impl.IResolveIsolationScope, JetBrains.ReSharper.Psi.ISandBox, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public InjectedHolderNode(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext context, JetBrains.ReSharper.Psi.Tree.ITreeNode originalNode) { }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode ContextNode { get; }
        public JetBrains.ReSharper.Psi.SandBoxContextType ContextType { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.IInjectedFileContext FileContext { get; }
        public JetBrains.ReSharper.Psi.Tree.IFile GeneratedFile { get; }
        public override JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        public int LevelDelta { get; }
        public System.Nullable<int> ModificationStamp { get; set; }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType { get; }
        public JetBrains.ReSharper.Psi.Impl.NodeUserDataHolder NodeUserDataHolder { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode OriginalNode { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable AddGlobalDeclarations(JetBrains.ReSharper.Psi.Resolve.ISymbolTable parentTable, int level, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
        public override JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public override JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public override bool IsValid() { }
        public override void SubTreeChanged(JetBrains.ReSharper.Psi.Tree.ITreeNode elementContainingChanges, JetBrains.ReSharper.Psi.PsiChangedElementType changeType) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Shared.References
{
    
    public interface IReferenceWithinElement<T> : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
        where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Impl.Shared.ElementRange<T> ElementRange { get; set; }
    }
    public abstract class QualifiableReferenceImpl<TOwnerElement> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.QualifiableCheckedReferenceBase<TOwnerElement>
        where TOwnerElement : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        protected JetBrains.ReSharper.Psi.Resolve.IQualifier myQualifier;
        protected QualifiableReferenceImpl(TOwnerElement owner, JetBrains.ReSharper.Psi.Resolve.IQualifier qualifier = null) { }
        protected virtual bool AllowedNotResolved { get; }
        public override bool IsQualified { get; }
        public override JetBrains.ReSharper.Psi.Resolve.IQualifier GetQualifier() { }
        public override bool IsValid() { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable, JetBrains.ReSharper.Psi.Resolve.IAccessContext context) { }
        public void SetQualifier([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IQualifier qualifier) { }
    }
    public abstract class QualifiableReferenceWithinElement<TOwner, TToken> : JetBrains.ReSharper.Psi.Impl.Shared.References.QualifiableReferenceImpl<TOwner>, JetBrains.ReSharper.Psi.Impl.Shared.References.IReferenceWithinElement<TToken>, JetBrains.ReSharper.Psi.Resolve.IAccessContext, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
        where TOwner : JetBrains.ReSharper.Psi.Tree.ITreeNode
        where TToken :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        protected QualifiableReferenceWithinElement(TOwner owner, JetBrains.ReSharper.Psi.Resolve.IQualifier qualifier, TToken token) { }
        protected QualifiableReferenceWithinElement(TOwner owner, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IQualifier qualifier, TToken token, JetBrains.ReSharper.Psi.TreeTextRange rangeWithin) { }
        public virtual bool CaseSensitive { get; }
        public virtual JetBrains.ReSharper.Psi.Impl.Shared.ElementRange<TToken> ElementRange { get; set; }
        public JetBrains.ReSharper.Psi.TreeTextRange RangeWithin { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public TToken Token { get; }
        public override JetBrains.ReSharper.Psi.Resolve.IReference BindTo(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public virtual JetBrains.ReSharper.Psi.Resolve.IReference BindTo(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        protected abstract JetBrains.ReSharper.Psi.Resolve.IReference BindToInternal([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        public virtual JetBrains.ReSharper.Psi.ITypeElement GetAccessContainingTypeElement() { }
        public override JetBrains.ReSharper.Psi.Resolve.IAccessContext GetAccessContext() { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected virtual JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] GetCompletionFilters() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public virtual JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetCompletionSymbolTable() { }
        public override string GetName() { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public JetBrains.ReSharper.Psi.Resolve.QualifierKind GetQualifierKind() { }
        public abstract JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement();
        [JetBrains.Annotations.NotNullAttribute()]
        public virtual JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSmartCompletionSymbolTable() { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected virtual JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] GetSmartSymbolFilters() { }
        public abstract JetBrains.ReSharper.Psi.Resolve.Staticness GetStaticness();
        public override JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] GetSymbolFilters() { }
        public override JetBrains.ReSharper.Psi.TreeTextRange GetTreeTextRange() { }
        public override bool IsValid() { }
    }
    public abstract class ReferenceWithinElementBase<TOwner, TToken> : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.CheckedReferenceBase<TOwner>, JetBrains.ReSharper.Psi.Impl.Shared.References.IReferenceWithinElement<TToken>, JetBrains.ReSharper.Psi.Resolve.IAccessContext, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
        where TOwner : JetBrains.ReSharper.Psi.Tree.ITreeNode
        where TToken :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        protected bool AllowedNotResolved;
        protected ReferenceWithinElementBase(TOwner owner, TToken token, JetBrains.ReSharper.Psi.TreeTextRange rangeWithin) { }
        public virtual bool CaseSensitive { get; }
        public virtual JetBrains.ReSharper.Psi.Impl.Shared.ElementRange<TToken> ElementRange { get; set; }
        public JetBrains.ReSharper.Psi.TreeTextRange RangeWithin { get; }
        public TToken Token { get; }
        public virtual JetBrains.ReSharper.Psi.Resolve.IReference BindTo(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public virtual JetBrains.ReSharper.Psi.Resolve.IReference BindTo(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        protected abstract JetBrains.ReSharper.Psi.Resolve.IReference BindToInternal(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        public virtual JetBrains.ReSharper.Psi.ITypeElement GetAccessContainingTypeElement() { }
        public override JetBrains.ReSharper.Psi.Resolve.IAccessContext GetAccessContext() { }
        protected virtual JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] GetCompletionFilters() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public virtual JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetCompletionSymbolTable() { }
        public override string GetName() { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public virtual JetBrains.ReSharper.Psi.Resolve.QualifierKind GetQualifierKind() { }
        public virtual JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement() { }
        public virtual JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSmartCompletionSymbolTable() { }
        protected virtual JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] GetSmartSymbolFilters(out bool applyAllFilters) { }
        public virtual JetBrains.ReSharper.Psi.Resolve.Staticness GetStaticness() { }
        public override JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] GetSymbolFilters() { }
        public override JetBrains.ReSharper.Psi.TreeTextRange GetTreeTextRange() { }
        public override bool IsValid() { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveWithoutCache() { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Shared.Tree
{
    
    public abstract class CompositeElementWithReferences : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement
    {
        protected CompositeElementWithReferences() { }
        protected virtual bool CheckReferences(JetBrains.ReSharper.Psi.Resolve.IReference[] references) { }
        public virtual JetBrains.ReSharper.Psi.Tree.ReferenceCollection CreateCustomReferences() { }
        protected virtual JetBrains.ReSharper.Psi.Tree.ReferenceCollection CreateFirstClassReferences() { }
        public override JetBrains.ReSharper.Psi.Tree.IChameleonNode FindChameleonWhichCoversRange(JetBrains.ReSharper.Psi.TreeTextRange textRange) { }
        public virtual JetBrains.ReSharper.Psi.Tree.ReferenceCollection GetFirstClassReferences() { }
        protected override void PreInit() { }
        public void ResetReferences() { }
        protected void ResetReferencesIfGoneOff() { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Shared.Util
{
    
    public class static ReferenceWithinElementUtil<T>
        where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public static void AddRestoreTransactionAction(JetBrains.ReSharper.Psi.IPsiServices psiServices, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.Shared.References.IReferenceWithinElement<T> referenceWithToken, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.Shared.ElementRange<T> oldRange) { }
        public static bool CheckElementValidity(JetBrains.ReSharper.Psi.Impl.Shared.ElementRange<T> elementRange, JetBrains.ReSharper.Psi.Tree.ITreeNode expectedOwner) { }
        public static T SetText(T token, JetBrains.ReSharper.Psi.TreeTextRange oldRange, string newText, System.Func<T, JetBrains.Text.IBuffer, T> tokenFactory, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode elementToDropReferences) { }
        public static JetBrains.ReSharper.Psi.Impl.Shared.References.IReferenceWithinElement<T> SetText(JetBrains.ReSharper.Psi.Impl.Shared.References.IReferenceWithinElement<T> reference, string newText, System.Func<T, JetBrains.Text.IBuffer, T> tokenFactory) { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Special
{
    
    public class DefaultConstructor : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstructor, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public DefaultConstructor(JetBrains.ReSharper.Psi.ITypeElement aClass) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsDefault { get; }
        public bool IsExtern { get; }
        public bool IsImplicit { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class DelegateBeginInvokeMethod : JetBrains.ReSharper.Psi.Impl.Special.DelegateMethod
    {
        public DelegateBeginInvokeMethod(JetBrains.ReSharper.Psi.IDelegate holder) { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public override JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public override string ShortName { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class DelegateConstructor : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstructor, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public DelegateConstructor(JetBrains.ReSharper.Psi.IDelegate delegateParameter) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsDefault { get; }
        public bool IsExtern { get; }
        public bool IsImplicit { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class DelegateEndInvokeMethod : JetBrains.ReSharper.Psi.Impl.Special.DelegateMethod
    {
        public DelegateEndInvokeMethod(JetBrains.ReSharper.Psi.IDelegate holder) { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public override JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public override string ShortName { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class DelegateInvokeMethod : JetBrains.ReSharper.Psi.Impl.Special.DelegateMethod
    {
        public DelegateInvokeMethod(JetBrains.ReSharper.Psi.IDelegate holder, System.Func<JetBrains.ReSharper.Psi.Impl.Special.DelegateInvokeMethod, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter>> parametersGetter, System.Func<JetBrains.ReSharper.Psi.Impl.Special.DelegateInvokeMethod, JetBrains.ReSharper.Psi.IType> returnTypeGetter) { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public override JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public override string ShortName { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public abstract class DelegateMethod : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IMethod, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        protected readonly JetBrains.ReSharper.Psi.IDelegate myDelegate;
        protected DelegateMethod(JetBrains.ReSharper.Psi.IDelegate holder) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CanBeImplicitImplementation { get; }
        public bool CaseSensistiveName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExplicitImplementation> ExplicitImplementations { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExplicitImplementation { get; }
        public bool IsExtensionMethod { get; }
        public bool IsExtern { get; }
        public bool IsIterator { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVarArg { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public abstract JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public abstract string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
    }
    public class ImplicitAccessor : JetBrains.ReSharper.Psi.IAccessor, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IMethod, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public ImplicitAccessor(JetBrains.ReSharper.Psi.IOverridableMember owner, JetBrains.ReSharper.Psi.AccessorKind kind) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CanBeImplicitImplementation { get; }
        public bool CaseSensistiveName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExplicitImplementation> ExplicitImplementations { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExplicitImplementation { get; }
        public bool IsExtensionMethod { get; }
        public bool IsExtern { get; }
        public bool IsIterator { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVarArg { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.AccessorKind Kind { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.IOverridableMember OwnerMember { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public JetBrains.ReSharper.Psi.IParameter ValueVariable { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class Parameter : JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParameter, JetBrains.ReSharper.Psi.ITypeOwner
    {
        public Parameter(JetBrains.ReSharper.Psi.IParametersOwner declaringParametersOwner, int parameterIndex, JetBrains.ReSharper.Psi.ParameterKind kind, JetBrains.ReSharper.Psi.IType type, string name) { }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.IParametersOwner ContainingParametersOwner { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsOptional { get; }
        public bool IsParameterArray { get; }
        public bool IsValueVariable { get; }
        public bool IsVarArg { get; }
        public JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DefaultValue GetDefaultValue() { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
    }
    public class SpecialAttributeInstance : JetBrains.ReSharper.Psi.IAttributeInstance
    {
        public SpecialAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrTypeName, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public SpecialAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrTypeName, JetBrains.ReSharper.Psi.Modules.IPsiModule module, System.Func<JetBrains.ReSharper.Psi.AttributeValue[]> ctorArguments, System.Func<System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<string, JetBrains.ReSharper.Psi.AttributeValue>>> namedArguments, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public JetBrains.ReSharper.Psi.IConstructor Constructor { get; }
        public int PositionParameterCount { get; }
        public void Dump(System.IO.TextWriter writer, string indent) { }
        public JetBrains.ReSharper.Psi.IDeclaredType GetAttributeType() { }
        public JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.AttributeValue NamedParameter(string name) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<string, JetBrains.ReSharper.Psi.AttributeValue>> NamedParameters() { }
        public JetBrains.ReSharper.Psi.AttributeValue PositionParameter(int paramIndex) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.AttributeValue> PositionParameters() { }
    }
    public class ValueVariable : JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParameter, JetBrains.ReSharper.Psi.ITypeOwner
    {
        public ValueVariable(JetBrains.ReSharper.Psi.IAccessor accessor, string name) { }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.IParametersOwner ContainingParametersOwner { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsOptional { get; }
        public bool IsParameterArray { get; }
        public bool IsValueVariable { get; }
        public bool IsVarArg { get; }
        public JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DefaultValue GetDefaultValue() { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
}
namespace JetBrains.ReSharper.Psi.Impl.Types
{
    
    public abstract class DeclaredTypeBase : JetBrains.ReSharper.Psi.IDeclaredType, JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType
    {
        public const string UNRESOLVED_PRESENTATION = "???";
        protected DeclaredTypeBase(JetBrains.ReSharper.Psi.IPsiServices psiServices) { }
        public virtual JetBrains.Metadata.Utils.AssemblyNameInfo Assembly { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.TypeClassification> Classify { get; }
        public bool IsOpenType { get; }
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public abstract JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeModifier> TypeModifiers { get; }
        public void Accept(JetBrains.ReSharper.Psi.TypeVisitor typeVisitor) { }
        public virtual JetBrains.ReSharper.Psi.ITypePointer CreatePointer() { }
        public virtual bool Equals(object obj) { }
        public virtual JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public virtual int GetHashCode() { }
        public virtual string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public virtual string GetPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public virtual JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext GetResolveContext() { }
        public JetBrains.ReSharper.Psi.IDeclaredType GetScalarType() { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTable(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public virtual JetBrains.ReSharper.Psi.ITypeElement GetTypeElement() { }
        protected virtual string GetUnresolvedPresentation() { }
        public virtual bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType anotherType, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public virtual bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType anotherType, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsSubtypeOf(JetBrains.ReSharper.Psi.IDeclaredType to) { }
        public virtual bool IsValid() { }
        public bool IsWellFormed() { }
        public abstract JetBrains.ReSharper.Psi.Resolve.IResolveResult Resolve();
        public JetBrains.ReSharper.Psi.IType ToIType() { }
        public override string ToString() { }
    }
    public class DeclaredTypeFromCLRName : JetBrains.ReSharper.Psi.Impl.Types.DeclaredTypeBase
    {
        public DeclaredTypeFromCLRName(JetBrains.ReSharper.Psi.IClrTypeName clrName, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public override JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        protected JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public override JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public override string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public override string GetPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public override JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext GetResolveContext() { }
        public override JetBrains.ReSharper.Psi.ITypeElement GetTypeElement() { }
        protected override string GetUnresolvedPresentation() { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult Resolve() { }
    }
}
namespace JetBrains.ReSharper.Psi.LanguageSettings
{
    
    [JetBrains.Application.ShellComponentAttribute()]
    public class EnabledLanguagesSupport
    {
        public EnabledLanguagesSupport(JetBrains.Application.Settings.ISettingsStore settingsStore, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.LanguageSettings.ISupportableLanguage> languages) { }
        public System.Collections.Generic.IEnumerable<string> DisabledLanguages { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.LanguageSettings.ISupportableLanguage> Languages { get; }
        public void ApplyDisabledLanguages(System.Collections.Generic.IEnumerable<string> disabledLanguages, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettings) { }
        public System.Collections.Generic.IEnumerable<string> GetDisabledLanguages(JetBrains.Application.Settings.IContextBoundSettingsStore boundSettings) { }
        public bool Supported(string languageName) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.Application.Settings.EnvironmentSettings), "Enabled languages")]
    public class EnabledLanguagesSupportSettingsKey
    {
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("List of disabled languages")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, string> DisabledLanguage;
    }
    public interface ISupportableLanguage
    {
        JetBrains.ReSharper.Psi.LanguageSettings.ISupportableLanguage BaseLanguage { get; }
        string LanguageDescription { get; }
        string LanguageName { get; }
        JetBrains.ProjectModel.ProjectFileType ProjectFileType { get; }
        bool ApplicableToLanguage(string name);
    }
}
namespace JetBrains.ReSharper.Psi.Modules
{
    
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class AssemblyPsiModuleFactory : JetBrains.Application.IChangeProvider
    {
        public AssemblyPsiModuleFactory(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.ChangeManager changeManager, JetBrains.ProjectModel.ISolution solution, JetBrains.ProjectModel.Assemblies.Impl.ModuleReferenceResolveSync moduleReferenceResolve, JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IModuleReferencesResolveStore moduleReferencesResolveStore, JetBrains.ProjectModel.Build.OutputAssemblies outputAssemblies) { }
        public System.Collections.Generic.Dictionary<JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly, JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule> AssemblyModules { get; }
        public object Execute(JetBrains.Application.IChangeMap changeMap) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule> GetAssemblyPsiModuleByName(JetBrains.Metadata.Utils.AssemblyNameInfo name) { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule TryGetModule(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly assembly) { }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class DefaultPsiModuleProvider : JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleProvider
    {
        public DefaultPsiModuleProvider(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IModuleReferencesResolveStore moduleReferencesResolveStore, JetBrains.ReSharper.Psi.PsiSourceFilePropertiesManager psiSourceFilePropertiesManager, JetBrains.DocumentManagers.DocumentManager documentManager, JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator psiProjectFileTypeCoordinator) { }
        public JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleHandler TryCreate(JetBrains.DataFlow.Lifetime projectLifetime, JetBrains.ProjectModel.IProject project) { }
    }
    public abstract class DelegatingProjectPsiModuleHandler : JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleHandler
    {
        protected DelegatingProjectPsiModuleHandler(JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleHandler handler) { }
        public JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleHandler BaseHandler { get; }
        public virtual JetBrains.Application.IChangeProvider ChangeProvider { get; }
        public virtual JetBrains.ReSharper.Psi.Modules.IProjectPsiModule PrimaryModule { get; }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetAllModules() { }
        public virtual System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetPsiModulesToReference() { }
        public virtual System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> GetPsiSourceFilesFor(JetBrains.ProjectModel.IProjectFile projectFile) { }
        public virtual bool InternalsVisibleTo(JetBrains.ReSharper.Psi.Modules.IPsiModule moduleTo, JetBrains.ReSharper.Psi.Modules.IPsiModule moduleFrom) { }
        public virtual void OnExternalModuleSetChanged(JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder changeBuilder) { }
        public virtual void OnProjectFileChanged(JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.Util.FileSystemPath oldLocation, JetBrains.ReSharper.Psi.Modules.PsiModuleChange.ChangeType changeType, JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder changeBuilder) { }
        public virtual void OnProjectPropertiesChanged(JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder changeBuilder) { }
    }
    [JetBrains.ReSharper.Psi.Modules.ModuleReferencerAttribute(Priority=0)]
    public class GenericModuleReferencer : JetBrains.ReSharper.Psi.Modules.IModuleReferencer
    {
        public virtual bool CanReferenceModule(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.Modules.IPsiModule moduleToReference, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public virtual bool ReferenceModule(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.Modules.IPsiModule moduleToReference) { }
        public virtual bool ReferenceModuleWithType(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.ITypeElement typeToReference, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
    }
    public interface IAssemblyPsiModule : JetBrains.ReSharper.Psi.Modules.IPsiModule
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiAssembly Assembly { get; }
    }
    public interface IDecorableProjectPsiModule : JetBrains.ReSharper.Psi.Modules.IProjectPsiModule, JetBrains.ReSharper.Psi.Modules.IPsiModule
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Modules.IPsiModuleDecorator> Decorators { get; set; }
    }
    public interface IMiscFilesProjectPsiModuleProvider : System.IDisposable
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetModules();
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> GetPsiSourceFilesFor(JetBrains.ProjectModel.IProjectFile projectFile);
        void OnProjectFileChanged(JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.ReSharper.Psi.Modules.PsiModuleChange.ChangeType changeType, JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder changeBuilder, JetBrains.Util.FileSystemPath oldLocation);
    }
    public interface IModuleReferencer
    {
        bool CanReferenceModule([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule moduleToReference, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        bool ReferenceModule([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule moduleToReference);
        bool ReferenceModuleWithType(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.ITypeElement typeToReference, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext);
    }
    public interface IProjectPsiModule : JetBrains.ReSharper.Psi.Modules.IPsiModule
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ProjectModel.IProject Project { get; }
    }
    public interface IProjectPsiModuleHandler
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.Application.IChangeProvider ChangeProvider { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Modules.IProjectPsiModule PrimaryModule { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetAllModules();
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetPsiModulesToReference();
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> GetPsiSourceFilesFor(JetBrains.ProjectModel.IProjectFile projectFile);
        bool InternalsVisibleTo(JetBrains.ReSharper.Psi.Modules.IPsiModule moduleTo, JetBrains.ReSharper.Psi.Modules.IPsiModule moduleFrom);
        void OnExternalModuleSetChanged(JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder changeBuilder);
        void OnProjectFileChanged(JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.Util.FileSystemPath oldLocation, JetBrains.ReSharper.Psi.Modules.PsiModuleChange.ChangeType changeType, JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder changeBuilder);
        void OnProjectPropertiesChanged(JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder changeBuilder);
    }
    public interface IProjectPsiModuleProvider
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleHandler TryCreate(JetBrains.DataFlow.Lifetime projectLifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project);
    }
    public interface IProjectPsiModuleProviderFilter
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleHandler, JetBrains.ReSharper.Psi.Modules.IPsiModuleDecorator> OverrideHandler(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.IProject project, JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleHandler handler);
    }
    public interface IPsiModule
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ProjectModel.IModule ContainingProjectModule { get; }
        string DisplayName { get; }
        string Name { get; }
        [System.ObsoleteAttribute("Use with care. Semantics is a bit unclear for non-project modules")]
        JetBrains.ProjectModel.ProjectFileType ProjectFileType { get; }
        [System.ObsoleteAttribute("Use with care. Semantics is a bit unclear for non-project modules")]
        JetBrains.ReSharper.Psi.PsiLanguageType PsiLanguage { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> SourceFiles { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.PreProcessingDirective> GetAllDefines();
        string GetPersistentID();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        [JetBrains.Annotations.NotNullAttribute()]
        [System.ObsoleteAttribute("Do not call the method to obtain references. Use IPsiModules.GetModuleReferences")]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModuleReference> GetReferences([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext);
        JetBrains.ProjectModel.ISolution GetSolution();
        bool IsValid();
    }
    public interface IPsiModuleDecorator
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModuleReference> OverrideModuleReferences(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModuleReference> references);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> OverrideSourceFiles(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> files);
    }
    public interface IPsiModuleFactory
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> Modules { get; }
    }
    public interface IPsiModuleReference
    {
        bool EmbedInteropTypes { get; }
        string[] ExternAliases { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
    }
    public interface IPsiModules : JetBrains.Application.IChangeProvider
    {
        bool CanBeVisibleToSolution(JetBrains.ReSharper.Psi.IClrDeclaredElement element);
        void Dump(System.IO.TextWriter to, [JetBrains.Annotations.CanBeNullAttribute()] System.Action<JetBrains.ReSharper.Psi.IPsiSourceFile, System.IO.TextWriter, int> dumpFiles = null, bool dumpPlatformId = False, bool dumpNonProject = False);
        void DumpProject(System.IO.TextWriter to, JetBrains.ProjectModel.IProject project, System.Func<JetBrains.ReSharper.Psi.Modules.IPsiModule, string> moduleNameDumper, [JetBrains.Annotations.CanBeNullAttribute()] System.Action<JetBrains.ReSharper.Psi.IPsiSourceFile, System.IO.TextWriter, int> dumpFiles = null, bool dumpPlatformId = False);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetAssemblyModules();
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule> GetAssemblyPsiModuleByName(JetBrains.Metadata.Utils.AssemblyNameInfo name);
        JetBrains.ReSharper.Psi.Modules.IPsiModuleReference GetModuleReference(JetBrains.ReSharper.Psi.Modules.IPsiModule fromModule, JetBrains.ReSharper.Psi.Modules.IPsiModule toModule, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModuleReference> GetModuleReferences(JetBrains.ReSharper.Psi.Modules.IPsiModule fromModule, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetModules();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly GetOutputAssemblyByProject(JetBrains.ProjectModel.IProject project);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Modules.IPsiModule GetPrimaryPsiModule(JetBrains.ProjectModel.IModule module);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ProjectModel.IProject GetProjectByOutputAssembly(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly assembly);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetPsiModules(JetBrains.ProjectModel.IProject project);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetPsiModulesToReference(JetBrains.ProjectModel.IModule module);
        [JetBrains.Annotations.NotNullAttribute()]
        [System.ObsoleteAttribute("Bad API, do not use in new code")]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> GetPsiSourceFilesFor(JetBrains.ProjectModel.IProjectFile projectFile);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetSourceModules();
        bool IsSourceProject(JetBrains.ProjectModel.IProject project);
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.ReSharper.Psi.Modules.IMiscFilesProjectPsiModuleProvider))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false)]
    public class MiscFilesProjectPsiModuleProviderAttribute : JetBrains.ProjectModel.SolutionComponentAttribute { }
    public class static ModuleExtensions
    {
        public static JetBrains.Util.FileSystemPath GetLocation([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ProjectModel.IModule module) { }
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.ReSharper.Psi.Modules.IModuleReferencer))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All)]
    public class ModuleReferencerAttribute : JetBrains.ReSharper.Psi.PsiSharedComponentAttribute
    {
        public int Priority { get; set; }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public sealed class ModuleReferencerService
    {
        public ModuleReferencerService(JetBrains.DataFlow.Lifetime lifetime, JetBrains.DataFlow.IViewable<JetBrains.ReSharper.Psi.Modules.IModuleReferencer> referencers) { }
        public static JetBrains.ReSharper.Psi.Modules.ModuleReferencerService Instance { get; }
        public bool CanReferenceModule(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.Modules.IPsiModule moduleToReference, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public bool ReferenceModule([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule moduleToReference, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public bool ReferenceModuleWithType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeToReference, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
    }
    public class NoRetargetableComparer : System.Collections.Generic.IEqualityComparer<JetBrains.Metadata.Utils.AssemblyNameInfo>
    {
        public static System.Collections.Generic.IEqualityComparer<JetBrains.Metadata.Utils.AssemblyNameInfo> Instance;
        public bool Equals(JetBrains.Metadata.Utils.AssemblyNameInfo x, JetBrains.Metadata.Utils.AssemblyNameInfo y) { }
        public int GetHashCode(JetBrains.Metadata.Utils.AssemblyNameInfo nameInfo) { }
    }
    public abstract class ProjectPsiModuleBase : JetBrains.ReSharper.Psi.Modules.IProjectPsiModule, JetBrains.ReSharper.Psi.Modules.IPsiModule
    {
        protected ProjectPsiModuleBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project, [JetBrains.Annotations.NotNullAttribute()] string nameSuffix, JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator psiProjectFileTypeCoordinator) { }
        public JetBrains.ProjectModel.IModule ContainingProjectModule { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Modules.IPsiModuleDecorator> Decorators { get; set; }
        public virtual string DisplayName { get; }
        public System.Collections.Generic.Dictionary<JetBrains.ProjectModel.IProjectFile, JetBrains.ReSharper.Psi.IPsiProjectFile> Files { get; }
        public string Name { get; }
        public JetBrains.ProjectModel.IProject Project { get; }
        public virtual JetBrains.ProjectModel.ProjectFileType ProjectFileType { get; }
        public virtual JetBrains.ReSharper.Psi.PsiLanguageType PsiLanguage { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> SourceFiles { get; }
        public bool CheckIsValid(JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public virtual System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.PreProcessingDirective> GetAllDefines() { }
        public string GetPersistentID() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModuleReference> GetReferences(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext) { }
        protected abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModuleReference> GetReferencesInternal();
        public JetBrains.ProjectModel.ISolution GetSolution() { }
        protected virtual System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public bool IsValid() { }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class ProjectPsiModuleFactory : JetBrains.Application.IChangeProvider
    {
        public ProjectPsiModuleFactory(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.ISolution solution, JetBrains.Application.ChangeManager changeManager, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleProvider> providers, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleProviderFilter> filters, JetBrains.ProjectModel.Assemblies.Impl.ModuleReferenceResolveSync moduleReferenceResolve) { }
        public object Execute(JetBrains.Application.IChangeMap changeMap) { }
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<JetBrains.ProjectModel.IProject, JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleHandler>> GetAllHandlers() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleHandler TryGetHandler(JetBrains.ProjectModel.IProject project) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Modules.IPsiModule TryGetModule(JetBrains.ProjectModel.IProject project) { }
    }
    public sealed class PsiModuleChange
    {
        public static readonly JetBrains.ReSharper.Psi.Modules.PsiModuleChange.ChangeEqualityComparer<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule> AssemblyChangeComparer;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Modules.PsiModuleChange.Change<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule>> AssemblyChanges;
        public static readonly JetBrains.ReSharper.Psi.Modules.PsiModuleChange.ChangeEqualityComparer<JetBrains.ReSharper.Psi.IPsiSourceFile> FileChangeComparer;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Modules.PsiModuleChange.Change<JetBrains.ReSharper.Psi.IPsiSourceFile>> FileChanges;
        public static readonly JetBrains.ReSharper.Psi.Modules.PsiModuleChange.ChangeEqualityComparer<JetBrains.ReSharper.Psi.Modules.IPsiModule> ModuleChangeComparer;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Modules.PsiModuleChange.Change<JetBrains.ReSharper.Psi.Modules.IPsiModule>> ModuleChanges;
        public PsiModuleChange([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Modules.PsiModuleChange.Change<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule>> assemblyChanges, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Modules.PsiModuleChange.Change<JetBrains.ReSharper.Psi.Modules.IPsiModule>> moduleChanges, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Modules.PsiModuleChange.Change<JetBrains.ReSharper.Psi.IPsiSourceFile>> fileChanges) { }
        public bool IsEmpty() { }
        public struct Change<T>
            where T :  class
        {
            [JetBrains.Annotations.NotNullAttribute()]
            public readonly T Item;
            public readonly JetBrains.ReSharper.Psi.Modules.PsiModuleChange.ChangeType Type;
            public Change([JetBrains.Annotations.NotNullAttribute()] T item, JetBrains.ReSharper.Psi.Modules.PsiModuleChange.ChangeType type) { }
            public override string ToString() { }
        }
        public class ChangeEqualityComparer<T> : System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.Modules.PsiModuleChange.Change<T>>
            where T :  class { }
        public enum ChangeType
        {
            Added = 0,
            Removed = 1,
            Modified = 2,
        }
    }
    public sealed class PsiModuleChangeBuilder
    {
        public PsiModuleChangeBuilder() { }
        public bool IsEmpty { get; }
        public JetBrains.ReSharper.Psi.Modules.PsiModuleChange Result { get; }
        public void AddAssemblyChange([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule module, JetBrains.ReSharper.Psi.Modules.PsiModuleChange.ChangeType change) { }
        public void AddFileChange([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile file, JetBrains.ReSharper.Psi.Modules.PsiModuleChange.ChangeType change) { }
        public void AddModuleChange([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.Modules.PsiModuleChange.ChangeType change) { }
        public void JoinWith(JetBrains.ReSharper.Psi.Modules.PsiModuleChange moduleChange) { }
        public void JoinWith(JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder changeBuilder) { }
    }
    public class static PsiModuleExtensions
    {
        public static bool AreInternalsVisibleTo([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Modules.IPsiModule from, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule to) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Modules.IPsiModuleReference GetModuleReference([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Modules.IPsiModule fromModule, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule toModule, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule(this JetBrains.ProjectModel.IProjectFile projectFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule(this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetPsiModules(this JetBrains.ProjectModel.IProject project) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetPsiModules(this JetBrains.ProjectModel.IModule module) { }
        public static bool References([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule dependsUpon, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.ReSharper.Psi.Modules.IPsiModuleFactory))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false)]
    public class PsiModuleFactoryAttribute : JetBrains.ProjectModel.SolutionComponentAttribute { }
    public class PsiModuleReference : JetBrains.ReSharper.Psi.Modules.IPsiModuleReference
    {
        public PsiModuleReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.NotNullAttribute()] string[] aliases, bool embedInteropTypes) { }
        public PsiModuleReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public bool EmbedInteropTypes { get; }
        public string[] ExternAliases { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        protected bool Equals(JetBrains.ReSharper.Psi.Modules.PsiModuleReference other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class static PsiModuleReferenceExtensions
    {
        public static bool HasGlobalExternAlias([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Modules.IPsiModuleReference result) { }
        public static bool IsGlobalAlias(this string alias) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class PsiModules : JetBrains.Application.IChangeProvider, JetBrains.ReSharper.Psi.Modules.IPsiModules
    {
        public PsiModules(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.IShellLocks locks, JetBrains.ProjectModel.ISolution solution, JetBrains.Application.ChangeManager changeManager, JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator psiProjectFileTypeCoordinator, JetBrains.ReSharper.Psi.Modules.ProjectPsiModuleFactory projectModuleFactory, JetBrains.ReSharper.Psi.Modules.AssemblyPsiModuleFactory assemblyModuleFactory, JetBrains.ProjectModel.Build.OutputAssemblies outputAssembliesCache, JetBrains.DataFlow.IViewable<JetBrains.ReSharper.Psi.Modules.IPsiModuleFactory> factories, JetBrains.ProjectModel.Tasks.ISolutionLoadTasksScheduler loadTasksScheduler) { }
        public virtual bool CanBeVisibleToSolution(JetBrains.ReSharper.Psi.IClrDeclaredElement element) { }
        public void Dump(System.IO.TextWriter to, System.Action<JetBrains.ReSharper.Psi.IPsiSourceFile, System.IO.TextWriter, int> dumpFile = null, bool dumpPlatformId = False, bool dumpNonProject = False) { }
        public void DumpProject(System.IO.TextWriter to, JetBrains.ProjectModel.IProject project, System.Func<JetBrains.ReSharper.Psi.Modules.IPsiModule, string> moduleNameDumper, System.Action<JetBrains.ReSharper.Psi.IPsiSourceFile, System.IO.TextWriter, int> dumpFiles = null, bool dumpPlatformId = False) { }
        public static void DumpPsiModule(System.IO.TextWriter to, JetBrains.ReSharper.Psi.Modules.IPsiModule module, System.Func<JetBrains.ReSharper.Psi.Modules.IPsiModule, string> moduleNameDumper, [JetBrains.Annotations.CanBeNullAttribute()] System.Action<JetBrains.ReSharper.Psi.IPsiSourceFile, System.IO.TextWriter, int> dumpFiles, int offset) { }
        public object Execute(JetBrains.Application.IChangeMap changeMap) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetAssemblyModules() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IAssemblyPsiModule> GetAssemblyPsiModuleByName(JetBrains.Metadata.Utils.AssemblyNameInfo name) { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModuleReference GetModuleReference(JetBrains.ReSharper.Psi.Modules.IPsiModule fromModule, JetBrains.ReSharper.Psi.Modules.IPsiModule toModule, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext = null) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetModules() { }
        public JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly GetOutputAssemblyByProject(JetBrains.ProjectModel.IProject project) { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule GetPrimaryPsiModule(JetBrains.ProjectModel.IModule module) { }
        public JetBrains.ProjectModel.IProject GetProjectByOutputAssembly(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly outputAssembly) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetPsiModules(JetBrains.ProjectModel.IProject project) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetPsiModulesToReference(JetBrains.ProjectModel.IModule module) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> GetPsiSourceFilesFor(JetBrains.ProjectModel.IProjectFile projectFile) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetSourceModules() { }
        public bool IsSourceProject(JetBrains.ProjectModel.IProject project) { }
    }
    public class static PsiModulesExtensions
    {
        public static bool HasSourceProject(this JetBrains.ReSharper.Psi.Modules.IPsiModules psiModules, JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly assembly) { }
        public static bool HasSourceProject(this JetBrains.ReSharper.Psi.Modules.IPsiModules psiModules, JetBrains.ReSharper.Psi.IPsiAssembly assembly) { }
        public static JetBrains.ReSharper.Psi.Modules.IPsiModules PsiModules(this JetBrains.ProjectModel.ISolution solution) { }
    }
    public class static PsiModulesUtil
    {
        public static bool CanBeVisibleToSolution(JetBrains.ReSharper.Psi.IClrDeclaredElement element) { }
        public static void DumpPsiSourceFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, System.IO.TextWriter to, int offset) { }
    }
    public class static PsiModuleUtil
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModuleReference> GetProjectReferences([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModules psiModules, JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IModuleReferencesResolveStore moduleReferencesResolveStore, [JetBrains.Annotations.CanBeNullAttribute()] System.Predicate<JetBrains.ProjectModel.IModule> acceptModule = null) { }
    }
    public class static ReferencesResolveContextUtil
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext GetContextFromModule(this JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class SolutionFolderPsiModuleProviderFactory : JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleProvider
    {
        public SolutionFolderPsiModuleProviderFactory(JetBrains.ReSharper.Psi.PsiSourceFilePropertiesManager psiSourceFilePropertiesManager, JetBrains.DocumentManagers.DocumentManager documentManager, JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator psiProjectFileTypeCoordinator) { }
        public JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleHandler TryCreate(JetBrains.DataFlow.Lifetime projectLifetime, JetBrains.ProjectModel.IProject project) { }
    }
}
namespace JetBrains.ReSharper.Psi.Modules.ExternalFileModules
{
    
    [JetBrains.ProjectModel.SolutionInstanceComponentAttribute()]
    public class ContentFilesModuleFactory : JetBrains.ReSharper.Psi.Modules.IPsiModuleFactory
    {
        public ContentFilesModuleFactory(JetBrains.ProjectModel.ISolution solution) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> Modules { get; }
        public JetBrains.ReSharper.Psi.Modules.ExternalFileModules.PsiModuleOnFileSystemPaths PsiModule { get; }
    }
    public abstract class DependentFilesCacheBase : JetBrains.ReSharper.Psi.Caches.ICache
    {
        protected readonly JetBrains.Util.DataStructures.CompactMap<string, int> myFileNamesIndex;
        protected readonly JetBrains.Util.DataStructures.CompactMap<JetBrains.ReSharper.Psi.IPsiSourceFile, System.Collections.Generic.IList<JetBrains.Util.FileSystemPath>> myReferencedFiles;
        protected readonly JetBrains.Util.DataStructures.CompactOneToSetMap<JetBrains.Util.FileSystemPath, JetBrains.ReSharper.Psi.IPsiSourceFile> myReferencingFiles;
        protected DependentFilesCacheBase(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ReSharper.Psi.Modules.ExternalFileModules.DependentFilesModuleFactory dependentFilesModuleFactory, JetBrains.ReSharper.Psi.Modules.ExternalFileModules.IDependentFilesBuilder builder, JetBrains.Application.IShellLocks locks, JetBrains.ReSharper.Psi.IPsiConfiguration configuration, JetBrains.ReSharper.Psi.Caches.IPersistentIndexManager persistentIndexManager) { }
        public JetBrains.DataFlow.ViewableCollection<JetBrains.Util.FileSystemPath> ActivePaths { get; }
        public bool HasDirtyFiles { get; }
        protected abstract bool Accepts(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        protected virtual void BeforeAttach() { }
        public object Build(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, bool isStartup) { }
        public void Drop(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        protected virtual void FileAdded(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        protected virtual void FileRemoved(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public object Load(JetBrains.Application.Progress.IProgressIndicator progress, bool enablePersistence) { }
        public void MarkAsDirty(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public void Merge(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, object builtPart) { }
        public void MergeLoaded(object data) { }
        public void OnDocumentChange(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.DocumentManagers.impl.ProjectFileDocumentCopyChange args) { }
        public void OnPsiChange(JetBrains.ReSharper.Psi.Tree.ITreeNode elementContainingChanges, JetBrains.ReSharper.Psi.PsiChangedElementType type) { }
        public void Save(JetBrains.Application.Progress.IProgressIndicator progress, bool enablePersistence) { }
        public void SyncUpdate(bool underTransaction) { }
        public bool UpToDate(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
    public abstract class DependentFilesModuleFactory : JetBrains.Application.IChangeProvider, JetBrains.ReSharper.Psi.Modules.ExternalFileModules.IAsynchronousModuleChangeProducer, JetBrains.ReSharper.Psi.Modules.IMiscFilesProjectPsiModuleProvider, System.IDisposable
    {
        protected readonly JetBrains.ProjectModel.ISolution mySolution;
        protected DependentFilesModuleFactory(JetBrains.ProjectModel.Tasks.ISolutionLoadTasksScheduler scheduler, JetBrains.ProjectModel.IProjectFileExtensions extensions, JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator coordinator, JetBrains.Application.IShellLocks locks, JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.ChangeManager changeManager, JetBrains.ProjectModel.ISolution solution, JetBrains.ReSharper.Psi.IPsiConfiguration configuration, JetBrains.ReSharper.Psi.Modules.ExternalFileModules.IPsiModuleOnFileSystemPaths module) { }
        protected abstract string FileName { get; }
        public JetBrains.ReSharper.Psi.Modules.ExternalFileModules.HistoryFilesSet FilesSet { get; }
        protected JetBrains.ReSharper.Psi.Modules.ExternalFileModules.IPsiModuleOnFileSystemPaths PsiModule { get; }
        protected void AddFileFromPath(JetBrains.Util.FileSystemPath path, JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder builder) { }
        public void AttachActivePaths(JetBrains.DataFlow.IViewable<JetBrains.Util.FileSystemPath> activePaths) { }
        protected abstract JetBrains.ReSharper.Psi.IPsiSourceFileProperties CreateProperties();
        public void Dispose() { }
        public void FlushChanges() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> GetModules() { }
        public virtual System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> GetPsiSourceFilesFor(JetBrains.ProjectModel.IProjectFile projectFile) { }
        protected virtual void HandleAddFirstReference(JetBrains.Util.FileSystemPath path, JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder builder) { }
        protected virtual void HandleRemoveLastReference(JetBrains.Util.FileSystemPath path, JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder builder) { }
        protected bool IsFromSolution(JetBrains.Util.FileSystemPath externalFile) { }
        public virtual void OnProjectFileChanged(JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.ReSharper.Psi.Modules.PsiModuleChange.ChangeType changeType, JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder changeBuilder, JetBrains.Util.FileSystemPath oldLocation) { }
        protected void RemoveFileFromPath(JetBrains.Util.FileSystemPath path, JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder builder) { }
        [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
        public class MutableModulesFactoryChanges
        {
            public MutableModulesFactoryChanges(JetBrains.DataFlow.IViewable<JetBrains.ReSharper.Psi.Modules.ExternalFileModules.DependentFilesModuleFactory> factories, JetBrains.ReSharper.Psi.Modules.IPsiModules psiModules, JetBrains.Application.ChangeManager changeManager, JetBrains.DataFlow.Lifetime lifetime) { }
        }
    }
    public class FileDependenciesPerFile
    {
        public FileDependenciesPerFile() { }
        public FileDependenciesPerFile(System.Collections.Generic.List<JetBrains.Util.FileSystemPath> files, System.Collections.Generic.List<System.Uri> uri) { }
        public System.Collections.Generic.List<JetBrains.Util.FileSystemPath> Files { get; }
        public System.Collections.Generic.List<System.Uri> Uries { get; }
        public void Read(System.IO.BinaryReader reader) { }
        public void Write(System.IO.BinaryWriter writer) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class FileDependenciesSynchronizer
    {
        public FileDependenciesSynchronizer(JetBrains.Application.IShellLocks locks, JetBrains.DataFlow.Lifetime lifetime, JetBrains.ReSharper.Psi.Caches.IPsiCaches psiCaches, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.ExternalFileModules.IAsynchronousModuleChangeProducer> factories, JetBrains.ProjectModel.Tasks.ISolutionLoadTasksScheduler scheduler) { }
        protected void FlushChanges() { }
        protected virtual void RunSynchronizationProcess() { }
    }
    public class HistoryFilesSet
    {
        public JetBrains.ReSharper.Psi.Modules.ExternalFileModules.HistorySet<JetBrains.Util.FileSystemPath> ExternalFiles { get; }
        public System.Collections.Generic.HashSet<JetBrains.Util.FileSystemPath> ExternalFilesCandidates { get; }
        public void Clear() { }
        public void InitEmpty() { }
        public void Load(JetBrains.Util.FilePersistence.SafeBinaryFileThrowAwayAccess fileAccess) { }
        public void Save(JetBrains.Util.FilePersistence.SafeBinaryFileThrowAwayAccess filesAccess) { }
    }
    public class HistorySet<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
    
    {
        public HistorySet() { }
        public int Count { get; }
        public void Add(T element) { }
        public void Clear() { }
        public JetBrains.Util.Pair<System.Collections.Generic.ICollection<T>, System.Collections.Generic.ICollection<T>> CommitDiff() { }
        public bool Contains(T item) { }
        public System.Collections.Generic.IEnumerator<T> GetEnumerator() { }
        public void Remove(T element) { }
    }
    public interface IAsynchronousModuleChangeProducer
    {
        void FlushChanges();
    }
    public interface IDependentFilesBuilder
    {
        JetBrains.ReSharper.Psi.Modules.ExternalFileModules.FileDependenciesPerFile Build(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
    }
    public interface IPsiModuleOnFileSystemPaths : JetBrains.ReSharper.Psi.Modules.IPsiModule
    {
        JetBrains.Util.DataStructures.CompactMap<JetBrains.Util.FileSystemPath, JetBrains.ReSharper.Psi.IPsiSourceFile> SourceFilesMap { get; }
    }
    public class PsiModuleOnFileSystemPaths : JetBrains.ReSharper.Psi.Modules.ExternalFileModules.IPsiModuleOnFileSystemPaths, JetBrains.ReSharper.Psi.Modules.IPsiModule
    {
        public PsiModuleOnFileSystemPaths(JetBrains.ProjectModel.ISolution solution, string moduleName) { }
        public JetBrains.ProjectModel.IModule ContainingProjectModule { get; }
        public string DisplayName { get; }
        public string Name { get; }
        public JetBrains.ProjectModel.ProjectFileType ProjectFileType { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PsiLanguage { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> SourceFiles { get; }
        public JetBrains.Util.DataStructures.CompactMap<JetBrains.Util.FileSystemPath, JetBrains.ReSharper.Psi.IPsiSourceFile> SourceFilesMap { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.PreProcessingDirective> GetAllDefines() { }
        public string GetPersistentID() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModuleReference> GetReferences(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext) { }
        public JetBrains.ProjectModel.ISolution GetSolution() { }
        public bool IsValid() { }
    }
}
namespace JetBrains.ReSharper.Psi.MultitypeExt
{
    
    public class static MultitypeExt
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> Constitutients([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType TransformMultitype(this JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IType type, System.Func<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.IType> transformer, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
    }
}
namespace JetBrains.ReSharper.Psi.Naming.Elements
{
    
    public abstract class ElementKindBase : JetBrains.Util.EnumPattern, JetBrains.ReSharper.Psi.Naming.Elements.IElementKind
    {
        protected ElementKindBase([JetBrains.Annotations.NotNullAttribute()] string name, string presentableName) { }
        public abstract JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        public string Name { get; }
        public string PresentableName { get; }
        public JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        public virtual JetBrains.ReSharper.Psi.Naming.Settings.NamingRule GetDefaultRule() { }
        public abstract bool IsApplicable(JetBrains.ReSharper.Psi.IDeclaredElement element);
    }
    [JetBrains.ReSharper.Psi.Naming.Elements.NamedElementsBagAttribute(null)]
    public class ElementKindOfElementType : JetBrains.ReSharper.Psi.Naming.Elements.ElementKindBase
    {
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind CLASS;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind CONSTANT_FIELD;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind DELEGATE;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind ENUM;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind ENUM_MEMBER;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind EVENT;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind FIELD;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind INTERFACE;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind LABEL;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind LOCAL_CONSTANT;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind LOCAL_VARIABLE;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind METHOD;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind NAMESPACE;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind PARAMETER;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind PROPERTY;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind READONLY_FIELD;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind STRUCT;
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind TYPE_PARAMETER;
        protected ElementKindOfElementType([JetBrains.Annotations.NotNullAttribute()] string name, string presentableName, System.Func<JetBrains.ReSharper.Psi.IDeclaredElement, bool> isApplicable) { }
        public override JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        public override bool IsApplicable(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
    }
    public class ElementKindSet : JetBrains.Application.Configuration.IXmlReadable, JetBrains.Application.Configuration.IXmlWritable, JetBrains.ReSharper.Psi.Naming.Elements.IElementKindSet
    {
        public ElementKindSet() { }
        public ElementKindSet(JetBrains.ReSharper.Psi.Naming.Elements.IElementKind element) { }
        public ElementKindSet(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Elements.IElementKind> elements) { }
        public System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.Naming.Elements.IElementKind> Elements { get; }
        public void Add(JetBrains.ReSharper.Psi.Naming.Elements.IElementKind kind) { }
        public JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        public bool Contains(JetBrains.ReSharper.Psi.Naming.Elements.IElementKindSet elementKindSet) { }
        public bool Contains(JetBrains.ReSharper.Psi.Naming.Elements.IElementKind kind) { }
        public bool Equals(JetBrains.ReSharper.Psi.Naming.Elements.ElementKindSet other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public void ReadFromXml(System.Xml.XmlElement element) { }
        public void WriteToXml(System.Xml.XmlElement element) { }
    }
    public interface IElementKind
    {
        JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        string Name { get; }
        string PresentableName { get; }
        JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash);
        JetBrains.ReSharper.Psi.Naming.Settings.NamingRule GetDefaultRule();
        bool IsApplicable(JetBrains.ReSharper.Psi.IDeclaredElement element);
    }
    public interface IElementKindSet : JetBrains.Application.Configuration.IXmlReadable, JetBrains.Application.Configuration.IXmlWritable
    {
        System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.Naming.Elements.IElementKind> Elements { get; }
        void Add(JetBrains.ReSharper.Psi.Naming.Elements.IElementKind kind);
        JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash);
        bool Contains(JetBrains.ReSharper.Psi.Naming.Elements.IElementKindSet kinds);
        bool Contains(JetBrains.ReSharper.Psi.Naming.Elements.IElementKind kind);
    }
    public interface INamedElementsManager
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Elements.IElementKind> GetAllElementKinds([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Naming.Elements.IElementKind GetElementKindByName(string id);
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.ReSharper.Psi.Naming.Elements.IElementKind))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=true, Inherited=false)]
    public sealed class NamedElementsBagAttribute : JetBrains.Application.Parts.PartAttribute
    {
        public NamedElementsBagAttribute(System.Type languageType = null) { }
        public System.Type LanguageType { get; }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class NamedElementsManager : JetBrains.ReSharper.Psi.Naming.Elements.INamedElementsManager
    {
        public NamedElementsManager(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Parts.IPartsCatalogueSet catalog) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Elements.IElementKind> GetAllElementKinds(JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public JetBrains.ReSharper.Psi.Naming.Elements.IElementKind GetElementKindByName(string name) { }
        public static JetBrains.ReSharper.Psi.Naming.Elements.INamedElementsManager GetInstance() { }
    }
    public class UnknownElementKind : JetBrains.ReSharper.Psi.Naming.Elements.ElementKindBase
    {
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind INSTANCE;
        public override JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        public override bool IsApplicable(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
    }
}
namespace JetBrains.ReSharper.Psi.Naming.Extentions
{
    
    public class EntryOptions
    {
        public EntryOptions() { }
        public JetBrains.ReSharper.Psi.Naming.Impl.Emphasis Emphasis { get; set; }
        public JetBrains.ReSharper.Psi.Naming.Impl.PluralityKinds PluralityKind { get; set; }
        public JetBrains.ReSharper.Psi.Naming.Impl.PredefinedPrefixPolicy PredefinedPrefixPolicy { get; set; }
        public JetBrains.ReSharper.Psi.Naming.Extentions.SubrootPolicy SubrootPolicy { get; set; }
    }
    public interface INamesCollection
    {
        JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider PolicyProvider { get; }
        JetBrains.ProjectModel.ISolution Solution { get; }
        void Add([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.Naming.Extentions.EntryOptions entryOptions);
        void Add([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Naming.Extentions.EntryOptions entryOptions);
        void Add([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Naming.Extentions.EntryOptions entryOptions);
        void Add([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Impl.NameRoot root, JetBrains.ReSharper.Psi.Naming.Extentions.EntryOptions entryOptions);
        System.Collections.Generic.IList<string> AllNames();
        JetBrains.ReSharper.Psi.Naming.Extentions.INamesCollection Clone();
        string FirstName();
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> GetRoots();
        void Prepare(JetBrains.ReSharper.Psi.IDeclaredElement targetElement, JetBrains.ReSharper.Psi.Naming.Extentions.SuggestionOptions suggestionOptions);
        void Prepare(JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds elementKind, JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind scopeKind, JetBrains.ReSharper.Psi.Naming.Extentions.SuggestionOptions suggestionOptions);
        void Prepare(JetBrains.ReSharper.Psi.Naming.Settings.NamingRule namingRule, JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind scopeKind, JetBrains.ReSharper.Psi.Naming.Extentions.SuggestionOptions suggestionOptions);
    }
    public class static NameChangeUtil
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Naming.Impl.NameRoot GetSuggestedName(JetBrains.ReSharper.Psi.Naming.Impl.NameRoot rootToChange, JetBrains.ReSharper.Psi.Naming.Impl.NameRoot rootFrom, JetBrains.ReSharper.Psi.Naming.Impl.NameRoot rootTo) { }
    }
    public class NameCompletionUtil
    {
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> PrepareNameRootsForSuggestion(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> nameRoots, JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> PrepareNameRootsForSuggestionAndFilterInnane(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> nameRoots, JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ReSharper.Psi.Naming.NamingManager manager) { }
        public static System.Collections.Generic.IEnumerable<string> SuggestNames(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> roots, string prefix, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy policy, JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ProjectModel.ISolution solution, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
    }
    public enum SubrootPolicy
    {
        Decompose = 0,
        DecomposeToBad = 1,
        DoNotDecompose = 2,
    }
    public class SuggestionOptions
    {
        public SuggestionOptions() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string DefaultName { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Tree.ITreeNode UniqueNameContext { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Func<string, bool> UsedNamesFilter { get; set; }
    }
}
namespace JetBrains.ReSharper.Psi.Naming.Impl
{
    
    public abstract class ClrNamingConsistencyCheckerBase : JetBrains.ReSharper.Psi.Naming.Interfaces.INamingConsistencyChecker
    {
        public void Check(JetBrains.ReSharper.Psi.Tree.IDeclaration declaration, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider namingPolicyProvider, out bool isFinalResult, out JetBrains.ReSharper.Psi.Naming.Impl.NamingConsistencyCheckResult result) { }
        public virtual bool IsApplicable(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        protected virtual bool IsException(string canonicalName) { }
        protected abstract bool IsUnnamedElement(JetBrains.ReSharper.Psi.Tree.IDeclaration declaration);
    }
    public class ClrNamingLanguageServiceBase : JetBrains.ReSharper.Psi.Naming.Impl.NamingLanguageServiceBase, JetBrains.ReSharper.Psi.Naming.Interfaces.IClrNamingLanguageService, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingLanguageService
    {
        public ClrNamingLanguageServiceBase(JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public override JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind GetScopeKind(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SuggestRoots(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        protected override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SuggestRoots(JetBrains.ReSharper.Psi.Resolve.IReference reference, JetBrains.ReSharper.Psi.Resolve.IReference qualifierReference, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SuggestRoots(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
    }
    public abstract class CustomRulesBasedPolicyProvider<TKey> : JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider
        where TKey : JetBrains.ReSharper.Psi.Naming.Settings.CustomRulesNamingSettingsKeyBase
    {
        protected CustomRulesBasedPolicyProvider(JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.Application.Settings.IContextBoundSettingsStore settingsStore) { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        protected abstract JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy UndefinedPolicy { get; }
        public void AddAbbreviation(string text, JetBrains.ProjectModel.ISolution solution) { }
        public JetBrains.ReSharper.Psi.Dependencies.Hash AddSettingsToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        public System.Collections.Generic.IList<string> GetAllPrefixes() { }
        public System.Collections.Generic.IList<string> GetAllSuffixes() { }
        public string GetEventHandlerPatternLong() { }
        public string GetEventHandlerPatternShort() { }
        public string GetExceptionName() { }
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy(JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds namedElementKind, JetBrains.ReSharper.Psi.Naming.Elements.IElementKind namedElementDescriptor = null, JetBrains.ReSharper.Psi.Naming.Settings.AccessRightKinds accessRightKinds = 65535, JetBrains.ReSharper.Psi.Naming.Settings.StaticnessKinds staticnessKinds = 255) { }
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy(JetBrains.ReSharper.Psi.Naming.Elements.IElementKind elementKind) { }
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public string GetRuleName(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public bool IsAbbreviation(string text, JetBrains.ProjectModel.ISolution solution) { }
        public string PresentWithLongPattern(string objNew, string eventNew) { }
        public string PresentWithShortPattern(string eventNew) { }
        public void RemoveAbbreviation(string text, JetBrains.ProjectModel.ISolution solution) { }
        public void SetPolicy(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy policy, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore) { }
    }
    public class DummyPolicyProvider : JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider
    {
        public DummyPolicyProvider(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        public void AddAbbreviation(string text, JetBrains.ProjectModel.ISolution solution) { }
        public JetBrains.ReSharper.Psi.Dependencies.Hash AddSettingsToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        public System.Collections.Generic.IList<string> GetAllPrefixes() { }
        public System.Collections.Generic.IList<string> GetAllSuffixes() { }
        public string GetEventHandlerPatternLong() { }
        public string GetEventHandlerPatternShort() { }
        public string GetExceptionName() { }
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy(JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds namedElementKind, JetBrains.ReSharper.Psi.Naming.Elements.IElementKind namedElementDescriptor = null, JetBrains.ReSharper.Psi.Naming.Settings.AccessRightKinds accessRightKinds = 65535, JetBrains.ReSharper.Psi.Naming.Settings.StaticnessKinds staticnessKinds = 255) { }
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy(JetBrains.ReSharper.Psi.Naming.Elements.IElementKind elementKind) { }
        public string GetRuleName(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public bool IsAbbreviation(string text, JetBrains.ProjectModel.ISolution solution) { }
        public string PresentWithLongPattern(string objNew, string eventNew) { }
        public string PresentWithShortPattern(string eventNew) { }
        public void RemoveAbbreviation(string text, JetBrains.ProjectModel.ISolution solution) { }
        public void SetPolicy([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy policy, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore) { }
    }
    public enum Emphasis
    {
        Good = 1,
        Unknown = 2,
        Bad = 3,
    }
    public class Name
    {
        public Name(JetBrains.ReSharper.Psi.Naming.Impl.NameSuffix nameSuffix, JetBrains.ReSharper.Psi.Naming.Impl.NamePrefix namePrefix, System.Collections.Generic.List<JetBrains.ReSharper.Psi.Naming.Impl.NameInnerElement> innerElements) { }
        public bool HasErrors { get; }
        public System.Collections.Generic.List<JetBrains.ReSharper.Psi.Naming.Impl.NameInnerElement> InnerElements { get; }
        public JetBrains.ReSharper.Psi.Naming.Impl.NamePrefix NamePrefix { get; }
        public JetBrains.ReSharper.Psi.Naming.Impl.NameSuffix NameSuffix { get; }
        public string GetCanonicalName() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.NameRoot GetRoot() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.NameRoot GetRootOrDefault(string root) { }
        public string GetShortName() { }
        public override string ToString() { }
    }
    public class static NameCanoniser
    {
        public static string GetCanonicalQualifiedName(string name, JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public static string GetCanonicalShortName(string name, JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
    }
    public class NameElement
    {
        public NameElement([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] string canonicalText) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string CanonicalText { get; }
        public virtual bool HasErrors { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string Text { get; }
        public bool Equals(JetBrains.ReSharper.Psi.Naming.Impl.NameElement obj) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public abstract class NameInnerElement : JetBrains.ReSharper.Psi.Naming.Impl.NameElement
    {
        protected NameInnerElement([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] string canonicalText) { }
        public abstract bool IsSeparator { get; }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class NameParser
    {
        public static readonly char[] DIGITS;
        public NameParser(JetBrains.ProjectModel.ISolution solution, JetBrains.ReSharper.Psi.Naming.Impl.NamingPolicyManager settingsManager) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.Name GetName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] string defaultRoot, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.Name GetName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] string defaultRoot, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.Name Parse([JetBrains.Annotations.NotNullAttribute()] string name, JetBrains.ReSharper.Psi.Naming.Settings.NamingRule namingRule, JetBrains.ReSharper.Psi.PsiLanguageType language, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.Name Parse([JetBrains.Annotations.NotNullAttribute()] string name, JetBrains.ReSharper.Psi.Naming.Settings.NamingRule namingRule, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string Render([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Impl.NameRoot nameRoot, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Settings.NamingRule rule, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider namingPolicyProvider) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string RenderNameSafe([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Impl.NameRoot nameRoot, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Settings.NamingRule namingRule, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string RenderNameSafe([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Impl.NameRoot nameRoot, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Settings.NamingRule namingRule, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        public static string ToCamel(string s) { }
        public static string ToLower(string s) { }
        public static string ToUpper(string s) { }
    }
    public class NamePrefix : JetBrains.ReSharper.Psi.Naming.Impl.NameElement
    {
        public NamePrefix([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] string canonicalText) { }
    }
    public class NameRoot : System.ICloneable
    {
        public NameRoot(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Naming.Impl.NameInnerElement> rootWords, JetBrains.ReSharper.Psi.Naming.Impl.PluralityKinds pluralityKind, bool isFinalName) { }
        public JetBrains.ReSharper.Psi.Naming.Impl.Emphasis Emphasis { get; set; }
        public JetBrains.ReSharper.Psi.Naming.Impl.NameWord FirstWord { get; }
        public bool IsFinalPresentation { get; }
        public JetBrains.ReSharper.Psi.Naming.Impl.PluralityKinds PluralityKind { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Naming.Impl.NameInnerElement> Words { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.NameRoot AppendRoot([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Impl.NameRoot root) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.NameRoot AppendString([JetBrains.Annotations.NotNullAttribute()] string identSuffix) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.NameRoot AppendStringToLastWord([JetBrains.Annotations.NotNullAttribute()] string identSuffix) { }
        public object Clone() { }
        public bool Equals(JetBrains.ReSharper.Psi.Naming.Impl.NameRoot obj) { }
        public override bool Equals(object obj) { }
        public static JetBrains.ReSharper.Psi.Naming.Impl.NameRoot FromWords(JetBrains.ReSharper.Psi.Naming.Impl.Emphasis emphasis, bool isFinalName, params string[] words) { }
        public string GetFinalPresentation() { }
        public override int GetHashCode() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> GetSubroots([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Impl.PredefinedPrefixPolicy predefinedPrefixPolicy, JetBrains.ReSharper.Psi.Naming.Extentions.SubrootPolicy subrootPolicy) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.NameRoot PrependString([JetBrains.Annotations.NotNullAttribute()] string identSuffix) { }
        public JetBrains.ReSharper.Psi.Naming.Impl.NameRoot Subroot(int start, int length) { }
        public override string ToString() { }
        public JetBrains.ReSharper.Psi.Naming.Impl.NameRoot WithNewEmphasis(JetBrains.ReSharper.Psi.Naming.Impl.Emphasis emphasis) { }
    }
    public class NameSeparator : JetBrains.ReSharper.Psi.Naming.Impl.NameInnerElement
    {
        public NameSeparator([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] string canonicalText) { }
        public override bool IsSeparator { get; }
    }
    public class NameSuffix : JetBrains.ReSharper.Psi.Naming.Impl.NameElement
    {
        public NameSuffix([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] string canonicalText) { }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class NameSuggestionManager
    {
        public NameSuggestionManager(JetBrains.ProjectModel.ISolution solution, JetBrains.ReSharper.Psi.Naming.Impl.NameParser nameParser, JetBrains.ReSharper.Psi.Naming.Impl.NamingPolicyManager namingPolicyManager) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Extentions.INamesCollection CreateEmptyCollection(JetBrains.ReSharper.Psi.Naming.Impl.PluralityKinds pluralityKind, JetBrains.ReSharper.Psi.PsiLanguageType language, bool longerNamesFirst, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider namingPolicyProvider) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Extentions.INamesCollection CreateEmptyCollection(JetBrains.ReSharper.Psi.Naming.Impl.PluralityKinds pluralityKind, JetBrains.ReSharper.Psi.PsiLanguageType language, bool longerNamesFirst, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Extentions.INamesCollection CreateEmptyCollection(JetBrains.ReSharper.Psi.Naming.Impl.PluralityKinds pluralityKind, JetBrains.ReSharper.Psi.PsiLanguageType language, bool longerNamesFirst, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public string GetDerivedName(JetBrains.ReSharper.Psi.IDeclaredElement sampleElement, JetBrains.ReSharper.Psi.IDeclaredElement targetElement, JetBrains.ReSharper.Psi.Naming.Extentions.SuggestionOptions options, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFileForNaming = null) { }
        public string GetDerivedName(JetBrains.ReSharper.Psi.IDeclaredElement sampleElement, JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds elementKind, JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind scopeKind, JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.Naming.Extentions.SuggestionOptions options, JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile) { }
        public string GetDerivedName(string shortSimpleName, JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds elementKind, JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind scopeKind, JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.Naming.Extentions.SuggestionOptions options, JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile) { }
    }
    [System.ComponentModel.LocalizableAttribute(false)]
    public class NameWord : JetBrains.ReSharper.Psi.Naming.Impl.NameInnerElement
    {
        public NameWord([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] string canonicalText) { }
        public NameWord([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] string canonicalText, bool isAbbreviation) { }
        public bool IsAbbreviation { get; }
        public bool IsCollectionSuffix { get; }
        public override bool IsSeparator { get; }
        public bool IsSkipTailInfix { get; }
        public bool IsVerbPrefix { get; }
        public bool CanBeIdentifier() { }
    }
    public class NamingConsistencyCheckResult
    {
        public string CanonicalName;
        public bool HasErrors;
        public string RuleName;
        public string ShortName;
        public static JetBrains.ReSharper.Psi.Naming.Impl.NamingConsistencyCheckResult OK { get; }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.PsiLanguageType))]
    public class NamingLanguageServiceBase : JetBrains.ReSharper.Psi.Naming.Interfaces.INamingLanguageService
    {
        public NamingLanguageServiceBase(JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        protected JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        protected virtual void AddConflictingFromSymbolTable(string name, JetBrains.ReSharper.Psi.Tree.ITreeNode context, JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind kind, JetBrains.ReSharper.Psi.Resolve.ISymbolTable table, System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.IDeclaredElement> conflicted) { }
        public string ConvertNameToUnmangledSafe(string name) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> ExpandAndShortenKeywords(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> roots) { }
        protected virtual JetBrains.ReSharper.Psi.Naming.Impl.NameRoot GetAbbreviation(JetBrains.ReSharper.Psi.Naming.Impl.NameRoot root) { }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> GetConflictedElements(string name, JetBrains.ReSharper.Psi.Tree.ITreeNode context, JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind kind) { }
        public virtual JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds GetNamedElementKind(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public virtual JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind GetScopeKind(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        protected virtual bool IsLocalDeclaration(JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
        public bool IsUnique(string shortName, JetBrains.ReSharper.Psi.Tree.ITreeNode context, JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind elementKind) { }
        public virtual string MangleNameIfNecessary(string name) { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> PluralToSingle([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> operandRoots) { }
        public virtual System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SuggestRoots(JetBrains.ReSharper.Psi.Tree.ITreeNode element, bool useExpectedTypes, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected virtual System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SuggestRoots([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference qualifierReference, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        public virtual System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SuggestRoots(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        protected virtual string Unmangle(string name) { }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class NamingPolicyManager
    {
        public NamingPolicyManager(JetBrains.ReSharper.Psi.ILanguageManager languageManager, JetBrains.ProjectModel.ISolution solution) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingRule GetDefaultRule(JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds namedElementKind, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingRule GetDefaultRule(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.Application.Settings.IContextBoundSettingsStore settingsStore, JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds namedElementKind, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Naming.Elements.IElementKind namedElementDescriptor = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingRule GetDefaultRule(JetBrains.ReSharper.Psi.Naming.Elements.IElementKind elementKind, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingRule GetDefaultRule([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy(JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds namedElementKind, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds namedElementKind, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Naming.Elements.IElementKind namedElementDescriptor = null, JetBrains.ReSharper.Psi.Naming.Settings.AccessRightKinds accessRightKinds = 65535, JetBrains.ReSharper.Psi.Naming.Settings.StaticnessKinds staticnessKinds = 255) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider GetPolicyProvider([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.Application.Settings.IContextBoundSettingsStore settingsStore) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string GetRuleName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string GetRuleName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        public void SetPolicy([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy policy, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore) { }
    }
    public class static NamingPolicyManagerExtensions
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider GetPolicyProvider([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Naming.Impl.NamingPolicyManager manager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
    public class static NamingUtil
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> DecomposeRoot(JetBrains.ReSharper.Psi.Naming.Impl.NameRoot nameRoot, JetBrains.ReSharper.Psi.Naming.Impl.PredefinedPrefixPolicy predefinedPrefixPolicy, JetBrains.ReSharper.Psi.Naming.Extentions.SubrootPolicy subrootPolicy) { }
        public static string GetExtendedRulePresentation(JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy namingPolicy) { }
        public static JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds GetNamedElementKind(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Naming.Impl.NameRoot GetRootOfLiteralValue([JetBrains.Annotations.NotNullAttribute()] string value) { }
        public static JetBrains.UI.RichText.RichText GetRulePresentation(JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy namingPolicy) { }
        public static string GetShortRulePresentation(JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy namingPolicy) { }
        [System.ObsoleteAttribute("Use NamingManager.IsIdentifier")]
        public static bool IsIdentifier(string name) { }
        public static bool IsValidQualifiedName(string text, JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        [System.ObsoleteAttribute("Split and use NamingManager.IsIdentifier")]
        public static bool IsValidQualifiedName(string text) { }
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> MergeIdenticalNameRoots(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> roots) { }
        public static JetBrains.ReSharper.Psi.Naming.Impl.NameRoot NextRoot(JetBrains.ReSharper.Psi.Naming.Impl.NameRoot root, int i) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Naming.Impl.NameRoot PluralToSingle([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Impl.NameRoot nameRoot) { }
        public static string PresentNamedElementKind(JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds namedElementKinds) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Naming.Impl.NameRoot SingleToPlural([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Impl.NameRoot nameRoot) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SortNameRoots(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> roots, bool longerNamesFirst) { }
        public static System.Collections.Generic.IEnumerable<string> SortShortNames(System.Collections.Generic.IEnumerable<string> roots, bool longNameFirst) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static string TryGetIdent([JetBrains.Annotations.NotNullAttribute()] string s) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Naming.Impl.NameRoot TryPluralToSingle([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Impl.NameRoot nameRoot) { }
    }
    public enum PluralityKinds
    {
        Plural = 0,
        Single = 1,
        Unknown = 2,
    }
    public enum PredefinedPrefixPolicy
    {
        Ignore = 0,
        Remove = 1,
        Preserve = 2,
    }
    public enum ScopeKind
    {
        TypeAndNamespace = 0,
        LocalSelfScoped = 1,
        Common = 2,
    }
}
namespace JetBrains.ReSharper.Psi.Naming
{
    
    public interface INameCanoniser
    {
        string GetCanonicalQualifiedName(string name);
        string GetCanonicalShortName(string name);
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class NamingManager
    {
        public NamingManager(JetBrains.ReSharper.Psi.Naming.Impl.NameParser parser, JetBrains.ReSharper.Psi.Naming.Impl.NameSuggestionManager nameSuggestionManager, JetBrains.ReSharper.Psi.Naming.Impl.NamingPolicyManager namingSettingsManager, JetBrains.ReSharper.Psi.Naming.Interfaces.IUnigueNamesService unigueNamesService) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.NameParser Parsing { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.NamingPolicyManager Policy { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Impl.NameSuggestionManager Suggestion { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Interfaces.IUnigueNamesService UnigueNamesService { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Naming.Interfaces.INamingLanguageService GetNamingLanguageService([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public static JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind GetScopeKind(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
    }
}
namespace JetBrains.ReSharper.Psi.Naming.Interfaces
{
    
    public interface INamingConsistencyChecker
    {
        void Check([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IDeclaration declaration, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider namingPolicyProvider, out bool isFinalResult, [JetBrains.Annotations.CanBeNullAttribute()] out JetBrains.ReSharper.Psi.Naming.Impl.NamingConsistencyCheckResult result);
        bool IsApplicable(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
    }
    public interface INamingLanguageService
    {
        [JetBrains.Annotations.NotNullAttribute()]
        string ConvertNameToUnmangledSafe([JetBrains.Annotations.NotNullAttribute()] string name);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> ExpandAndShortenKeywords([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> roots);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> GetConflictedElements(string name, JetBrains.ReSharper.Psi.Tree.ITreeNode context, JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind kind);
        JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds GetNamedElementKind([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element);
        JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind GetScopeKind(JetBrains.ReSharper.Psi.IDeclaredElement element);
        bool IsUnique([JetBrains.Annotations.NotNullAttribute()] string shortName, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode context, JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind elementKind);
        [JetBrains.Annotations.NotNullAttribute()]
        string MangleNameIfNecessary([JetBrains.Annotations.NotNullAttribute()] string name);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SuggestRoots([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, bool useExpectedTypes, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SuggestRoots([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider);
    }
    public interface INamingPolicyProvider
    {
        JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        void AddAbbreviation([JetBrains.Annotations.NotNullAttribute()] string text, JetBrains.ProjectModel.ISolution solution);
        JetBrains.ReSharper.Psi.Dependencies.Hash AddSettingsToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<string> GetAllPrefixes();
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<string> GetAllSuffixes();
        string GetEventHandlerPatternLong();
        string GetEventHandlerPatternShort();
        [JetBrains.Annotations.NotNullAttribute()]
        string GetExceptionName();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy(JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds namedElementKind, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Naming.Elements.IElementKind namedElementDescriptor = null, JetBrains.ReSharper.Psi.Naming.Settings.AccessRightKinds accessRightKinds = 65535, JetBrains.ReSharper.Psi.Naming.Settings.StaticnessKinds staticnessKinds = 255);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Elements.IElementKind elementKind);
        [JetBrains.Annotations.NotNullAttribute()]
        string GetRuleName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement);
        bool IsAbbreviation([JetBrains.Annotations.NotNullAttribute()] string text, JetBrains.ProjectModel.ISolution solution);
        string PresentWithLongPattern(string objNew, string eventNew);
        string PresentWithShortPattern(string eventNew);
        void RemoveAbbreviation([JetBrains.Annotations.NotNullAttribute()] string text, JetBrains.ProjectModel.ISolution solution);
        void SetPolicy([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy policy, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore);
    }
    public interface INamingPolicyProviderFactory
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider CreatePolicyProvider([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.IContextBoundSettingsStore settingsStore);
    }
    [System.ObsoleteAttribute("Deprecated, use INamingPolicyProvider")]
    public interface INamingSettings
    {
        System.Collections.Generic.JetHashSet<string> Abbreviations { get; }
        string EventHandlerPatternLong { get; set; }
        string EventHandlerPatternShort { get; set; }
        string ExceptionName { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        bool OverrideDefaultSettings { get; set; }
        System.Collections.Generic.Dictionary<JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy> PredefinedNamingRules { get; }
        System.Collections.Generic.List<JetBrains.ReSharper.Psi.Naming.Settings.ClrUserDefinedNamingRule> UserRules { get; }
        JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash);
    }
    public interface IUnigueNamesService
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> GetConflictedElements(string name, JetBrains.ReSharper.Psi.Tree.ITreeNode context, JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind kind);
        bool IsUnique(string name, JetBrains.ReSharper.Psi.Tree.ITreeNode context, JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind kind);
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.ReSharper.Psi.Naming.Interfaces.INamingConsistencyChecker))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=true)]
    public class NamingConsistencyCheckerAttribute : JetBrains.ReSharper.Psi.LanguageAttribute
    {
        public NamingConsistencyCheckerAttribute(System.Type language) { }
    }
}
namespace JetBrains.ReSharper.Psi.Naming.Legacy
{
    
    [System.ObsoleteAttribute("Use NamingManager")]
    public class DefaultNamingStyleSettings : JetBrains.Application.Configuration.IXmlReadable, System.ICloneable
    {
        public DefaultNamingStyleSettings() { }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute("e")]
        public string DefaultExceptionName { get; set; }
        public JetBrains.ReSharper.Psi.Naming.Legacy.NameSettings FieldNameSettings { get; }
        public JetBrains.ReSharper.Psi.Naming.Legacy.NameSettings LocalVariableNameSettings { get; }
        public JetBrains.ReSharper.Psi.Naming.Legacy.NameSettings ParameterNameSettings { get; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PreferLongerNames { get; set; }
        public JetBrains.ReSharper.Psi.Naming.Legacy.NameSettings StaticFieldNameSettings { get; }
        public object Clone() { }
        public void ReadFromXml(System.Xml.XmlElement element) { }
    }
    [System.ObsoleteAttribute("Use NamingManager")]
    public class NameSettings : JetBrains.Application.Configuration.IXmlReadable
    {
        public NameSettings() { }
        public NameSettings(string prefix, string suffix) { }
        public string Prefix { get; set; }
        public string Suffix { get; set; }
        public JetBrains.ReSharper.Psi.Naming.Legacy.NameSettings Clone() { }
        public void GetFrom(JetBrains.ReSharper.Psi.Naming.Legacy.NameSettings s) { }
        public void ReadFromXml(System.Xml.XmlElement element) { }
        public void WriteToXml(System.Xml.XmlElement element) { }
    }
}
namespace JetBrains.ReSharper.Psi.Naming.Settings
{
    
    [System.FlagsAttribute()]
    public enum AccessRightKinds
    {
        No = 0,
        Private = 1,
        Protected = 2,
        ProtectedInternal = 4,
        Internal = 8,
        Public = 16,
        Any = 65535,
    }
    public class ClrLanguageNamingSettingsKeyBase
    {
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("List of Abbreviations")]
        public readonly JetBrains.Application.Settings.Store.IIndexedEntry<string, string> Abbreviations;
        [JetBrains.Application.Settings.SettingsEntryAttribute("$object$_$event$", "Event handler name pattern (long version with object name)")]
        public readonly string EventHandlerPatternLong;
        [JetBrains.Application.Settings.SettingsEntryAttribute("$event$Handler", "Event handler name pattern")]
        public readonly string EventHandlerPatternShort;
        [JetBrains.Application.Settings.SettingsEntryAttribute("e", "Default name for exception variable")]
        public readonly string ExceptionName;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("List of Naming Rules", ValueSerializer=JetBrains.Application.Settings.SettingsStoreSerializerType.TypeConverterToInvariantString)]
        public readonly JetBrains.Application.Settings.Store.IIndexedEntry<JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy> PredefinedNamingRules;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("List of Naming Rules", ValueSerializer=JetBrains.Application.Settings.SettingsStoreSerializerType.TypeConverterToInvariantString)]
        public readonly JetBrains.Application.Settings.Store.IIndexedEntry<System.Guid, JetBrains.ReSharper.Psi.Naming.Settings.ClrUserDefinedNamingRule> UserRules;
    }
    public sealed class ClrNamedElementDescriptor : JetBrains.Application.Configuration.IXmlReadable, JetBrains.Application.Configuration.IXmlWritable
    {
        public ClrNamedElementDescriptor() { }
        public ClrNamedElementDescriptor(JetBrains.ReSharper.Psi.Naming.Settings.AccessRightKinds accessRightKinds, JetBrains.ReSharper.Psi.Naming.Settings.StaticnessKinds staticness, JetBrains.ReSharper.Psi.Naming.Elements.IElementKindSet elementKind, string description) { }
        public JetBrains.ReSharper.Psi.Naming.Settings.AccessRightKinds AccessRightKinds { get; set; }
        public string Description { get; set; }
        public JetBrains.ReSharper.Psi.Naming.Elements.IElementKindSet ElementKinds { get; set; }
        public JetBrains.ReSharper.Psi.Naming.Settings.StaticnessKinds Staticness { get; set; }
        public JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        public bool Equals(JetBrains.ReSharper.Psi.Naming.Settings.ClrNamedElementDescriptor other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public void ReadFromXml(System.Xml.XmlElement element) { }
        public void WriteToXml(System.Xml.XmlElement element) { }
    }
    public class ClrNamedElementDescriptorConverter : JetBrains.Util.Reflection.TypeConverterBase<JetBrains.ReSharper.Psi.Naming.Settings.ClrUserDefinedNamingRule>
    {
        public ClrNamedElementDescriptorConverter() { }
    }
    public class static ClrPolicyProviderBase
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetDefaultPolicy(JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds elementKinds) { }
    }
    public abstract class ClrPolicyProviderBase<TKey> : JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider
        where TKey : JetBrains.ReSharper.Psi.Naming.Settings.ClrLanguageNamingSettingsKeyBase
    {
        protected ClrPolicyProviderBase(JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IPsiSourceFile psiSourceFile, JetBrains.Application.Settings.IContextBoundSettingsStore settings) { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        public void AddAbbreviation(string text, JetBrains.ProjectModel.ISolution solution) { }
        public JetBrains.ReSharper.Psi.Dependencies.Hash AddSettingsToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy>> GetAllPredefinedRules() { }
        public virtual System.Collections.Generic.IList<string> GetAllPrefixes() { }
        public virtual System.Collections.Generic.IList<string> GetAllSuffixes() { }
        public string GetEventHandlerPatternLong() { }
        public string GetEventHandlerPatternShort() { }
        public string GetExceptionName() { }
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy(JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds namedElementKind, JetBrains.ReSharper.Psi.Naming.Elements.IElementKind namedElementDescriptor = null, JetBrains.ReSharper.Psi.Naming.Settings.AccessRightKinds accessRightKinds = 65535, JetBrains.ReSharper.Psi.Naming.Settings.StaticnessKinds staticnessKinds = 255) { }
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy GetPolicy(JetBrains.ReSharper.Psi.Naming.Elements.IElementKind elementKind) { }
        public string GetRuleName(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public bool IsAbbreviation(string text, JetBrains.ProjectModel.ISolution solution) { }
        public string PresentWithLongPattern(string objNew, string eventNew) { }
        public string PresentWithShortPattern(string eventNew) { }
        public void RemoveAbbreviation(string text, JetBrains.ProjectModel.ISolution solution) { }
        public void SetPolicy(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy policy, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore) { }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(JetBrains.ReSharper.Psi.Naming.Settings.ClrNamedElementDescriptorConverter))]
    public class ClrUserDefinedNamingRule : JetBrains.Application.Configuration.IXmlReadable, JetBrains.Application.Configuration.IXmlWritable
    {
        public ClrUserDefinedNamingRule() { }
        public ClrUserDefinedNamingRule([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Settings.ClrNamedElementDescriptor descriptor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy policy) { }
        public JetBrains.ReSharper.Psi.Naming.Settings.ClrNamedElementDescriptor Descriptor { get; }
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy Policy { get; }
        public bool Equals(JetBrains.ReSharper.Psi.Naming.Settings.ClrUserDefinedNamingRule other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public void ReadFromXml(System.Xml.XmlElement element) { }
        public void WriteToXml(System.Xml.XmlElement element) { }
    }
    [System.ObsoleteAttribute("Deprecated, use CustomRulesNamingSettingsKeyBase")]
    public abstract class CustomRulesNamingSettingsBase : JetBrains.Application.Configuration.IXmlReadable, System.ICloneable
    {
        protected readonly System.Collections.Generic.List<JetBrains.Util.JetTuple<string, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy>> myUserRules;
        protected CustomRulesNamingSettingsBase() { }
        [System.ObsoleteAttribute("Deprecated, use CustomRulesNamingSettingsKeyBase.UserRules")]
        public System.Collections.Generic.List<JetBrains.Util.JetTuple<string, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy>> CustomRules { get; }
        public abstract object Clone();
        public void ReadFromXml(System.Xml.XmlElement element) { }
    }
    public class CustomRulesNamingSettingsKeyBase
    {
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("List of Abbreviations")]
        public readonly JetBrains.Application.Settings.Store.IIndexedEntry<string, string> Abbreviations;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("List of Naming Rules", ValueSerializer=JetBrains.Application.Settings.SettingsStoreSerializerType.TypeConverterToInvariantString)]
        public readonly JetBrains.Application.Settings.Store.IIndexedEntry<string, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy> UserRules;
    }
    public enum NamedElementKinds
    {
        TypesAndNamespaces = 0,
        Interfaces = 1,
        TypeParameters = 2,
        MethodPropertyEvent = 3,
        Locals = 4,
        LocalConstants = 5,
        Parameters = 6,
        PublicFields = 7,
        PrivateInstanceFields = 8,
        PrivateStaticFields = 9,
        Constants = 10,
        PrivateConstants = 11,
        StaticReadonly = 12,
        PrivateStaticReadonly = 13,
        EnumMember = 14,
        Other = 15,
    }
    [System.ComponentModel.TypeConverterAttribute("JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicyConverter")]
    public sealed class NamingPolicy : JetBrains.Application.Configuration.IXmlReadable, JetBrains.Application.Configuration.IXmlWritable, System.ICloneable
    {
        public NamingPolicy() { }
        public NamingPolicy(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Naming.Settings.NamingRule> extraRules, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Settings.NamingRule namingRule, bool enableInspection) { }
        public NamingPolicy([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Settings.NamingRule namingRule) { }
        public NamingPolicy(JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy policy, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Naming.Settings.NamingRule newDefaultRule) { }
        public bool EnableInspection { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Naming.Settings.NamingRule> ExtraRules { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingRule NamingRule { get; }
        public JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        public object Clone() { }
        public bool Equals(JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public void ReadFromXml(System.Xml.XmlElement element) { }
        public override string ToString() { }
        public void WriteToXml(System.Xml.XmlElement element) { }
    }
    [JetBrains.Annotations.UsedImplicitlyAttribute()]
    public class NamingPolicyConverter : JetBrains.Util.Reflection.TypeConverterBase<JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy>
    {
        public NamingPolicyConverter() { }
    }
    public sealed class NamingRule : System.ICloneable
    {
        public static readonly JetBrains.ReSharper.Psi.Naming.Settings.NamingRule Default;
        public NamingRule() { }
        public JetBrains.ReSharper.Psi.Naming.Settings.NamingStyleKinds NamingStyleKind { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string Prefix { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string Suffix { get; set; }
        public JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        public object Clone() { }
        public bool Equals(JetBrains.ReSharper.Psi.Naming.Settings.NamingRule other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Settings.CodeStyleSettings), "Naming settings")]
    public class NamingSettings { }
    public class NamingSettingsUtil
    {
        public static System.Nullable<T> GetEnumValueSafeWithUpgrade<T>(string stringValue)
            where T :  struct { }
        public static System.Collections.Generic.List<JetBrains.ReSharper.Psi.Naming.Settings.NamingRule> ReadExtraRules(System.Xml.XmlElement xmlElement) { }
        public static void WriteExtraRules(System.Xml.XmlNode parentElement, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy policy) { }
    }
    public enum NamingStyleKinds
    {
        AaBb = 0,
        AaBb_AaBb = 1,
        AaBb_aaBb = 2,
        aaBb = 3,
        aaBb_AaBb = 4,
        aaBb_aaBb = 5,
        AA_BB = 6,
        aa_bb = 7,
        Aa_bb = 8,
    }
    [System.FlagsAttribute()]
    public enum StaticnessKinds
    {
        No = 0,
        Static = 1,
        Instance = 2,
        Any = 255,
    }
}
namespace JetBrains.ReSharper.Psi.Naming.Settings.Upgrade
{
    
    public abstract class ClrNamingSettingsUpgrade<TKey> : JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.CodeStyleSettingsUpgrade
        where TKey : JetBrains.ReSharper.Psi.Naming.Settings.ClrLanguageNamingSettingsKeyBase
    {
        protected ClrNamingSettingsUpgrade(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected override void DoUpgrade(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore) { }
        protected abstract JetBrains.ReSharper.Psi.Naming.Interfaces.INamingSettings GetSpecificSettings(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings);
    }
    public abstract class CodeStyleSettingsUpgrade : JetBrains.Application.Configuration.Upgrade.IGlobalSettingsUpgrader, JetBrains.Application.Configuration.Upgrade.ISettingsUpgrader, JetBrains.ProjectModel.Settings.Upgrade.ISolutionSettingsUpgrader
    {
        protected CodeStyleSettingsUpgrade(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected abstract void DoUpgrade(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore);
    }
    public abstract class CustomRulesNamingSettingsUpgrade<TKey> : JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.CodeStyleSettingsUpgrade
        where TKey : JetBrains.ReSharper.Psi.Naming.Settings.CustomRulesNamingSettingsKeyBase
    {
        protected CustomRulesNamingSettingsUpgrade(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected override void DoUpgrade(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore) { }
        protected abstract JetBrains.ReSharper.Psi.Naming.Settings.CustomRulesNamingSettingsBase GetSpecificSettings(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings);
    }
    [System.ObsoleteAttribute()]
    public class NamingSettings60 : JetBrains.Application.Configuration.IXmlReadable, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingSettings
    {
        public NamingSettings60(string defaultEvenHandlerLongPattern) { }
        public System.Collections.Generic.JetHashSet<string> Abbreviations { get; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute("$object$_$event$")]
        public string EventHandlerPatternLong { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(null)]
        public string EventHandlerPatternShort { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(null)]
        public string ExceptionName { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(null)]
        public bool OverrideDefaultSettings { get; set; }
        public System.Collections.Generic.Dictionary<JetBrains.ReSharper.Psi.Naming.Settings.NamedElementKinds, JetBrains.ReSharper.Psi.Naming.Settings.NamingPolicy> PredefinedNamingRules { get; }
        public System.Collections.Generic.List<JetBrains.ReSharper.Psi.Naming.Settings.ClrUserDefinedNamingRule> UserRules { get; }
        public JetBrains.ReSharper.Psi.Dependencies.Hash AddToHash(JetBrains.ReSharper.Psi.Dependencies.Hash hash) { }
        public void ReadFromXml(System.Xml.XmlElement element) { }
        public void UpgradeFrom40(JetBrains.ReSharper.Psi.Naming.Legacy.DefaultNamingStyleSettings settings) { }
    }
}
namespace JetBrains.ReSharper.Psi.Parsing
{
    
    public class ArrayOfTokens
    {
        public ArrayOfTokens(int capacity = 256) { }
        public int Count { get; }
        public JetBrains.ReSharper.Psi.Parsing.Token this[int index] { get; }
        public int Add(JetBrains.ReSharper.Psi.Parsing.Token item) { }
        public void AddRange(JetBrains.ReSharper.Psi.Parsing.ArrayOfTokens array, int srcindx, int length, int delta = 0) { }
        public void Clear() { }
        public int FindTokenAt(int offset) { }
        public void GetTokenProperties(int index, out int start, out int end, out JetBrains.ReSharper.Psi.Parsing.TokenNodeType type, out uint lexerState) { }
        public JetBrains.ReSharper.Psi.Parsing.Token Last() { }
    }
    public class CachingLexer : JetBrains.ReSharper.Psi.Parsing.ILexer, JetBrains.ReSharper.Psi.Parsing.ILexer<int>, JetBrains.ReSharper.Psi.Parsing.ILexerEx
    {
        public JetBrains.Text.IBuffer Buffer { get; }
        public int CurrentPosition { get; set; }
        public int CurrentTokenIndex { get; }
        public JetBrains.Util.TextRange LastResyncAffectedRange { get; }
        public uint LexerStateEx { get; }
        public JetBrains.ReSharper.Psi.Parsing.TokenBuffer TokenBuffer { get; }
        public int TokenEnd { get; }
        public int TokenStart { get; }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType TokenType { get; }
        public void Advance() { }
        public void Advance(int deltha) { }
        public bool FindTokenAt(int pos) { }
        public void SetCurrentToken(int tokenNum) { }
        public void Start() { }
    }
    public class DelegatingLexer : JetBrains.ReSharper.Psi.Parsing.ILexer
    {
        protected DelegatingLexer(JetBrains.ReSharper.Psi.Parsing.ILexer originalLexer) { }
        public virtual JetBrains.Text.IBuffer Buffer { get; }
        public virtual object CurrentPosition { get; set; }
        protected JetBrains.ReSharper.Psi.Parsing.ILexer OriginalLexer { get; }
        public virtual int TokenEnd { get; }
        public virtual int TokenStart { get; }
        public virtual JetBrains.ReSharper.Psi.Parsing.TokenNodeType TokenType { get; }
        public virtual void Advance() { }
        public virtual void Start() { }
    }
    public class DocumentUpdatesAccumulator
    {
        public DocumentUpdatesAccumulator(JetBrains.DocumentModel.IDocument document) { }
        public DocumentUpdatesAccumulator(JetBrains.DocumentModel.DocumentChange change) { }
        public JetBrains.DocumentModel.IDocument Document { get; }
        public int InsertedTextLength { get; }
        public bool IsDirty { get; }
        public JetBrains.Util.TextRange ModifiedRange { get; }
        public void AssertClean() { }
        public void DocumentChanged(JetBrains.DocumentModel.DocumentChange args) { }
        public void Reset() { }
    }
    public abstract class FilteringLexer : JetBrains.ReSharper.Psi.Parsing.FilteringLexerBase
    {
        protected FilteringLexer(JetBrains.ReSharper.Psi.Parsing.ILexer lexer) { }
        protected override void SkipFilteredTokens() { }
    }
    public abstract class FilteringLexerBase : JetBrains.ReSharper.Psi.Parsing.ILexer
    {
        protected readonly JetBrains.Application.SeldomInterruptChecker myInterruptChecker;
        protected readonly JetBrains.ReSharper.Psi.Parsing.ILexer myLexer;
        protected FilteringLexerBase(JetBrains.ReSharper.Psi.Parsing.ILexer lexer) { }
        public JetBrains.Text.IBuffer Buffer { get; }
        public virtual object CurrentPosition { get; set; }
        public int TokenEnd { get; }
        public int TokenStart { get; }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType TokenType { get; }
        public virtual void Advance() { }
        protected abstract bool Skip(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType);
        protected abstract void SkipFilteredTokens();
        public virtual void Start() { }
    }
    public class FollowsFailure : JetBrains.ReSharper.Psi.Parsing.SyntaxError
    {
        public FollowsFailure(string details) { }
    }
    public abstract class GeneratedParserBase<TLexer> : JetBrains.ReSharper.Psi.Parsing.ITokenOffsetProvider
        where TLexer : JetBrains.ReSharper.Psi.Parsing.ILexer
    {
        protected TLexer myLexer;
        protected virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement createToken() { }
        protected int GetOffset(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase element) { }
        protected void setLexer(TLexer lexer) { }
        protected void SetOffset(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase element, int offset) { }
        protected void skip(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement parent) { }
    }
    public interface IIncrementalLexer : JetBrains.ReSharper.Psi.Parsing.ILexer, JetBrains.ReSharper.Psi.Parsing.ILexerEx
    {
        int EOFPos { get; }
        int LexemIndent { get; }
        void Start(int startOffset, int endOffset, uint state);
    }
    public interface IIncrementalLexerFactory : JetBrains.ReSharper.Psi.Parsing.ILexerFactory
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Parsing.IIncrementalLexer CreateLexer(JetBrains.Text.IBuffer buffer);
    }
    public interface ILexer
    {
        JetBrains.Text.IBuffer Buffer { get; }
        object CurrentPosition { get; set; }
        int TokenEnd { get; }
        int TokenStart { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Parsing.TokenNodeType TokenType { get; }
        void Advance();
        void Start();
    }
    public interface ILexer<TState> : JetBrains.ReSharper.Psi.Parsing.ILexer
    
    {
        TState CurrentPosition { get; set; }
    }
    public interface ILexerEx : JetBrains.ReSharper.Psi.Parsing.ILexer
    {
        uint LexerStateEx { get; }
    }
    public interface ILexerFactory
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Parsing.ILexer CreateLexer([JetBrains.Annotations.NotNullAttribute()] JetBrains.Text.IBuffer buffer);
    }
    public interface IParser
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.IFile ParseFile();
    }
    public interface ISecondaryLexer : JetBrains.ReSharper.Psi.Parsing.ILexer
    {
        int BufferStartOffset { get; }
        bool IsActual { get; }
    }
    public interface ITokenNodeType
    {
        bool IsComment { get; }
        bool IsConstantLiteral { get; }
        bool IsIdentifier { get; }
        bool IsKeyword { get; }
        bool IsStringLiteral { get; }
        bool IsWhitespace { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string TokenRepresentation { get; }
    }
    public interface ITokenOffsetProvider
    {
        int GetOffset(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase element);
        void SetOffset(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase element, int offset);
    }
    public interface IXmlTokenBuilder
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase CreateToken([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType tokenType, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.TreeOffset startOffset, JetBrains.ReSharper.Psi.TreeOffset endOffset);
    }
    public class LexerDictionary<TValue> : System.Collections.Generic.Dictionary<object, TValue>
    
    {
        public LexerDictionary(bool caseSensitive = True) { }
        public TValue GetValueSafe(JetBrains.ReSharper.Psi.Parsing.ReusableBufferRange reusableBuffer, JetBrains.Text.IBuffer buffer, int start, int end) { }
    }
    public class static LexerEx
    {
        public static JetBrains.ReSharper.Psi.Parsing.CachingLexer ToCachingLexer(this JetBrains.ReSharper.Psi.Parsing.ILexer lexer) { }
    }
    public class static LexerFactoryEx
    {
        public static JetBrains.ReSharper.Psi.Parsing.CachingLexer CreateCachingLexer(this JetBrains.ReSharper.Psi.Parsing.ILexerFactory factory, JetBrains.Text.IBuffer buffer) { }
    }
    public struct LexerStateCookie
    {
        public static JetBrains.ReSharper.Psi.Parsing.LexerStateCookie.Common Create(JetBrains.ReSharper.Psi.Parsing.ILexer lexer) { }
        public static JetBrains.ReSharper.Psi.Parsing.LexerStateCookie.TypeSafe<T> Create<T>(JetBrains.ReSharper.Psi.Parsing.ILexer<T> lexer) { }
        public struct Common : System.IDisposable
        {
            public Common(JetBrains.ReSharper.Psi.Parsing.ILexer lexer) { }
            public void Dispose() { }
        }
        public struct TypeSafe<T> : System.IDisposable
        
        {
            public TypeSafe(JetBrains.ReSharper.Psi.Parsing.ILexer<T> lexer) { }
            public void Dispose() { }
        }
    }
    public class LexerTokenIntern : JetBrains.ReSharper.Psi.Util.ITokenIntern
    {
        public LexerTokenIntern(int count = 0) { }
        public int Count { get; }
        public void Clear() { }
        public JetBrains.Text.IBuffer Intern(JetBrains.Text.IBuffer buffer) { }
        public string Intern(JetBrains.ReSharper.Psi.Parsing.ILexer lexer) { }
        public string Intern(JetBrains.Text.IBuffer buffer, int start, int end) { }
        public string Intern(string text) { }
    }
    public class static LexerUtil
    {
        public static int AdvanceWhile<TLexer>([JetBrains.Annotations.NotNullAttribute()] this TLexer lexer, JetBrains.ReSharper.Psi.Parsing.TokenNodeType skipToken)
            where TLexer : JetBrains.ReSharper.Psi.Parsing.ILexer { }
        public static int AdvanceWhile<TLexer>([JetBrains.Annotations.NotNullAttribute()] this TLexer lexer, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet skipTokens)
            where TLexer : JetBrains.ReSharper.Psi.Parsing.ILexer { }
        public static bool CompareBufferText([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Parsing.ILexer lexer, [JetBrains.Annotations.CanBeNullAttribute()] string str, bool caseSensitive = True) { }
        public static bool CompareTokenText([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Parsing.ILexer lexer, [JetBrains.Annotations.CanBeNullAttribute()] string str, bool caseSensitive = True) { }
        public static string GetCurrTokenText([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Parsing.ILexer lexer) { }
        public static string GetQuotedTokenText([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Parsing.ILexer lexer, char quote) { }
        public static string GetQuotedTokenText([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Parsing.ILexer lexer, char openQuote, char closeQuote) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Parsing.TokenNodeType LookaheadToken([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Parsing.ILexer lexer, int k) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Parsing.TokenNodeType LookaheadToken<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Parsing.ILexer<T> lexer, int k) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Parsing.TokenNodeType LookaheadTokenSkipping([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Parsing.ILexer lexer, int k, JetBrains.ReSharper.Psi.Parsing.TokenNodeType nodeTypeToSkip) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Parsing.TokenNodeType> Tokens([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Parsing.ILexer lexer) { }
    }
    public abstract class MissingTokenInserterBase
    {
        [System.ThreadStaticAttribute()]
        protected static JetBrains.ReSharper.Psi.Util.ITokenIntern myWhitespaceIntern;
        protected MissingTokenInserterBase(JetBrains.ReSharper.Psi.Parsing.ITokenOffsetProvider offsetProvider, JetBrains.Application.SeldomInterruptChecker interruptChecker, JetBrains.ReSharper.Psi.Util.ITokenIntern intern) { }
        protected JetBrains.ReSharper.Psi.TreeOffset GetLeafOffset(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement element) { }
        protected abstract void ProcessLeafElement(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement leafElement);
        protected void Run(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement root) { }
    }
    public class MixedLexer : JetBrains.ReSharper.Psi.Parsing.IIncrementalLexer, JetBrains.ReSharper.Psi.Parsing.ILexer, JetBrains.ReSharper.Psi.Parsing.ILexerEx
    {
        public MixedLexer(JetBrains.ProjectModel.ISolution solution, JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.Parsing.ILexerFactory lexerFactory, JetBrains.ProjectModel.ProjectFileType projectFileType, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile = null) { }
        public JetBrains.Text.IBuffer Buffer { get; }
        public object CurrentPosition { get; set; }
        public uint LexerStateEx { get; }
        public JetBrains.ReSharper.Psi.Parsing.ILexer PrimaryLexer { get; }
        public int TokenEnd { get; }
        public int TokenStart { get; }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType TokenType { get; }
        public void Advance() { }
        public JetBrains.ReSharper.Psi.Parsing.CachingLexer GetParentCachingLexer() { }
        public JetBrains.ReSharper.Psi.Parsing.TokenBuffer ReSync(JetBrains.ReSharper.Psi.Parsing.DocumentUpdatesAccumulator accumulator, JetBrains.ReSharper.Psi.Parsing.TokenBuffer cachedTokenBuffer, JetBrains.Text.IBuffer buffer) { }
        public void Start() { }
    }
    public class MixedLexerFactory : JetBrains.ReSharper.Psi.Parsing.ILexerFactory
    {
        public MixedLexerFactory(JetBrains.ProjectModel.ISolution solution, JetBrains.ReSharper.Psi.Parsing.ILexerFactory lexerFactory, JetBrains.ProjectModel.ProjectFileType projectFileType, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile = null) { }
        public JetBrains.ReSharper.Psi.Parsing.ILexer CreateLexer(JetBrains.Text.IBuffer buffer) { }
    }
    public class static ParserService
    {
        [System.ObsoleteAttribute("Use language service instead")]
        public static JetBrains.ReSharper.Psi.Tree.IFile ParseFileDebug(JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.PsiLanguageType type, JetBrains.ProjectModel.ISolution solution, JetBrains.ReSharper.Psi.Modules.IPsiModule project) { }
        [System.ObsoleteAttribute("Use language service instead")]
        public static JetBrains.ReSharper.Psi.Tree.IFile ParseFileDebug(JetBrains.Util.FileSystemPath fileName, JetBrains.ReSharper.Psi.PsiLanguageType languageType, JetBrains.ReSharper.Psi.Modules.IPsiModule project) { }
    }
    public class ProjectedLexer : JetBrains.ReSharper.Psi.Parsing.ILexer, JetBrains.ReSharper.Psi.Parsing.ILexer<int>
    {
        public ProjectedLexer(JetBrains.ReSharper.Psi.Parsing.CachingLexer lexer, JetBrains.Util.TextRange range) { }
        public JetBrains.Text.IBuffer Buffer { get; }
        public int CurrentPosition { get; set; }
        public int TokenEnd { get; }
        public int TokenStart { get; }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType TokenType { get; }
        public void Advance() { }
        public void Start() { }
    }
    public class PsiGetterTestUtil
    {
        protected static System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.Tree.ITreeNode> visitedElements;
        protected static System.IO.TextWriter writer;
        public static System.IO.TextWriter Writer { set; }
        protected static bool CanVisitFurther(JetBrains.ReSharper.Psi.Tree.ITreeNode param) { }
        public static void Clear() { }
        public static void TestTokenNode(int level, JetBrains.ReSharper.Psi.Tree.ITokenNode param, string caller) { }
        public static void TestTreeNode(int level, JetBrains.ReSharper.Psi.Tree.ITreeNode param, string caller) { }
        protected static void VisitElement(int level, JetBrains.ReSharper.Psi.Tree.ITreeNode sourceElement, string caller) { }
    }
    public class ReusableBufferRange
    {
        public ReusableBufferRange() { }
        public JetBrains.Text.BufferRange BufferRange { get; }
        public void Reuse(JetBrains.Text.IBuffer buffer, JetBrains.Util.TextRange range) { }
    }
    public class SimpleFilteringLexer : JetBrains.ReSharper.Psi.Parsing.FilteringLexer
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly System.Predicate<JetBrains.ReSharper.Psi.Parsing.TokenNodeType> IS_WHITESPACE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly System.Predicate<JetBrains.ReSharper.Psi.Parsing.TokenNodeType> IS_WHITESPACE_OR_COMMENT;
        public SimpleFilteringLexer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Parsing.ILexer lexer, [JetBrains.Annotations.NotNullAttribute()] System.Predicate<JetBrains.ReSharper.Psi.Parsing.TokenNodeType> skipTokenPredicate) { }
        protected override bool Skip(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) { }
    }
    public class SyntaxError : System.Exception
    {
        public SyntaxError(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement result) { }
        public SyntaxError(string details) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement ErrorElement { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParsingResult { get; set; }
    }
    public struct Token
    {
        public Token(JetBrains.ReSharper.Psi.Parsing.TokenNodeType type, int start, int end, uint state) { }
        public int End { get; }
        public uint LexerState { get; }
        public int Start { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType Type { get; }
        public JetBrains.ReSharper.Psi.Parsing.Token Shift(int delta) { }
        public override string ToString() { }
    }
    public class TokenBuffer
    {
        public TokenBuffer(JetBrains.ReSharper.Psi.Parsing.ILexer lexer) { }
        public JetBrains.Text.IBuffer Buffer { get; }
        public JetBrains.ReSharper.Psi.Parsing.ArrayOfTokens CachedTokens { get; }
        public JetBrains.ReSharper.Psi.Parsing.Token this[int index] { get; }
        public JetBrains.ReSharper.Psi.Parsing.CachingLexer CreateLexer() { }
        public int FindTokenAt(int offset) { }
        public JetBrains.ReSharper.Psi.Parsing.TokenBuffer ReScan(JetBrains.Util.TextRange oldRange, JetBrains.ReSharper.Psi.Parsing.ILexerFactory lexerFactory, JetBrains.Text.BufferRange newBufferRange) { }
        public JetBrains.ReSharper.Psi.Parsing.TokenBuffer ScanModifiedRangeAndTryMerge(JetBrains.ReSharper.Psi.Parsing.ILexer newLexer, JetBrains.ReSharper.Psi.Parsing.ArrayOfTokens newArrayOfTokens, int affectedRangeStart, int modifiedRangeEnd, int syncLexerPosition) { }
    }
    public class static TokenBufferExtensions
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Parsing.TokenBuffer ReSync(this JetBrains.ReSharper.Psi.Parsing.TokenBuffer tokenBuffer, JetBrains.Util.TextRange modifiedRange, int insertedTextLength, JetBrains.ReSharper.Psi.Parsing.ILexerFactory lexerFactory, JetBrains.Text.IBuffer newDocumentBuffer) { }
    }
    public abstract class TokenNodeType : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType, JetBrains.ReSharper.Psi.Parsing.ITokenNodeType
    {
        protected TokenNodeType(string s, int index) { }
        public abstract bool IsComment { get; }
        public abstract bool IsConstantLiteral { get; }
        public virtual bool IsFiltered { get; }
        public abstract bool IsIdentifier { get; }
        public abstract bool IsKeyword { get; }
        public abstract bool IsStringLiteral { get; }
        public abstract bool IsWhitespace { get; }
        public abstract string TokenRepresentation { get; }
        public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase Create(string token) { }
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase Create(JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.TreeOffset startOffset, JetBrains.ReSharper.Psi.TreeOffset endOffset);
    }
    public class static TokenNodeTypeEx
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase Create([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Parsing.TokenNodeType nodeType, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Text.IBuffer buffer) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase Create([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Parsing.TokenNodeType nodeType, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.TreeTextRange range) { }
    }
    public class UnexpectedToken : JetBrains.ReSharper.Psi.Parsing.SyntaxError
    {
        public UnexpectedToken(string details) { }
    }
    public class XmlLexerFactory : JetBrains.ReSharper.Psi.Parsing.ILexerFactory
    {
        public XmlLexerFactory([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Parsing.XmlTokenTypes xmlTokenTypes) { }
        protected virtual JetBrains.ReSharper.Psi.Parsing.XmlLexerGenerated CreateLexer(JetBrains.Text.IBuffer buffer) { }
        public static JetBrains.ReSharper.Psi.Parsing.XmlLexerGenerated CreateXmlLexer(JetBrains.Text.IBuffer buffer, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Parsing.XmlTokenTypes xmlTokenTypes) { }
    }
    public class XmlLexerGenerated : JetBrains.ReSharper.Psi.Parsing.IIncrementalLexer, JetBrains.ReSharper.Psi.Parsing.ILexer, JetBrains.ReSharper.Psi.Parsing.ILexer<JetBrains.ReSharper.Psi.Parsing.XmlLexerState>, JetBrains.ReSharper.Psi.Parsing.ILexerEx
    {
        protected JetBrains.ReSharper.Psi.Parsing.TokenNodeType currTokenType;
        protected bool myIsDTDLexer;
        protected const int YY_IN_CDATA = 3;
        protected const int YY_IN_COMMENT = 1;
        protected const int YY_IN_DTD = 6;
        protected const int YY_IN_DTD_BODY = 7;
        protected const int YY_IN_PI = 4;
        protected const int YY_IN_PI_BODY = 5;
        protected const int YY_IN_TAG = 2;
        protected const int YYINITIAL = 0;
        public XmlLexerGenerated(JetBrains.Text.IBuffer buffer, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Parsing.XmlTokenTypes xmlTokenTypes) { }
        public JetBrains.Text.IBuffer Buffer { get; }
        protected int BufferEnd { get; set; }
        protected int BufferIndex { get; set; }
        protected int BufferStart { get; set; }
        public JetBrains.ReSharper.Psi.Parsing.XmlLexerState CurrentPosition { get; set; }
        public int EOFPos { get; }
        public bool IsDTDLexer { get; set; }
        public int LexemIndent { get; }
        public uint LexerStateEx { get; }
        protected int LexicalState { get; set; }
        public int TokenEnd { get; }
        public int TokenStart { get; }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType TokenType { get; }
        public JetBrains.ReSharper.Psi.Parsing.XmlTokenTypes XmlTokenType { get; }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType _locateToken() { }
        public void Advance() { }
        protected virtual void locateToken() { }
        protected JetBrains.ReSharper.Psi.Parsing.TokenNodeType makeToken(JetBrains.ReSharper.Psi.Parsing.TokenNodeType type) { }
        public void Start() { }
        public void Start(int startOffset, int endOffset, uint state) { }
    }
    public struct XmlLexerState
    {
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType currTokenType;
        public int myPrevState;
        public int yy_buffer_end;
        public int yy_buffer_index;
        public int yy_buffer_start;
        public int yy_lexical_state;
    }
    public class XmlTokenNodeType : JetBrains.ReSharper.Psi.Parsing.TokenNodeType
    {
        public XmlTokenNodeType([JetBrains.Annotations.NotNullAttribute()] string s, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Parsing.XmlTokenTypes types, int index, bool isFilteredNode = False) { }
        public override bool IsComment { get; }
        public override bool IsConstantLiteral { get; }
        public override bool IsFiltered { get; }
        public override bool IsIdentifier { get; }
        public override bool IsKeyword { get; }
        public override bool IsStringLiteral { get; }
        public override bool IsWhitespace { get; }
        public override string TokenRepresentation { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Parsing.XmlTokenTypes XmlTokenTypes { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase Create(JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.TreeOffset startOffset, JetBrains.ReSharper.Psi.TreeOffset endOffset) { }
    }
    public class XmlTokenTypes
    {
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType ASTERISK;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType ATTLIST_START;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType CDATA_BODY;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType CDATA_END;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType CDATA_START;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType CHAR_REF;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType COMMA;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType COMMENT_BODY;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType COMMENT_END;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType COMMENT_START;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType DTD_START;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType ELEMENT_START;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType ENTITY_REF;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType ENTITY_START;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType EQ;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType ERROR;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType FIXED;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType IDENTIFIER;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType IMPLIED;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType LBRACKET;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType LPARENTH;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType NEW_LINE;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType NOTATION_START;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType OR;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType PCDATA;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType PE_REF;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType PERCENT;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType PI_BODY;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType PIEND;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType PISTART;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType PLUS;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType QUESTION;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType RBRACKET;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType REQUIRED;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType RPARENTH;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType SPACE;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType STRING;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType TAG_END;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType TAG_END1;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType TAG_START;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType TAG_START1;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType TEXT;
        public readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TEXT_NODES;
        public readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType UNFINISHED_STRING;
        public XmlTokenTypes([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType languageType, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Parsing.IXmlTokenBuilder xmlTokenBuilder) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.PsiLanguageType LanguageType { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Parsing.IXmlTokenBuilder XmlTokenBuilder { get; }
        public static JetBrains.ReSharper.Psi.Parsing.XmlTokenTypes GetInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public static JetBrains.ReSharper.Psi.Parsing.XmlTokenTypes GetInstance<TLanguage>()
            where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType { }
    }
}
namespace JetBrains.ReSharper.Psi.Paths
{
    
    public interface IProjectPathMapping
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ProjectModel.IProject Project { get; }
        System.Collections.Generic.IList<JetBrains.Util.FileSystemPath> GetAllPathPartsIn(JetBrains.Util.FileSystemPath parentPath);
        System.Collections.Generic.IList<JetBrains.Util.FileSystemPath> GetAllRelativePaths();
        JetBrains.ReSharper.Psi.Paths.PathState GetPathState(JetBrains.Util.FileSystemPath webPath);
        System.Collections.Generic.IList<JetBrains.Util.FileSystemPath> GetRealPaths(JetBrains.Util.FileSystemPath webPath);
        void IgnorePath(JetBrains.Util.FileSystemPath path);
        void RemoveAllPaths();
        void SetPathMapping(JetBrains.Util.FileSystemPath webPath, JetBrains.Util.FileSystemPath realPath);
    }
    public interface IVirtualFilesProvider
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.Util.FileSystemPath> GetAbsolutePathsToVirtualFiles([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ProjectModel.IProjectFile GetProjectFileByVirtualPath([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project, JetBrains.Util.FileSystemPath virtualPath);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiSourceFile GetPsiSourceFileByVirtualPath([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project, JetBrains.Util.FileSystemPath virtualPath);
    }
    public interface IVirtualFoldersProvider
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.Util.FileSystemPath> GetAbsolutePathsToVirtualFolders([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ProjectModel.IProjectFolder GetProjectFolderByVirtualPath([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project, JetBrains.Util.FileSystemPath virtualPath);
    }
    public interface IVirtualPathsService : JetBrains.ReSharper.Psi.Paths.IVirtualFilesProvider, JetBrains.ReSharper.Psi.Paths.IVirtualFoldersProvider
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.Util.FileSystemPath> GetPathPartsIn([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project, JetBrains.Util.FileSystemPath virtualPrefixPath);
        bool IsVirtualPathOrPrefix([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project, JetBrains.Util.FileSystemPath virtualPath);
        void RegisterFilesProvider(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ReSharper.Psi.Paths.IVirtualFilesProvider filesProvider);
        void RegisterFoldersProvider(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ReSharper.Psi.Paths.IVirtualFoldersProvider foldersProvider);
    }
    public abstract class PathMappingManager
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Paths.IProjectPathMapping GetPathMapping([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IPathReference pathReference) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Paths.IProjectPathMapping GetPathMapping([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project) { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected abstract JetBrains.ReSharper.Psi.Paths.IProjectPathMapping GetPathMappingImpl([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project);
        public static void RunPathMappingEditor([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IPathReference pathReference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.FileSystemPath preselectedPath) { }
        public static void RunPathMappingEditor([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.FileSystemPath preselectedPath) { }
        protected abstract void RunPathMappingEditorImpl([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.FileSystemPath preselectedPath);
    }
    public class static PathReferenceEx
    {
        public static JetBrains.ReSharper.Psi.IPsiSourceFile GetPsiSourceFileInProject([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ProjectModel.IProject project, JetBrains.Util.FileSystemPath resourceFilePath) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IPsiSourceFile ResolvePsiSourceFileInOwnProject([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IPathReference pathReference) { }
    }
    [System.FlagsAttribute()]
    public enum PathState
    {
        NONE = 0,
        IGNORED_OR_PART_OF = 1,
        MAPPED = 2,
    }
    public class static ProjectPathMappingExtensions
    {
        public static JetBrains.ReSharper.Psi.Paths.IProjectPathMapping EmptyMapping;
        public static void Dump([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Paths.IProjectPathMapping mapping, System.IO.TextWriter w) { }
        public static System.Collections.Generic.IDictionary<JetBrains.Util.FileSystemPath, JetBrains.Util.FileSystemPath> GetRealToWebPathMapping([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Paths.IProjectPathMapping mapping) { }
        public static bool IsEmpty([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Paths.IProjectPathMapping mapping) { }
        public class EmptyProjectPathMapping : JetBrains.ReSharper.Psi.Paths.IProjectPathMapping
        {
            public JetBrains.ProjectModel.IProject Project { get; }
            public System.Collections.Generic.IList<JetBrains.Util.FileSystemPath> GetAllPathPartsIn(JetBrains.Util.FileSystemPath parentPath) { }
            public System.Collections.Generic.IList<JetBrains.Util.FileSystemPath> GetAllRelativePaths() { }
            public JetBrains.ReSharper.Psi.Paths.PathState GetPathState(JetBrains.Util.FileSystemPath webPath) { }
            public System.Collections.Generic.IList<JetBrains.Util.FileSystemPath> GetRealPaths(JetBrains.Util.FileSystemPath webPath) { }
            public void IgnorePath(JetBrains.Util.FileSystemPath path) { }
            public void RemoveAllPaths() { }
            public void SetPathMapping(JetBrains.Util.FileSystemPath webPath, JetBrains.Util.FileSystemPath realPath) { }
        }
    }
}
namespace JetBrains.ReSharper.Psi.PerformanceThreshold
{
    
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class DoNotBuildPsiForHugeFiles : JetBrains.ReSharper.Psi.IPsiSourceFilePropertiesProvider
    {
        public DoNotBuildPsiForHugeFiles(JetBrains.ReSharper.Psi.PerformanceThreshold.PerformanceThresholds thresholds) { }
        public double Order { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFileProperties GetPsiProperties(JetBrains.ReSharper.Psi.IPsiSourceFileProperties prevProperties, JetBrains.ProjectModel.IProject project, JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class PerformanceThresholds
    {
        public PerformanceThresholds(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.ProjectModel.ProjectFileTypes projectFileTypes) { }
        public int GetAnalysisAverageLineLengthThreshold(JetBrains.ProjectModel.ProjectFileType projectFileType) { }
        public int GetAnalysisFileSizeThreshold(JetBrains.ProjectModel.ProjectFileType projectFileType) { }
        public int GetBuildPsiFileSizeThreshold(JetBrains.ProjectModel.ProjectFileType projectFileType) { }
        public int GetPsiDepthThreshold(JetBrains.ProjectModel.ProjectFileType projectFileType) { }
    }
}
namespace JetBrains.ReSharper.Psi.PerformanceThreshold.Settings
{
    
    [JetBrains.Application.ShellComponentAttribute()]
    public class DefaultPerformanceThresholdSettingsProvider : JetBrains.Application.Settings.IHaveDefaultSettingsStream { }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(System.Reflection.Missing), "Thresholds to disable PSI or analysis in the sake of performance reasons.")]
    public class PerformanceThresholdSettings
    {
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Average line length threshold after which analysis is not run unless explicitely " +
            "specified by user (I.e. minimized javascripts). Key is language. Value is file s" +
            "ize in characters.")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, int> AnalysisAverageLineLengthThreshold;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Files size threshold after which analysis is not run unless explicitely specified" +
            " by user. Key is language. Value is file size in characters.")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, int> AnalysisFileSizeThreshold;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Files size threshold after which PSI is not built. Key is language. Value is file" +
            " size in characters.")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, int> BuildPsiFileSizeThreshold;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Maximum PSI tree depth. Used to prevent stack overflow exception.")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, int> PsiDepthThreshold;
    }
}
namespace JetBrains.ReSharper.Psi.Pointers
{
    
    public abstract class DeclaredElementPointer
    {
        protected DeclaredElementPointer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public JetBrains.ReSharper.Psi.IPsiServices PsiServices { get; }
        protected virtual JetBrains.ReSharper.Psi.Pointers.DeclaredElementPointer.Binding CreateBinding(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
        protected JetBrains.ReSharper.Psi.IDeclaredElement FindDeclaredElement() { }
        public override string ToString() { }
        public class Binding : JetBrains.ReSharper.Psi.Pointers.SmartPointerBase<JetBrains.ReSharper.Psi.Tree.IDeclaration>
        {
            public Binding([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
            protected override JetBrains.ReSharper.Psi.Tree.IDeclaration FindByRange(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range) { }
            protected override JetBrains.DocumentModel.DocumentRange GetDocumentRange(JetBrains.ReSharper.Psi.Tree.IDeclaration element) { }
            protected override bool IsValid(JetBrains.ReSharper.Psi.Tree.IDeclaration element) { }
        }
    }
    public interface IDeclaredElementPointer<out T>
        where out T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiServices PsiServices { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        T FindDeclaredElement();
    }
    public interface IElementInstancePointer<T>
        where T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T> ElementPointer { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiServices PsiServices { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.DeclaredElementInstance<T> Resolve();
    }
    public interface IPsiPointers
    {
        JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T> CreateDeclaredElementPointer<T>(T element)
            where T : JetBrains.ReSharper.Psi.IDeclaredElement;
        JetBrains.ReSharper.Psi.IReferencePointer CreateReferencePointer(JetBrains.ReSharper.Psi.Resolve.IReference reference);
        JetBrains.ReSharper.Psi.ITreeNodePointer<T> CreateTreeElementPointer<T>(T element)
            where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode;
        T RegisterSmartPointer<T>(T binding)
            where T : JetBrains.ReSharper.Psi.Pointers.ISmartPointer;
    }
    public interface ISmartPointer
    {
        JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
    }
    public class NonPhysicalElementPointer<T> : JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T>
        where T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public NonPhysicalElementPointer([JetBrains.Annotations.NotNullAttribute()] T element) { }
        public JetBrains.ReSharper.Psi.IPsiServices PsiServices { get; }
        public T FindDeclaredElement() { }
    }
    public class static PsiPointersExtensions
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Pointers.IElementInstancePointer<T> CreateElementInstancePointer<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.DeclaredElementInstance<T> instance)
            where T :  class, JetBrains.ReSharper.Psi.IDeclaredElement { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Pointers.IElementInstancePointer<T> CreateElementInstancePointer<T>([JetBrains.Annotations.NotNullAttribute()] this T element)
            where T :  class, JetBrains.ReSharper.Psi.IDeclaredElement { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T> CreateElementPointer<T>([JetBrains.Annotations.NotNullAttribute()] this T element)
            where T :  class, JetBrains.ReSharper.Psi.IDeclaredElement { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IReferencePointer CreateReferencePointer<T>([JetBrains.Annotations.NotNullAttribute()] this T reference)
            where T :  class, JetBrains.ReSharper.Psi.Resolve.IReference { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ITreeNodePointer<T> CreateTreeElementPointer<T>([JetBrains.Annotations.NotNullAttribute()] this T element)
            where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    }
    public abstract class SmartPointerBase<TElement> : JetBrains.ReSharper.Psi.Pointers.ISmartPointer
        where TElement :  class
    {
        protected SmartPointerBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.PsiLanguageType language, [JetBrains.Annotations.NotNullAttribute()] TElement element) { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        public TElement Find() { }
        protected abstract TElement FindByRange(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range);
        protected abstract JetBrains.DocumentModel.DocumentRange GetDocumentRange(TElement element);
        protected abstract bool IsValid(TElement element);
    }
    public class SourceElementPointer<T> : JetBrains.ReSharper.Psi.Pointers.DeclaredElementPointer, JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T>
        where T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public SourceElementPointer(T element) { }
    }
    public class TrivialElementInstancePointer<T> : JetBrains.ReSharper.Psi.Pointers.IElementInstancePointer<T>
        where T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public TrivialElementInstancePointer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.DeclaredElementInstance<T> element) { }
        public JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T> ElementPointer { get; }
        public JetBrains.ReSharper.Psi.IPsiServices PsiServices { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<T> Resolve() { }
    }
    public class TrivialElementPointer<T> : JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T>
        where T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public TrivialElementPointer([JetBrains.Annotations.NotNullAttribute()] T element) { }
        public JetBrains.ReSharper.Psi.IPsiServices PsiServices { get; }
        public T FindDeclaredElement() { }
    }
}
namespace JetBrains.ReSharper.Psi.Resolve
{
    
    public class AllNonQualifiedReferencesResolver : JetBrains.ReSharper.Psi.Resolve.NonQualifiedReferencesResolveBase
    {
        protected AllNonQualifiedReferencesResolver(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope> limitedScopes, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
        protected AllNonQualifiedReferencesResolver(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope> limitedScopes) { }
        protected AllNonQualifiedReferencesResolver() { }
        public override void Process(JetBrains.ReSharper.Psi.Tree.ITreeNode topElement) { }
        public static void ProcessAll([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        protected override bool ScopeShouldBeVisited(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope scope) { }
        protected override void VisitElement(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public class AllNonQualifiedSignatureReferencesResolver : JetBrains.ReSharper.Psi.Resolve.AllNonQualifiedReferencesResolver
    {
        public static void Process(JetBrains.ReSharper.Psi.Tree.IFile file) { }
        protected override bool ScopeShouldBeVisited(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope scope) { }
    }
    public class DeclaredElementTypeFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilterWithErrorType
    {
        public DeclaredElementTypeFilter(JetBrains.ReSharper.Psi.Resolve.ResolveErrorType errorType, params JetBrains.ReSharper.Psi.DeclaredElementType[] expectedTypes) { }
        public DeclaredElementTypeFilter(JetBrains.ReSharper.Psi.Resolve.ResolveErrorType errorType, JetBrains.ReSharper.Psi.Resolve.FilterRunType runType, params JetBrains.ReSharper.Psi.DeclaredElementType[] expectedTypes) { }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class DefaultAccessContext : JetBrains.ReSharper.Psi.Resolve.IAccessContext
    {
        public DefaultAccessContext(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetAccessContainingTypeElement() { }
        public virtual JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public virtual JetBrains.ReSharper.Psi.Resolve.QualifierKind GetQualifierKind() { }
        public virtual JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement() { }
        public virtual JetBrains.ReSharper.Psi.Resolve.Staticness GetStaticness() { }
    }
    public class DynamicResolveResult : JetBrains.ReSharper.Psi.Resolve.ResolveResult
    {
        public static readonly JetBrains.ReSharper.Psi.Resolve.DynamicResolveResult Instance;
        public DynamicResolveResult(JetBrains.ReSharper.Psi.DeclaredElementInstance candidate) { }
        public DynamicResolveResult(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> candidates) { }
        public DynamicResolveResult(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.DeclaredElementInstance> candidates) { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution candidateSubstitution) { }
    }
    public class ElementAccessContext : JetBrains.ReSharper.Psi.Resolve.IAccessContext
    {
        public ElementAccessContext(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetAccessContainingTypeElement() { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public JetBrains.ReSharper.Psi.Resolve.QualifierKind GetQualifierKind() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement() { }
        public JetBrains.ReSharper.Psi.Resolve.Staticness GetStaticness() { }
    }
    public sealed class EmptyFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.Resolve.ISymbolFilter INSTANCE;
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class EmptyQualifier : JetBrains.ReSharper.Psi.Resolve.IQualifier, JetBrains.ReSharper.Psi.Resolve.IQualifierWithTypeElement
    {
        public static readonly JetBrains.ReSharper.Psi.Resolve.EmptyQualifier INSTANCE;
        public bool Resolved { get; }
        public JetBrains.ReSharper.Psi.Resolve.QualifierKind GetKind() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement() { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTable(JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
    }
    public class EmptyResolveResult : JetBrains.ReSharper.Psi.Resolve.IResolveResult
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.IResolveResult Instance;
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> Candidates { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> CandidateSubstitutions { get; }
        public JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        public bool IsEmpty { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Substitution { get; }
        public string Dump() { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution candidateSubstitution) { }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Empty")]
    public class EmptySubstitution : JetBrains.ReSharper.Psi.Resolve.ISubstitution
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.EmptySubstitution INSTANCE;
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> Domain { get; }
        public JetBrains.ReSharper.Psi.IType this[JetBrains.ReSharper.Psi.ITypeParameter tp] { get; }
        public JetBrains.ReSharper.Psi.IType this[JetBrains.ReSharper.Psi.IType t] { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Apply(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.ReSharper.Psi.IType Apply(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public JetBrains.ReSharper.Psi.IType Apply(JetBrains.ReSharper.Psi.IType type) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Extend(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> typeParameters, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> values) { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Extend(System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.IType> map) { }
        public override int GetHashCode() { }
        public bool HasInDomain(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public bool IsIdempotent(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public sealed class ExactNameFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolInfoFilter
    {
        public ExactNameFilter(string name) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo info) { }
    }
    public class static FileFilters
    {
        public static readonly JetBrains.ReSharper.Psi.Resolve.ISymbolFilter DirectoryExists;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ISymbolFilter Exists;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ISymbolFilter FileExists;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ISymbolFilter InSolution;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ISymbolFilter IsProjectFolder;
        public class ExtensionFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
        {
            public ExtensionFilter(params string[] expectedExtensions) { }
            public ExtensionFilter(System.Collections.Generic.IEnumerable<string> expectedExtensions) { }
            public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
            public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        }
        public class IsProjectFileFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
        {
            public IsProjectFileFilter(JetBrains.ProjectModel.ProjectFileType expectedType) { }
            public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
            public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        }
        public class ItemInProjectFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
        {
            public ItemInProjectFilter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project) { }
            public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
            public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        }
        public class PredicateFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
        {
            public PredicateFilter(System.Predicate<JetBrains.Util.FileSystemPath> predicate) { }
            public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
            public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        }
    }
    public class FileResolveErrorType : JetBrains.ReSharper.Psi.Resolve.ResolveErrorType
    {
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType[] AllFileErrors;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType INVALID_CHARS;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType NOT_EXIST;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType NOT_IN_PROJECT;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType NOT_IN_SOLUTION;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType PATH_IGNORED;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType PATH_MAPPED;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType PATH_NOT_RESOLVED;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType PROJECT_FILE_EXPECTED;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType PROJECT_FILE_TYPE_MISMATCH;
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType PROJECT_FOLDER_EXPECTED;
    }
    public enum FilterRunType
    {
        REGULAR = 0,
        MUST_RUN = 1,
        MUST_RUN_NO_CANDIDATES = 2,
    }
    public interface IAccessContext
    {
        JetBrains.ReSharper.Psi.ITypeElement GetAccessContainingTypeElement();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule();
        JetBrains.ReSharper.Psi.Resolve.QualifierKind GetQualifierKind();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement();
        JetBrains.ReSharper.Psi.Resolve.Staticness GetStaticness();
    }
    public interface ICompleteableReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetCompletionSymbolTable();
    }
    public interface IFileReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.Resolve.ICompleteableReference, JetBrains.ReSharper.Psi.Resolve.IPathReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        System.Collections.Generic.ICollection<string> ExpectedExtensions { get; }
        JetBrains.ProjectModel.ProjectFileType ExpectedFileType { get; }
        JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSmartCompletionSymbolTable();
    }
    public interface ILateBoundReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.Resolve.Refers RefersToDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement);
    }
    public interface IPathReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.Resolve.ICompleteableReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.Util.FileSystemPath GetBasePath();
        JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] GetPathFilters();
    }
    public interface IQualifier
    {
        bool Resolved { get; }
        JetBrains.ReSharper.Psi.Resolve.QualifierKind GetKind();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode);
    }
    public interface IQualifierWithTypeElement : JetBrains.ReSharper.Psi.Resolve.IQualifier
    {
        JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement();
    }
    public interface IReference : JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CurrentResolveResult { get; set; }
        bool HasMultipleNames { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference BindTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference BindTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IAccessContext GetAccessContext();
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<string> GetAllNames();
        [JetBrains.Annotations.NotNullAttribute()]
        string GetName();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetReferenceSymbolTable(bool useReferenceName);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode GetTreeNode();
        JetBrains.ReSharper.Psi.TreeTextRange GetTreeTextRange();
        bool IsValid();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve();
    }
    public interface IReferenceFactory
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference[] GetReferences([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference[] oldReferences);
        bool HasReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.ICollection<string> names);
    }
    public interface IReferenceProvider
    {
        bool ContainsReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference);
        JetBrains.ReSharper.Psi.Tree.ReferenceCollection GetReferences([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<string> names);
    }
    public interface IReferenceProviderFactory
    {
        public event System.Action OnChanged;
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReferenceFactory CreateFactory([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IFile file);
    }
    public interface IReferenceToDelegateCreation : JetBrains.ReSharper.Psi.Resolve.ICompleteableReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IDeclaredType Delegate { get; }
        bool IsEventSubscription { get; }
    }
    public interface IResolveResult
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> Candidates { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> CandidateSubstitutions { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        bool IsEmpty { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ISubstitution Substitution { get; }
        string Dump();
        bool IsValid();
        JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement element);
        JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution candidateSubstitution);
    }
    public interface ISubstitution
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> Domain { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType this[JetBrains.ReSharper.Psi.ITypeParameter tp] { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType this[JetBrains.ReSharper.Psi.IType t] { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType Apply([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeParameter typeParameter);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType Apply([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ISubstitution Apply([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ISubstitution Extend([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> typeParameters, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> values);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ISubstitution Extend([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.IType> map);
        bool HasInDomain([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeParameter typeParameter);
        bool IsIdempotent([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeParameter typeParameter);
        bool IsValid();
    }
    public interface ISymbolFilter
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data);
    }
    public interface ISymbolInfo
    {
        System.Nullable<int> InheritanceLevel { get; }
        int Level { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string ShortName { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IDeclaredElement GetDeclaredElement();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.ISubstitution GetSubstitution();
        JetBrains.ReSharper.Psi.Resolve.ISymbolInfo ReplaceLevel(int level);
        JetBrains.ReSharper.Psi.Resolve.ISymbolInfo ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
    }
    public interface ISymbolTable
    {
        void ForAllSymbolInfos([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> processor);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet GetDependencySet();
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfos([JetBrains.Annotations.NotNullAttribute()] string name);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfosConstitutingResolveResult([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] out JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<string> Names();
    }
    public interface IUriPathResolver
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IPathReference[] GetPathReferences<TOwner, TToken>([JetBrains.Annotations.NotNullAttribute()] System.Uri uri, [JetBrains.Annotations.NotNullAttribute()] TOwner owner, [JetBrains.Annotations.NotNullAttribute()] TToken token, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IQualifier baseQualifier, [JetBrains.Annotations.NotNullAttribute()] System.Func<TOwner, JetBrains.ReSharper.Psi.Resolve.IQualifier, TToken, JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.Resolve.IPathReference> createFolderReferenceDelegate, [JetBrains.Annotations.NotNullAttribute()] System.Func<TOwner, JetBrains.ReSharper.Psi.Resolve.IQualifier, TToken, JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.Resolve.IPathReference> createFileReferenceDelegate, string stringValue, int valueStartOffset)
            where TOwner : JetBrains.ReSharper.Psi.Tree.ITreeNode
            where TToken :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode;
    }
    public class MultipleReferencesResolver : JetBrains.ReSharper.Psi.Resolve.NonQualifiedReferencesResolveBase
    {
        public override bool ProcessingIsFinished { get; }
        public static void ResolveReferences([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode scope, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.IReference> references) { }
        protected override bool ScopeShouldBeVisited(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope scope) { }
        protected override void VisitElement(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public abstract class NonQualifiedReferencesResolveBase : JetBrains.ReSharper.Psi.Resolve.Resolver
    {
        protected JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.ResolveContext myResolveContext;
        protected NonQualifiedReferencesResolveBase(JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
        protected static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveNonqualifiedQualifiableReference(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.ResolveContext resolveContext, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable reference, JetBrains.ReSharper.Psi.Resolve.ISymbolTable table, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext) { }
        protected virtual JetBrains.ReSharper.Psi.Resolve.IResolveResult VisitNonqualifiedQualifiableReference(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable reference) { }
    }
    public class NonStaticAccessContext : JetBrains.ReSharper.Psi.Resolve.IAccessContext
    {
        public NonStaticAccessContext(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public virtual JetBrains.ReSharper.Psi.ITypeElement GetAccessContainingTypeElement() { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public virtual JetBrains.ReSharper.Psi.Resolve.QualifierKind GetQualifierKind() { }
        public virtual JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement() { }
        public virtual JetBrains.ReSharper.Psi.Resolve.Staticness GetStaticness() { }
    }
    public class static PathReferenceExtensions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ProjectModel.IProjectFile ResolveProjectFile([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IPathReference pathReference) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ProjectModel.IProjectFile ResolveProjectFileInCurrentProject([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IPathReference pathReference) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static TProjectItem ResolveProjectItemInCurrentProject<TProjectItem>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference)
            where TProjectItem :  class, JetBrains.ProjectModel.IProjectItem { }
    }
    public sealed class PredicateFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolInfoFilter
    {
        public PredicateFilter([JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo, bool> predicate) { }
        public PredicateFilter(System.Func<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo, bool> predicate, JetBrains.ReSharper.Psi.Resolve.ResolveErrorType errorType) { }
        public PredicateFilter(System.Func<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo, bool> predicate, JetBrains.ReSharper.Psi.Resolve.ResolveErrorType errorType, JetBrains.ReSharper.Psi.Resolve.FilterRunType runType) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo datum) { }
    }
    public class QualifierAccessContext : JetBrains.ReSharper.Psi.Resolve.IAccessContext
    {
        public QualifierAccessContext(JetBrains.ReSharper.Psi.Tree.ITreeNode owner, JetBrains.ReSharper.Psi.Resolve.IQualifierWithTypeElement qualifier) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetAccessContainingTypeElement() { }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule() { }
        public JetBrains.ReSharper.Psi.Resolve.QualifierKind GetQualifierKind() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement() { }
        public JetBrains.ReSharper.Psi.Resolve.Staticness GetStaticness() { }
    }
    public enum QualifierKind
    {
        NONE = 0,
        THIS = 1,
        BASE = 2,
        OBJECT = 3,
        TYPE = 4,
        NAMESPACE = 5,
        UNKNOWN = 6,
    }
    public class static ReferenceExtension
    {
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public static void AssertIsValid([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ResolveErrorType CheckResolveResult([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        public static JetBrains.DocumentModel.DocumentRange GetDocumentRange([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext GetResolveContext([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.ReSharper.Psi.Resolve.IReferenceProviderFactory))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    public class ReferenceProviderFactoryAttribute : JetBrains.ProjectModel.SolutionComponentAttribute { }
    public enum Refers
    {
        NO = 0,
        MAYBE = 1,
        YES = 2,
    }
    [System.ComponentModel.LocalizableAttribute(false)]
    public class ResolveErrorType : JetBrains.Util.EnumPattern, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ACCESS_RIGHTS;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ARGUMENTS_MISMATCH;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType CANT_INVOKE_DIRECTLY;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType DYNAMIC;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType EMBEDDED_INTEROP_TYPE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType EXPLICIT_IMPLEMENTATION_PROBLEM;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType IGNORABLE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType INCORRECT_PARAMETER_KIND;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType INCORRECT_PARAMETER_NUMBER;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType INCORRECT_PARAMETER_TYPE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType INCORRECT_SIGNATURE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType INCORRECT_TYPE_PARAMETER_NUMBER;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType MULTIPLE_CANDIDATES;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType NAMESPACE_EXPECTED;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType NOT_ATTRIBUTE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType NOT_INVOCABLE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType NOT_RESOLVED;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType NOT_RESOLVED_IN_DOCCOMMENT;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType NOT_VARIABLE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType OK;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType STATIC_PROBLEM;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType TYPE_EXPECTED;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType TYPE_INFERENCE_FAILED;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType TYPE_OR_NAMESPACE_EXPECTED;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType UNSUPPORTED_TYPE;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.ResolveErrorType WRONG_NAME_CASE;
        protected ResolveErrorType([JetBrains.Annotations.NotNullAttribute()] string name) { }
    }
    public class ResolveErrorTypeWithTooltip : JetBrains.ReSharper.Psi.Resolve.ResolveErrorType
    {
        public ResolveErrorTypeWithTooltip(string name, string tooltip) { }
        public virtual string CreateTooltip(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
    }
    public abstract class Resolver : JetBrains.ReSharper.Psi.IRecursiveElementProcessor
    {
        protected Resolver(JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
        protected JetBrains.ReSharper.Psi.Resolve.IAccessContext AccessContext { get; }
        protected int Level { get; }
        public virtual bool ProcessingIsFinished { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.ReSharper.Psi.Resolve.ISymbolTable SymbolTable { get; }
        protected virtual void AppendTableTable(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope scope, JetBrains.ReSharper.Psi.Resolve.ISymbolTable table) { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected virtual JetBrains.ReSharper.Psi.Resolve.IAccessContext GetInitialAccessContext() { }
        protected virtual JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Resolve.ISymbolTable, int> GetInitialSymbolTable(JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope> GetParentScopes(JetBrains.ReSharper.Psi.Tree.ITreeNode element, bool includeThis) { }
        public bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public virtual void Process([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode topElement) { }
        public virtual void ProcessAfterInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public virtual void ProcessBeforeInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        protected virtual bool ScopeShouldBeVisited(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope scope) { }
        public static void UpdateCachedTable(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ICachingScope scope, JetBrains.ReSharper.Psi.Resolve.ISymbolTable table, int level, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
        protected virtual void VisitElement(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public abstract class ResolveResult : JetBrains.ReSharper.Psi.Resolve.IResolveResult
    {
        protected ResolveResult(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> candidates, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> candidateSubstitutions) { }
        protected ResolveResult(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        protected ResolveResult(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        protected ResolveResult(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> candidates, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> candidateSubstitutions) { }
        protected ResolveResult(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> candidates) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> Candidates { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> CandidateSubstitutions { get; }
        public JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        public bool IsEmpty { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Substitution { get; }
        public string Dump() { }
        public bool IsValid() { }
        public abstract JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement element);
        public abstract JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution candidateSubstitution);
    }
    public class static ResolveResultExtensions
    {
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public static void AssertIsValid(this JetBrains.ReSharper.Psi.Resolve.IResolveResult result, JetBrains.ReSharper.Psi.Resolve.IReference reference = null) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance> CandidateElements([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IResolveResult result) { }
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance Element([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IResolveResult result) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance> Elements([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IResolveResult result) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance<T>> GetDeclaredElements<T>(this JetBrains.ReSharper.Psi.Resolve.IResolveResult result)
            where T :  class, JetBrains.ReSharper.Psi.IDeclaredElement { }
    }
    public class static ResolveResultFactory
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.IResolveResult CreateResolveResult([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> candidates) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.IResolveResult CreateResolveResult([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> candidates, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> candidateSubstitutions) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.IResolveResult CreateResolveResult([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.IResolveResult CreateResolveResult([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static JetBrains.ReSharper.Psi.Resolve.IResolveResult CreateResolveResult([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.DeclaredElementInstance elementInstance) { }
        public static JetBrains.ReSharper.Psi.Resolve.IResolveResult CreateResolveResult(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.DeclaredElementInstance> candidateInstances) { }
        public static JetBrains.ReSharper.Psi.Resolve.IResolveResult CreateResolveResultFinaly(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.DeclaredElementInstance> elementInstances) { }
    }
    public abstract class SimpleSymbolFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolInfoFilter
    {
        public abstract bool Accepts([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        public virtual bool Accepts(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo datum) { }
    }
    public abstract class SimpleSymbolFilterWithErrorType : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        protected SimpleSymbolFilterWithErrorType(JetBrains.ReSharper.Psi.Resolve.ResolveErrorType errorType) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public virtual bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public abstract class SimpleSymbolInfoFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public abstract JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public virtual JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public abstract bool Accepts([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolInfo datum);
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public abstract class StatelessReferenceProviderFactoryBase : JetBrains.ReSharper.Psi.Resolve.IReferenceProviderFactory
    {
        public event System.Action OnChanged;
        public JetBrains.ReSharper.Psi.Resolve.IReferenceFactory CreateFactory(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Tree.IFile file) { }
        protected abstract JetBrains.ReSharper.Psi.Resolve.IReference[] GetReferences(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Resolve.IReference[] oldReferences);
        protected abstract bool HasReference(JetBrains.ReSharper.Psi.Tree.ITreeNode element, System.Collections.Generic.ICollection<string> names);
        public abstract bool IsApplicableToFile(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Tree.IFile file);
    }
    public class StaticAccessContext : JetBrains.ReSharper.Psi.Resolve.DefaultAccessContext
    {
        public StaticAccessContext(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public override JetBrains.ReSharper.Psi.Resolve.Staticness GetStaticness() { }
    }
    public enum Staticness
    {
        Any = 0,
        OnlyStatic = 1,
        OnlyInstance = 2,
    }
    public class static SubstitutionExtensions
    {
        [JetBrains.Annotations.ContractAnnotationAttribute("null => false")]
        public static bool IsEmpty(this JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        [JetBrains.Annotations.ContractAnnotationAttribute("null => false")]
        public static bool IsId(this JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static bool IsIdempotentAll([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeParameter> typeParameter) { }
        [JetBrains.Annotations.ContractAnnotationAttribute("null => false")]
        public static bool IsIdOrEmpty(this JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class SymbolInfoComparer : System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo>
    {
        public static readonly System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> Ordinal;
        public static readonly System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> OrdinalIgnoreCase;
        public virtual bool Equals(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo x, JetBrains.ReSharper.Psi.Resolve.ISymbolInfo y) { }
        public virtual int GetHashCode(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo obj) { }
    }
    public class static SymbolInfoExtensions
    {
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolInfo Substitute(this JetBrains.ReSharper.Psi.Resolve.ISymbolInfo info, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class static SymbolTableBuilder
    {
        public static JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Resolve.ISymbolTable, int> GetInnerTableAndLevel([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
    }
    public class static SymbolTableExtensions
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable Distinct([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.ISymbolTable table, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> comparer = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static string[] DumpShortNames([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.ISymbolTable table) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable Filter([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.ISymbolTable table, [JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] params JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] filters) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable Filter([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.ISymbolTable table, [JetBrains.Annotations.NotNullAttribute()] string name, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolFilter> filters) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable Filter([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.ISymbolTable table, [JetBrains.Annotations.NotNullAttribute()] params JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] filters) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetAllSymbolInfos([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.ISymbolTable table) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo GetResolveResult([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.ISymbolTable @this, [JetBrains.Annotations.NotNullAttribute()] string name) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable Merge([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.ISymbolTable table1, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable table2) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable Merge([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] this System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.ISymbolTable> tables, JetBrains.ReSharper.Psi.Resolve.ISymbolTable seed = null) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable Substitute([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.ISymbolTable table, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public abstract class SymbolTableMode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.SymbolTableMode COMPILE_TIME_CONSTANT;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.SymbolTableMode FULL;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Resolve.SymbolTableMode TYPE_AND_NAMESPACES;
        protected SymbolTableMode([JetBrains.Annotations.NotNullAttribute()] string name) { }
        public abstract bool Accepts(JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode);
        public override string ToString() { }
    }
    public class ValidNamesFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolInfoFilter
    {
        public ValidNamesFilter(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo datum) { }
    }
}
namespace JetBrains.ReSharper.Psi.Resolve.ExtensionMethods
{
    
    public class ExtensionInstance<T> : JetBrains.ReSharper.Psi.DeclaredElementInstance<T>
        where T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public ExtensionInstance([JetBrains.Annotations.NotNullAttribute()] T element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, bool isExtensionMethod) { }
        public bool IsExtensionMethod { get; }
    }
    public class static ExtensionInstanceExtensions
    {
        public static JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<T> Cast<U, T>(this JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<U> instance)
            where U : JetBrains.ReSharper.Psi.IDeclaredElement
            where T : JetBrains.ReSharper.Psi.IDeclaredElement { }
        public static JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<T> TryCast<U, T>(this JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<U> instance)
            where U : JetBrains.ReSharper.Psi.IDeclaredElement
            where T : JetBrains.ReSharper.Psi.IDeclaredElement { }
    }
    public class static ExtensionMethodResolveResultExtensions
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement>> CandidatesAsExtension([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        public static JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement> ElementAsExtension([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement>> ElementsAsExtension([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        public static bool IsExtensionMethod(this JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
    }
}
namespace JetBrains.ReSharper.Psi.Resolve.Managed
{
    
    public interface ICalculationInfo { }
    public interface IManagedConstantValueOwner : JetBrains.ReSharper.Psi.IConstantValueOwner { }
    public interface IManagedConvertible { }
    public interface IManagedExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.IType GetImplicitlyConvertedTo(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        bool IsConstantValue(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.IType Type(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
    }
    public interface IManagedNonQualifiableReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder { }
    public interface IManagedOnePhaseReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder { }
    public interface IManagedQualifiableReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IQualifier GetQualifier(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.Resolve.SymbolTableMode GetSymbolTableMode();
    }
    public interface IManagedReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.Resolve.IAccessContext GetAccessContext(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetReferenceSymbolTable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
    }
    public interface IManagedTwoPhaseReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder { }
    public interface IManagedVariable : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner { }
    public interface IResolveContext
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.ConstantValue ConstantValue([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner constantValueOwner);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.ConstantValue ConstantValue([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression expression, JetBrains.ReSharper.Psi.Resolve.Managed.ICalculationInfo info);
        JetBrains.ReSharper.Psi.IExpressionType ExpressionType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression expression);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType GetImplicitlyConvertedTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible convertible);
        void Join([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo PreResolve([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IManagedTwoPhaseReference reference, JetBrains.ReSharper.Psi.Resolve.ISymbolTable table = null);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveWithInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference reference);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext TryFork([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.IType>> assumptions);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext TryForkOnImplicitlyConvertedTo([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible, JetBrains.ReSharper.Psi.IType>> assumptions);
        JetBrains.ReSharper.Psi.IType TypeOf([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable typeOwner);
        object Verify(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier verifier);
    }
    public class static ManagedExtensionsDispatcher
    {
        public static JetBrains.ReSharper.Psi.ConstantValue ConstantValue([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IConstantValueOwner constantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static JetBrains.ReSharper.Psi.IExpressionType GetExpressionType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IExpression expression, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetImplicitlyConvertedTo(this JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible managedConvertible, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IPsiServices GetPsiServices([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTableForResolve(this JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference reference, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static bool IsConstantValue(this JetBrains.ReSharper.Psi.Tree.IExpression expression, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.IResolveResult Resolve([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference managedReference) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.IResolveResult Resolve(this JetBrains.ReSharper.Psi.Resolve.IReference reference, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveWithInfo(this JetBrains.ReSharper.Psi.Resolve.IReference @this, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static JetBrains.ReSharper.Psi.IType TypeIn(this JetBrains.ReSharper.Psi.ITypeOwner typeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
    }
}
namespace JetBrains.ReSharper.Psi.Resolve.TypeInference
{
    
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.KnownLanguage))]
    public class CLRTypeInferenceMatcher : JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceMatcher
    {
        public static readonly JetBrains.ReSharper.Psi.Resolve.TypeInference.CLRTypeInferenceMatcher Instance;
    }
    public class ExactConsumer : JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceConsumer
    {
        public ExactConsumer(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters) { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution InferedResult { get; }
        public bool IsEmpty { get; }
        public System.Collections.Generic.Dictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.IType> Result { get; }
        public bool Accept(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public bool AllTypeParametersFixed() { }
        public bool Assign(JetBrains.ReSharper.Psi.ITypeParameter parameter, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound bound) { }
        public bool ContainsKey(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceConsumer GetNextConsumer() { }
        public System.Collections.Generic.Dictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.IType> GetResultOrCreateEmpty() { }
    }
    public interface ITypeInferenceBoundsSolver
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> Solve(System.Collections.Generic.IList<JetBrains.Util.OneToSetMap<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound>> typeBounds, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule);
        JetBrains.ReSharper.Psi.Resolve.ISubstitution SolveLikeResolve(System.Collections.Generic.IList<JetBrains.Util.OneToSetMap<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound>> typeBounds, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule);
    }
    public interface ITypeInferenceConsumer
    {
        bool Accept(JetBrains.ReSharper.Psi.ITypeParameter typeParameter);
        bool Assign(JetBrains.ReSharper.Psi.ITypeParameter typeParameter, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound bound);
        JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceConsumer GetNextConsumer();
    }
    public interface ITypeInferenceMatcher
    {
        bool Match(JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceKind inferenceKind, JetBrains.ReSharper.Psi.IType actualType, JetBrains.ReSharper.Psi.IType formalTypeWithVariables, JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceConsumer consumer);
    }
    public class RecursiveConsumer : JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceConsumer
    {
        public RecursiveConsumer(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> typeParameters) { }
        public bool Accept(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public bool Assign(JetBrains.ReSharper.Psi.ITypeParameter typeParameter, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound bound) { }
        public System.Collections.Generic.IList<JetBrains.Util.OneToSetMap<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound>> Constraints() { }
        public JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceConsumer GetNextConsumer() { }
    }
    public class static TypeEquationsSolver
    {
        public static System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.IType> GetEqualityConstraints(JetBrains.ReSharper.Psi.IType actualType, JetBrains.ReSharper.Psi.IType formalType, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters) { }
        public static System.Collections.Generic.IList<JetBrains.Util.OneToSetMap<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound>> GetSubtypingConstraintsForFrom(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParametersOfFrom) { }
        public static System.Collections.Generic.IList<JetBrains.Util.OneToSetMap<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound>> GetSubtypingConstraintsForTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParametersOfTo) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution SolveEquality(JetBrains.ReSharper.Psi.IType actualType, JetBrains.ReSharper.Psi.IType formalType, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> SolveSubtypingForFrom(JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParametersOfFrom, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> SolveSubtypingForTo(JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParametersOfTo, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
    }
    public class TypeInferenceBound
    {
        public TypeInferenceBound(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceKind boundKind) { }
        public JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceKind BoundKind { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public bool Accept(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public enum TypeInferenceKind
    {
        Exact = 0,
        LowerBound = 1,
        UpperBound = 2,
    }
    public abstract class TypeInferenceMatcher : JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceMatcher
    {
        protected virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperType(JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceKind inferenceKind, JetBrains.ReSharper.Psi.IType fromType, JetBrains.ReSharper.Psi.ITypeElement toTypeElement, out bool isArray) { }
        protected virtual bool HasTypeParameters(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceConsumer consumer) { }
        public virtual bool Match(JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceKind inferenceKind, JetBrains.ReSharper.Psi.IType actualType, JetBrains.ReSharper.Psi.IType formalTypeWithVariables, JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceConsumer consumer) { }
        protected virtual JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceKind NextKind(JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceKind inferenceKind, JetBrains.ReSharper.Psi.ITypeParameter typeParameter, bool isArray) { }
        protected JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceKind Opposite(JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceKind inferenceKind) { }
    }
    public class static TypeInferenceMatcherExtension
    {
        public static bool Match(this JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceMatcher matcher, JetBrains.ReSharper.Psi.IType actualType, JetBrains.ReSharper.Psi.IType formalType, JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceConsumer consumer, bool subtypingOk) { }
    }
    public class static TypeInferenceUtil
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution GetExplicitExtendedSubstitution(JetBrains.ReSharper.Psi.ITypeParametersOwner element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> typeArguments) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution InferTypes(JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IType argumentType, JetBrains.ReSharper.Psi.IType parameterType, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> SolveTypeInferenceBounds(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound> bounds, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public static bool TypeParametersAreInferrable(JetBrains.ReSharper.Psi.IMethod method) { }
        public static bool ValidateInferenceResultAgainstConstraints(JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public static bool ValidateInferenceResultAgainstConstraints([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution constraintsSubstitution, JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public static bool ValidatePartialInferenceResultAgainstConstraints(JetBrains.ReSharper.Psi.Resolve.ISubstitution result) { }
    }
    public struct TypeSolution
    {
        public TypeSolution(JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeSolution.Kind kind, JetBrains.ReSharper.Psi.IType bound) { }
        public JetBrains.ReSharper.Psi.IType Bound { get; }
        public JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeSolution.Kind K { get; }
        public enum Kind
        {
            EXACT = 0,
            SUBTYPE = 1,
        }
    }
}
namespace JetBrains.ReSharper.Psi.Resources
{
    
    public sealed class PsiSymbolsThemedIcons
    {
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 12, "AnonymousMethod")]
        public sealed class AnonymousMethod : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 38, "AnonymousTypeProperty")]
        public sealed class AnonymousTypeProperty : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 20, "Class")]
        public sealed class Class : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 8, "Const")]
        public sealed class Const : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 24, "Constructor")]
        public sealed class Constructor : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 35, "Delegate")]
        public sealed class Delegate : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 11, "DynamicMethod")]
        public sealed class DynamicMethod : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 17, "DynamicProperty")]
        public sealed class DynamicProperty : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 32, "Enum")]
        public sealed class Enum : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 7, "EnumMember")]
        public sealed class EnumMember : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 9, "Event")]
        public sealed class Event : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 3, "Field")]
        public sealed class Field : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 21, "Interface")]
        public sealed class Interface : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 13, "LocalConst")]
        public sealed class LocalConst : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 23, "Method")]
        public sealed class Method : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 27, "ModifiersAbstract")]
        public sealed class ModifiersAbstract : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 37, "ModifiersInternal")]
        public sealed class ModifiersInternal : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 15, "ModifiersPrivate")]
        public sealed class ModifiersPrivate : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 31, "ModifiersProtected")]
        public sealed class ModifiersProtected : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 2, "ModifiersProtectedInternal")]
        public sealed class ModifiersProtectedInternal : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 36, "ModifiersPublic")]
        public sealed class ModifiersPublic : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 25, "ModifiersRead")]
        public sealed class ModifiersRead : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 4, "ModifiersReadWrite")]
        public sealed class ModifiersReadWrite : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 26, "ModifiersStatic")]
        public sealed class ModifiersStatic : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 34, "ModifiersVirtual")]
        public sealed class ModifiersVirtual : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 16, "ModifiersWrite")]
        public sealed class ModifiersWrite : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 5, "Namespace")]
        public sealed class Namespace : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 22, "Operator")]
        public sealed class Operator : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 14, "Parameter")]
        public sealed class Parameter : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 30, "Property")]
        public sealed class Property : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 0, "PropertyWrite")]
        public sealed class PropertyWrite : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 19, "PsiSymbolTypicalSizePlaceholder")]
        public sealed class PsiSymbolTypicalSizePlaceholder : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 1, "Struct")]
        public sealed class Struct : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 10, "SymbolUnitTest")]
        public sealed class SymbolUnitTest : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 6, "SymbolUnitTestSet")]
        public sealed class SymbolUnitTestSet : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 18, "Typeparameter")]
        public sealed class Typeparameter : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 29, "UnresolvedField")]
        public sealed class UnresolvedField : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 33, "UnresolvedMethod")]
        public sealed class UnresolvedMethod : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi;component/Resources/PsiSymbols.ThemedIcons/ThemedIcons.Ps" +
            "iSymbols.Generated.Xaml", 28, "Variable")]
        public sealed class Variable : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
    }
}
namespace JetBrains.ReSharper.Psi.Search
{
    
    public class ConstantExpressionDomainSpecificSearcher<TLanguage> : JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcher
        where TLanguage : JetBrains.ReSharper.Psi.PsiLanguageType
    {
        public ConstantExpressionDomainSpecificSearcher(JetBrains.ReSharper.Psi.ConstantValue constantValue, bool onlyLiteralExpression) { }
        public bool ProcessElement<TResult>(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer) { }
        public bool ProcessProjectItem<TResult>(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer) { }
    }
    public class static DeclaredElementSearchExtensions
    {
        public static JetBrains.ReSharper.Psi.Search.ISearchDomain GetSearchDomain(this JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static JetBrains.ReSharper.Psi.Search.ISearchDomain UnionSearchDomains(this System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredElement> declaredElements) { }
    }
    public class FilteringResultConsumer<T> : JetBrains.ReSharper.Psi.Search.IFindResultConsumer<T>
    
    {
        public FilteringResultConsumer(JetBrains.ReSharper.Psi.Search.IFindResultConsumer<T> consumer, System.Func<JetBrains.ReSharper.Psi.Search.FindResult, JetBrains.ReSharper.Psi.Search.FindResult> transformer) { }
        public T Build(JetBrains.ReSharper.Psi.Search.FindResult result) { }
        public JetBrains.ReSharper.Psi.Search.FindExecution Merge(T data) { }
    }
    public class static FinderExtensions
    {
        public static JetBrains.ReSharper.Psi.ITypeElement[] FindAllImmediateInheritors(this JetBrains.ReSharper.Psi.Search.IFinder finder, JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static JetBrains.ReSharper.Psi.IDeclaredType[] FindAllInheritors(this JetBrains.ReSharper.Psi.Search.IFinder finder, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredType type) { }
        public static JetBrains.ReSharper.Psi.Resolve.IReference[] FindAllReferences(this JetBrains.ReSharper.Psi.Search.IFinder finder, JetBrains.ReSharper.Psi.IDeclaredElement element, bool includeDynamic = False) { }
        public static JetBrains.ReSharper.Psi.ITypeElement[] FindImmediateInheritors(this JetBrains.ReSharper.Psi.Search.IFinder finder, JetBrains.ReSharper.Psi.ITypeElement typeElement, JetBrains.ReSharper.Psi.Search.ISearchDomain searchDomain, JetBrains.Application.Progress.IProgressIndicator pi) { }
        public static void FindInheritors(this JetBrains.ReSharper.Psi.Search.IFinder finder, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredType type, System.Func<JetBrains.ReSharper.Psi.IDeclaredType, JetBrains.ReSharper.Psi.Search.FindExecution> consumer, JetBrains.ReSharper.Psi.Search.ISearchDomain searchDomain, JetBrains.Application.Progress.IProgressIndicator pi) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.IReference[] FindReferences<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Search.IFinder finder, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.ICollection<T> elements, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Search.ISearchDomain domain, JetBrains.Application.Progress.IProgressIndicator pi, bool includeDynamic = False)
            where T : JetBrains.ReSharper.Psi.IDeclaredElement { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.IReference[] FindReferences([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Search.IFinder finder, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Search.ISearchDomain domain, JetBrains.Application.Progress.IProgressIndicator pi, bool includeDynamic = False) { }
    }
    public enum FindExecution
    {
        Continue = 0,
        Stop = 1,
    }
    public abstract class FindResult
    {
        public JetBrains.ReSharper.Psi.Search.FindResult MasterResult { get; }
        public virtual bool Equals(object obj) { }
        public virtual int GetHashCode() { }
    }
    public class FindResultAnonymousType : JetBrains.ReSharper.Psi.Search.FindResult
    {
        public FindResultAnonymousType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Tree.ITreeNode Element { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class FindResultAssemblyAttribute : JetBrains.ReSharper.Psi.Search.FindResult
    {
        public FindResultAssemblyAttribute(JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile psiAssemblyFile, JetBrains.ReSharper.Psi.IDeclaredElement target = null, int index = -1) { }
        public int Index { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Caches.IPsiAssemblyFile PsiAssemblyFile { get; }
        public JetBrains.ReSharper.Psi.IDeclaredElement Target { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class FindResultConsumer : JetBrains.ReSharper.Psi.Search.FindResultConsumer<JetBrains.ReSharper.Psi.Search.FindResult>
    {
        public FindResultConsumer([JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Search.FindResult, JetBrains.ReSharper.Psi.Search.FindExecution> merge) { }
    }
    public class FindResultConsumer<T> : JetBrains.ReSharper.Psi.Search.IFindResultConsumer<T>
    
    {
        public FindResultConsumer([JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Search.FindResult, T> build, [JetBrains.Annotations.NotNullAttribute()] System.Func<T, JetBrains.ReSharper.Psi.Search.FindExecution> merge) { }
        public T Build(JetBrains.ReSharper.Psi.Search.FindResult result) { }
        public JetBrains.ReSharper.Psi.Search.FindExecution Merge(T data) { }
    }
    public class static FindResultConsumerExtensions
    {
        public static JetBrains.ReSharper.Psi.Search.FindExecution Accept<TResult>(this JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer, JetBrains.ReSharper.Psi.Search.FindResult result) { }
        public static JetBrains.ReSharper.Psi.Search.IFindResultConsumer<T> ConsumeDeclaredElements<T>(this System.Collections.Generic.ICollection<T> collection)
            where T :  class, JetBrains.ReSharper.Psi.IDeclaredElement { }
        public static JetBrains.ReSharper.Psi.Search.IFindResultConsumer<T> ConsumeExpressions<T>(this System.Collections.Generic.ICollection<T> collection)
            where T :  class, JetBrains.ReSharper.Psi.Tree.IExpression { }
        public static JetBrains.ReSharper.Psi.Search.IFindResultConsumer<T> ConsumeReferences<T>(this System.Collections.Generic.ICollection<T> collection)
            where T :  class, JetBrains.ReSharper.Psi.Resolve.IReference { }
    }
    public class FindResultDeclaration : JetBrains.ReSharper.Psi.Search.FindResultText
    {
        public FindResultDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IDeclaration declaration, JetBrains.DocumentModel.DocumentRange range) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Tree.IDeclaration Declaration { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class FindResultDeclaredElement : JetBrains.ReSharper.Psi.Search.FindResult
    {
        public FindResultDeclaredElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class FindResultDefaultConstructorInvocation : JetBrains.ReSharper.Psi.Search.FindResultDeclaredElement
    {
        public FindResultDefaultConstructorInvocation(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class FindResultExpression : JetBrains.ReSharper.Psi.Search.FindResult
    {
        public FindResultExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Tree.IExpression Expression { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class FindResultInheritedElement : JetBrains.ReSharper.Psi.Search.FindResultDeclaredElement
    {
        public FindResultInheritedElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Search.FindResultInheritedElement.InheritanceKind kind) { }
        public JetBrains.ReSharper.Psi.Search.FindResultInheritedElement.InheritanceKind Kind { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public enum InheritanceKind
        {
            REGULAR = 0,
            IMMEDIATE = 1,
            QUASI = 2,
        }
    }
    public class FindResultLateBoundReference : JetBrains.ReSharper.Psi.Search.FindResult, JetBrains.ReSharper.Psi.Search.IFindResultReference
    {
        public FindResultLateBoundReference(JetBrains.ReSharper.Psi.Resolve.ILateBoundReference reference, JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        public JetBrains.ReSharper.Psi.Resolve.ILateBoundReference Reference { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class FindResultLibraryReference : JetBrains.ReSharper.Psi.Search.FindResultDeclaredElement
    {
        public FindResultLibraryReference(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Search.SearchTargetRole role, JetBrains.ReSharper.Psi.IDeclaredElement searchingTarget = null, int index = 0) { }
        public int Index { get; }
        public JetBrains.ReSharper.Psi.Search.SearchTargetRole Role { get; }
        public JetBrains.ReSharper.Psi.IDeclaredElement SearchingTarget { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class FindResultOverridableMember : JetBrains.ReSharper.Psi.Search.FindResultInheritedElement
    {
        public FindResultOverridableMember(JetBrains.ReSharper.Psi.IOverridableMember member, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, JetBrains.ReSharper.Psi.ITypeElement quasiBasis, JetBrains.ReSharper.Psi.Search.FindResultInheritedElement.InheritanceKind kind) { }
        public JetBrains.ReSharper.Psi.IOverridableMember OverridableMember { get; }
        public JetBrains.ReSharper.Psi.ITypeElement QuasiBasisElement { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution SubstitutionOfBaseMember { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class FindResultReference : JetBrains.ReSharper.Psi.Search.FindResult, JetBrains.ReSharper.Psi.Search.IFindResultReference
    {
        public FindResultReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        public FindResultReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        public JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class static FindResultReferenceExtensions
    {
        public static JetBrains.ReSharper.Psi.ReferenceAccessType GetAccessType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Search.IFindResultReference reference) { }
    }
    public class FindResultText : JetBrains.ReSharper.Psi.Search.FindResult
    {
        public FindResultText(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.DocumentModel.DocumentRange documentRange) { }
        public JetBrains.DocumentModel.DocumentRange DocumentRange { get; }
        public JetBrains.ProjectModel.ISolution Solution { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public interface IFinder
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.IDomainSpecificSearcherFactory> DomainSpecificSearcherFactories { get; }
        void Find<TResult>(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> elements, JetBrains.ReSharper.Psi.Search.ISearchDomain domain, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer, JetBrains.ReSharper.Psi.Search.SearchPattern pattern, JetBrains.Application.Progress.IProgressIndicator pi);
        void FindAnonymousTypes<TResult>(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.AnonymousTypeDescriptor> signature, JetBrains.ReSharper.Psi.Search.ISearchDomain domain, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer, bool caseSensitive, JetBrains.Application.Progress.IProgressIndicator pi);
        JetBrains.ReSharper.Psi.IDeclaredElement[] FindBaseElements(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.Application.Progress.IProgressIndicator progress);
        void FindConstantExpressions<TResult>(JetBrains.ReSharper.Psi.ConstantValue constantValue, bool onlyLiteral, JetBrains.ReSharper.Psi.Search.ISearchDomain searchDomain, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer, JetBrains.Application.Progress.IProgressIndicator pi);
        void FindDeclarations<TResult>(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer);
        System.Collections.Generic.IList<TElement> FindExpressionOccurences<TElement>(TElement expression, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode scope)
            where TElement :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode;
        void FindImmediateImplementingMembers<TResult>(JetBrains.ReSharper.Psi.IOverridableMember member, JetBrains.ReSharper.Psi.ITypeElement originType, JetBrains.ReSharper.Psi.Search.ISearchDomain domain, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer, bool searchQuasi, JetBrains.Application.Progress.IProgressIndicator pi);
        void FindImmediateInheritors<TResult>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement, JetBrains.ReSharper.Psi.Search.ISearchDomain searchDomain, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer, JetBrains.Application.Progress.IProgressIndicator pi);
        void FindImplementingMembers<TResult>(JetBrains.ReSharper.Psi.IOverridableMember member, JetBrains.ReSharper.Psi.ITypeElement originType, JetBrains.ReSharper.Psi.Search.ISearchDomain domain, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer, bool searchQuasi, JetBrains.Application.Progress.IProgressIndicator pi);
        void FindInheritors<TResult>([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement, JetBrains.ReSharper.Psi.Search.ISearchDomain searchDomain, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer, JetBrains.Application.Progress.IProgressIndicator pi);
        void FindMethodsReferencedByDelegate<TResult>(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Search.ISearchDomain domain, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer, JetBrains.Application.Progress.IProgressIndicator pi);
        void FindReferences<TResult>(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Search.ISearchDomain domain, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer, JetBrains.Application.Progress.IProgressIndicator pi, bool includeDynamic = False);
        void FindReferences<TElement, TResult>(System.Collections.Generic.ICollection<TElement> elements, JetBrains.ReSharper.Psi.Search.ISearchDomain domain, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer, JetBrains.Application.Progress.IProgressIndicator pi, bool includeDynamic = False)
            where TElement : JetBrains.ReSharper.Psi.IDeclaredElement
        ;
        void FindTextOccurences<TResult>(string subject, JetBrains.ReSharper.Psi.Search.ISearchDomain domain, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<TResult> consumer, JetBrains.Application.Progress.IProgressIndicator pi);
        JetBrains.ReSharper.Psi.Search.IOccurrencesComparer GetOccurrencesComparer(JetBrains.ReSharper.Psi.Tree.ITreeNode element);
        System.Collections.Generic.ICollection<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IDeclaredElement, System.Predicate<JetBrains.ReSharper.Psi.Search.FindResult>>> GetRelatedElements(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.Application.Progress.IProgressIndicator pi);
    }
    public interface IFindResultConsumer<T>
    
    {
        T Build([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Search.FindResult result);
        JetBrains.ReSharper.Psi.Search.FindExecution Merge([JetBrains.Annotations.NotNullAttribute()] T data);
    }
    public interface IFindResultReference
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
    }
    public interface IOccurrencesComparer
    {
        bool CompareWith(JetBrains.ReSharper.Psi.Tree.ITreeNode element);
    }
    public interface ISearchDomain : System.IEquatable<JetBrains.ReSharper.Psi.Search.ISearchDomain>
    {
        bool HasPhysicalPart { get; }
        bool IsEmpty { get; }
        void Accept(JetBrains.ReSharper.Psi.Search.SearchDomainVisitor visitor);
        bool Contains(JetBrains.ReSharper.Psi.Search.ISearchDomain otherDomain);
        void Dump(System.IO.TextWriter to);
        JetBrains.ReSharper.Psi.Search.ISearchDomain ExtractLibraryDomain();
        JetBrains.ReSharper.Psi.Search.ISearchDomain ExtractNonPhysicalDomain();
        bool HasIntersectionWith(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement);
        JetBrains.ReSharper.Psi.Search.ISearchDomain Intersect(JetBrains.ReSharper.Psi.Search.ISearchDomain otherDomain);
        JetBrains.ReSharper.Psi.Search.ISearchDomain Union(JetBrains.ReSharper.Psi.Search.ISearchDomain otherDomain);
    }
    public class SearchAction
    {
        public SearchAction(JetBrains.ReSharper.Psi.Search.IFinder finder, JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Search.IFindResultConsumer<JetBrains.ReSharper.Psi.Search.FindResult> consumer, JetBrains.ReSharper.Psi.Search.SearchPattern searchPattern) { }
        public System.Func<JetBrains.Application.Progress.IProgressIndicator, object> Task { get; }
    }
    public class static SearchDomainExtensions
    {
        public static bool ContainedInSingleProjectFile(this JetBrains.ReSharper.Psi.Search.ISearchDomain domain) { }
        public static string DumpToString(this JetBrains.ReSharper.Psi.Search.ISearchDomain domain) { }
        public static string GetPresentableDescription(this JetBrains.ReSharper.Psi.Search.ISearchDomain searchDomain) { }
        public static JetBrains.ReSharper.Psi.Search.ISearchDomain UnionSearchDomains(this System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Search.ISearchDomain> domains) { }
    }
    public abstract class SearchDomainFactory
    {
        [System.ObsoleteAttribute("Inject me!")]
        public static JetBrains.ReSharper.Psi.Search.SearchDomainFactory Instance { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Search.ISearchDomain CreateInternalAccessibilityDomain([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Search.ISearchDomain CreateLibrariesDomain([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ProjectModel.ISolution solution);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Search.ISearchDomain CreatePublicAccessibilityDomain([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Search.ISearchDomain CreateSearchDomain([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProjectModelElement item);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Search.ISearchDomain CreateSearchDomain([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Search.ISearchDomain CreateSearchDomain([JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> psiSourceFiles);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Search.ISearchDomain CreateSearchDomain([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Search.ISearchDomain CreateSearchDomain([JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Modules.IPsiModule> modules);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Search.ISearchDomain CreateSearchDomain([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ProjectModel.ISolution solution, bool includeLibraries);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Search.ISearchDomain CreateSearchDomain([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode sourceElement);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Search.ISearchDomain CreateSearchDomain([JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> sourceElements);
    }
    public class static SearchDomainFactoryExtensions
    {
        public static JetBrains.ReSharper.Psi.Search.ISearchDomain CreateSearchDomainOfModuleAndItsReferences([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Search.SearchDomainFactory factory, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    public abstract class SearchDomainVisitor
    {
        public abstract bool ProcessingIsFinished { get; }
        public virtual void VisitAssembly([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiAssembly assembly) { }
        public virtual void VisitElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public virtual void VisitPsiModule([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public virtual void VisitPsiSourceFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
    [System.FlagsAttribute()]
    public enum SearchPattern
    {
        FIND_NONE = 0,
        FIND_USAGES = 1,
        FIND_DERIVED_CLASSES_AND_STRUCTS = 2,
        FIND_DERIVED_INTERFACES = 4,
        FIND_DERIVED_TYPES = 6,
        FIND_IMPLEMENTING_MEMBERS = 8,
        FIND_MEMBER_USAGES = 16,
        FIND_IMPLEMENTORS_USAGES = 32,
        FIND_TEXT_OCCURENCES = 64,
        FIND_LATEBOUND_REFERENCES = 128,
        FIND_RELATED_ELEMENTS = 256,
        FIND_BASE_MEMBERS_USAGES = 512,
        FIND_CANDIDATES = 1024,
    }
    public enum SearchTargetRole
    {
        Unknown = 0,
        ElementType = 1,
        BaseType = 2,
        ImmediateBaseType = 3,
        QuasyBaseType = 4,
        UsageInBaseTypes = 5,
        Attribute = 6,
    }
}
namespace JetBrains.ReSharper.Psi.Services
{
    
    public abstract class DataConstants
    {
        [System.ObsoleteAttribute("Use DataConstants.DECLARED_ELEMENTS")]
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.ReSharper.Psi.IDeclaredElement> DECLARED_ELEMENT;
        public static readonly JetBrains.Application.DataContext.DataConstant<System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement>> DECLARED_ELEMENTS;
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.ReSharper.Psi.Resolve.IReference> REFERENCE;
        public static readonly JetBrains.Application.DataContext.DataConstant<System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Resolve.IReference>> REFERENCES;
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.ReSharper.Psi.Tree.ITreeNode> SELECTED_EXPRESSION;
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.ReSharper.Psi.IClrDeclaredElement> TYPE_OR_TYPE_MEMBER;
    }
    public class static DataConstantsEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Application.DataContext.IDataContext FromDeclaredElement([JetBrains.Annotations.NotNullAttribute()] this JetBrains.Application.DataContext.DataContexts thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Application.DataContext.IDataContext FromDeclaredElement([JetBrains.Annotations.NotNullAttribute()] this JetBrains.Application.DataContext.DataContexts thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IClrDeclaredElement element) { }
        [JetBrains.Annotations.ContractAnnotationAttribute("null<=null")]
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> ToDeclaredElementsDataConstant([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IDeclaredElement delem) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> ToDeclaredElementsDataConstant([JetBrains.Annotations.CanBeNullAttribute()] this System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> delems) { }
    }
    public class static DataContextsEx
    {
        public static JetBrains.Application.Settings.IContextBoundSettingsStore CreateStoreFromTreeNew(this JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.ReSharper.Psi.Tree.ITreeNode firstNode, JetBrains.DataFlow.Lifetime lifetime) { }
    }
}
namespace JetBrains.ReSharper.Psi.Transactions
{
    
    public class FailPsiTransactionException : System.Exception
    {
        public FailPsiTransactionException(string message) { }
    }
    public interface IAddPsiNodesAction
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetAddedNodes();
    }
    public interface IDeletePsiNodesAction
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetDeletedNodes();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode GetParent();
    }
    public interface IPsiTransaction
    {
        System.Collections.Generic.IEnumerable<JetBrains.DocumentModel.IDocument> Documents { get; }
        bool Failed { get; }
        bool Failing { get; }
        int NestingLevel { get; }
        bool Succeed { get; }
        void AddProperty(object key, object value);
        System.Collections.Generic.IEnumerable<object> GetProperties(object key);
    }
    public interface IPsiTransactionAction
    {
        JetBrains.ReSharper.Psi.Tree.ITreeNode AffectedElement { get; }
        JetBrains.ReSharper.Psi.PsiChangedElementType AffectedElementType { get; }
        JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        System.Collections.Generic.ICollection<JetBrains.DocumentModel.DocumentChange> GetDocumentChanges();
        void RollBack();
    }
    public interface IPsiTransactions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Transactions.IPsiTransaction Current { get; }
        int CurrentNestingLevel { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DocumentModel.Transactions.DocumentTransactionManager DocumentTransactionManager { get; }
        void AddTransactionAction(JetBrains.ReSharper.Psi.Transactions.IPsiTransactionAction action);
        void Cancel([JetBrains.Annotations.NotNullAttribute()] string reason);
        JetBrains.ReSharper.Psi.Transactions.TransactionResult CommitTransaction();
        [JetBrains.Annotations.NotNullAttribute()]
        System.IDisposable CreateCustomCookie<T>(T t);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Transactions.TransactionResult Execute(string commandName, [JetBrains.Annotations.InstantHandleAttribute()] System.Action handler);
        System.Collections.Generic.IEnumerable<T> GetCustomCookiesOfType<T>();
        bool HasActiveOperation();
        bool HasActiveRollbackOperation();
        bool HasCustomCookieOfType<T>();
        void Observe(JetBrains.DataFlow.Lifetime lifetime, System.Action<JetBrains.ReSharper.Psi.Transactions.IPsiTransaction> start = null, System.Action<JetBrains.ReSharper.Psi.Transactions.IPsiTransaction> commit = null, System.Action<JetBrains.ReSharper.Psi.Transactions.IPsiTransaction> rollback = null, System.Action<JetBrains.ReSharper.Psi.Transactions.IPsiTransactionAction> action = null);
        void RollbackTransaction();
        void StartTransaction(string commandName);
    }
    public class PsiTransactionCookie : System.IDisposable
    {
        public PsiTransactionCookie(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.Util.DefaultAction defaultAction, string commandName) { }
        public bool Commit() { }
        public static JetBrains.ReSharper.Psi.Transactions.PsiTransactionCookie CreateAutoCommitCookieWithCachesUpdate(JetBrains.ReSharper.Psi.IPsiServices psiServices, string commandName) { }
        public static JetBrains.ReSharper.Psi.Transactions.PsiTransactionCookie CreateTemporaryChangeCookie(JetBrains.ReSharper.Psi.IPsiServices psiServices, string commandName = "Temporary Change") { }
        public void Dispose() { }
        public static bool ExecuteConditionally(JetBrains.ReSharper.Psi.IPsiServices psiServices, [JetBrains.Annotations.InstantHandleAttribute()] System.Func<bool> action, string commandName) { }
        public void Rollback() { }
    }
    public class static PsiTransactionsExtensions
    {
        [JetBrains.Annotations.ContractAnnotationAttribute("=>halt")]
        public static void FailActiveTransactionViaException([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Transactions.IPsiTransactions transactions, [JetBrains.Annotations.CanBeNullAttribute()] string errorDescription, [JetBrains.Annotations.CanBeNullAttribute()] string messageForUser = null) { }
    }
    public class ReparsePsiAction : JetBrains.ReSharper.Psi.Transactions.IAddPsiNodesAction, JetBrains.ReSharper.Psi.Transactions.IDeletePsiNodesAction, JetBrains.ReSharper.Psi.Transactions.IPsiTransactionAction
    {
        public ReparsePsiAction(JetBrains.ReSharper.Psi.Files.CachedPsiFile cachedPsiFile, JetBrains.ReSharper.Psi.Tree.ITreeNode oldNode, JetBrains.ReSharper.Psi.Tree.ITreeNode newNode, JetBrains.DocumentModel.DocumentChange documentChange) { }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode AffectedElement { get; }
        public JetBrains.ReSharper.Psi.PsiChangedElementType AffectedElementType { get; }
        public JetBrains.ReSharper.Psi.IPsiSourceFile SourceFile { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetAddedNodes() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetDeletedNodes() { }
        public System.Collections.Generic.ICollection<JetBrains.DocumentModel.DocumentChange> GetDocumentChanges() { }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode GetParent() { }
        public void RollBack() { }
    }
    public class TransactionResult
    {
        public static readonly JetBrains.ReSharper.Psi.Transactions.TransactionResult SUCCESS;
        public TransactionResult(JetBrains.ReSharper.Psi.Transactions.TransactionResultEnum result) { }
        public TransactionResult(JetBrains.Util.EnsureWritableResult result) { }
        public TransactionResult(JetBrains.Util.EnsureWritableResult result, string failureDescription) { }
        public TransactionResult(JetBrains.ReSharper.Psi.Transactions.TransactionResultEnum result, string failureDescription) { }
        public string FailureDescription { get; }
        public JetBrains.ReSharper.Psi.Transactions.TransactionResultEnum Result { get; }
        public bool Succeded { get; }
    }
    public enum TransactionResultEnum
    {
        Success = 0,
        Failure = 1,
        Cancelled = 2,
        EnsureWritableFailed = 3,
        EnsureWritableChangesDetected = 4,
    }
}
namespace JetBrains.ReSharper.Psi.Tree
{
    
    public class static DeclarationExtensions
    {
        public static JetBrains.DocumentModel.DocumentRange GetNameDocumentRange(this JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
    }
    public class DocCommentError
    {
        public DocCommentError(JetBrains.ReSharper.Psi.Tree.ICommentNode commentNode, JetBrains.ReSharper.Psi.TreeTextRange localRange) { }
        public JetBrains.ReSharper.Psi.Tree.ICommentNode CommentNode { get; set; }
        public JetBrains.DocumentModel.DocumentRange DocumentRange { get; }
        public JetBrains.ReSharper.Psi.TreeTextRange LocalRange { get; set; }
        public JetBrains.ReSharper.Psi.Tree.DocCommentError.DocCommentErrorType Type { get; }
        public enum DocCommentErrorType
        {
            SYNTAX = 0,
        }
    }
    [System.FlagsAttribute()]
    public enum ExpressionAccessType
    {
        None = 0,
        Read = 1,
        Write = 2,
        ReadWrite = 3,
        Partial = 4,
        OutParameter = 10,
    }
    public class static FileExtensions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode FindNodeAt([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.DocumentRange documentRange) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode FindNodeAt([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IDocument document, JetBrains.Util.TextRange textRange) { }
        public static System.Collections.Generic.IEnumerable<T> FindNodesAt<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range, System.Predicate<T> filter = null)
            where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode FindTokenAt([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IDocument document, int textOffset) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> FindTokensAt([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range) { }
        public static JetBrains.DocumentModel.DocumentRange GetCoveringDocumentRange([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range) { }
        public static JetBrains.DocumentModel.DocumentRange GetDocumentRange([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeOffset treeOffset) { }
        public static JetBrains.DocumentModel.DocumentRange GetDocumentRange([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range) { }
        public static System.Collections.Generic.IList<JetBrains.DocumentModel.DocumentRange> GetIntersectingRanges([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.TreeTextRange> GetIntersectingRanges([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.DocumentRange documentRange) { }
        public static JetBrains.DocumentModel.DocumentRange GetParsedDocumentRange([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange Translate([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.DocumentRange documentRange) { }
        public static JetBrains.ReSharper.Psi.TreeOffset Translate([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentManagers.DocumentOffset offset) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange Translate([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IDocument document, JetBrains.Util.TextRange textRange) { }
        public static JetBrains.ReSharper.Psi.TreeOffset Translate([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IDocument document, int textOffset) { }
    }
    public interface IAccessRightsOwnerDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        bool HasAccessRights { get; }
        void SetAccessRights(JetBrains.ReSharper.Psi.AccessRights rights);
    }
    public interface IArgument : JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.IExpression Expression { get; }
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new bool IsValid();
    }
    public interface IArgumentsOwner : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IArgument> Arguments { get; }
    }
    public interface IChameleonNode : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        bool IsOpened { get; }
        JetBrains.ReSharper.Psi.Tree.IChameleonNode ReSync(JetBrains.ReSharper.Psi.Parsing.CachingLexer cachingLexer, JetBrains.ReSharper.Psi.TreeTextRange changedRange, int insertedTextLen);
    }
    public interface IComment : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        string CommentText { get; }
        JetBrains.ReSharper.Psi.TreeTextRange GetCommentRange();
    }
    public interface ICommentNode : JetBrains.ReSharper.Psi.Tree.IComment, JetBrains.ReSharper.Psi.Tree.ITokenNode, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IDeclaration : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string DeclaredName { get; }
        JetBrains.ReSharper.Psi.TreeTextRange GetNameRange();
        bool IsSynthetic();
        void SetName(string name);
    }
    public interface IDefaultNamespaceOwner
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.INamespace DefaultNamespace { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string DefaultNamespaceName { get; }
    }
    public interface IDocCommentBlockNode : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.DocCommentError[] GetErrors();
        System.Xml.XmlNode GetXML([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.ITypeMember element);
    }
    public interface IDocCommentBlockOwnerNode : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode GetDocCommentBlockNode();
        void SetDocCommentBlockNode(JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode node);
    }
    public interface IErrorElement : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        string ErrorDescription { get; }
    }
    public interface IExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ExpressionAccessType GetAccessType();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IExpressionType GetExpressionType();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType GetImplicitlyConvertedTo();
        bool IsConstantValue();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType Type();
    }
    public interface IFile : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Parsing.CachingLexer CachingLexer { get; }
        bool CanContainCaseInsensitiveReferences { get; }
        int ModificationCounter { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Files.PsiFileModificationInfo GetReParseResult(JetBrains.ReSharper.Psi.TreeTextRange modifiedRange, string text);
        bool IsInjected();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.IFile ReParse(JetBrains.ReSharper.Psi.TreeTextRange modifiedRange, string text);
    }
    public interface IFunctionDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IFunction DeclaredElement { get; }
    }
    public interface IIdentifier : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        string Name { get; }
    }
    public interface IInitializerOwnerDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode Initializer { get; }
    }
    public interface ILiteralExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Literal { get; }
    }
    public interface IModifiersOwnerDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IModifiersOwner DeclaredElement { get; }
        void SetAbstract(bool value);
        void SetExtern(bool value);
        void SetOverride(bool value);
        void SetReadonly(bool value);
        void SetSealed(bool value);
        void SetStatic(bool value);
        void SetUnsafe(bool value);
        void SetVirtual(bool value);
        void SetVolatile(bool value);
    }
    public interface INamespaceDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.INamespace DeclaredElement { get; }
        string QualifiedName { get; }
        JetBrains.DocumentModel.DocumentRange GetDeclaredNameDocumentRange();
        void SetQualifiedName(string qualifiedName);
    }
    public interface INamespaceDeclarationHolder : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.INamespaceDeclaration> NamespaceDeclarations { get; }
    }
    public interface IParameterDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IParameter DeclaredElement { get; }
    }
    public interface IParametersOwnerDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IParametersOwner DeclaredParametersOwner { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IParameterDeclaration> ParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.IParameterDeclaration AddParameterDeclarationAfter(JetBrains.ReSharper.Psi.ParameterKind kind, JetBrains.ReSharper.Psi.IType parameterType, string parameterName, JetBrains.ReSharper.Psi.Tree.IParameterDeclaration anchor);
        JetBrains.ReSharper.Psi.Tree.IParameterDeclaration AddParameterDeclarationBefore(JetBrains.ReSharper.Psi.ParameterKind kind, JetBrains.ReSharper.Psi.IType parameterType, string parameterName, JetBrains.ReSharper.Psi.Tree.IParameterDeclaration anchor);
        void RemoveParameterDeclaration(int index);
    }
    public interface IStatement : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IStatementsRange
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IStatement> Statements { get; }
        JetBrains.ReSharper.Psi.ITreeRange TreeRange { get; }
    }
    public interface ITokenNode : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Parsing.TokenNodeType GetTokenType();
    }
    public interface ITreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode FirstChild { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode LastChild { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode NextSibling { get; }
        JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode Parent { get; }
        JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeUserData PersistentUserData { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode PrevSibling { get; }
        JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeUserData UserData { get; }
        bool Contains(JetBrains.ReSharper.Psi.Tree.ITreeNode other);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode FindNodeAt(JetBrains.ReSharper.Psi.TreeTextRange treeTextRange);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Tree.ITreeNode> FindNodesAt(JetBrains.ReSharper.Psi.TreeOffset treeTextOffset);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode FindTokenAt(JetBrains.ReSharper.Psi.TreeOffset treeTextOffset);
        [JetBrains.Annotations.CanBeNullAttribute()]
        T GetContainingNode<T>(bool returnThis = False)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode;
        JetBrains.ReSharper.Psi.Tree.ReferenceCollection GetFirstClassReferences();
        JetBrains.DocumentModel.DocumentRange GetNavigationRange();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Modules.IPsiModule GetPsiModule();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IPsiSourceFile GetSourceFile();
        System.Text.StringBuilder GetText(System.Text.StringBuilder to);
        [JetBrains.Annotations.NotNullAttribute()]
        string GetText();
        JetBrains.Text.IBuffer GetTextAsBuffer();
        int GetTextLength();
        JetBrains.ReSharper.Psi.TreeOffset GetTreeStartOffset();
        bool IsFiltered();
        bool IsPhysical();
        bool IsStub();
        bool IsValid();
        void ProcessDescendantsForResolve([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IRecursiveElementProcessor processor);
    }
    public interface ITypeAndNamespaceHolderDeclaration : JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.Tree.INamespaceDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder
    {
        JetBrains.ReSharper.Psi.Tree.ITypeAndNamespaceHolderDeclaration ContainingTypeAndNamespaceHolder { get; }
    }
    public interface ITypeArgumentsOwnerElement : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> TypeArguments { get; }
        int TypeArgumentsNumber { get; }
    }
    public interface ITypeDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        string CLRName { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.ITypeElement DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration> MemberDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITypeDeclaration> NestedTypeDeclarations { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredType> SuperTypes { get; }
    }
    public interface ITypeDeclarationHolder : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.ITypeDeclaration> TypeDeclarations { get; }
    }
    public interface ITypeDeclarationWithRangeContainer : JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode { }
    public interface ITypeMemberDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.ITypeMember DeclaredElement { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITypeDeclaration GetContainingTypeDeclaration();
    }
    public interface ITypeOwnerDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IType Type { get; }
        void SetType(JetBrains.ReSharper.Psi.IType type);
    }
    public interface IXmlDocOwnerTreeNode : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Xml.XmlNode GetXMLDoc(bool inherit);
    }
    public struct ReferenceCollection : System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Resolve.IReference>, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.IReference>, System.Collections.IEnumerable
    {
        public static readonly JetBrains.ReSharper.Psi.Tree.ReferenceCollection Empty;
        public ReferenceCollection(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        public ReferenceCollection([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.IReference> references) { }
        public ReferenceCollection([JetBrains.Annotations.NotNullAttribute()] params JetBrains.ReSharper.Psi.Resolve.IReference[] references) { }
        public int Count { get; }
        public bool IsEmpty { get; }
        public bool IsReadOnly { get; }
        public JetBrains.ReSharper.Psi.Resolve.IReference this[int i] { get; }
        public void Add(JetBrains.ReSharper.Psi.Resolve.IReference item) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool Any() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool Any([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Resolve.IReference, bool> predicate) { }
        public JetBrains.ReSharper.Psi.Tree.ReferenceCollection Append([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        public void Clear() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool Contains(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        public void CopyTo(JetBrains.ReSharper.Psi.Resolve.IReference[] array, int arrayIndex) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.IReference First() { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.IReference FirstOrDefault() { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.IReference FirstOrDefault([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Resolve.IReference, bool> predicate) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.Tree.ReferenceCollection.ReferenceCollectionEnumerator GetEnumerator() { }
        [JetBrains.Annotations.PureAttribute()]
        public int IndexOf(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.IReference Last() { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.IReference LastOrDefault() { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.IReference LastOrDefault([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Resolve.IReference, bool> predicate) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.Util.DataStructures.HybridCollection<TRef> OfType<TRef>()
            where TRef :  class, JetBrains.ReSharper.Psi.Resolve.IReference { }
        public bool Remove(JetBrains.ReSharper.Psi.Resolve.IReference item) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.IReference[] ToArray() { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.Tree.ReferenceCollection Where([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Resolve.IReference, bool> predicate) { }
        public struct ReferenceCollectionEnumerator : System.Collections.Generic.IEnumerator<JetBrains.ReSharper.Psi.Resolve.IReference>, System.Collections.IEnumerator, System.IDisposable
        {
            [JetBrains.Annotations.NotNullAttribute()]
            public JetBrains.ReSharper.Psi.Resolve.IReference Current { get; }
            public void Dispose() { }
            public bool MoveNext() { }
            public void Reset() { }
        }
    }
    public class static StatementsRangeExtensions
    {
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public static void AssertValid(this JetBrains.ReSharper.Psi.Tree.IStatementsRange range) { }
    }
    public class static TokenNodeExtesions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetNextToken(this JetBrains.ReSharper.Psi.Tree.ITokenNode tokenNode) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetPrevToken(this JetBrains.ReSharper.Psi.Tree.ITokenNode tokenNode) { }
        public static bool IsCommentToken([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITokenNode token) { }
        public static bool IsIdentifier([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITokenNode token) { }
        public static bool IsWhitespaceToken([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITokenNode token) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> NextTokens([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITokenNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> PrevTokens([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITokenNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> SelfAndNextTokens([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITokenNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> SelfAndPrevTokens([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITokenNode node) { }
    }
    public enum TreeNodeActionType
    {
        ACCEPT = 0,
        CONTINUE = 1,
        IGNORE_SUBTREE = 2,
    }
    public struct TreeNodeCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.IEnumerable
        where T : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public static readonly JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<T> Empty;
        public TreeNodeCollection([JetBrains.Annotations.NotNullAttribute()] T[] nodes) { }
        public int Count { get; }
        public bool IsEmpty { get; }
        public T this[int i] { get; set; }
        [JetBrains.Annotations.PureAttribute()]
        public bool All([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<T, bool> predicate) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool Any() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool Any([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<T, bool> predicate) { }
        public bool Contains(T item) { }
        [JetBrains.Annotations.PureAttribute()]
        public T First() { }
        [JetBrains.Annotations.PureAttribute()]
        public T First([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<T, bool> predicate) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public T FirstOrDefault() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public T FirstOrDefault([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<T, bool> predicate) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<T>.Enumerator GetEnumerator() { }
        public int IndexOf(T node) { }
        [JetBrains.Annotations.PureAttribute()]
        public T Last() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public T LastOrDefault() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public T LastOrDefault([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<T, bool> predicate) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public System.Collections.Generic.IEnumerable<TTarget> OfType<TTarget>()
            where TTarget :  class { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public System.Collections.Generic.IEnumerable<T> Reverse() { }
        [JetBrains.Annotations.LinqTunnelAttribute()]
        public System.Collections.Generic.IEnumerable<TResult> Select<TResult>([JetBrains.Annotations.NotNullAttribute()] System.Func<T, TResult> selector) { }
        [JetBrains.Annotations.PureAttribute()]
        public T Single() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public T SingleOrDefault() { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public TResult[] ToArray<TResult>([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<T, TResult> selector) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public System.Collections.Generic.List<T> ToList() { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public System.Collections.Generic.List<TResult> ToList<TResult>([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<T, TResult> selector) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public System.Collections.Generic.List<T> ToListWhere([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<T, bool> predicate) { }
        [JetBrains.Annotations.LinqTunnelAttribute()]
        public System.Collections.Generic.IEnumerable<T> Where([JetBrains.Annotations.NotNullAttribute()] System.Func<T, bool> predicate) { }
        public struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode
        {
            public T Current { get; }
            public void Dispose() { }
            public bool MoveNext() { }
            public void Reset() { }
        }
    }
    public class static TreeNodeCollectionExtensions
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<TTo> Cast<TTo, TFrom>(this JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<TFrom> collection)
            where TTo : JetBrains.ReSharper.Psi.Tree.ITreeNode
            where TFrom : TTo, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsEmpty<T>(this JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<T> collection)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static TTo[] ToList<TTo, TFrom>(this JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<TFrom> collection)
        
            where TFrom : TTo, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<T> ToTreeNodeCollection<T>([JetBrains.Annotations.NotNullAttribute()] this System.Collections.Generic.IEnumerable<T> nodes)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    }
    public struct TreeNodeEnumerable<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
        where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<T> Empty;
        public TreeNodeEnumerable(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement root, short role0) { }
        public TreeNodeEnumerable(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement root, short role1, short role0) { }
        public TreeNodeEnumerable(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement root, short role2, short role1, short role0) { }
        public TreeNodeEnumerable(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement root, short role3, short role2, short role1, short role0) { }
        public JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<T>.Enumerator GetEnumerator() { }
        public struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable
            where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode
        {
            public Enumerator(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement root, short role0, short role1, short role2, short role3) { }
            public T Current { get; }
            public void Dispose() { }
            public bool MoveNext() { }
            public void Reset() { }
        }
    }
    public class static TreeNodeExtensions
    {
        [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
        public static void AssertIsValid(this JetBrains.ReSharper.Psi.Tree.ITreeNode element, string messageText = "") { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> Children([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<T> Children<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode root)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static int ComparePositionTo(this JetBrains.ReSharper.Psi.Tree.ITreeNode node1, JetBrains.ReSharper.Psi.Tree.ITreeNode node2, bool compareNodeEndPos = False) { }
        public static bool ContainsErrorElement(this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static bool ContainsReference([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        public static TNode Copy<TNode>(this TNode node, JetBrains.ReSharper.Psi.Tree.ITreeNode context = null)
            where TNode : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static TNode CopyWithResolve<TNode>(this TNode node)
            where TNode : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static System.IDisposable CreateWriteLock([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> EnumerateSubTree([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode FindCommonParent([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node1, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node2) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode FindFirstTokenIn([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Parsing.TokenNodeType FindFirstTokenTypeIn([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode FindLastTokenIn([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Parsing.TokenNodeType FindLastTokenTypeIn([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode FindNextNode(this JetBrains.ReSharper.Psi.Tree.ITreeNode node, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.TreeNodeActionType> predicate) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode FindPrevNode(this JetBrains.ReSharper.Psi.Tree.ITreeNode node, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.TreeNodeActionType> predicate) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static T FindReference<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element, System.Predicate<T> predicate)
            where T : JetBrains.ReSharper.Psi.Resolve.IReference { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static T FindReference<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.TreeOffset treeOffset)
            where T : JetBrains.ReSharper.Psi.Resolve.IReference { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static T FindReference<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element)
            where T : JetBrains.ReSharper.Psi.Resolve.IReference { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.IReference[] FindReferencesAt([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.TreeTextRange treeTextRange) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> FirstDescendants([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode GetCommonParent([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node1, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node2) { }
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeExtensions.ParentWithDirections GetCommonParentWithDirections([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node1, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node2) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.IFile GetContainingFile([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.IFile GetContainingFileThroughSandBox([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static T GetContainingNode<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element, System.Predicate<T> predicate, bool returnThis = False)
            where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode GetContainingNode([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element, System.Type nodeType, bool returnThis = False) { }
        public static JetBrains.DocumentModel.DocumentRange GetCoveringDocumentRange([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static int GetDepth([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static JetBrains.DocumentModel.DocumentRange GetDocumentRange([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static JetBrains.DocumentModel.DocumentRange GetDocumentStartOffset([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static JetBrains.DocumentModel.DocumentRange GetDocumentStartOffsetThroughSandbox([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetFilteredChildren([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetFirstTokenIn([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.DocumentModel.DocumentRange> GetIntersectingDocumentRanges([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.PsiLanguageType GetKnownLanguage([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetLastTokenIn([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode GetMeaningfulLeftSib([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode GetMeaningfulRightSib([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode GetNextMeaningfulChild(this JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Tree.ITreeNode child) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetNextMeaningfulToken([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, bool includeThisNode = False) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetNextToken(this JetBrains.ReSharper.Psi.Tree.ITreeNode treeNode) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetPreviousMeaningfulToken([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node, bool includeThisNode = False) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetPreviousToken(this JetBrains.ReSharper.Psi.Tree.ITreeNode treeNode) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ProjectModel.IProject GetProject([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static JetBrains.ReSharper.Psi.Tree.ReferenceCollection GetReferences([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static JetBrains.ReSharper.Psi.Tree.ReferenceCollection GetReferences([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<string> names) { }
        public static JetBrains.ReSharper.Psi.Tree.ReferenceCollection GetReferences([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<string> names, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReferenceProvider referenceProvider) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext GetResolveContext([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode treeNode) { }
        public static JetBrains.ReSharper.Psi.Tree.ReferenceCollection GetSecondClassReferences([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static JetBrains.ReSharper.Psi.Tree.ReferenceCollection GetSecondClassReferences([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<string> names) { }
        public static JetBrains.Application.Settings.IContextBoundSettingsStore GetSettingsStore([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ProjectModel.ISolution GetSolution([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static string GetTextOfCachableNodes(this JetBrains.ReSharper.Psi.Tree.ITreeNode treeNode) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Parsing.TokenNodeType GetTokenType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static JetBrains.ReSharper.Psi.TreeOffset GetTreeEndOffset([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static JetBrains.ReSharper.Psi.TreeOffset GetTreeStartOffsetThroughSandbox(this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange GetTreeTextRange([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static bool IsCommentToken([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static bool IsEmpty([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static bool IsWhitespaceToken([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> LastDescendants([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> LeftSiblings([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode startNode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> LeftSiblings([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode startNode, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode tillNode) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> MeaningfulChildren([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> NextTokens([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode startNode) { }
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode ParentThroughSandBox(this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> PathToRoot([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> PrevTokens([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode startNode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> ReverseChildren([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> ReverseTokens([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> RightSiblings([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode startNode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> RightSiblings([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode startNode, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode tillNode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode Root([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> SelfAndFirstDescendants([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> SelfAndLastDescendants([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> SelfAndLeftSiblings([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode startNode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> SelfAndPathToRoot([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> SelfAndRightSiblings([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode startNode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> SelfAndRightSiblings([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode startNode, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode tillNode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Func<JetBrains.DataFlow.Lifetime, JetBrains.Application.DataContext.DataContexts, JetBrains.Application.DataContext.IDataContext> ToDataContext([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Func<JetBrains.DataFlow.Lifetime, JetBrains.Application.DataContext.DataContexts, JetBrains.Application.DataContext.IDataContext> ToDataContext([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Func<JetBrains.DataFlow.Lifetime, JetBrains.Application.DataContext.DataContexts, JetBrains.Application.DataContext.IDataContext> ToDataContext([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> Tokens([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public class ParentWithDirections
        {
            public ParentWithDirections(JetBrains.ReSharper.Psi.Tree.ITreeNode parent, JetBrains.ReSharper.Psi.Tree.ITreeNode direction1, JetBrains.ReSharper.Psi.Tree.ITreeNode direction2) { }
            public JetBrains.ReSharper.Psi.Tree.ITreeNode Direction1 { get; }
            public JetBrains.ReSharper.Psi.Tree.ITreeNode Direction2 { get; }
            public JetBrains.ReSharper.Psi.Tree.ITreeNode Parent { get; }
        }
    }
}
namespace JetBrains.ReSharper.Psi.TreeBuilder
{
    
    public abstract class CompositeNodeWithArgumentType : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType
    {
        protected CompositeNodeWithArgumentType(string s, int index) { }
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement Create(object message);
    }
    public interface IPsiBuilderTokenFactory
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase CreateToken(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenNodeType, JetBrains.Text.IBuffer buffer, int startOffset, int endOffset);
    }
    public interface ITreeStructure<T> { }
    public struct Marker
    {
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType ElementType;
        public int FirstChild;
        public const int InvalidPointer = -1;
        public int LastChild;
        public int LexemeIndex;
        public int NextMarker;
        public int OppositeMarker;
        public int ParentMarker;
        public readonly JetBrains.ReSharper.Psi.TreeBuilder.MarkerType Type;
        public object UserData;
        public Marker(JetBrains.ReSharper.Psi.TreeBuilder.MarkerType type, int lexemeIndex) { }
        public static void AddChild(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilder builder, int node, int child) { }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class MarkerListCache : JetBrains.ReSharper.Psi.Util.ListCache<JetBrains.ReSharper.Psi.TreeBuilder.Marker>
    {
        public MarkerListCache(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading threading) { }
        protected override int GetMaxCount() { }
    }
    public class static MarkerListUtils
    {
        public static void DoWithInternAndMarkerList(JetBrains.ReSharper.Psi.Util.CommonIdentifierIntern interns, JetBrains.ReSharper.Psi.TreeBuilder.MarkerListCache markerListCache, System.Action<JetBrains.ReSharper.Psi.Util.ITokenIntern, System.Collections.Generic.List<JetBrains.ReSharper.Psi.TreeBuilder.Marker>> action) { }
        public static T DoWithInternAndMarkerList<T>(JetBrains.ReSharper.Psi.Util.CommonIdentifierIntern interns, JetBrains.ReSharper.Psi.TreeBuilder.MarkerListCache markerListCache, System.Func<JetBrains.ReSharper.Psi.Util.ITokenIntern, System.Collections.Generic.List<JetBrains.ReSharper.Psi.TreeBuilder.Marker>, T> action) { }
    }
    public enum MarkerType
    {
        StartMarkerType = 0,
        DoneMarkerType = 1,
        DoneAlterTokenMarkerType = 2,
    }
    public sealed class PsiBuilder
    {
        public readonly JetBrains.ReSharper.Psi.Parsing.ArrayOfTokens myArrayOfTokens;
        public readonly System.Collections.Generic.List<JetBrains.ReSharper.Psi.TreeBuilder.Marker> myProduction;
        public readonly JetBrains.ReSharper.Psi.Parsing.TokenBuffer myTokenBuffer;
        public PsiBuilder(JetBrains.ReSharper.Psi.Parsing.ILexer lexer, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType rootType, JetBrains.ReSharper.Psi.TreeBuilder.IPsiBuilderTokenFactory tokenFactory, double capacityByTokensCount, System.Collections.Generic.List<JetBrains.ReSharper.Psi.TreeBuilder.Marker> listFromCache) { }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType AdvanceLexer() { }
        public void AlterToken(JetBrains.ReSharper.Psi.Parsing.TokenNodeType newTokenNodeType, int count) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement BuildTree() { }
        public bool CompareCurrentTokenText(string text, bool caseSensitive = True) { }
        public void Done(int marker, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType type, object userData) { }
        public void DoneBeforeWhitespaces(int marker, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType type, object userData) { }
        public void Drop(int marker) { }
        public bool Eof() { }
        public void Error(int marker, string message) { }
        public void Error(string message) { }
        public void ErrorBeforeWhitespaces(string message, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ws) { }
        public JetBrains.Text.IBuffer GetBuffer() { }
        public int GetCurrentLexeme() { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilder.ShouldParseCheck GetShouldParseSomethingCheck() { }
        public JetBrains.ReSharper.Psi.Parsing.Token GetToken() { }
        public JetBrains.ReSharper.Psi.Parsing.Token GetToken(int index) { }
        public int GetTokenOffset() { }
        public string GetTokenText() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType GetTokenType(int lookahead) { }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType GetTokenType() { }
        public bool HasMoved(int marker) { }
        public int Mark() { }
        public void Precede(int marker) { }
        public int PrecedeCurrent() { }
        public void PrepareLightTree() { }
        public void RollbackTo(int marker) { }
        public struct ShouldParseCheck
        {
            public ShouldParseCheck(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilder owner) { }
            [System.Diagnostics.ConditionalAttribute("JET_MODE_ASSERT")]
            public void AssertHasMoved() { }
        }
    }
    public struct PsiBuilderTreeNode
    {
        public readonly int LexemeIndex;
        public readonly int Marker;
        public static readonly JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode Root;
        public PsiBuilderTreeNode(int marker, int lexemIndex) { }
    }
    public struct PsiBuilderTreeStructure : JetBrains.ReSharper.Psi.TreeBuilder.ITreeStructure<JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode>
    {
        public PsiBuilderTreeStructure(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilder owner) { }
        public JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode InvalidNode { get; }
        public JetBrains.ReSharper.Psi.Parsing.CachingLexer Lexer { get; }
        public JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode Root { get; }
        public JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode GetFirstChild(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode node) { }
        public JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode GetFirstCompositeChild(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode node) { }
        public JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode GetNextChild(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode node) { }
        public JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode GetNextCompositeChild(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode node) { }
        public int GetNodeOffset(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode node) { }
        public string GetNodeText(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode node) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType GetNodeType(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode node) { }
        public JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode GetParent(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode node) { }
        public bool IsEqualNodes(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode node1, JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode node2) { }
        public bool IsValidNode(JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode node) { }
    }
    public abstract class TreeStructureBuilderBase
    {
        protected TreeStructureBuilderBase(JetBrains.ReSharper.Psi.Util.ITokenIntern identifierIntern) { }
        protected abstract JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilder Builder { get; }
        protected abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet CommentsOrWhiteSpacesTokens { get; }
        protected JetBrains.ReSharper.Psi.Util.ITokenIntern IdentifierIntern { get; }
        protected bool JustSkippedNewLine { get; set; }
        protected abstract JetBrains.ReSharper.Psi.Parsing.TokenNodeType NewLine { get; }
        protected bool WhitespacesSkipped { get; set; }
        protected void Advance() { }
        protected void AlterToken(JetBrains.ReSharper.Psi.Parsing.TokenNodeType newTokenNodeType) { }
        protected void AlterToken(JetBrains.ReSharper.Psi.Parsing.TokenNodeType newTokenNodeType, int count) { }
        protected void ErrorBeforeWhitespaces(string typeNameExpected) { }
        protected bool ExpectToken(JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType token) { }
        protected abstract string GetExpectedMessage(string name);
        public JetBrains.ReSharper.Psi.TreeBuilder.ITreeStructure<JetBrains.ReSharper.Psi.TreeBuilder.PsiBuilderTreeNode> GetLightPsi() { }
        protected JetBrains.ReSharper.Psi.Parsing.TokenNodeType GetTokenType() { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement GetTree() { }
        protected JetBrains.ReSharper.Psi.Parsing.TokenNodeType LookAhead(int lookahead) { }
        protected int Mark() { }
        protected virtual void MarkErrorAndSkipToken(string message) { }
        protected JetBrains.ReSharper.Psi.Parsing.TokenNodeType NextLookAhead(ref int index) { }
        protected virtual void SkipWhitespaces() { }
    }
}
namespace JetBrains.ReSharper.Psi.Util
{
    
    public class static AccessUtil
    {
        public static JetBrains.ReSharper.Psi.Resolve.Staticness GetQualifierStaticness(JetBrains.ReSharper.Psi.Resolve.IQualifier qualifier) { }
        public static bool HasProblemWithStatic(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.IAccessContext context) { }
        public static bool IsAccessibilityConsistent(JetBrains.ReSharper.Psi.AccessibilityDomain testDomain, JetBrains.ReSharper.Psi.AccessibilityDomain contextDomain) { }
        public static bool IsReadable(this JetBrains.ReSharper.Psi.IProperty property, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext) { }
        public static bool IsStatic(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsStatic(JetBrains.ReSharper.Psi.ITypeMember typeMember) { }
        public static bool IsSymbolAccessible(JetBrains.ReSharper.Psi.ITypeMember typeMember, JetBrains.ReSharper.Psi.Resolve.IAccessContext context, JetBrains.ReSharper.Psi.AccessRights rights, bool checkModuleIsReferenced = False) { }
        public static bool IsSymbolAccessible(JetBrains.ReSharper.Psi.ITypeMember typeMember, JetBrains.ReSharper.Psi.Resolve.IAccessContext context, bool checkModuleIsReferenced = False) { }
        public static bool IsWritable(this JetBrains.ReSharper.Psi.IProperty property, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext) { }
    }
    public class BrokenRegionEnvelopeType : JetBrains.Util.EnumPattern, JetBrains.ReSharper.Psi.Util.ICodeRegionData
    {
        public static readonly JetBrains.ReSharper.Psi.Util.BrokenRegionEnvelopeType Instance;
        public BrokenRegionEnvelopeType([JetBrains.Annotations.NotNullAttribute()] string name) { }
        public int GetSignificance() { }
    }
    public class ClrPredefinedTypeConversionRule : JetBrains.ReSharper.Psi.ITypeConversionRule
    {
        public static readonly JetBrains.ReSharper.Psi.ITypeConversionRule INSTANCE;
        public bool IsExplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsImplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public JetBrains.ReSharper.Psi.IType ToIType(JetBrains.ReSharper.Psi.IExpressionType expressionType) { }
    }
    public class static CLRTypeConversionUtil
    {
        public static bool ClrIsImplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType EffectiveBaseClass(this JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public static System.Collections.Generic.List<JetBrains.ReSharper.Psi.IType> EffectiveInterfaces(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public static System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.IType> EffectiveInterfaces(JetBrains.ReSharper.Psi.ITypeParameter typeParameter, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.IType> visited) { }
        public static bool IdentityConvertible([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType typeA, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType typeB, bool allowUnknownTypeEquality = False) { }
        public static bool ImplicitReferenceConversionExist(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public static bool ImplicitVariantConvertible([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredType from, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredType to, System.Func<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.IType, bool> impicitReferenceConversionCheck) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType MostEncompassedType([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> types) { }
        public class IdentityComparer<T> : System.Collections.Generic.IEqualityComparer<T>
            where T : JetBrains.ReSharper.Psi.IType { }
    }
    public class static CollectionTypeExtensions
    {
        public static bool IsGenericOrNonIEnumerable(this JetBrains.ReSharper.Psi.IType type) { }
        public static bool IsGenericOrNonIEnumerator(this JetBrains.ReSharper.Psi.IType type) { }
    }
    public class CollectionTypeUtil
    {
        public const string Current = "Current";
        public const string GetEnumerator = "GetEnumerator";
        public const string MoveNext = "MoveNext";
        public static void CollectGenericIEnumerable(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.IDeclaredType type, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.IType> result) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateIEnumerableOf(JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType elementType) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType ElementTypeByCollectionType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.Tree.ITreeNode context, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext = null) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetElementTypesForGenericEnumerable(JetBrains.ReSharper.Psi.IDeclaredType declaredType) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetElementTypesForGenericType(JetBrains.ReSharper.Psi.IDeclaredType declaredType, JetBrains.ReSharper.Psi.IDeclaredType genericType, int typeParameterIndex) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> GetEnumeratorMethod([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> GetIEnumerableEnumeratorMethod(JetBrains.ReSharper.Psi.PredefinedType predefinedType) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.IType>> GetKeyValueTypesForGenericDictionary([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredType declaredType) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType GetTypeContainingEnumerable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode context, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext) { }
        protected static bool IsArray(JetBrains.ReSharper.Psi.IType type, out JetBrains.ReSharper.Psi.IType elementType) { }
        protected static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo TryResolveEnumerableMember(JetBrains.ReSharper.Psi.IDeclaredType declaredType, JetBrains.ReSharper.Psi.ITypeConversionRule vbTypeConversionRule, JetBrains.ReSharper.Psi.PredefinedType predefinedType) { }
        protected static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo TryResolveGenericEnumerableMember(JetBrains.ReSharper.Psi.IDeclaredType declaredType, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, JetBrains.ReSharper.Psi.PredefinedType predefinedType) { }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class CommonIdentifierIntern
    {
        public const int MaxCount = 30000;
        public CommonIdentifierIntern() { }
        [JetBrains.Annotations.ThreadSafeAttribute()]
        public JetBrains.ReSharper.Psi.Util.ITokenIntern GetOrCreateIntern(JetBrains.DataFlow.Lifetime lifetime) { }
    }
    public class static CommonIdentifierInternExtensions
    {
        public static void DoWithIdentifierIntern(this JetBrains.ReSharper.Psi.Util.CommonIdentifierIntern interns, System.Action<JetBrains.ReSharper.Psi.Util.ITokenIntern> action) { }
        public static T DoWithIdentifierIntern<T>(this JetBrains.ReSharper.Psi.Util.CommonIdentifierIntern interns, System.Func<JetBrains.ReSharper.Psi.Util.ITokenIntern, T> action) { }
    }
    public class static ConstantValueUtil
    {
        public static JetBrains.ReSharper.Psi.ConstantValue ToEnumUnderlyingType(this JetBrains.ReSharper.Psi.ConstantValue value) { }
    }
    public class static DeclaredElementUtil
    {
        public static bool IsAsyncAwaitablePatternMember(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsConstant(this JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public static bool IsDelegateInvokeMethod(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsEnumMember(this JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public static bool IsExtensionMethod(this JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsFloatOrDoubleNaN(JetBrains.ReSharper.Psi.IField field) { }
        public static bool IsLocalConstant(this JetBrains.ReSharper.Psi.IDeclaredElement element) { }
    }
    public class static ExpressionUtil
    {
        public static bool IsPure(this JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public static bool IsPure(this JetBrains.ReSharper.Psi.Tree.IExpression expression, System.Func<JetBrains.ReSharper.Psi.Tree.IExpression, bool> customCheck) { }
    }
    public class static FileResolveUtil
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CheckResolveResut(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo resolveResult, string name) { }
    }
    public class static FormatStringParser
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Util.FormatStringParser.FormatItem> Parse([JetBrains.Annotations.NotNullAttribute()] string formatString) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Util.FormatStringParser.FormatItem> Parse([JetBrains.Annotations.NotNullAttribute()] string formatString, out System.Collections.Generic.IList<> unescapedRBraces, out System.Collections.Generic.IList<> unescapedLBraces) { }
        public class FormatItem
        {
            public FormatItem(string containingFormatString) { }
            public JetBrains.Util.TextRange AlignmentRange { get; }
            public JetBrains.Util.TextRange FormatStringRange { get; }
            public JetBrains.Util.TextRange IndexRange { get; }
            public System.Nullable<int> IndexValue { get; }
            public JetBrains.Util.TextRange Range { get; }
            public void ShiftIndexRange(int shiftDelta) { }
        }
    }
    public class static FunctionInvocationUtil
    {
        public static bool ExpressionCanBeReplacedByMethodInvocation(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper GetFunctionInvocationByArgument(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper GetFunctionInvocationByArgumentsOwner(JetBrains.ReSharper.Psi.Tree.IArgumentsOwner argumentsOwner) { }
        public static JetBrains.ReSharper.Psi.Tree.IExpression GetNarrowestContainingArgumentExpression(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public static bool IsArgumentOfFormatingFunction([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public static bool IsArgumentOfMethodThatHasSimilarFormattingMethod(JetBrains.ReSharper.Psi.Tree.IExpression expression, out JetBrains.ReSharper.Psi.IMethod similarFormattingMethod) { }
        public static JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper SurroundWithStaticMethodInvocation(JetBrains.ReSharper.Psi.IFunction method, JetBrains.ReSharper.Psi.Tree.IExpression expression, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    public class static HierarchyUtil
    {
        public static bool CanHaveCommonSubtype(JetBrains.ReSharper.Psi.IExpressionType type1, JetBrains.ReSharper.Psi.IExpressionType type2) { }
        public static bool HaveCommonSubtype(JetBrains.ReSharper.Psi.IExpressionType type1, JetBrains.ReSharper.Psi.IExpressionType type2) { }
    }
    public interface ICodeElement
    {
        JetBrains.ReSharper.Psi.ITreeRange TreeRange { get; }
        bool HasSignificantElements();
    }
    public interface ICodeRegion : JetBrains.ReSharper.Psi.Util.ICodeElement
    {
        JetBrains.DataStructures.IReadOnlyList<JetBrains.ReSharper.Psi.Util.ICodeElement> CodeElements { get; }
        bool IsBroken { get; }
        JetBrains.ReSharper.Psi.Util.ICodeRegionData RegionData { get; }
        JetBrains.ReSharper.Psi.Util.ISignificantElement GetSingleSignificantTreeNode();
    }
    public interface ICodeRegionData
    {
        int GetSignificance();
    }
    public interface ICollectionTypeHelper
    {
        JetBrains.ReSharper.Psi.IType ElementTypeByCollectionType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, JetBrains.ReSharper.Psi.Tree.ITreeNode context);
        JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> GetEnumeratorMethod([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, JetBrains.ReSharper.Psi.Tree.ITreeNode context);
    }
    public interface IFunctionInvocationClrWrapper
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> Arguments { get; }
        JetBrains.ReSharper.Psi.Tree.IArgumentsOwner ArgumentsOwner { get; }
        JetBrains.ReSharper.Psi.IFunction InvokedFunction { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IFunction> InvokedFunctionCandidates { get; }
        void AddArgument(JetBrains.ReSharper.Psi.Tree.IExpression newArgumentExpression, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
        void ChangeInvokedMethod(JetBrains.ReSharper.Psi.IMethod newFunction);
        void RemoveArgumentAt(int argumentToDeleteIndex);
        void SetArgumentAt(int currentItemIndex, JetBrains.ReSharper.Psi.Tree.IExpression argumentExpression, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
    }
    public interface IFunctionInvocationProvider
    {
        bool ExpressionCanBeReplacedByMethodInvocation(JetBrains.ReSharper.Psi.Tree.IExpression expression);
        JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper GetFunctionInvocationByArgument(JetBrains.ReSharper.Psi.Tree.IExpression expression);
        JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper GetFunctionInvocationByArgumentsOwner(JetBrains.ReSharper.Psi.Tree.IArgumentsOwner argumentsOwner);
        JetBrains.ReSharper.Psi.Tree.IExpression GetNarrowestContainingArgumentExpression(JetBrains.ReSharper.Psi.Tree.IExpression expression);
        bool IsArgumentOfFormatingFunction(JetBrains.ReSharper.Psi.Tree.IExpression argumentExpression);
        bool IsArgumentOfMethodThatHasSimilarFormattingMethod(JetBrains.ReSharper.Psi.Tree.IExpression argumentExpression, out JetBrains.ReSharper.Psi.IMethod properFormattingMethod);
        JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper SurroundWithStaticMethodInvocation(JetBrains.ReSharper.Psi.IFunction method, JetBrains.ReSharper.Psi.Tree.IExpression surroundedExpression, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
    }
    public interface IInsertionAnchorResult<TDeclaration>
        where TDeclaration : JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration
    {
        TDeclaration Declaration { get; }
        JetBrains.Util.BeforeOrAfter Type { get; }
    }
    public interface IInsignificantElement : JetBrains.ReSharper.Psi.Util.ICodeElement { }
    public interface ILanguageFeatures
    {
        bool AutoPropertiesAreSupported(JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
    }
    public interface IMemberInserter<TDeclaration>
        where TDeclaration : JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.Util.IInsertionAnchorResult<TDeclaration> Anchor { get; }
        TDeclaration InsertMethod();
        bool TryFindDeclarationAnchor();
    }
    public class static InteropTypesUtil
    {
        public static bool ContainsEmbeddedInteropType(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ITypeElement GetOriginalTypeByEmbeddedInteropType(this JetBrains.ReSharper.Psi.ITypeElement embeddedType) { }
        public static bool IsEmbeddedInteropType(this JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsImportedComType(this JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsImportedComTypeMember(this JetBrains.ReSharper.Psi.ITypeMember typeMember) { }
    }
    public interface INullLiteralProvider
    {
        JetBrains.ReSharper.Psi.Tree.IExpression CreateNullLiteral(JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
    }
    public interface IRegionStructure
    {
        JetBrains.DataStructures.IReadOnlyList<JetBrains.ReSharper.Psi.Util.ICodeElement> CodeElements { get; }
        JetBrains.ReSharper.Psi.Util.ICodeRegion MainCodeRegion { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Util.ICodeElement> GetParentCodeElements(JetBrains.ReSharper.Psi.Tree.ITreeNode significantNode);
    }
    public interface IRegionStructureAcceptor
    {
        void AcceptCodeRegionEnd(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Util.ICodeRegionData data);
        void AcceptCodeRegionStart(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Util.ICodeRegionData data);
        void AcceptInsignificantNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node);
        void AcceptSignificantNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node);
    }
    public interface IRegionStructureProvider
    {
        bool AllowRegionRemove(JetBrains.ReSharper.Psi.Util.ICodeRegion region);
        void ProcessNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.Util.IRegionStructureAcceptor acceptor);
        bool ShouldSkipNode(JetBrains.ReSharper.Psi.Tree.ITreeNode node);
    }
    public interface ISignificantElement : JetBrains.ReSharper.Psi.Util.ICodeElement
    {
        JetBrains.ReSharper.Psi.Tree.ITreeNode SignificantNode { get; }
    }
    public interface IStringConcatenationClrWrapper
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> Arguments { get; }
        JetBrains.ReSharper.Psi.Tree.IExpression Expression { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IExpression> GetConcatenationArgumentsThatContainValueRange(JetBrains.Util.TextRange range);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> GetConcatenationArgumentsThatContainValueRange(JetBrains.Util.TextRange range, out System.Collections.Generic.IList<> localRanges, bool includeNonLiterals = False);
        System.Collections.Generic.IEnumerable<string> GetWidestConstantValues();
        void RemoveAtValueRange(JetBrains.Util.TextRange range, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
        void ReplaceAtValueRange(JetBrains.Util.TextRange range, string newValue, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
        void ReplaceInAllLiterals(string oldValue, string newValue, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
        void SetArgumentAt(int index, JetBrains.ReSharper.Psi.Tree.IExpression argument, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
        void TryMergeArgumentWithNext(int index, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
    }
    public interface IStringConcatenationWrapperProvider
    {
        JetBrains.ReSharper.Psi.Util.IStringConcatenationClrWrapper CreateStringConcatenation(JetBrains.ReSharper.Psi.Tree.IExpression expression);
        JetBrains.ReSharper.Psi.Util.IStringConcatenationClrWrapper CreateWidestContainingStringConcatenation(JetBrains.ReSharper.Psi.Tree.IExpression expression);
    }
    public interface IStringLiteralAlterer
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ILiteralExpression Expression { get; }
        JetBrains.ReSharper.Psi.TreeTextRange UnderQuotesRange { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string Value { get; }
        void Insert(int index, [JetBrains.Annotations.NotNullAttribute()] string valueToInsert, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
        int PresentationOffsetToValueOffset(int caret);
        void Remove(JetBrains.Util.TextRange range, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
        void Replace([JetBrains.Annotations.NotNullAttribute()] string oldValue, [JetBrains.Annotations.NotNullAttribute()] string newValue, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
        int TreeOffsetToValueOffset(JetBrains.ReSharper.Psi.TreeOffset treeOffset);
        JetBrains.DocumentModel.DocumentRange ValueTextRangeToPresentationDocumentRange(JetBrains.Util.TextRange range);
    }
    public interface IStringLiteralAltererProvider
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer CreateStringLiteralByExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IExpression expression);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer CreateStringLiteralByValue([JetBrains.Annotations.NotNullAttribute()] string value, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer TryCreateStringLiteralByExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IExpression expression);
    }
    public interface ITokenIntern
    {
        string Intern(string value);
        string Intern(JetBrains.ReSharper.Psi.Parsing.ILexer lexer);
        string Intern(JetBrains.Text.IBuffer buffer, int startOffset, int endOffset);
    }
    public interface ITreeRangeBuilder
    {
        bool IsWhitespaceTokenOrSpecialToken(JetBrains.ReSharper.Psi.Tree.ITreeNode node);
        bool SupportsLanguage(JetBrains.ReSharper.Psi.PsiLanguageType language);
    }
    public interface ITypeUtilLanguageService
    {
        bool CanUseExplicitly(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.Tree.ITreeNode context);
    }
    public class static LateBoundReferenceUtil
    {
        public static JetBrains.ReSharper.Psi.Resolve.Refers RefersToDeclaredElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ILateBoundReference reference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, [JetBrains.Annotations.CanBeNullAttribute()] [JetBrains.Annotations.InstantHandleAttribute()] System.Predicate<JetBrains.ReSharper.Psi.IDeclaredElement> canReferTo = null) { }
    }
    public abstract class ListCache<T>
    
    {
        protected ListCache(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading threading) { }
        protected abstract int GetMaxCount();
        [JetBrains.Annotations.ThreadSafeAttribute()]
        public System.Collections.Generic.List<T> GetOrCreateList(JetBrains.DataFlow.Lifetime lifetime) { }
    }
    public class static MainMethodUtil
    {
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IMethod> FindAllMainMethods(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static bool IsMainMethod(JetBrains.ReSharper.Psi.IMethod method, bool checkProjectOutputType) { }
    }
    public class static MiscUtil
    {
        public static bool AreExpressionsEquivalent(JetBrains.ReSharper.Psi.Tree.IExpression ex1, JetBrains.ReSharper.Psi.Tree.IExpression ex2) { }
        public static bool AreNodesEquivalent(JetBrains.ReSharper.Psi.Tree.ITreeNode node1, JetBrains.ReSharper.Psi.Tree.ITreeNode node2) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.IExpression[] FindOccurrences([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IExpression expression, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode scope) { }
        public static bool GetBaseTypeOfSynthetic(this JetBrains.ReSharper.Psi.IExpressionType type, out JetBrains.ReSharper.Psi.IType baseType) { }
        public static JetBrains.DocumentModel.DocumentRange GetDocumentRange([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITreeRange treeRange) { }
        public static JetBrains.Util.TextRange GetLiteralContentTextRange([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ILiteralExpression literalExpression) { }
        public static JetBrains.ReSharper.Psi.Search.ISearchDomain GetParameterLocalSearchDomain(JetBrains.ReSharper.Psi.IParameter parameter) { }
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode GetScope(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange GetTreeTextRange([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.ITreeRange treeRange) { }
        public static bool IsIDisposableDisposeMethod(JetBrains.ReSharper.Psi.IMethod method) { }
        public static bool IsObjectEqualsMethod(this JetBrains.ReSharper.Psi.IMethod method) { }
        public static bool IsObjectGetHashCodeMethod(this JetBrains.ReSharper.Psi.IMethod method) { }
        public static bool IsObjectReferenceEqualsMethod(this JetBrains.ReSharper.Psi.IMethod method) { }
        public static bool IsOverridesObjectEquals(this JetBrains.ReSharper.Psi.IMethod method) { }
        public static bool IsOverridesObjectFinalize(this JetBrains.ReSharper.Psi.IMethod method) { }
        public static bool IsOverridesObjectGetHashCode(this JetBrains.ReSharper.Psi.IMethod method) { }
        public static bool IsOverridesObjectMemberwiseClone(this JetBrains.ReSharper.Psi.IMethod method) { }
        public static bool IsOverridesObjectToString(this JetBrains.ReSharper.Psi.IMethod method) { }
        public static bool MatchesBySignature(JetBrains.ReSharper.Psi.ITypeMember newElement, JetBrains.ReSharper.Psi.ITypeMember existingElement) { }
    }
    public class static ModuleDeclaredElementUtil
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CheckResolveResult([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo resolveResult, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Metadata.Utils.AssemblyNameInfo name) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IModuleDeclaredElement CreateModuleElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IModuleDeclaredElement CreateModuleElement(JetBrains.ProjectModel.IModule module) { }
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetReferenceSymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference, bool useReferenceName, bool includeCurrentModule) { }
    }
    public class static NullLiteralUtil
    {
        public static JetBrains.ReSharper.Psi.Tree.IExpression CreateNullLiteral(JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule, JetBrains.ReSharper.Psi.PsiLanguageType language) { }
    }
    public class static ObsoleteUtil
    {
        public static bool IsObsolete(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, out JetBrains.UI.RichText.RichTextBlock description) { }
        public static bool IsReferencingObsoleteEntity([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference, out bool isError, out bool hasMessage, out string message) { }
    }
    public class OverridesUtil
    {
        public static System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.IReference> CompareMaps(System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor, JetBrains.ReSharper.Psi.Resolve.IReference> initial, System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor, JetBrains.ReSharper.Psi.Resolve.IReference> target, JetBrains.ReSharper.Psi.Util.OverridesUtil.IReferencesComparer referencesComparer) { }
        public interface IReferencesComparer
        {
            void ParameterMissing(bool inInitial, int index);
            void ReturnTypeMissing(bool inInitial);
            void TypeMissing(bool inInitial);
            void TypeParameterMissing(bool inInitial, int index);
        }
        public class ReferenceAnchor : System.IEquatable<JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor>
        {
            public bool IsReturnType { get; }
            public bool IsType { get; }
            public static JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor CreateParameterType(JetBrains.ReSharper.Psi.IParametersOwner element, int index) { }
            public static JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor CreateReturnType(JetBrains.ReSharper.Psi.IParametersOwner element) { }
            public static JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor CreateType(JetBrains.ReSharper.Psi.IField element) { }
            public static JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor CreateType(JetBrains.ReSharper.Psi.IEvent element) { }
            public static JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor CreateTypeParameter(JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor typeReferenceAnchor, int index) { }
            public static JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor CreateTypeParameter(JetBrains.ReSharper.Psi.ITypeElement typeElement, int index) { }
            public static JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor CreateTypeParameter(JetBrains.ReSharper.Psi.IMethod method, int index) { }
            public bool Equals(JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor referenceAnchor) { }
            public override bool Equals(object obj) { }
            public override int GetHashCode() { }
            public bool IsParameter(out int index) { }
            public bool IsTypeParameter(out int index) { }
        }
    }
    public class static PathReferenceUtil
    {
        public static readonly System.Text.RegularExpressions.Regex AbsoluteUrlRegex;
        public static readonly System.Uri DefaultUri;
        public static readonly System.Text.RegularExpressions.Regex LimitedUrlRegex;
        public const int MAX_PATH_LENGTH = 1024;
        public static readonly System.Text.RegularExpressions.Regex UrlRegex;
        public static bool CheckPathChars(string name) { }
        public static JetBrains.ReSharper.Psi.Resolve.IPathReference[] CreatePathReferences<TOwner, TToken>([JetBrains.Annotations.NotNullAttribute()] TOwner owner, [JetBrains.Annotations.NotNullAttribute()] TToken token, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IQualifier baseQualifier, [JetBrains.Annotations.NotNullAttribute()] System.Func<TOwner, JetBrains.ReSharper.Psi.Resolve.IQualifier, TToken, JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.Resolve.IPathReference> createFolderReferenceDelegate, [JetBrains.Annotations.NotNullAttribute()] System.Func<TOwner, JetBrains.ReSharper.Psi.Resolve.IQualifier, TToken, JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.Resolve.IPathReference> createFileReferenceDelegate, [JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<TToken, string> getStringValueDelegate, [JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Func<TToken, int> getValueStartOffset)
            where TOwner : JetBrains.ReSharper.Psi.Tree.ITreeNode
            where TToken :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static string DetectUrls(string input, [JetBrains.Annotations.InstantHandleAttribute()] System.Func<string, string> postProcessor, System.Text.RegularExpressions.MatchEvaluator matchEvaluator) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo FixResolveResultByPathMapping([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IPathReference pathReference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo resolveResultWithInfo) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo FixResolveResultByVirtualPaths([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IPathReference pathReference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo resolveResultWithInfo) { }
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetFileReferenceSmartCompletionSymbolTable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IFileReference reference, string prefix, JetBrains.ReSharper.Psi.Resolve.ISymbolTable additionalPathsTable = null) { }
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetFilesSymbolTable(JetBrains.ReSharper.Psi.Resolve.IPathReference pathReference, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Util.FileSystemPath rootDir, JetBrains.ReSharper.Psi.IPsiServices psiServices) { }
        public static string GetLinkFromUrlMatch(System.Text.RegularExpressions.Match match) { }
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetReferenceSymbolTable<TPathReference>([JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.FileSystemPath basePath, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.FileSystemPath rootPath, [JetBrains.Annotations.NotNullAttribute()] TPathReference pathReference, bool useReferenceName, [JetBrains.Annotations.NotNullAttribute()] System.Func<TPathReference, JetBrains.Util.FileSystemPath> getBasePathBeforeMapping, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Util.PathReferenceUtil.CreateLevelUpDeclaredElementFactory createLevelUpElement)
            where TPathReference : JetBrains.ReSharper.Psi.Resolve.IPathReference { }
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTableByPath(JetBrains.Util.FileSystemPath basePath, JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.Util.FileSystemPath levelUpPath = null, JetBrains.Util.FileSystemPath rootPath = null, bool addCurrentDir = False, bool recursive = False, System.Func<JetBrains.ProjectModel.IProjectItem, string> namer = null, System.Func<JetBrains.ProjectModel.IProjectItem, bool> preFilter = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public delegate JetBrains.ReSharper.Psi.Impl.PathDeclaredElement CreateLevelUpDeclaredElementFactory([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IPathReference pathReference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.FileSystemPath basePath, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ProjectModel.IProjectFolder baseProjectFolder, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IPsiServices psiServices);
        public class PathPrefixFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
        {
            public PathPrefixFilter(string prefix) { }
            public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
            public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        }
    }
    public class PersistentDataElementCollector<T> : JetBrains.ReSharper.Psi.RecursiveElementCollector<JetBrains.ReSharper.Psi.Tree.ITreeNode>
        where T :  class
    {
        public PersistentDataElementCollector(JetBrains.Util.Key<T> key) { }
        public JetBrains.Util.Key<T> Key { get; }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class ProperFormattingMethodFinder
    {
        public ProperFormattingMethodFinder(JetBrains.ReSharper.Psi.Caches.ISymbolCache symbolCache) { }
        public JetBrains.ReSharper.Psi.IMethod GetFormattingMethod(JetBrains.ReSharper.Psi.IMethod usedMethod) { }
        public static JetBrains.ReSharper.Psi.Util.ProperFormattingMethodFinder GetInstance(JetBrains.ProjectModel.ISolution solution) { }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class RegionStructureBuilder
    {
        public RegionStructureBuilder(JetBrains.ReSharper.Psi.ILanguageManager languageManager) { }
        public JetBrains.ReSharper.Psi.Util.IRegionStructure BuildRegionStructure(JetBrains.ReSharper.Psi.Tree.ITreeNode node, bool removeTheOnlyEmbracingRegion = True) { }
    }
    public class static RegionStructureExtensions
    {
        public static T AddToStructure<T>(this JetBrains.ReSharper.Psi.Util.IRegionStructure codeStructure, JetBrains.ReSharper.Psi.Tree.ITreeNode parent, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> shouldAddBefore, bool addAfterInsignificantNodes, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode, T> addAfter, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode, T> addBefore, bool saveUsingListPosition)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static T AddToStructureFromBehind<T>(this JetBrains.ReSharper.Psi.Util.IRegionStructure codeStructure, JetBrains.ReSharper.Psi.Tree.ITreeNode parent, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> shouldAddAfter, bool addAfterInsignificantNodes, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode, T> addAfter, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode, T> addBefore, bool saveUsingListPosition)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    }
    public class ReSharperControlConstructData : JetBrains.ReSharper.Psi.Util.ICodeRegionData
    {
        public ReSharperControlConstructData(string id) { }
        public string ID { get; }
        protected bool Equals(JetBrains.ReSharper.Psi.Util.ReSharperControlConstructData other) { }
        public override bool Equals(object obj) { }
        public int GetSignificance() { }
        public override string ToString() { }
    }
    public class static StringConcatenationClrWrapperExtensions
    {
        public static System.Collections.Generic.IEnumerable<System.Collections.Generic.List<JetBrains.ReSharper.Psi.Tree.IExpression>> GetWidestSequencesOfConstantArguments(this JetBrains.ReSharper.Psi.Util.IStringConcatenationClrWrapper stringConcatenationWrapper) { }
    }
    public class static StringConcatenationClrWrapperUtil
    {
        public static JetBrains.ReSharper.Psi.Util.IStringConcatenationClrWrapper CreateStringConcatenation(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public static JetBrains.ReSharper.Psi.Util.IStringConcatenationClrWrapper CreateWidestContainingStringConcatenation(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
    }
    public class static StringLiteralAltererUtil
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer CreateStringLiteralByExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer CreateStringLiteralByValue(string value, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.DocumentModel.DocumentRange> GetDocumentRangesByInnerRangeInExpressionSequence(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IExpression> expressions, JetBrains.Util.TextRange range, bool includeNonLiteralRanges = True) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer TryCreateStringLiteralByExpression(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
    }
    public class static StringLiteralConverter
    {
        public static string EscapeChar(char c) { }
        public static string EscapeToRegular(string value) { }
        public static string EscapeToVerbatim(string value) { }
        public static JetBrains.ReSharper.Psi.Util.StringLiteralConverter.CharSequence GetHexEscapeSequence(string value, int start) { }
        public static JetBrains.ReSharper.Psi.Util.StringLiteralConverter.CharSequence GetUnicodeLargeEscapeSequence(string value, int start) { }
        public static JetBrains.ReSharper.Psi.Util.StringLiteralConverter.CharSequence GetUnicodeSmallEscapeSequence(string value, int start) { }
        public static string UnescapeCharLiteral(string value) { }
        public static string UnescapeLiteral(string value, int start, int end) { }
        public static string UnescapeStringLiteral(string value) { }
        public static string UnescapeVerbatimLiteral(string value, int start, int end) { }
        public struct CharSequence
        {
            public CharSequence(string hex) { }
            public string Hex { get; }
            public char Value { get; }
        }
    }
    [System.ObsoleteAttribute("This class will be made internal. Use TextControlToPsi instead.")]
    public class static TextToPsi
    {
        public static JetBrains.ReSharper.Psi.Tree.IDeclaration GetDeclaration(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.DocumentRange documentOffset) { }
        public static JetBrains.ReSharper.Psi.Tree.IDeclaration GetDeclarationByNameRange(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range) { }
        public static JetBrains.ReSharper.Psi.Tree.IDeclaration GetDeclarationByTreeOffset(JetBrains.ReSharper.Psi.Tree.ITreeNode file, JetBrains.ReSharper.Psi.TreeOffset offset) { }
    }
    public class static TokenUtil
    {
        public static JetBrains.DocumentModel.DocumentRange GetUnquotedDocumentRange([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode tokenNode, params char[] quoteChars) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange GetUnquotedRangeWithin([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode tokenNode) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange GetUnquotedRangeWithin([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode tokenNode, char[] quoteChars) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string GetUnquotedText([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode tokenNode, params char[] quoteChars) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange GetUnquotedTreeTextRange([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode tokenNode, params char[] quoteChars) { }
    }
    public class TreeRange : JetBrains.ReSharper.Psi.ITreeRange, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode>, System.Collections.IEnumerable
    {
        public static readonly JetBrains.ReSharper.Psi.Util.TreeRange Empty;
        public TreeRange(JetBrains.ReSharper.Psi.Tree.ITreeNode first, JetBrains.ReSharper.Psi.Tree.ITreeNode last) { }
        public TreeRange(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode First { get; }
        public bool IsEmpty { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode Last { get; }
        public static JetBrains.ReSharper.Psi.Util.TreeRange Build(JetBrains.ReSharper.Psi.Tree.ITreeNode first, JetBrains.ReSharper.Psi.Tree.ITreeNode last) { }
        public static JetBrains.ReSharper.Psi.Util.TreeRange Build(JetBrains.ReSharper.Psi.Tree.ITreeNode first, JetBrains.ReSharper.Psi.Tree.ITreeNode last, JetBrains.ReSharper.Psi.Util.ITreeRangeBuilder builder) { }
        public static JetBrains.ReSharper.Psi.Util.TreeRange BuildByTextRange(JetBrains.ReSharper.Psi.ITreeRange nodes, JetBrains.ReSharper.Psi.TreeTextRange textRange) { }
        protected static JetBrains.ReSharper.Psi.Util.TreeRange BuildByTextRange(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> nodes, JetBrains.ReSharper.Psi.TreeTextRange textRange) { }
        public static JetBrains.ReSharper.Psi.Util.TreeRange Create<T>(System.Collections.Generic.IList<T> nodes)
            where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static JetBrains.ReSharper.Psi.ITreeRange CreateFromElement(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public System.Collections.Generic.IEnumerator<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetEnumerator() { }
        public static void NodeIterator(JetBrains.ReSharper.Psi.ITreeRange range, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.TreeNodeActionType> predicate) { }
    }
    public class static TreeRangeUtil
    {
        public static bool Contains(JetBrains.ReSharper.Psi.ITreeRange treeRange, JetBrains.ReSharper.Psi.Tree.ITreeNode treeNode) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static T GetContainingNode<T>(JetBrains.ReSharper.Psi.ITreeRange treeRange)
            where T :  class, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static bool IsValid(JetBrains.ReSharper.Psi.ITreeRange treeRange) { }
        public static bool NeedModificationForAddingAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode parent, JetBrains.ReSharper.Psi.ITreeRange range) { }
        public static bool NeedModificationForAddingBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode parent, JetBrains.ReSharper.Psi.ITreeRange range) { }
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode PrepareAnchorForAddingAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode parent, JetBrains.ReSharper.Psi.ITreeRange range) { }
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode PrepareAnchorForAddingBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode parent, JetBrains.ReSharper.Psi.ITreeRange range) { }
    }
    public class TreeTextRangeTree<TKind, TData> : JetBrains.Util.Collections.JetBinaryTree.JetBinaryTree<JetBrains.ReSharper.Psi.TreeTextRange<TKind>, TData>, JetBrains.Util.ICloneable<JetBrains.ReSharper.Psi.Util.TreeTextRangeTree<TKind, TData>>, System.ICloneable
        where TKind : JetBrains.ReSharper.Psi.ITreeTextRangeKind
    
    {
        public TreeTextRangeTree() { }
        protected TreeTextRangeTree(JetBrains.ReSharper.Psi.Util.TreeTextRangeTree<TKind, TData> treeTextRangeTree) { }
        public JetBrains.ReSharper.Psi.Util.TreeTextRangeTree<TKind, TData> Clone() { }
        public System.Collections.Generic.IEnumerable<TData> FindCoveredRanges(JetBrains.ReSharper.Psi.TreeTextRange<TKind> rangeToCompare, bool strict = False) { }
        public System.Collections.Generic.IEnumerable<TData> FindCoveringRanges(JetBrains.ReSharper.Psi.TreeTextRange<TKind> rangeToCompare, bool strict = False) { }
        public System.Collections.Generic.IEnumerable<TData> FindIntersectingRanges(JetBrains.ReSharper.Psi.TreeTextRange<TKind> rangeToCompare, bool strict = False) { }
        public System.Collections.Generic.IEnumerable<TData> FindRangeByOffset(JetBrains.ReSharper.Psi.TreeOffset offset, bool strict = False) { }
    }
    public class static TypeElementUtil
    {
        public static void AddTypeHierarchyDependency(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static bool CanInstantiateWithPublicDefaultConstructor([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static bool ContainsPossibleInfiniteInheritanceGraph(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> EnumerateMembers([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.ITypeElement typeElement, [JetBrains.Annotations.LocalizationRequiredAttribute(false)] string name, bool caseSensitive) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ITypeElement FindReferencedTypeElement(string fullyQualifiedName, string moduleName, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ITypeElement FindReferencedTypeElement(string fullyQualifiedName, string moduleName, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IClass> GetAllBaseClasses(JetBrains.ReSharper.Psi.ITypeElement implementor) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.TypeMemberInstance> GetAllClassMembers([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITypeElement @class, string name = null) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.TypeMemberInstance<TMember>> GetAllClassMembers<TMember>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITypeElement @class, string name = null)
            where TMember :  class, JetBrains.ReSharper.Psi.ITypeMember { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.TypeMemberInstance> GetAllMembers(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.OverridableMemberInstance> GetAllOverridableMembers(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredType> GetAllSuperClasses([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ITypeElement classElement) { }
        public static JetBrains.ReSharper.Psi.IDeclaredType[] GetAllSuperTypes([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IDeclaredType type, JetBrains.ReSharper.Psi.Modules.IPsiModule retargetToModule = null) { }
        public static JetBrains.ReSharper.Psi.IDeclaredType[] GetAllSuperTypes(this JetBrains.ReSharper.Psi.ITypeElement typeElement, JetBrains.ReSharper.Psi.Modules.IPsiModule retargetToModule = null) { }
        public static JetBrains.ReSharper.Psi.IDeclaredType[] GetAllSuperTypesReversed(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static JetBrains.ReSharper.Psi.IDeclaredType[] GetSuperClassesWithoutCircularDependent(this JetBrains.ReSharper.Psi.IDeclaredType classType, JetBrains.ReSharper.Psi.Modules.IPsiModule retargetToModule = null) { }
        public static JetBrains.ReSharper.Psi.IDeclaredType[] GetSuperTypesWithoutCircularDependent([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IDeclaredType type, JetBrains.ReSharper.Psi.Modules.IPsiModule retargetToModule = null) { }
        public static JetBrains.ReSharper.Psi.IDeclaredType[] GetSuperTypesWithoutCircularDependent(this JetBrains.ReSharper.Psi.ITypeElement typeElement, JetBrains.ReSharper.Psi.Modules.IPsiModule retargetToModule = null) { }
        public static JetBrains.ReSharper.Psi.ITypeElement GetTypeElementByClrName(JetBrains.ReSharper.Psi.IClrTypeName clrName, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public static JetBrains.ReSharper.Psi.ITypeElement GetTypeElementFromAssembly(JetBrains.ReSharper.Psi.IClrTypeName clrName, JetBrains.ReSharper.Psi.Modules.IPsiModule module, string assemblyName, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static bool HasMembers(this JetBrains.ReSharper.Psi.ITypeElement typeElement, string name, bool caseSensitive) { }
        public static bool IsAttribute(this JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static bool IsNestedTypeOf(this JetBrains.ReSharper.Psi.ITypeElement type1, JetBrains.ReSharper.Psi.ITypeElement type2) { }
        public static bool IsObjectClass(this JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static bool IsValueTypeClass(this JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static void RemoveTypeHierarchyDependency(JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static T RetargetTo<T>([JetBrains.Annotations.NotNullAttribute()] this T typeElement, JetBrains.ReSharper.Psi.Modules.IPsiModule sourceModule)
            where T :  class, JetBrains.ReSharper.Psi.ITypeElement { }
        public static bool StructFieldHasLayoutProblems(JetBrains.ReSharper.Psi.ITypeMember member) { }
    }
    public class static TypesUtil
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType ChangeAllDynamicToObject(JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredType> GetAllSuperTypes(JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IClass GetClassType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IClass> GetClassTypeInstance([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetDelegateParameterMultitype([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IType targetDelegateType, int parameterIndex, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetDelegateReturnMultitype([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IType targetDelegateType, bool canTransformToExpression, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IDelegate GetDelegateType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IDelegate> GetDelegateTypeInstance([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IDelegate>> GetDelegateTypes([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IDelegate>> GetDelegateTypesThroughExpression([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IDelegate> GetDelegateTypeThroughExpression([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetEnumerableOrArrayElementType(JetBrains.ReSharper.Psi.IType arrayLikeType) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetEnumerableOrEnumeratorElementType(JetBrains.ReSharper.Psi.IType enumerableType) { }
        [JetBrains.Annotations.PureAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> GetEnumerableSubtypeElementType(JetBrains.ReSharper.Psi.IType enumerableSubtype) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IEnum GetEnumType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IEnum> GetEnumTypeInstance([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetEnumUnderlying([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetExpressionUnderlyingType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetGenericEnumerableElementType(JetBrains.ReSharper.Psi.IType arrayLikeType) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetGenericUnderlyingType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetIEnumerableUnderlyingType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IInterface GetInterfaceType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IInterface> GetInterfaceTypeInstance([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetNullableUnderlyingType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ParameterKind>> GetParameterTypesAndKindsFromDelegate([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDelegate @delegate, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetParameterTypesFromDelegate([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IDelegate @delegate, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IStruct GetStructType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IStruct> GetStructTypeInstance([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetTaskUnderlyingType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetTypeArgumentValue(JetBrains.ReSharper.Psi.IType type, int typeParameterIndex) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static T GetTypeElement<T>([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type)
            where T :  class, JetBrains.ReSharper.Psi.ITypeElement { }
        [JetBrains.Annotations.PureAttribute()]
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> GetTypeParameters(JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.ITypeParameter GetTypeParameterType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.ITypeParameter> GetTypeParameterTypeInstance([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsClassType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsDelegateType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsEnumType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsInterfaceType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsPointerType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsPredefinedTypeFromAssembly(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.IClrTypeName clrName, string assemblyName) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsPredefinedTypeFromAssembly(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.IClrTypeName clrName, System.Func<JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly, bool> assemblyPredicate) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsReferenceType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsStructType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsSubtypeOf([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType baseType) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsTrueValueType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsTypeBoxable([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsTypeParameterType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsUninferedType(this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsValueType([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static T MostEncompassedType<T>([JetBrains.Annotations.NotNullAttribute()] this System.Collections.Generic.ICollection<T> types, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeConversionRule rule)
            where T : JetBrains.ReSharper.Psi.IType { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType MostEncompassingType([JetBrains.Annotations.NotNullAttribute()] this System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> types, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType RecursiveTypeConverter(this JetBrains.ReSharper.Psi.IType type, System.Func<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.IType> converter) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType RetargetType(this JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.Modules.IPsiModule sourceModule) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType Type([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IDeclaredElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType Type([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType Type(this JetBrains.ReSharper.Psi.IParameter parameter, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType Type(this JetBrains.ReSharper.Psi.IParameter parameter, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.IType Unlift([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type) { }
    }
    public class UnrecognizedEscapeSequenceException : System.Exception
    {
        protected UnrecognizedEscapeSequenceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public UnrecognizedEscapeSequenceException(string message, int position, int length) { }
        public int Length { get; }
        public int Position { get; }
    }
    public class static XmlDocPresenterUtil
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle LinkedElementPresentationStyle;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle LinkedElementWithContainerPresentationStyle;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle MemberPresentationStyle;
        public static string EscapeHtmlString(string s) { }
        public static void LayoutXml(System.Xml.XmlNode xml, System.IO.TextWriter writer, int indexInParent = 0) { }
        public static string PrepareText(string text, bool processLinks = False) { }
    }
    public sealed class XmlDocRichTextPresenter
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.RichText.RichTextBlock Run(System.Xml.XmlNode node, JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool includeHeader, JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
    }
    public class static XMLDocUtil
    {
        public static System.Xml.XmlNode BuildEmptyNode(JetBrains.ReSharper.Psi.IXmlDocIdOwner element) { }
        public static System.Xml.XmlNode ExtractParameterSummary(System.Xml.XmlNode node, string name) { }
        public static System.Xml.XmlNode ExtractSummary(System.Xml.XmlNode node) { }
        public static System.Xml.XmlNode ExtractTypeParameterSummary(System.Xml.XmlNode node, string name) { }
        public static string GetNamespaceXmlDocId(JetBrains.ReSharper.Psi.INamespace ns) { }
        public static string GetTypeElementXmlDocId(JetBrains.ReSharper.Psi.ITypeElement element) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string GetTypeMemberXmlDocId(JetBrains.ReSharper.Psi.ITypeMember element, string shortName) { }
        public static string GetTypeString(JetBrains.ReSharper.Psi.IType type) { }
        [JetBrains.Annotations.ContractAnnotationAttribute("=>true,node:notnull;=>false")]
        public static bool Load(System.Text.StringBuilder text, out System.Xml.XmlNode node) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredElement ResolveId(JetBrains.ReSharper.Psi.IPsiServices psiServices, [JetBrains.Annotations.NotNullAttribute()] string id, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool caseSensitive, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static void SubstituteHeader(System.Xml.XmlNode node, JetBrains.ReSharper.Psi.IXmlDocIdOwner element) { }
        public abstract class XmlDocParser
        {
            protected XmlDocParser(JetBrains.ReSharper.Psi.Parsing.ILexer lexer, JetBrains.ReSharper.Psi.Parsing.XmlTokenTypes tokenTypes) { }
            public void Run() { }
            protected abstract void VisitCRef(string tagName);
            protected abstract void VisitParamReference(string tagName);
            protected abstract void VisitTypeParamReference(string tagName);
        }
    }
}
namespace JetBrains.ReSharper.Psi.Util.Caches
{
    
    public abstract class AbstractPersistendIdIndex<TData>
    
    {
        protected AbstractPersistendIdIndex() { }
        protected abstract System.Collections.Generic.IEnumerable<TData> GetAllFiles();
        [JetBrains.Annotations.CanBeNullAttribute()]
        public TData GetFileByPersistentIdIndex(int indx) { }
        public int GetPersistenIdIndex([JetBrains.Annotations.NotNullAttribute()] TData sourceFile) { }
        protected abstract string GetPersistentID(TData data);
        protected void Initialize() { }
        protected abstract bool IsValid(TData data);
        protected void Load(System.IO.BinaryReader reader) { }
        protected void Save(System.IO.BinaryWriter writer) { }
        public void Update() { }
    }
    public abstract class AbstractPersistentCache<TKey, TData> : System.IDisposable
    
    
    {
        protected AbstractPersistentCache() { }
        protected abstract JetBrains.Util.FileSystemPath CacheDirectory { get; }
        protected abstract bool CheckTotalConsistency { get; }
        protected virtual int FileSizeMax { get; }
        protected virtual int FileSizeMin { get; }
        protected abstract int FormatVersion { get; }
        protected abstract string LoadSaveProgressText { get; }
        public bool LoadStarted { get; }
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TData>> StoredData { get; }
        public void AddDataToSave(TKey key, TData data) { }
        public bool CheckCanLoad() { }
        protected abstract void DataLoaded(TKey key, TData data, bool keyValid, out System.Action waitToContinue);
        protected abstract System.IDisposable DataLock();
        public virtual void Dispose() { }
        public JetBrains.ReSharper.Psi.Util.Caches.FetchDataResult FetchDataForKey(TKey key, out TData data) { }
        protected bool HasChangesToSave() { }
        protected abstract bool IsKeyValid(TKey key);
        public JetBrains.ReSharper.Psi.Util.Caches.LoadResult Load(JetBrains.Application.Progress.IProgressIndicator progress) { }
        public void MarkDataToDelete(TKey key) { }
        protected abstract TData ReadData(System.IO.BinaryReader reader, TKey key);
        [JetBrains.Annotations.ContractAnnotationAttribute("=>true, key:notnull; =>false, key:null")]
        protected abstract bool ReadKey(System.IO.BinaryReader reader, out TKey key);
        public virtual bool ResetCacheDirectory() { }
        public void Save(JetBrains.Application.Progress.IProgressIndicator progress, bool releaseDiskCache) { }
        public void Save(JetBrains.Application.Progress.IProgressIndicator progress, JetBrains.Application.CheckForInterrupt checkForInterrupt, bool releaseDiskCache) { }
        protected abstract void WriteData(System.IO.BinaryWriter writer, TKey key, TData data);
        protected abstract void WriteKey(System.IO.BinaryWriter writer, TKey key);
    }
    public enum FetchDataResult
    {
        OK = 0,
        NO_DATA = 1,
        CACHE_CORRUPT = 2,
    }
    public enum LoadResult
    {
        OK = 0,
        CACHE_INVALID_CLEARED = 1,
        CACHE_INVALID_IO_PROBLEM = 2,
    }
    public class SimplePersistentCache<TData> : JetBrains.ReSharper.Psi.Util.Caches.AbstractPersistentCache<JetBrains.ReSharper.Psi.IPsiSourceFile, TData>
    
    {
        public SimplePersistentCache(JetBrains.Application.IShellLocks locks, int formatVersion, string cacheDirectoryName, JetBrains.ReSharper.Psi.IPsiConfiguration psiConfiguration) { }
        protected virtual JetBrains.Util.FileSystemPath CacheDirectory { get; }
        protected virtual bool CheckTotalConsistency { get; }
        protected virtual int FormatVersion { get; }
        protected override string LoadSaveProgressText { get; }
        protected virtual void DataLoaded(JetBrains.ReSharper.Psi.IPsiSourceFile key, TData data, bool keyValid, out System.Action waitToContinue) { }
        protected virtual System.IDisposable DataLock() { }
        protected virtual bool IsKeyValid(JetBrains.ReSharper.Psi.IPsiSourceFile key) { }
        public JetBrains.ReSharper.Psi.Util.Caches.LoadResult Load(JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.ReSharper.Psi.Caches.IPersistentIndexManager persistentIdIndex, System.Func<JetBrains.ReSharper.Psi.IPsiSourceFile, System.IO.BinaryReader, TData> readData, System.Action<JetBrains.ReSharper.Psi.IPsiSourceFile, TData> dataLoaded) { }
        protected virtual TData ReadData(System.IO.BinaryReader reader, JetBrains.ReSharper.Psi.IPsiSourceFile key) { }
        protected virtual bool ReadKey(System.IO.BinaryReader reader, out JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public void Save(JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.ReSharper.Psi.Caches.IPersistentIndexManager persistentIdIndex, System.Action<System.IO.BinaryWriter, JetBrains.ReSharper.Psi.IPsiSourceFile, TData> saveData) { }
        protected virtual void WriteData(System.IO.BinaryWriter writer, JetBrains.ReSharper.Psi.IPsiSourceFile key, TData data) { }
        protected virtual void WriteKey(System.IO.BinaryWriter writer, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
}
namespace JetBrains.ReSharper.Psi.Web.WinRT.Json
{
    
    public class InjectedRangeTranslator : JetBrains.ReSharper.Psi.Files.ISecondaryRangeTranslator
    {
        public InjectedRangeTranslator(JetBrains.ReSharper.Psi.Tree.IFile originalFile, JetBrains.ReSharper.Psi.Tree.IFile generatedFile, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> originalParentPredicate, System.Predicate<JetBrains.ReSharper.Psi.Tree.ITreeNode> generatedParentPredicate) { }
        public JetBrains.ReSharper.Psi.Tree.IFile GeneratedFile { get; }
        public JetBrains.ReSharper.Psi.Tree.IFile OriginalFile { get; }
        public void AddOrReplaceSection(JetBrains.ReSharper.Psi.Tree.ITreeNode original, JetBrains.ReSharper.Psi.Tree.ITreeNode generated, params JetBrains.ReSharper.Psi.Impl.Shared.RangesPair[] pairs) { }
        public string Dump(JetBrains.ReSharper.Psi.Tree.IFile generatedFile) { }
        public JetBrains.ReSharper.Psi.TreeTextRange GeneratedToOriginal(JetBrains.ReSharper.Psi.TreeTextRange generatedRange) { }
        public JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.TreeTextRange> GetCoveringRange(JetBrains.ReSharper.Psi.TreeTextRange originalRange) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TreeTextRange> GetIntersectedOriginalRanges(JetBrains.ReSharper.Psi.TreeTextRange generatedRange) { }
        public JetBrains.ReSharper.Psi.TreeTextRange OriginalToGenerated(JetBrains.ReSharper.Psi.TreeTextRange originalRange) { }
        public void RemoveSectionByGenerated(JetBrains.ReSharper.Psi.Tree.ITreeNode generated) { }
        public void RemoveSectionByOriginal(JetBrains.ReSharper.Psi.Tree.ITreeNode original) { }
    }
}
namespace JetBrains.ReSharper.Psi.XmlIndex
{
    
    public interface IXmlIndexable
    {
        void UpdateIndex();
    }
    public class static MemberTagIndexer
    {
        public static JetBrains.Util.DataStructures.ChunkList<JetBrains.ReSharper.Psi.XmlIndex.XmlIndexableBase.IndexEntry> ReIndex(JetBrains.ReSharper.Psi.XmlIndex.XmlIndexingLexer lexer, System.Action<JetBrains.ReSharper.Psi.Parsing.TokenNodeType, string> customProcessor = null) { }
    }
    public abstract class XmlIndexableBase : JetBrains.ReSharper.Psi.XmlIndex.IXmlIndexable
    {
        protected XmlIndexableBase([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Util.FileSystemPath fileName, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Util.FileSystemPath cacheDirectory, bool persistCaches) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected JetBrains.Util.FileSystemPath FileName { get; }
        protected virtual int FormatVersion { get; }
        protected System.Collections.Generic.IEnumerable<System.Xml.XmlElement> EnumerateXml([JetBrains.Annotations.NotNullAttribute()] string nodeName, string rootNodeName) { }
        protected virtual JetBrains.ReSharper.Psi.XmlIndex.XmlIndexableBase.OperationResult Load(System.IO.BinaryReader reader) { }
        protected virtual void OnIndexUpdated() { }
        protected abstract JetBrains.Util.DataStructures.ChunkList<JetBrains.ReSharper.Psi.XmlIndex.XmlIndexableBase.IndexEntry> ReIndex(JetBrains.ReSharper.Psi.XmlIndex.XmlIndexingLexer lexer);
        protected virtual void Save(System.IO.BinaryWriter writer) { }
        public void UpdateIndex() { }
        public class IgnoreFileException : System.Exception { }
        public struct IndexEntry
        {
            public readonly int Hash;
            public readonly JetBrains.Util.TextRange Range;
            public IndexEntry(int hash, JetBrains.Util.TextRange range) { }
        }
        public enum OperationResult
        {
            Success = 0,
            Fail = 1,
            Ignore = 2,
        }
    }
    public class XmlIndexingLexer : JetBrains.ReSharper.Psi.Parsing.ILexer, System.IDisposable
    {
        public XmlIndexingLexer(JetBrains.Util.FileSystemPath fileName, JetBrains.ReSharper.Psi.Parsing.XmlTokenTypes tokenTypes) { }
        public JetBrains.Text.IBuffer Buffer { get; }
        public object CurrentPosition { get; set; }
        public System.Text.Encoding Encoding { get; }
        public int EndOffsetInBytes { get; }
        public bool HasLexer { get; }
        public int StartOffsetInBytes { get; }
        public int TokenEnd { get; }
        public int TokenStart { get; }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType TokenType { get; }
        public JetBrains.ReSharper.Psi.Parsing.XmlTokenTypes XmlTokenType { get; }
        public void Advance() { }
        public void Dispose() { }
        public void Start() { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class XmlIndexThread
    {
        public XmlIndexThread(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ReSharper.Psi.Caches.IPsiCaches psiCaches) { }
        public void Enqueue(JetBrains.ReSharper.Psi.XmlIndex.IXmlIndexable index) { }
    }
}