[assembly: JetBrains.ActionManagement.ActionsXmlAttribute("JetBrains.UI.resources.Actions.xml")]
[assembly: JetBrains.Application.Install.InstallFileAttribute("XmlRpcLic", JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.InstallDir, "", JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot2.ReferencesDirectories, "CookComputing.XmlRpcV2.txt")]
[assembly: JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute(IconNames=new string[] {
        "ConnectionSettings",
        "Options",
        "CopySettingsLarge",
        "ImportLayer",
        "ImportExportLayer",
        "ResetLayerLarge",
        "EditLayer1",
        "ResetLayer",
        "CopyBetweenLayers",
        "SettingsLayersLarge",
        "Updates",
        "ExportLayer",
        "ExportLayerLarge",
        "ImportExportLayer3",
        "MountLayer",
        "LayerThisComputer",
        "Plugins",
        "ImportLayerLarge",
        "ExportLayer2",
        "ImportLayer4",
        "EditLayer",
        "CopySettings",
        "ExtensionManager"}, IconPackResourceIdentification="JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
    "ns.Options.Generated.Xaml")]
[assembly: JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute(IconNames=new string[] {
        "Placeholder",
        "InvalidIcon"}, IconPackResourceIdentification="JetBrains.Platform.ReSharper.UI;component/resources/Special.ThemedIcons/ThemedIco" +
    "ns.Special.Generated.Xaml")]
[assembly: JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute(IconNames=new string[] {
        "Edit",
        "Down",
        "Right",
        "Document",
        "ErrorLarge",
        "Filter",
        "Create",
        "Pin",
        "Components",
        "ExpandAll",
        "Left",
        "ExpandableMenuItemTailGlyph",
        "Forward",
        "Appearance",
        "Warning",
        "ErrorOff",
        "Copy16x16",
        "Up",
        "Paste16x16",
        "Remove",
        "Behaivior",
        "Error",
        "ErrorOn",
        "CollapseAll",
        "Expand",
        "Hourglass",
        "Lock",
        "Refresh",
        "ColorSelection16x16",
        "Edit0",
        "ErrorRead",
        "Warning5",
        "Question",
        "Success",
        "Duplicate",
        "Close",
        "MenuItemCheck",
        "Delete",
        "Backward",
        "QuickSearch",
        "Bulb",
        "DropDown"}, IconPackResourceIdentification="JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
    ".Common.Generated.Xaml")]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:schemas-jetbrains-com:jetbrains-ui-wpf-converters", "JetBrains.UI.Wpf.Converters")]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:shemas-jetbrains-com:ui-application-icons-options", "JetBrains.UI.Resources")]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:schemas-jetbrains-com:jetbrains-ui-theming", "JetBrains.UI.Components.Theming")]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:shemas-jetbrains-com:ui-application-icons-common", "JetBrains.UI.Resources")]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:schemas-jetbrains-com:jetbrains-ui-resources", "JetBrains.UI.Resources")]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:shemas-jetbrains-com:ui-application-icons-special", "JetBrains.UI.Resources")]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:schemas-jetbrains-com:jetbrains-ui-extensions", "JetBrains.UI.Extensions")]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:schemas-jetbrains-com:jetbrains-ui-controls", "JetBrains.UI.Controls")]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:schemas-jetbrains-com:jetbrains-ui-avalon", "JetBrains.UI.Avalon")]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:schemas-jetbrains-com:jetbrains-ui-avalon", "JetBrains.UI.Icons")]
[assembly: System.Windows.Markup.XmlnsPrefixAttribute("urn:schemas-jetbrains-com:jetbrains-ui-avalon", "jui")]
[assembly: System.Windows.ThemeInfoAttribute(System.Windows.ResourceDictionaryLocation.None, System.Windows.ResourceDictionaryLocation.SourceAssembly)]

namespace JetBrains.ActionManagement
{
    
    public enum ActionBarItemDisplayStyle
    {
        Text = 0,
        Image = 1,
        ImageAndText = 2,
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class ActionBarManager : JetBrains.ActionManagement.IActionBarManager
    {
        public ActionBarManager(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ActionManagement.ActionManager actionManager, JetBrains.Threading.IThreading threading, JetBrains.ActionManagement.IShortcutManager shortcutManager, JetBrains.UI.Icons.IThemedIconManager themedIconManager, JetBrains.UI.Components.Theming.IColorThemeManager themeManager, JetBrains.UI.CommonControls.Fonts.FontsManager fontsManager, JetBrains.UI.Application.IUIApplication environment) { }
        public JetBrains.ActionManagement.IActionManager ActionManager { get; }
        public JetBrains.ActionManagement.IShortcutManager ShortcutManager { get; }
        public JetBrains.UI.Icons.IThemedIconManager ThemedIconManager { get; }
        public JetBrains.Threading.IThreading Threading { get; }
        public void AutoUpdateActionBar(JetBrains.ActionManagement.IActionBar actionBar) { }
        public void DestroyActionBar(JetBrains.ActionManagement.IActionBar actionBar) { }
        public void RegisterActionBar(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ActionManagement.IActionBar actionBar, bool autoUpdate) { }
    }
    public abstract class ActionBase : JetBrains.ActionManagement.IActionBase { }
    public class ActionCollection : JetBrains.ActionManagement.IActionCollection
    {
        public ActionCollection() { }
        public System.Collections.Generic.IList<JetBrains.ActionManagement.IActionBase> Actions { get; }
        public int Count { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ActionManagement.IActionBase this[int i] { get; set; }
        public JetBrains.ActionManagement.IActionBase this[string id] { get; }
        public event JetBrains.ActionManagement.ActionsHandler ActionAdded;
        public event JetBrains.ActionManagement.ActionsHandler ActionRemoved;
        public void AddAction(JetBrains.ActionManagement.IActionBase action) { }
        public bool Contains(JetBrains.ActionManagement.IActionBase action) { }
        public int FindAction(string id) { }
        public int FindAction(JetBrains.ActionManagement.IActionBase action) { }
        public bool InsertAction(int pos, JetBrains.ActionManagement.IActionBase action) { }
        public void RemoveAction(string id) { }
        public void RemoveAction(JetBrains.ActionManagement.IActionBase action) { }
        public System.Xml.XmlElement WriteToXml(System.Xml.XmlDocument document) { }
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.ActionManagement.IActionHandler))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=false)]
    public class ActionHandlerAttribute : JetBrains.Application.Parts.PartAttribute
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly string[] ActionIds;
        public ActionHandlerAttribute() { }
        public ActionHandlerAttribute([JetBrains.Annotations.NotNullAttribute()] params string[] ids) { }
    }
    public abstract class ActionManager : JetBrains.ActionManagement.IActionCollection, JetBrains.ActionManagement.IActionManager, JetBrains.ActionManagement.IActionManagerImpl
    {
        protected readonly JetBrains.DataFlow.Lifetime myLifetime;
        protected readonly JetBrains.Util.OneToSetMap<string, string> myMapMergedToContainer;
        protected ActionManager([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.DataContext.DataContexts dataContexts, JetBrains.Application.IShellLocks shellLocks, JetBrains.Application.ActivityTrackingNew.IActivityTracking activityTracking) { }
        public virtual JetBrains.Application.DataContext.DataContexts DataContexts { get; }
        public event JetBrains.ActionManagement.ActionsHandler ActionAdded;
        public event JetBrains.ActionManagement.ActionsHandler ActionRemoved;
        protected virtual void CoreExecuteAction([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IExecutableAction action, JetBrains.Application.DataContext.IDataContext context) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public virtual JetBrains.ActionManagement.IExecutableAction CreateAction([JetBrains.Annotations.NotNullAttribute()] string actionId, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.ActionPresentation defaultPresentation, [JetBrains.Annotations.CanBeNullAttribute()] string overridenActionID, [JetBrains.Annotations.CanBeNullAttribute()] System.Xml.XmlElement actionElement, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ActionManagement.ActionsXmlInfo actionsxmlinfo) { }
        public virtual JetBrains.ActionManagement.IExecutableAction CreateAction(string actionId, JetBrains.ActionManagement.ActionPresentation defaultPresentation) { }
        public virtual JetBrains.ActionManagement.IActionGroup CreateActionGroup(string actionId, JetBrains.ActionManagement.ActionPresentation defaultPresentation, bool isShared, bool updatesActionsOnUpdate, string overridenActionId) { }
        public virtual JetBrains.ActionManagement.IActionWithGroup CreateActionWithGroup(string actionId, JetBrains.ActionManagement.ActionPresentation defaultPresentation, string overridenActionId) { }
        public virtual JetBrains.ActionManagement.ISeparator CreateSeparator() { }
        public void Dump(System.IO.TextWriter writer) { }
        public void EmbedActionGroup(JetBrains.ActionManagement.IActionGroup groupToEmbed, JetBrains.ActionManagement.IActionGroup targetGroup) { }
        public virtual bool ExecuteActionIfAvailable([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IExecutableAction action, JetBrains.Application.DataContext.IDataContext dataContextOverride = null) { }
        public virtual void ExecuteActionUnsafe(JetBrains.ActionManagement.IExecutableAction action, JetBrains.Application.DataContext.IDataContext dataContextOverride = null) { }
        public virtual bool ExecuteShortcut(System.Windows.Forms.Keys shortcut, bool bIncludeHostActions) { }
        public virtual JetBrains.ActionManagement.IActionGroup GetActionGroup(string actionId) { }
        public virtual int GetActionIndex(JetBrains.ActionManagement.IActionGroup actionGroup, JetBrains.ActionManagement.IActionBase action) { }
        public System.Collections.Generic.IList<JetBrains.ActionManagement.IActionBase> GetAllActions() { }
        public virtual JetBrains.ActionManagement.IExecutableAction GetExecutableAction(string actionId) { }
        public virtual string GetLocationInMainMenu(JetBrains.ActionManagement.IExecutableAction action) { }
        public virtual JetBrains.ActionManagement.IUpdatableAction GetUpdatableAction([JetBrains.Annotations.NotNullAttribute()] string actionId) { }
        public virtual bool IsActionComboBox(string actionID) { }
        protected virtual void OnActionPresentationChanged([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IUpdatableAction action, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ActionManagement.ActionPresentation presOld, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ActionManagement.ActionPresentation presNew) { }
        public virtual void RemoveAction(string actionId) { }
        public virtual void RemoveAction(JetBrains.ActionManagement.IUpdatableAction action) { }
        public void RemoveAllActions() { }
        public virtual JetBrains.ActionManagement.IActionBase TryGetAction([JetBrains.Annotations.NotNullAttribute()] string actionId) { }
        public virtual bool UpdateAction([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IUpdatableAction action, JetBrains.Application.DataContext.IDataContext dataContext = null) { }
    }
    public class static ActionManagerEx
    {
        public static void ExecuteAction([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionManager actionman, [JetBrains.Annotations.NotNullAttribute()] string actionId, JetBrains.Application.DataContext.IDataContext dataContextOverride = null) { }
        public static bool ExecuteActionIfAvailable([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionManager actionman, [JetBrains.Annotations.NotNullAttribute()] string actionId) { }
        public static void ExecuteActionUnsafe([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionManager actionman, [JetBrains.Annotations.NotNullAttribute()] string actionId) { }
        public static bool UpdateAction([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionManager actionman, [JetBrains.Annotations.NotNullAttribute()] string actionId) { }
    }
    public class static ActionManagerUIEx
    {
        public static void ExecuteAction<TActionHandler>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionManager actionman, JetBrains.Application.DataContext.IDataContext dataContextOverride = null) { }
        public static void ExecuteAction<TActionHandler>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionManager actionman, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, JetBrains.Application.DataContext.DataContexts, JetBrains.Application.DataContext.IDataContext> FCreateDataContext) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ActionManagement.IExecutableAction GetExecutableAction<TActionHandler>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionManager actionman) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Threading.GuardAttribute(JetBrains.Threading.Rgc.Guarded)]
        public static string GetHowToExecuteAction([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionManager actionMan, [JetBrains.Annotations.NotNullAttribute()] string actionID, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IShortcutManager shortcutManager) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Threading.GuardAttribute(JetBrains.Threading.Rgc.Guarded)]
        public static string GetHowToExecuteAction([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionManager actionMan, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IShortcutManager shortcutManager, [JetBrains.Annotations.NotNullAttribute()] System.Type typeActionHandler) { }
    }
    public class ActionPresentation
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.ActionManagement.ActionPresentation Empty;
        public ActionPresentation() { }
        public ActionPresentation([JetBrains.Annotations.CanBeNullAttribute()] string text) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public string Description { get; set; }
        public JetBrains.ActionManagement.ActionPresentation.DisplayStyles DisplayStyle { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public string Text { get; set; }
        public bool Visible { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public virtual JetBrains.ActionManagement.ActionPresentation Clone() { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.ActionManagement.ActionPresentation CopyTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.ActionPresentation presentation) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Icons.IconId GetImage() { }
        protected static int GetObjectHashCode([JetBrains.Annotations.CanBeNullAttribute()] object obj) { }
        public bool HasLoadedImage() { }
        public JetBrains.ActionManagement.ActionPresentation SetImage([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Icons.IconId image) { }
        [System.FlagsAttribute()]
        public enum DisplayStyles
        {
            ShowTextAlways = 1,
        }
    }
    public class ActionsAssembly
    {
        public readonly string ActionsXml;
        public readonly JetBrains.Metadata.Utils.AssemblyNameInfo AssemblyNameInfo;
        public ActionsAssembly(JetBrains.Metadata.Utils.AssemblyNameInfo assemblyNameInfo, string actionsXmlResourceName) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public delegate void ActionsHandler(JetBrains.ActionManagement.IActionBase[] oldActions, JetBrains.ActionManagement.IActionBase action);
    [System.ComponentModel.TypeConverterAttribute("JetBrains.ActionManagement.ActionShortcutConverter")]
    public abstract class ActionShortcut
    {
        public abstract JetBrains.ActionManagement.KeyboardShortcut[] KeyboardShortcuts { get; }
        public virtual string ToString() { }
    }
    [JetBrains.Annotations.UsedImplicitlyAttribute()]
    public class ActionShortcutConverter : System.ComponentModel.TypeConverter
    {
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly | System.AttributeTargets.All, AllowMultiple=true)]
    public class ActionsXmlAttribute : JetBrains.Application.Parts.PartAttribute
    {
        public ActionsXmlAttribute(string xmlResourceName) { }
        public string XmlResourceName { get; }
    }
    public class ActionsXmlInfo : JetBrains.Util.DependentEntitiesSortUtil.Entity
    {
        public readonly JetBrains.ActionManagement.ActionsAssembly ActionsAssembly;
        public readonly System.Collections.Generic.List<System.Xml.XmlElement> InsertElements;
        public readonly bool IsProduct;
        public const string PREFIX = "pr";
        public readonly System.Xml.XmlDocument XmlDocument;
        public readonly System.Xml.XmlNamespaceManager XmlNamespaceManager;
        public ActionsXmlInfo(JetBrains.ActionManagement.ActionsAssembly actionsAssembly, System.Xml.XmlDocument xmlDocument, JetBrains.Application.IApplicationDescriptor descriptor) { }
        public void AddExceptionData(System.Exception ex) { }
        public static string Qualify(string elementName) { }
        public override string ToString() { }
    }
    public class CheckedActionPresentation : JetBrains.ActionManagement.ActionPresentation
    {
        public CheckedActionPresentation(string text) { }
        public bool Checked { get; set; }
        public bool RadioCheck { get; set; }
        public override JetBrains.ActionManagement.ActionPresentation Clone() { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.ActionManagement.CheckedActionPresentation CopyTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.CheckedActionPresentation presentation) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class ComboBoxActionPresentation : JetBrains.ActionManagement.ActionPresentation
    {
        public ComboBoxActionPresentation() { }
        public ComboBoxActionPresentation(string text) { }
        public string[] ComboBoxItems { get; set; }
        public string CurrentItem { get; set; }
        public override JetBrains.ActionManagement.ActionPresentation Clone() { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.ActionManagement.ComboBoxActionPresentation CopyTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.ComboBoxActionPresentation presentation) { }
    }
    public abstract class ControlActionHandler : JetBrains.ActionManagement.IActionHandler
    {
        protected System.Windows.Forms.Control myControl;
        public ControlActionHandler([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control) { }
        protected abstract void DoExecute(JetBrains.Application.DataContext.IDataContext context);
        public virtual void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public virtual bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    public class DelegateActionHandler : JetBrains.ActionManagement.IActionHandler
    {
        public DelegateActionHandler([JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.Application.DataContext.IDataContext, JetBrains.ActionManagement.ActionPresentation, JetBrains.ActionManagement.DelegateUpdate, bool> FUpdate, [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.Application.DataContext.IDataContext, JetBrains.ActionManagement.DelegateExecute> FExecute) { }
    }
    public delegate void DelegateExecute();
    public delegate bool DelegateUpdate();
    public class DoubleShortcut : JetBrains.ActionManagement.ActionShortcut
    {
        public DoubleShortcut(JetBrains.ActionManagement.KeyboardShortcut firstShortcut, JetBrains.ActionManagement.KeyboardShortcut secondShortcut) { }
        public JetBrains.ActionManagement.KeyboardShortcut FirstShortcut { get; }
        public override JetBrains.ActionManagement.KeyboardShortcut[] KeyboardShortcuts { get; }
        public JetBrains.ActionManagement.KeyboardShortcut SecondShortcut { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public abstract class EscapeActionHandlerBase : JetBrains.ActionManagement.OneOfaListActionHandler
    {
        public const string ACTION_ID = "Escape";
        protected EscapeActionHandlerBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionManager actionManager) { }
        public JetBrains.ActionManagement.IExecutableAction Action { get; }
        public override string ActionId { get; }
    }
    [JetBrains.Application.DataContext.ExportFindDataRulesAttribute()]
    public class FindWinFormsDataRules : JetBrains.Application.DataContext.IFindDataRules { }
    public delegate void GroupContentsChangedHandler(JetBrains.ActionManagement.IActionGroup group, JetBrains.ActionManagement.IActionBase[] oldContents, JetBrains.ActionManagement.IActionBase[] addedActions, JetBrains.ActionManagement.IActionBase[] removedActions);
    public sealed class HandlersList
    {
        public HandlersList(string id) { }
        public int Count { get; }
        public void AddHandler(JetBrains.ActionManagement.IActionHandler handler) { }
        public JetBrains.ActionManagement.IActionHandler GetHandler(int i) { }
        public bool IsRemoved(JetBrains.ActionManagement.IActionHandler handler) { }
        public void Lock() { }
        public void Release() { }
        public void RemoveHandler(JetBrains.ActionManagement.IActionHandler handler) { }
        public class Cookie : System.IDisposable
        {
            public Cookie(JetBrains.ActionManagement.HandlersList handlersList) { }
            public void Dispose() { }
        }
    }
    public interface IActionBar : JetBrains.ActionManagement.IActionItemParent
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ActionManagement.IActionGroup ActionGroup { get; }
        JetBrains.UI.CrossFramework.EitherControl Control { get; }
        JetBrains.ActionManagement.IActionGroup OverflowActionGroup { get; set; }
        bool Visible { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.Application.DataContext.IDataContext CreateDataContext(JetBrains.DataFlow.Lifetime lifetime);
        int GetActionIndex(string actionID);
        JetBrains.ActionManagement.ICustomStripComboBox InsertComboBox(int index);
        JetBrains.ActionManagement.ICustomStripLabel InsertLabel(int index, string title, System.Drawing.Image image);
        JetBrains.ActionManagement.ICustomStripProgressBar InsertProgressBar(int index);
        JetBrains.ActionManagement.ICustomStripSeparator InsertSplitter(int index);
        void RemoveCustomControl(JetBrains.ActionManagement.ICustomStripItem customStripItem);
        void Update([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.DataContext.IDataContext context);
    }
    public interface IActionBarItem
    {
        JetBrains.ActionManagement.IActionBase Action { get; }
        [System.ObsoleteAttribute("Set ActionPresentation::DisplayStyle in action updater, or better (when implement" +
            "ed) define this in Actions.XML.")]
        System.Nullable<JetBrains.ActionManagement.ActionBarItemDisplayStyle> PreferredDisplayStyle { get; set; }
        void Update(JetBrains.Application.DataContext.IDataContext context);
    }
    public interface IActionBarManager
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ActionManagement.IActionManager ActionManager { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ActionManagement.IShortcutManager ShortcutManager { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.Icons.IThemedIconManager ThemedIconManager { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.Threading.IThreading Threading { get; }
        void AutoUpdateActionBar([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionBar actionBar);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ActionManagement.IActionBar CreateActionBar([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionGroup actionGroup, bool autoUpdate, [JetBrains.Annotations.NotNullAttribute()] System.Func<System.Collections.Generic.IEnumerable<JetBrains.Application.DataContext.IDataRule>> FGetDataRules);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ActionManagement.IActionContextMenu CreateActionContextMenu([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionGroup actionGroup, [JetBrains.Annotations.NotNullAttribute()] System.Func<System.Collections.Generic.IEnumerable<JetBrains.Application.DataContext.IDataRule>> FGetDataRules);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ActionManagement.IActionMenu CreateActionMenu([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionGroup actionGroup, [JetBrains.Annotations.NotNullAttribute()] System.Func<System.Collections.Generic.IEnumerable<JetBrains.Application.DataContext.IDataRule>> FGetDataRules);
        void DestroyActionBar([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionBar actionBar);
        void DestroyActionBars([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionGroup actiongroup);
        void RegisterActionBar([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionBar actionBar, bool autoUpdate);
    }
    public class static IActionBarManagerAvalonEx
    {
        public static void AttachPopupMenuToAvalonElement([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionBarManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.FrameworkElement element, [JetBrains.Annotations.NotNullAttribute()] string sActionGroupId, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.UIElement CreateActionBarForAvalonControl([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionBarManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] string sActionGroupId, [JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement contextparent) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.UIElement CreateActionBarForAvalonControl_AutomaticScoping([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionBarManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] string sActionGroupId) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.UIElement CreateActionMenuForAvalonControl_AutomaticScoping([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionBarManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] string sActionGroupId) { }
        public static void ShowPopupMenuInAvalonElement([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionBarManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, [JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement element, [JetBrains.Annotations.NotNullAttribute()] string sActionGroupId, System.Windows.Point ptClient) { }
    }
    public class static IActionBarManagerEx
    {
        [JetBrains.Threading.GuardAttribute(JetBrains.Threading.Rgc.Guarded)]
        public static void ShowPopupMenu(this JetBrains.ActionManagement.IActionBarManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionGroup group, [JetBrains.Annotations.NotNullAttribute()] System.Func<System.Collections.Generic.IEnumerable<JetBrains.Application.DataContext.IDataRule>> FGetDataRules, System.Windows.Point ptScreen) { }
        [JetBrains.Threading.GuardAttribute(JetBrains.Threading.Rgc.Guarded)]
        public static void Update([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionBar thіs) { }
    }
    public class static IActionBarManagerWinFormsEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ActionManagement.IActionBar CreateActionBarForWinFormsControl([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionBarManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] string sActionGroupId, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control controlDataProviding, bool isAutoUpdate) { }
        public static void ShowPopupMenuInWinFormsControl([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IActionBarManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, System.Windows.Forms.Control dataContextControl, [JetBrains.Annotations.NotNullAttribute()] string sActionGroupId, System.Drawing.Point ptClient) { }
    }
    public interface IActionBase { }
    public interface IActionCollection
    {
        public event JetBrains.ActionManagement.ActionsHandler ActionAdded;
        public event JetBrains.ActionManagement.ActionsHandler ActionRemoved;
    }
    public interface IActionContextMenu : JetBrains.ActionManagement.IActionBar, JetBrains.ActionManagement.IActionItemParent
    {
        void BeginShow(System.Windows.Point ptScreen);
    }
    public interface IActionGroup : JetBrains.ActionManagement.IActionBase, JetBrains.ActionManagement.IUpdatableAction
    {
        int ActionCount { get; }
        System.Collections.Generic.IList<JetBrains.ActionManagement.IActionBase> Actions { get; }
        bool IsShared { get; }
        public event JetBrains.ActionManagement.GroupContentsChangedHandler ContentsChanged;
        void AddAction(JetBrains.ActionManagement.IActionBase action);
        JetBrains.ActionManagement.IActionBase GetAction(int pos);
        JetBrains.ActionManagement.IActionBase GetAction(string actionId);
        int GetActionIndex(JetBrains.ActionManagement.IActionBase action);
        int GetActionIndex(string actionID);
        void InsertAction(int pos, JetBrains.ActionManagement.IActionBase action);
        void InsertActions(int pos, System.Collections.Generic.IList<JetBrains.ActionManagement.IActionBase> actions);
        void RemoveAction(JetBrains.ActionManagement.IActionBase action);
    }
    public interface IActionHandler
    {
        void Execute([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute);
        bool Update([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.DataContext.IDataContext context, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate);
    }
    public interface IActionItemParent
    {
        bool PreferMenuItems { get; }
        bool ShowDisabledItems { get; }
    }
    public interface IActionManager
    {
        JetBrains.Application.DataContext.DataContexts DataContexts { get; }
        JetBrains.ActionManagement.IExecutableAction CreateAction(string actionId, JetBrains.ActionManagement.ActionPresentation defaultPresentation);
        JetBrains.ActionManagement.IActionGroup CreateActionGroup(string actionId, JetBrains.ActionManagement.ActionPresentation defaultPresentation, bool isShared, bool updatesActionsOnUpdate, string overridenActionId);
        JetBrains.ActionManagement.IActionWithGroup CreateActionWithGroup(string actionId, JetBrains.ActionManagement.ActionPresentation defaultPresentation, string overridenActionId);
        JetBrains.ActionManagement.ISeparator CreateSeparator();
        void EmbedActionGroup([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionGroup groupToEmbed, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionGroup targetGroup);
        bool ExecuteActionIfAvailable(JetBrains.ActionManagement.IExecutableAction action, JetBrains.Application.DataContext.IDataContext dataContextOverride = null);
        void ExecuteActionUnsafe(JetBrains.ActionManagement.IExecutableAction action, JetBrains.Application.DataContext.IDataContext dataContextOverride = null);
        bool ExecuteShortcut(System.Windows.Forms.Keys shortcut, bool bIncludeHostActions);
        JetBrains.ActionManagement.IActionGroup GetActionGroup(string actionId);
        System.Collections.Generic.IList<JetBrains.ActionManagement.IActionBase> GetAllActions();
        JetBrains.ActionManagement.IExecutableAction GetExecutableAction(string actionId);
        string GetLocationInMainMenu(JetBrains.ActionManagement.IExecutableAction action);
        JetBrains.ActionManagement.IUpdatableAction GetUpdatableAction(string actionId);
        bool IsActionComboBox(string actionID);
        void RemoveAction(string actionId);
        void RemoveAction(JetBrains.ActionManagement.IUpdatableAction action);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ActionManagement.IActionBase TryGetAction(string actionId);
        bool UpdateAction(JetBrains.ActionManagement.IUpdatableAction action, JetBrains.Application.DataContext.IDataContext dataContext = null);
    }
    public interface IActionManagerImpl : JetBrains.ActionManagement.IActionManager
    {
        JetBrains.ActionManagement.IExecutableAction CreateAction(string actionId, JetBrains.ActionManagement.ActionPresentation defaultPresentation, string overridenActionId, System.Xml.XmlElement element, JetBrains.ActionManagement.ActionsXmlInfo info);
        int GetActionIndex(JetBrains.ActionManagement.IActionGroup group, JetBrains.ActionManagement.IActionBase action);
    }
    public interface IActionMenu : JetBrains.ActionManagement.IActionBar, JetBrains.ActionManagement.IActionItemParent { }
    public interface IActionWithGroup : JetBrains.ActionManagement.IActionBase, JetBrains.ActionManagement.IActionGroup, JetBrains.ActionManagement.IExecutableAction, JetBrains.ActionManagement.IUpdatableAction { }
    public interface ICustomStripComboBox : JetBrains.ActionManagement.ICustomStripItem
    {
        System.Windows.Forms.ComboBox ComboBox { get; }
        int Width { get; set; }
    }
    public interface ICustomStripItem { }
    public interface ICustomStripLabel : JetBrains.ActionManagement.ICustomStripItem
    {
        System.Drawing.Image Image { get; set; }
        string Text { get; set; }
    }
    public interface ICustomStripProgressBar : JetBrains.ActionManagement.ICustomStripItem
    {
        int Maximum { get; set; }
        int Minimum { get; set; }
        System.Windows.Forms.ProgressBar ProgressBar { get; }
        System.Drawing.Color ProgressColor { get; set; }
        string Text { get; set; }
        int Value { get; set; }
    }
    public interface ICustomStripSeparator : JetBrains.ActionManagement.ICustomStripItem { }
    public interface IExecutableAction : JetBrains.ActionManagement.IActionBase, JetBrains.ActionManagement.IUpdatableAction
    {
        bool ShowConflict { get; set; }
        void Execute([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.DataContext.IDataContext context);
    }
    public interface INamedUiItem
    {
        bool CanHaveMnemonic { get; }
        string Text { get; set; }
    }
    public class InsertedActionInfo
    {
        public readonly JetBrains.ActionManagement.IActionBase InsertedAction;
        public readonly JetBrains.ActionManagement.IActionGroup ModifiedActionGroup;
        public InsertedActionInfo(JetBrains.ActionManagement.IActionGroup modifiedActionGroup, JetBrains.ActionManagement.IActionBase insertedAction) { }
    }
    public class InternalActionCollection : JetBrains.ActionManagement.ActionCollection
    {
        public InternalActionCollection(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ActionManagement.IActionCollection actionCollection) { }
        public void InsertActions(int pos, System.Collections.Generic.IList<JetBrains.ActionManagement.IActionBase> actions) { }
    }
    public interface ISeparator : JetBrains.ActionManagement.IActionBase { }
    public interface IShortcutManager
    {
        JetBrains.ActionManagement.ShortcutScheme CurrentScheme { get; }
        void AddShortcut(JetBrains.ActionManagement.ShortcutScheme scheme, JetBrains.ActionManagement.IExecutableAction action, JetBrains.ActionManagement.ShortcutScope scope, JetBrains.ActionManagement.ActionShortcut shortcut);
        void ApplyShortcutScheme(JetBrains.ActionManagement.ShortcutScheme scheme, JetBrains.Application.Progress.IProgressIndicator progress);
        System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ActionManagement.ActionShortcut, JetBrains.ActionManagement.ShortcutScope>> GetShortcutsWithScopes(JetBrains.ActionManagement.IExecutableAction action);
        void RemoveShortcut(JetBrains.ActionManagement.ShortcutScheme scheme, JetBrains.ActionManagement.IExecutableAction action, JetBrains.ActionManagement.ShortcutScope scope, JetBrains.ActionManagement.ActionShortcut shortcut);
        void SelectShortcutScheme(JetBrains.ActionManagement.ShortcutScheme scheme);
    }
    public interface IThemedStripItem
    {
        JetBrains.UI.Components.Theming.ColorTheme ColorTheme { get; set; }
    }
    public interface IUpdatableAction : JetBrains.ActionManagement.IActionBase
    {
        string Id { get; }
        string OverridenAction { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ActionManagement.ActionPresentation Presentation { get; }
        void AddHandler(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ActionManagement.IActionHandler handler);
        void RemoveHandler(JetBrains.ActionManagement.IActionHandler handler);
        bool Update(JetBrains.Application.DataContext.IDataContext context);
    }
    [System.FlagsAttribute()]
    public enum KeyboardModifiers
    {
        None = 0,
        ShiftLeft = 1,
        ShiftRight = 2,
        ControlLeft = 4,
        ControlRight = 8,
        AltLeft = 16,
        AltRight = 32,
        Shift = 64,
        Control = 128,
        Alt = 256,
        ShiftMask = 3,
        ControlsMask = 12,
        AltMask = 48,
    }
    public class static KeyboardModifiersUtils
    {
        public static readonly System.Windows.Forms.Keys[] ModifierKeys;
        public static readonly System.Windows.Forms.Keys[] ModifierKeysMasks;
        public static readonly JetBrains.ActionManagement.KeyboardModifiers[] ModifierMasks;
        public static readonly JetBrains.ActionManagement.KeyboardModifiers[] Modifiers;
        public static JetBrains.ActionManagement.KeyboardModifiers[] DependentModifiers(JetBrains.ActionManagement.KeyboardModifiers genericModifier) { }
        public static JetBrains.ActionManagement.KeyboardModifiers FetchModifiers(ref System.Windows.Forms.Keys keys) { }
        public static JetBrains.ActionManagement.KeyboardModifiers FetchModifiersMask(System.Windows.Forms.Keys keys) { }
        public static JetBrains.ActionManagement.KeyboardModifiers[] GenericModifiers(JetBrains.ActionManagement.KeyboardModifiers modifiers) { }
        public static bool Match(JetBrains.ActionManagement.KeyboardModifiers pattern, JetBrains.ActionManagement.KeyboardModifiers modifiers) { }
    }
    public class KeyboardParseException : System.Exception
    {
        public KeyboardParseException(string message, System.Exception innerException) { }
    }
    [System.ComponentModel.TypeConverterAttribute("JetBrains.ActionManagement.KeyboardShortcutConverter")]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(JetBrains.ActionManagement.KeyboardShortcutSerializer))]
    public struct KeyboardShortcut
    {
        public static JetBrains.ActionManagement.KeyboardShortcut Invalid;
        public KeyboardShortcut(System.Windows.Forms.Keys keys) { }
        public KeyboardShortcut(System.Windows.Forms.Keys keys, JetBrains.ActionManagement.KeyboardModifiers keyboardModifiers) { }
        public System.Windows.Forms.Keys Key { get; }
        public JetBrains.ActionManagement.KeyboardModifiers Modifiers { get; }
        public bool Accept(JetBrains.ActionManagement.KeyboardShortcut keys) { }
        public override bool Equals(object obj) { }
        public string Format(params JetBrains.ActionManagement.KeyboardModifiers[] preferrableModifiers) { }
        public override int GetHashCode() { }
        public static JetBrains.ActionManagement.KeyboardShortcut Parse(string shortcut, out JetBrains.ActionManagement.KeyboardShortcut secondShortcut) { }
        public override string ToString() { }
    }
    [JetBrains.Annotations.UsedImplicitlyAttribute()]
    public class KeyboardShortcutConverter : JetBrains.Util.Reflection.TypeConverterBase<JetBrains.ActionManagement.KeyboardShortcut>
    {
        public KeyboardShortcutConverter() { }
    }
    public class KeyboardShortcutSerializer : JetBrains.Util.Reflection.ValueSerializerBase<JetBrains.ActionManagement.KeyboardShortcut>
    {
        public KeyboardShortcutSerializer() { }
    }
    public class LoadedActionsInfo
    {
        public LoadedActionsInfo() { }
        public void AddCreatedAction(JetBrains.ActionManagement.ActionsAssembly assembly, JetBrains.ActionManagement.IUpdatableAction action) { }
        public void AddInsertedActions(JetBrains.ActionManagement.ActionsAssembly assembly, JetBrains.ActionManagement.IActionGroup group, System.Collections.Generic.IEnumerable<JetBrains.ActionManagement.IActionBase> actions) { }
        public void ClearAssemblyActions(JetBrains.Util.Pair<JetBrains.Metadata.Utils.AssemblyNameInfo, string> resource) { }
        public System.Collections.Generic.IList<JetBrains.ActionManagement.IUpdatableAction> GetCreatedActions(JetBrains.Util.Pair<JetBrains.Metadata.Utils.AssemblyNameInfo, string> resource) { }
        public System.Collections.Generic.IList<JetBrains.ActionManagement.InsertedActionInfo> GetInsertedActions(JetBrains.Util.Pair<JetBrains.Metadata.Utils.AssemblyNameInfo, string> resource) { }
    }
    public class MnemonicProcessor
    {
        public void UpdateMnemonics(System.Collections.Generic.IEnumerable<System.Windows.Forms.Control> allControls, System.Collections.IEnumerable targetControls) { }
        public void UpdateMnemonics(System.Windows.Forms.Control control, System.Collections.IEnumerable targets) { }
        public void UpdateMnemonics(System.Collections.Generic.IEnumerable<JetBrains.ActionManagement.INamedUiItem> allItems, System.Collections.Generic.ICollection<JetBrains.ActionManagement.INamedUiItem> targetItems) { }
    }
    public class MouseClickShortcut : JetBrains.ActionManagement.ActionShortcut
    {
        public MouseClickShortcut(JetBrains.ActionManagement.KeyboardModifiers modifiers, System.Windows.Forms.MouseButtons buttons) { }
        public System.Windows.Forms.MouseButtons Buttons { get; }
        public override JetBrains.ActionManagement.KeyboardShortcut[] KeyboardShortcuts { get; }
        public JetBrains.ActionManagement.KeyboardModifiers Modifiers { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static JetBrains.ActionManagement.MouseClickShortcut Parse(string s) { }
        public override string ToString() { }
    }
    public abstract class OneOfaListActionHandler : JetBrains.ActionManagement.IActionHandler
    {
        protected readonly JetBrains.ActionManagement.IActionManager myActionManager;
        protected OneOfaListActionHandler([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionManager actionManager) { }
        public abstract string ActionId { get; }
        public bool IsSubscribed { get; }
        public virtual void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        protected abstract void Execute(JetBrains.Application.DataContext.IDataContext dataContext);
        protected abstract bool IsAvailable(JetBrains.Application.DataContext.IDataContext dataContext);
        public void Subscribe(JetBrains.DataFlow.Lifetime lifetime) { }
        public void Unsubscribe() { }
        public virtual bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    public abstract class OverridingActionHandler : JetBrains.ActionManagement.IActionHandler
    {
        protected OverridingActionHandler(params string[] baseActionIds) { }
        public abstract void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute);
        public void RegisterActionHandler(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ActionManagement.IActionManager actionManager) { }
        public abstract bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate);
    }
    public class static ShellComponentsEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ActionManagement.IActionManager ActionManager([JetBrains.Annotations.NotNullAttribute()] this JetBrains.Application.ShellComponents compo) { }
    }
    public class ShortcutScheme : JetBrains.Util.EnumPattern
    {
        public static readonly JetBrains.ActionManagement.ShortcutScheme Idea;
        public static readonly JetBrains.ActionManagement.ShortcutScheme None;
        public const string NONE_NAME = "None";
        public const string NOT_SET_NAME = "NotSet";
        public static readonly JetBrains.ActionManagement.ShortcutScheme NotSet;
        public static readonly JetBrains.ActionManagement.ShortcutScheme VS;
        protected ShortcutScheme(string name) { }
        public static JetBrains.ActionManagement.ShortcutScheme Parse(string name) { }
    }
    public enum ShortcutScope
    {
        Global = 0,
        TextEditor = 1,
    }
    [System.ComponentModel.LocalizableAttribute(false)]
    public class static ShortcutUtil
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ActionManagement.ActionShortcut BindingsToShortcut([JetBrains.Annotations.NotNullAttribute()] string bindingsString) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string GetBindingsString([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.ActionShortcut shortcut) { }
        public static bool HasConflict(JetBrains.ActionManagement.ActionShortcut a, JetBrains.ActionManagement.ActionShortcut b) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ActionManagement.ActionShortcut ParseKeyboardShortcut([JetBrains.Annotations.CanBeNullAttribute()] string text) { }
    }
    public abstract class SimpleOverridingActionHandler : JetBrains.ActionManagement.OverridingActionHandler
    {
        protected SimpleOverridingActionHandler() { }
        protected SimpleOverridingActionHandler(params string[] baseActionIds) { }
        public override void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        protected abstract void ExecuteInternal(JetBrains.Application.DataContext.IDataContext context);
        protected abstract bool IsAvailable(JetBrains.Application.DataContext.IDataContext context);
        public override bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    public class SingleShortcut : JetBrains.ActionManagement.ActionShortcut
    {
        public SingleShortcut(JetBrains.ActionManagement.KeyboardShortcut keyboardShortcut) { }
        public override JetBrains.ActionManagement.KeyboardShortcut[] KeyboardShortcuts { get; }
        public JetBrains.ActionManagement.KeyboardShortcut Shortcut { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class TabLeftActionHandler : JetBrains.ActionManagement.IActionHandler
    {
        public const string ACTION_ID = "TabLeft";
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    public abstract class UpdatableAction : JetBrains.ActionManagement.ActionBase, JetBrains.ActionManagement.IActionBase, JetBrains.ActionManagement.IUpdatableAction
    {
        protected JetBrains.Application.DataContext.IDataContext myDataContext;
        protected UpdatableAction([JetBrains.Annotations.NotNullAttribute()] string id, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.ActionPresentation defaultPresentation, JetBrains.Application.IShellLocks shellLocks) { }
        public JetBrains.Application.DataContext.IDataContext DataContext { get; }
        protected JetBrains.ActionManagement.HandlersList Handlers { get; }
        public string Id { get; }
        public string OverridenAction { get; set; }
        public JetBrains.ActionManagement.ActionPresentation Presentation { get; }
        public void AddHandler(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ActionManagement.IActionHandler handler) { }
        public void RemoveHandler(JetBrains.ActionManagement.IActionHandler handler) { }
        public override string ToString() { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context) { }
    }
}
namespace JetBrains.ActionManagement.ActionLoader
{
    
    [JetBrains.Application.ShellComponentAttribute()]
    public class ActionLoader : JetBrains.ActionManagement.ActionLoader.IActionLoadClient
    {
        public const string ACTION_GROUP_TAG_NAME = "action-group";
        public const string ACTION_REF_TAG_NAME = "action-ref";
        public const string ACTION_TAG_NAME = "action";
        public const string ACTION_WITH_GROUP_TAG_NAME = "action-with-group";
        public const string ATTR_CHECKED = "checked";
        public const string ATTR_DESCRIPTION = "description";
        protected const string ATTR_GROUP_ID = "group-id";
        public const string ATTR_ID = "id";
        public const string ATTR_IMAGE = "image";
        protected const string ATTR_INSERT_ANCHOR_ID = "anchor-id";
        public const string ATTR_INTERNAL = "internal";
        public const string ATTR_MOUSE_SHORTCUT = "mouse-shortcut";
        public const string ATTR_OVERRIDES = "overrides";
        protected const string ATTR_POSITION = "position";
        public const string ATTR_RADIOCHECK = "radiocheck";
        public const string ATTR_SCOPE = "scope";
        public const string ATTR_SHORTCUT = "shortcut";
        public const string ATTR_SHOW_CONFLICT = "showConflict";
        public const string ATTR_TEXT = "text";
        public const string ATTR_TYPE = "type";
        public const string ATTR_VS_SHORTCUT = "vs-shortcut";
        public const string AttrEmbed = "embed";
        public const string INSERT_TAG_NAME = "insert";
        protected readonly JetBrains.Application.Env.RunsProducts.ProductConfigurations ProductConfigurations;
        public const string SEPARATOR_TAG_NAME = "separator";
        public const string SHORTCUT_ELEMENT = "shortcut";
        public const string TYPE_CHECKBOX = "checkbox";
        public const string TYPE_COMBOBOX = "combobox";
        public const string VS_SHORTCUT_ELEMENT = "vs-shortcut";
        protected ActionLoader(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ActionManagement.IActionManagerImpl actionManager, JetBrains.ActionManagement.IShortcutManager shortcutManager, JetBrains.Application.Parts.PartsCatalogueSet catalogSet, JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations, bool doInitActions) { }
        public ActionLoader(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ActionManagement.IActionManagerImpl actionManager, JetBrains.ActionManagement.IShortcutManager shortcutManager, JetBrains.Application.Parts.PartsCatalogueSet catalogSet, JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations) { }
        public JetBrains.ActionManagement.IActionManagerImpl ActionManager { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.Metadata.Reader.API.IManifestResourceDisposition> GetAssemblyActionXmls([JetBrains.Annotations.NotNullAttribute()] JetBrains.Metadata.Reader.API.IMetadataAssembly metassembly) { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected static string GetStringAttributeValueNotNull([JetBrains.Annotations.NotNullAttribute()] System.Xml.XmlElement element, [JetBrains.Annotations.NotNullAttribute()] string attrId) { }
        protected void Init_ActionXmlsAndHandlersFromAssemblies(JetBrains.Application.Parts.PartsCatalogueSet catalogSet, JetBrains.Application.IApplicationDescriptor applicationDescriptor) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected JetBrains.ActionManagement.IActionBase LoadAction([JetBrains.Annotations.NotNullAttribute()] System.Xml.XmlElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.ActionsXmlInfo info, [JetBrains.Annotations.CanBeNullAttribute()] string actionGroupID, System.Collections.Generic.IDictionary<string, JetBrains.Application.Parts.PartCatalogueType> mapIconClasses) { }
        protected void LoadActions([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.ActionsXmlInfo info, System.Collections.Generic.IDictionary<string, JetBrains.Application.Parts.PartCatalogueType> mapIconClasses) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Xml.Schema.XmlSchema LoadActionsXmlSchema() { }
        public virtual void OnAfterLoadActions(JetBrains.ActionManagement.ActionsXmlInfo info) { }
        public virtual void OnAfterLoadActions(System.Collections.Generic.ICollection<JetBrains.ActionManagement.ActionsXmlInfo> infos) { }
        public virtual void OnBeforeLoadActions(JetBrains.ActionManagement.ActionsXmlInfo info) { }
        public virtual void OnBeforeLoadActions(System.Collections.Generic.ICollection<JetBrains.ActionManagement.ActionsXmlInfo> infos) { }
        protected virtual void ProcessInsert([JetBrains.Annotations.NotNullAttribute()] System.Xml.XmlElement xmlInsert, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.ActionsXmlInfo info, System.Collections.Generic.IDictionary<string, JetBrains.Application.Parts.PartCatalogueType> mapIconClasses) { }
        protected void ProcessInsert_GetPositionAndAnchor(System.Xml.XmlElement xmlInsert, JetBrains.ActionManagement.ActionsXmlInfo info, JetBrains.ActionManagement.IActionGroup groupInsertInto, out JetBrains.ActionManagement.ActionLoader.ActionLoader.AnchorPosition position, out System.Nullable<> anchorIndex) { }
        protected void ProcessInsert_GetPositionAndAnchor_IndexInGroup([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionGroup groupInsertInto, [JetBrains.Annotations.NotNullAttribute()] string anchorId, [JetBrains.Annotations.NotNullAttribute()] System.Xml.XmlElement xmlInsert, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.ActionsXmlInfo info, ref JetBrains.ActionManagement.ActionLoader.ActionLoader.AnchorPosition position, out System.Nullable<> anchorIndex) { }
        protected void ProcessInsert_GetPositionAndAnchor_ValidateAnchorAgainstPosition([JetBrains.Annotations.NotNullAttribute()] string sInsertIntoGroupId, [JetBrains.Annotations.NotNullAttribute()] System.Xml.XmlElement xmlInsert, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.ActionsXmlInfo info, ref JetBrains.ActionManagement.ActionLoader.ActionLoader.AnchorPosition position, [JetBrains.Annotations.CanBeNullAttribute()] ref System.Nullable<> anchorIndex) { }
        protected JetBrains.ActionManagement.IActionGroup ProcessInsert_GetTargetGroup(System.Xml.XmlElement xmlInsert, JetBrains.ActionManagement.ActionsXmlInfo info) { }
        protected static JetBrains.ActionManagement.ActionLoader.ActionLoader.AnchorPosition ProcessInsert_ParsePosition([JetBrains.Annotations.NotNullAttribute()] System.Xml.XmlElement xmlInsert, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.ActionsXmlInfo info) { }
        protected enum AnchorPosition
        {
            First = 0,
            Last = 1,
            Before = 2,
            After = 3,
        }
    }
    public interface IActionLoadClient
    {
        void OnAfterLoadActions(JetBrains.ActionManagement.ActionsXmlInfo info);
        void OnAfterLoadActions(System.Collections.Generic.ICollection<JetBrains.ActionManagement.ActionsXmlInfo> infos);
        void OnBeforeLoadActions(JetBrains.ActionManagement.ActionsXmlInfo info);
        void OnBeforeLoadActions(System.Collections.Generic.ICollection<JetBrains.ActionManagement.ActionsXmlInfo> infos);
    }
}
namespace JetBrains.ActionManagement.Impl
{
    
    public class ActionInfo
    {
        public ActionInfo(string actionId, JetBrains.ActionManagement.IActionHandler handler, System.Reflection.Assembly handlerAssambly) { }
        public string ActionId { get; }
        public JetBrains.ActionManagement.IActionHandler Handler { get; }
        public System.Reflection.Assembly HandlerAssembly { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ActionManagement.IUpdatableAction GetActionFromActionHandler([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionHandler handler, JetBrains.ActionManagement.IActionManager actionManager) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ActionManagement.IUpdatableAction GetActionFromActionHandler([JetBrains.Annotations.NotNullAttribute()] System.Type typeHandler, JetBrains.ActionManagement.IActionManager actionManager) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static string TryGetActionIDFromActionHandlerTypeName([JetBrains.Annotations.NotNullAttribute()] string typename) { }
    }
}
namespace JetBrains.Application.ExceptionReport
{
    
    public class JiraIssueTracker : JetBrains.Application.ExceptionReport.IIssueTracker
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.Application.IApplicationDescriptor Descriptor;
        public JiraIssueTracker([JetBrains.Annotations.NotNullAttribute()] string jiraUrl, [JetBrains.Annotations.NotNullAttribute()] string projectKey, [JetBrains.Annotations.NotNullAttribute()] string submitComponent, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor descriptor) { }
        public bool IsInternal { set; }
        public System.Nullable<JetBrains.Application.ExceptionReport.LoginInformation> Register() { }
        public void SubmitException(JetBrains.Application.ExceptionReport.ExceptionData exception, JetBrains.Application.ExceptionReport.LoginInformation loginInformation, string description, System.Net.IWebProxy proxy, System.Windows.Forms.IWin32Window parentWindow, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public void SubmitFeedback(JetBrains.Application.ExceptionReport.LoginInformation loginInformation, string feedback, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public JetBrains.Application.ExceptionReport.CredentialsVerificationResult VerifyCredentials(JetBrains.Application.ExceptionReport.LoginInformation loginInformation, System.Net.IWebProxy proxy) { }
        [CookComputing.XmlRpc.XmlRpcUrlAttribute("http://www.intellij.net/websupport/error/report?sender=i")]
        public class ErrorReportService : CookComputing.XmlRpc.XmlRpcClientProtocol
        {
            [CookComputing.XmlRpc.XmlRpcMethodAttribute("error.authorize")]
            public string Authorize(string method, string loginName) { }
            public CookComputing.XmlRpc.XmlRpcAsyncResult BeginAuthorize(string method, string loginName, System.AsyncCallback callback, object asyncState) { }
            public CookComputing.XmlRpc.XmlRpcAsyncResult BeginCheckException(string md5Hash, System.AsyncCallback callback, object asyncState) { }
            public CookComputing.XmlRpc.XmlRpcAsyncResult BeginPostError(JetBrains.Application.ExceptionReport.JiraIssueTracker.ErrorStruct errStruct, JetBrains.Application.ExceptionReport.JiraIssueTracker.ExceptionStruct excStruct, bool comment, System.AsyncCallback callback, object asyncState) { }
            [CookComputing.XmlRpc.XmlRpcMethodAttribute("error.checkException")]
            public JetBrains.Application.ExceptionReport.JiraIssueTracker.ExceptionStruct CheckException(string md5Hash) { }
            public string EndAuthorize(System.IAsyncResult ar) { }
            public JetBrains.Application.ExceptionReport.JiraIssueTracker.ExceptionStruct EndCheckException(System.IAsyncResult ar) { }
            public void EndPostError(System.IAsyncResult ar) { }
            [CookComputing.XmlRpc.XmlRpcMethodAttribute("error.postError")]
            public void PostError(JetBrains.Application.ExceptionReport.JiraIssueTracker.ErrorStruct errStruct, JetBrains.Application.ExceptionReport.JiraIssueTracker.ExceptionStruct excStruct, bool comment) { }
        }
        public struct ErrorStruct
        {
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("error.action")]
            public string ErrorAction;
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("error.date")]
            public System.DateTime ErrorDate;
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("error.description")]
            public string ErrorDescription;
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("error.notifier.id")]
            public string ErrorNotifierId;
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("error.os")]
            public string ErrorOs;
        }
        public struct ExceptionStruct
        {
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("exception.build.number")]
            public string ExceptionBuildNumber;
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("exception.date")]
            public System.DateTime ExceptionDate;
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("exception.hash.code")]
            public string ExceptionHash;
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("exception.itn.thread")]
            public int ExceptionItnThread;
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("exception.message")]
            public string ExceptionMessage;
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("exception.product.code")]
            public string ExceptionProductCode;
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("exception.scrambled")]
            public bool ExceptionScrambled;
            [CookComputing.XmlRpc.XmlRpcMemberAttribute("exception.stack")]
            public string ExceptionStack;
        }
        public class JiraService : CookComputing.XmlRpc.XmlRpcClientProtocol
        {
            [CookComputing.XmlRpc.XmlRpcMethodAttribute("omeajira1.addIssueComment")]
            public void AddIssueComment(string userName, string password, string issueKey, string comment) { }
            public CookComputing.XmlRpc.XmlRpcAsyncResult BeginAddIssueComment(string userName, string password, string issueKey, string comment, System.AsyncCallback asyncCallback, object asyncState) { }
            public CookComputing.XmlRpc.XmlRpcAsyncResult BeginCreateIssue(string token, CookComputing.XmlRpc.XmlRpcStruct rIssueStruct, System.AsyncCallback asyncCallback, object asyncState) { }
            public CookComputing.XmlRpc.XmlRpcAsyncResult BeginGetComponents(string token, string projectKey, System.AsyncCallback asyncCallback, object asyncState) { }
            public CookComputing.XmlRpc.XmlRpcAsyncResult BeginGetIssue(string token, string issueKey, System.AsyncCallback asyncCallback, object asyncState) { }
            public CookComputing.XmlRpc.XmlRpcAsyncResult BeginGetIssueTypes(string token, System.AsyncCallback asyncCallback, object asyncState) { }
            public CookComputing.XmlRpc.XmlRpcAsyncResult BeginGetPriorities(string token, System.AsyncCallback asyncCallback, object asyncState) { }
            public CookComputing.XmlRpc.XmlRpcAsyncResult BeginGetUser(string token, string userName, System.AsyncCallback asyncCallback, object asyncState) { }
            public CookComputing.XmlRpc.XmlRpcAsyncResult BeginLogin(string userName, string password, System.AsyncCallback asyncCallback, object asyncState) { }
            [CookComputing.XmlRpc.XmlRpcMethodAttribute("jira1.createIssue")]
            public CookComputing.XmlRpc.XmlRpcStruct CreateIssue(string token, CookComputing.XmlRpc.XmlRpcStruct rIssueStruct) { }
            public void EndAddIssueComment(CookComputing.XmlRpc.XmlRpcAsyncResult asyncResult) { }
            public CookComputing.XmlRpc.XmlRpcStruct EndCreateIssue(CookComputing.XmlRpc.XmlRpcAsyncResult asyncResult) { }
            public CookComputing.XmlRpc.XmlRpcStruct[] EndGetComponents(CookComputing.XmlRpc.XmlRpcAsyncResult asyncResult) { }
            public CookComputing.XmlRpc.XmlRpcStruct EndGetIssue(CookComputing.XmlRpc.XmlRpcAsyncResult asyncResult) { }
            public CookComputing.XmlRpc.XmlRpcStruct[] EndGetIssueTypes(CookComputing.XmlRpc.XmlRpcAsyncResult asyncResult) { }
            public CookComputing.XmlRpc.XmlRpcStruct[] EndGetPriorities(CookComputing.XmlRpc.XmlRpcAsyncResult asyncResult) { }
            public CookComputing.XmlRpc.XmlRpcStruct EndGetUser(CookComputing.XmlRpc.XmlRpcAsyncResult asyncResult) { }
            public string EndLogin(CookComputing.XmlRpc.XmlRpcAsyncResult asyncResult) { }
            [CookComputing.XmlRpc.XmlRpcMethodAttribute("jira1.getComponents")]
            public CookComputing.XmlRpc.XmlRpcStruct[] GetComponents(string token, string projectKey) { }
            [CookComputing.XmlRpc.XmlRpcMethodAttribute("jira1.getIssue")]
            public CookComputing.XmlRpc.XmlRpcStruct GetIssue(string token, string issueKey) { }
            [CookComputing.XmlRpc.XmlRpcMethodAttribute("jira1.getIssueTypes")]
            public CookComputing.XmlRpc.XmlRpcStruct[] GetIssueTypes(string token) { }
            [CookComputing.XmlRpc.XmlRpcMethodAttribute("jira1.getPriorities")]
            public CookComputing.XmlRpc.XmlRpcStruct[] GetPriorities(string token) { }
            [CookComputing.XmlRpc.XmlRpcMethodAttribute("jira1.getUser")]
            public CookComputing.XmlRpc.XmlRpcStruct GetUser(string token, string userName) { }
            [CookComputing.XmlRpc.XmlRpcMethodAttribute("jira1.login")]
            public string Login(string userName, string password) { }
        }
    }
    public class MessageBoxExceptionReportService : JetBrains.Application.ExceptionReport.IExceptionReportService
    {
        public MessageBoxExceptionReportService([JetBrains.Annotations.CanBeNullAttribute()] string sProductName) { }
        public string ProductName { get; set; }
        public static void ShowException([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.ExceptionReport.ExceptionData exception, [JetBrains.Annotations.CanBeNullAttribute()] string sProductName) { }
    }
    public class MockIssueTracker : JetBrains.Application.ExceptionReport.IIssueTracker
    {
        public bool IsInternal { set; }
        public System.Nullable<JetBrains.Application.ExceptionReport.LoginInformation> Register() { }
        public void SubmitException(JetBrains.Application.ExceptionReport.ExceptionData exception, JetBrains.Application.ExceptionReport.LoginInformation loginInformation, string description, System.Net.IWebProxy proxy, System.Windows.Forms.IWin32Window parentWindow, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public void SubmitFeedback(JetBrains.Application.ExceptionReport.LoginInformation loginInformation, string feedback, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public JetBrains.Application.ExceptionReport.CredentialsVerificationResult VerifyCredentials(JetBrains.Application.ExceptionReport.LoginInformation loginInformation, System.Net.IWebProxy proxy) { }
    }
    public class SmartExceptionReportStrategy : JetBrains.Application.ExceptionReport.IExceptionReportStrategy
    {
        public SmartExceptionReportStrategy(JetBrains.Application.Settings.ISettingsStore settingsStore) { }
        public void Process(JetBrains.Application.ExceptionReport.ExceptionData exceptionData, JetBrains.Application.ExceptionReport.IExceptionReportService service, JetBrains.Application.Progress.ITaskExecutor taskExecutor) { }
    }
    public class StdErrExceptionReportService : JetBrains.Application.ExceptionReport.IExceptionReportService
    {
        public StdErrExceptionReportService(JetBrains.Application.ExceptionReport.StdErrExceptionReportService.DetailsLevel levelStdErr, JetBrains.Application.ExceptionReport.StdErrExceptionReportService.DetailsLevel levelStdOut, string sPrefixOnMessage, System.ConsoleColor errorColor) { }
        public StdErrExceptionReportService(JetBrains.Application.ExceptionReport.StdErrExceptionReportService.DetailsLevel levelStdErr, JetBrains.Application.ExceptionReport.StdErrExceptionReportService.DetailsLevel levelStdOut, [JetBrains.Annotations.CanBeNullAttribute()] string sPrefixOnMessage) { }
        public enum DetailsLevel
        {
            None = 0,
            Message = 1,
            FullText = 2,
        }
    }
    public class SubmitToTrackerExceptionReportService : JetBrains.Application.ExceptionReport.IExceptionReportService
    {
        public readonly JetBrains.DataFlow.IProperty<JetBrains.Application.ExceptionReport.LoginInformation> LoginInformation;
        public SubmitToTrackerExceptionReportService([JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, JetBrains.Application.IApplicationDescriptor applicationDescriptor, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window parentwin, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.OpensUri opensUri, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Communication.WebProxySettingsReader proxySettings, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.ExceptionReport.ExceptionReportingIconSet exceptionReportingIconSet, JetBrains.UI.Application.Progress.WorkerThreadShop workerThreadShop) { }
        public virtual void Log(JetBrains.Application.ExceptionReport.ExceptionData exception) { }
        public virtual void Notify(JetBrains.Application.ExceptionReport.ExceptionData exception) { }
        public virtual void RequireAction(JetBrains.Application.ExceptionReport.ExceptionData exception) { }
    }
}
namespace JetBrains.CommonControls.ActiveRichText
{
    
    public class ActiveTextControl : System.Windows.Forms.Control
    {
        public ActiveTextControl(JetBrains.CommonControls.ActiveRichText.IActiveText activeText) { }
        protected override void OnClick(System.EventArgs e) { }
        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e) { }
    }
    public class ActiveTextEdit : DevExpress.XtraEditors.BaseEdit
    {
        public override string EditorTypeName { get; }
        public override string Text { get; }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e) { }
    }
    public class ActiveTextPainter : DevExpress.XtraEditors.Drawing.BaseEditPainter
    {
        protected override void DrawContent(DevExpress.XtraEditors.Drawing.ControlGraphicsInfoArgs info) { }
    }
    public class ActiveTextRepositoryItem : DevExpress.XtraEditors.Repository.RepositoryItem
    {
        public ActiveTextRepositoryItem(bool isGuarded, JetBrains.UI.Application.IUIApplication environment) { }
        public override bool AutoHeight { get; }
        public System.Drawing.Font DefaultFont { get; set; }
        public override string EditorTypeName { get; }
        public JetBrains.UI.Application.IUIApplication Environment { get; }
        public bool IsGuarded { get; }
        public override void Assign(DevExpress.XtraEditors.Repository.RepositoryItem item) { }
    }
    public sealed class FontInfo : System.IEquatable<JetBrains.CommonControls.ActiveRichText.FontInfo>
    {
        public FontInfo([JetBrains.Annotations.NotNullAttribute()] string fontName, float fontSize, System.Drawing.FontStyle fontStyle) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string FontName { get; }
        public float FontSize { get; }
        public System.Drawing.FontStyle FontStyle { get; set; }
        public bool Equals(JetBrains.CommonControls.ActiveRichText.FontInfo obj) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class FormattedText
    {
        public FormattedText(System.Collections.Generic.IList<JetBrains.CommonControls.ActiveRichText.TextLine> lines) { }
        public System.Collections.Generic.IList<JetBrains.CommonControls.ActiveRichText.TextLine> Lines { get; }
    }
    public class static FormattedTextDecorator
    {
        public static JetBrains.CommonControls.ActiveRichText.FormattedText Decorate(JetBrains.CommonControls.ActiveRichText.FormattedText text, JetBrains.CommonControls.ActiveRichText.FormattedTextDecorator.ITextDecorator textDecorator) { }
        public static JetBrains.CommonControls.ActiveRichText.FormattedText Disable(JetBrains.CommonControls.ActiveRichText.FormattedText text) { }
        public interface ITextDecorator
        {
            JetBrains.CommonControls.ActiveRichText.TextPart DecoratePart(JetBrains.CommonControls.ActiveRichText.TextPart textPart);
        }
    }
    public interface IActiveText
    {
        JetBrains.CommonControls.ActiveRichText.IColorScheme ColorScheme { get; set; }
        JetBrains.CommonControls.ActiveRichText.FormattedText Content { get; set; }
        System.Drawing.Font DefaultFont { get; set; }
        int CalculateHeight(System.Drawing.Graphics graphics, int width);
        string GetAnchor(System.Drawing.Point point);
        void NotifyMouseMove(System.Windows.Forms.MouseEventArgs mouseEventArgs);
        void Paint(System.Windows.Forms.PaintEventArgs paintEventArgs);
    }
    public interface IColorScheme
    {
        System.Drawing.Color GetColor(string name);
    }
    public interface IFormattedTextProvider
    {
        JetBrains.CommonControls.ActiveRichText.FormattedText FormattedText { get; }
    }
    public class TextLine
    {
        public TextLine(System.Collections.Generic.IList<JetBrains.CommonControls.ActiveRichText.TextPart> parts) { }
        public System.Collections.Generic.IList<JetBrains.CommonControls.ActiveRichText.TextPart> Parts { get; }
    }
    public class TextPart
    {
        public TextPart(JetBrains.CommonControls.ActiveRichText.FontInfo fontInfo, string foreColor, string backColor, string text, string anchor) { }
        public TextPart(JetBrains.CommonControls.ActiveRichText.FontInfo fontInfo, string foreColor, string backColor, string text) { }
        public string Anchor { get; }
        public string BackColor { get; }
        public JetBrains.CommonControls.ActiveRichText.FontInfo FontInfo { get; }
        public string ForeColor { get; }
        public string Text { get; }
    }
    public sealed class XMLFormatter
    {
        public XMLFormatter() { }
        public JetBrains.CommonControls.ActiveRichText.FormattedText FormatXML(string xml) { }
        public JetBrains.CommonControls.ActiveRichText.FormattedText FormatXML(System.Text.StringBuilder xml) { }
    }
}
namespace JetBrains.CommonControls.ActiveRichText.Impl
{
    
    public class ActiveText : JetBrains.CommonControls.ActiveRichText.IActiveText
    {
        public ActiveText(JetBrains.UI.CommonControls.Fonts.IFontsManager fontsManager) { }
        public JetBrains.CommonControls.ActiveRichText.IColorScheme ColorScheme { get; set; }
        public JetBrains.CommonControls.ActiveRichText.FormattedText Content { get; set; }
        public System.Drawing.Font DefaultFont { get; set; }
        public int CalculateHeight(System.Drawing.Graphics graphics, int width) { }
        public string GetAnchor(System.Drawing.Point point) { }
        public void NotifyMouseMove(System.Windows.Forms.MouseEventArgs mouseEventArgs) { }
        public void Paint(System.Windows.Forms.PaintEventArgs paintEventArgs) { }
    }
    public class DefaultColorScheme : JetBrains.CommonControls.ActiveRichText.IColorScheme
    {
        public static readonly JetBrains.CommonControls.ActiveRichText.Impl.DefaultColorScheme Instance;
        public System.Drawing.Color GetColor(string name) { }
    }
}
namespace JetBrains.CommonControls
{
    
    public class BitmapWindowlessControl : JetBrains.CommonControls.IConstrainableControl, JetBrains.CommonControls.IWindowlessControl
    {
        public BitmapWindowlessControl() { }
        public BitmapWindowlessControl([JetBrains.Annotations.NotNullAttribute()] System.Drawing.Image bitmap) { }
        public BitmapWindowlessControl([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Icons.ThemedIconLoader icon) { }
        public bool AutoActivate { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<System.Drawing.Image> Bitmap { get; }
        public System.Drawing.Rectangle Bounds { get; }
        public JetBrains.DataFlow.ISimpleSignal GottenDirty { get; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        public void Paint(System.Drawing.Graphics g) { }
        public void SetBounds(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Rectangle bounds) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
    }
    public class CaptionImage
    {
        public CaptionImage(System.Drawing.Image image, System.Windows.Forms.Control myParentControl) { }
        public System.Drawing.Color BackColor { get; set; }
        public bool HasImage { get; }
        public System.Drawing.Image Image { get; set; }
        public void Draw(System.Drawing.Graphics g, System.Drawing.Point p) { }
        public void Draw(System.Drawing.Graphics g, System.Drawing.Rectangle r) { }
    }
    public class CaptionText
    {
        protected bool myIsHorizontal;
        public CaptionText(string text, System.Windows.Forms.Control Parent, bool isHorizontal) { }
        public System.Drawing.Size DesiredSize { get; set; }
        public System.Drawing.Font Font { get; set; }
        public System.Drawing.Color ForeColor { get; set; }
        public bool IsHorizontal { get; set; }
        public System.Drawing.Point Location { get; set; }
        public System.Drawing.Rectangle Rectangle { get; set; }
        public System.Drawing.Size Size { get; set; }
        public string Text { get; set; }
        public event System.EventHandler DesiredSizeChanged;
        public System.Drawing.Size CalculateDesiredSize() { }
        public void Draw(System.Drawing.Graphics g) { }
    }
    public class static CaptionUtil
    {
        public static string CalculateSpaces(int width, System.Drawing.Graphics g, System.Drawing.Font f) { }
        public static string CalculateString(string s, System.Drawing.Graphics g, System.Drawing.Font f, int maxWidth) { }
        public static System.Drawing.Size GetStringRect(string s, System.Drawing.Graphics g, System.Drawing.Font f) { }
    }
    public abstract class FocusManager
    {
        public abstract System.IntPtr CurrentFocus { get; }
        public abstract JetBrains.CommonControls.FocusManager.FocusChangedFilter Filter { get; set; }
        public event JetBrains.CommonControls.FocusManager.FocusChangedHandler FocusChanged;
        public abstract System.Windows.Forms.Control GetFocus();
        public class FocusChangedEventArgs : System.EventArgs
        {
            public FocusChangedEventArgs(System.IntPtr handle, bool hasFocus) { }
            public System.IntPtr Handle { get; }
            public bool HasFocus { get; }
        }
        public delegate bool FocusChangedFilter(System.IntPtr hWnd, bool hasFocus, JetBrains.CommonControls.FocusManager.FocusChangedHandler listener);
        public delegate void FocusChangedHandler(object sender, JetBrains.CommonControls.FocusManager.FocusChangedEventArgs focusChangedArgs);
    }
    [System.ObsoleteAttribute("Probably, should use FormOwnedByMainWindow.")]
    public class FormBase : System.Windows.Forms.Form
    {
        public FormBase([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow mainwin) { }
        protected override System.Windows.Forms.CreateParams CreateParams { get; }
    }
    public interface ICachedPresentation
    {
        void ResetCache();
    }
    public interface IConstrainableControl
    {
        bool AutoActivate { get; set; }
        JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit);
        void SetLayout(JetBrains.UI.LayoutResult layout);
    }
    public interface IFocusListener
    {
        [JetBrains.Threading.GuardAttribute(JetBrains.Threading.Rgc.Invariant)]
        void OnFocusChanged(object sender, JetBrains.CommonControls.FocusManager.FocusChangedEventArgs e);
    }
    public interface IHaveRenderParams
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<JetBrains.UI.RenderParams> RenderParams { get; }
    }
    public enum ImagePlacement
    {
        LEFT = 0,
        RIGHT = 1,
    }
    public interface IPresentableItem
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.CommonControls.PresentableItemImageCollection Images { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.RichText.RichText RichText { get; set; }
        void Clear();
    }
    public interface IPresentableItemImageOwner
    {
        void NotifyImageCollectionChanged();
    }
    public interface ITabStripRenderer
    {
        void DrawArrow(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, System.Windows.Forms.ArrowDirection direction, bool enabled, bool hotTrack);
        void DrawBackground(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds);
        void DrawCloseGlyph(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, bool hotTrack);
        void DrawPageBackground(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, JetBrains.CommonControls.TabStripPage page, int index);
        void DrawPageBackgroundActive(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, JetBrains.CommonControls.TabStripPage page, int index);
        void DrawPresentableItem(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, JetBrains.CommonControls.TabStripPage page, bool isActive, JetBrains.UI.RenderParams renderParams, System.Nullable<double> fFrame);
    }
    public interface IWindowlessControl : JetBrains.CommonControls.IConstrainableControl
    {
        System.Drawing.Rectangle Bounds { get; }
        JetBrains.DataFlow.ISimpleSignal GottenDirty { get; }
        void Paint(System.Drawing.Graphics g);
        void SetBounds(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Rectangle bounds);
    }
    public class PresentableItem : JetBrains.CommonControls.IPresentableItem, JetBrains.CommonControls.IPresentableItemImageOwner
    {
        public PresentableItem() { }
        public PresentableItem(string text) { }
        public PresentableItem(JetBrains.UI.RichText.RichText richText) { }
        public PresentableItem(JetBrains.UI.RichText.RichText richText, System.Collections.Generic.IList<JetBrains.CommonControls.PresentableItemImage> images) { }
        public PresentableItem(JetBrains.UI.Icons.IconId icon) { }
        public PresentableItem(JetBrains.UI.Icons.IconId icon, JetBrains.UI.RichText.RichText label) { }
        public PresentableItem(JetBrains.CommonControls.IPresentableItem other) { }
        public JetBrains.CommonControls.PresentableItemImageCollection Images { get; }
        public JetBrains.UI.RichText.RichText RichText { get; set; }
        public void Clear() { }
        public void NotifyImageCollectionChanged() { }
        protected virtual void UpdateItem() { }
    }
    public class PresentableItemBlock : JetBrains.CommonControls.IPresentableItemImageOwner
    {
        public PresentableItemBlock() { }
        public PresentableItemBlock(string text) { }
        public PresentableItemBlock(JetBrains.UI.RichText.RichText richText) { }
        public PresentableItemBlock(JetBrains.UI.RichText.RichTextBlock richTextBlock, System.Collections.Generic.IList<JetBrains.CommonControls.PresentableItemImage> images) { }
        public PresentableItemBlock(JetBrains.UI.Icons.IconId icon) { }
        public PresentableItemBlock(JetBrains.UI.Icons.IconId icon, JetBrains.UI.RichText.RichTextBlock label) { }
        public PresentableItemBlock(JetBrains.CommonControls.PresentableItemBlock other) { }
        public JetBrains.CommonControls.PresentableItemImageCollection Images { get; }
        public JetBrains.UI.RichText.RichTextBlock RichText { get; set; }
        public void Clear() { }
        public void NotifyImageCollectionChanged() { }
        protected virtual void UpdateItem() { }
    }
    public class static PresentableItemBlockRenderer
    {
        public static System.Drawing.Rectangle GetRichTextRectangle(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, JetBrains.CommonControls.PresentableItemBlock item, JetBrains.UI.RenderParams renderparams, JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        public static System.Drawing.Rectangle GetTextBounds(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, JetBrains.CommonControls.PresentableItemBlock item, JetBrains.UI.RenderParams renderparams, JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        public static object HitTest(System.Drawing.Graphics g, System.Drawing.Point hitPoint, System.Drawing.Rectangle bounds, JetBrains.CommonControls.PresentableItemBlock item, JetBrains.UI.RenderParams renderparams, JetBrains.UI.Icons.IThemedIconManager themedIconManager, out System.Drawing.Rectangle hitRect) { }
        public static System.Drawing.Size Measure(System.Drawing.Graphics g, JetBrains.CommonControls.PresentableItemBlock item, JetBrains.UI.RenderParams renderParams, JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        public static void Render(System.Drawing.Graphics g, JetBrains.CommonControls.PresentableItemBlock item, System.Drawing.Rectangle bounds, JetBrains.UI.RenderParams renderparams, JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
    }
    public class PresentableItemDumper
    {
        public static string PresentableItemToString(JetBrains.CommonControls.IPresentableItem item) { }
    }
    public class PresentableItemImage
    {
        public PresentableItemImage([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId icon, JetBrains.UI.RichText.RichText toolTipText = null, JetBrains.CommonControls.ImagePlacement placement = 0) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Icons.IconId Icon { get; }
        public JetBrains.CommonControls.ImagePlacement Placement { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public object Tag { get; set; }
        public JetBrains.UI.RichText.RichText ToolTipText { get; }
    }
    public class PresentableItemImageCollection : System.Collections.ObjectModel.Collection<JetBrains.CommonControls.PresentableItemImage>
    {
        public PresentableItemImageCollection(System.Collections.Generic.IList<JetBrains.CommonControls.PresentableItemImage> images) { }
        public PresentableItemImageCollection(JetBrains.CommonControls.IPresentableItemImageOwner owner) { }
        public PresentableItemImageCollection(JetBrains.CommonControls.IPresentableItemImageOwner owner, System.Collections.Generic.IList<JetBrains.CommonControls.PresentableItemImage> images) { }
        public void Add(JetBrains.UI.Icons.IconId icon) { }
        public void Add(JetBrains.UI.Icons.IconId icon, JetBrains.UI.RichText.RichText toolTipText) { }
        public void Add(JetBrains.UI.Icons.IconId icon, JetBrains.UI.RichText.RichText toolTipText, JetBrains.CommonControls.ImagePlacement imagePlacement) { }
        protected override void ClearItems() { }
        public void Insert(int index, JetBrains.UI.Icons.IconId icon) { }
        protected override void InsertItem(int index, JetBrains.CommonControls.PresentableItemImage item) { }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, JetBrains.CommonControls.PresentableItemImage item) { }
    }
    public class static PresentableItemRenderer
    {
        public static void Arrange([JetBrains.Annotations.NotNullAttribute()] System.Drawing.Graphics g, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IPresentableItem item, System.Drawing.Size size, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RenderParams renderparams, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager, JetBrains.UI.Icons.RasterizationResolution resolution, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.PresentableItemRenderer.Layout layout) { }
        public static System.Drawing.Rectangle GetRichTextRectangle(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, JetBrains.CommonControls.IPresentableItem item, JetBrains.UI.RenderParams renderparams, JetBrains.UI.Icons.IThemedIconManager themedIconManager, JetBrains.UI.Icons.RasterizationResolution resolution, bool useAllLines = False) { }
        public static System.Drawing.Rectangle GetTextBounds(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, JetBrains.CommonControls.IPresentableItem item, JetBrains.UI.RenderParams renderparams, JetBrains.UI.Icons.IThemedIconManager themedIconManager, JetBrains.UI.Icons.RasterizationResolution resolution) { }
        public static object HitTest(System.Drawing.Graphics g, System.Drawing.Point hitPoint, System.Drawing.Rectangle bounds, JetBrains.CommonControls.IPresentableItem item, JetBrains.UI.RenderParams renderparams, JetBrains.UI.Icons.IThemedIconManager themedIconManager, out System.Drawing.Rectangle elementRect, JetBrains.UI.Icons.RasterizationResolution resolution) { }
        public static System.Drawing.Size Measure(System.Drawing.Graphics g, JetBrains.CommonControls.IPresentableItem item, JetBrains.UI.RenderParams renderparams, JetBrains.UI.Icons.IThemedIconManager themedIconManager, JetBrains.UI.Icons.RasterizationResolution resolution) { }
        public static void Render(System.Drawing.Graphics g, JetBrains.CommonControls.IPresentableItem item, System.Drawing.Rectangle bounds, JetBrains.UI.RenderParams renderparams, JetBrains.UI.Icons.IThemedIconManager themedIconManager, JetBrains.UI.Icons.RasterizationResolution resolution) { }
        public static void RenderAnimatedFrame(System.Drawing.Graphics g, JetBrains.CommonControls.IPresentableItem item, System.Drawing.Rectangle bounds, JetBrains.UI.RenderParams renderparams, JetBrains.UI.Icons.IThemedIconManager themedIconManager, double fFrame, JetBrains.UI.Icons.RasterizationResolution resolution) { }
        public static void RenderCore([JetBrains.Annotations.NotNullAttribute()] System.Drawing.Graphics g, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IPresentableItem item, System.Drawing.Point location, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RenderParams renderparams, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager, JetBrains.UI.Icons.RasterizationResolution resolution, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.PresentableItemRenderer.Layout layout, System.Nullable<double> fAnimatedFrame = null) { }
        public class Layout
        {
            public System.Nullable<System.Drawing.Size> DesiredSize;
            public System.Drawing.Rectangle[] Icons;
            public System.Drawing.Size Size;
            public System.Drawing.Rectangle Text;
        }
    }
    public class PresentableItemTipPainter : JetBrains.CommonControls.IConstrainableControl, JetBrains.CommonControls.IHaveRenderParams, JetBrains.CommonControls.IWindowlessControl
    {
        protected System.Drawing.Rectangle myBounds;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.DataFlow.IProperty<JetBrains.CommonControls.IPresentableItem> myPresentableItem;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.DataFlow.IProperty<JetBrains.UI.RenderParams> myRenderParams;
        public PresentableItemTipPainter([JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IPresentableItem presentableitem, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RenderParams renderparams, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        public PresentableItemTipPainter([JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IPresentableItem presentableitem, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        public PresentableItemTipPainter([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText text, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        public PresentableItemTipPainter([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        public bool AutoActivate { get; set; }
        public System.Drawing.Rectangle Bounds { get; }
        public JetBrains.DataFlow.ISimpleSignal GottenDirty { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.CommonControls.IPresentableItem> PresentableItem { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.RenderParams> RenderParams { get; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        public void Paint([JetBrains.Annotations.NotNullAttribute()] System.Drawing.Graphics g) { }
        public void SetBounds(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Rectangle bounds) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
        public override string ToString() { }
    }
    public class RichTextTipPainter : JetBrains.CommonControls.IConstrainableControl, JetBrains.CommonControls.IHaveRenderParams, JetBrains.CommonControls.IWindowlessControl
    {
        public static readonly System.Drawing.Size BorderSize;
        protected System.Drawing.Rectangle myBounds;
        protected System.Nullable<System.Drawing.Size> myDesiredBlockSize;
        protected JetBrains.UI.RichText.RichTextBlock myReflowedRichTextBlock;
        protected bool myReflowedRichTextBlockUpToDate;
        protected readonly JetBrains.DataFlow.IProperty<JetBrains.UI.RenderParams> myRenderParams;
        protected readonly JetBrains.DataFlow.IProperty<JetBrains.UI.RichText.RichTextBlock> myRichTextBlock;
        protected int myWidthConstraint;
        public RichTextTipPainter([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText richText) { }
        public RichTextTipPainter([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichTextBlock block, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RenderParams renderparams) { }
        public RichTextTipPainter([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichTextBlock block) { }
        public bool AutoActivate { get; set; }
        public System.Drawing.Rectangle Bounds { get; }
        public JetBrains.DataFlow.ISimpleSignal GottenDirty { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<JetBrains.UI.RenderParams> RenderParams { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<JetBrains.UI.RichText.RichTextBlock> RichTextBlock { get; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        protected JetBrains.UI.RichText.RichTextBlock GetReflowedRichTextBlock(System.Drawing.Graphics g) { }
        public void Paint(System.Drawing.Graphics g) { }
        public void SetBounds(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Rectangle bounds) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
        public override string ToString() { }
    }
    public class SizeConstraint
    {
        public static readonly JetBrains.CommonControls.SizeConstraint Empty;
        public SizeConstraint(System.Drawing.Size size) { }
        public SizeConstraint(int maxWidth, int maxHeight) { }
        public System.Drawing.Size ConstrainingSize { get; }
        public bool IsEmpty { get; }
        public int MaxHeight { get; }
        public int MaxWidth { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public bool Satisfies(System.Drawing.Size size) { }
    }
    public class SplittedContainer : DevExpress.XtraEditors.SplitContainerControl
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public readonly JetBrains.UI.Icons.IThemedIconManager ThemedIconManager;
        public SplittedContainer(JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        public event System.EventHandler SplitterPositionChanged;
        protected override DevExpress.XtraEditors.SplitGroupPanel CreatePanel() { }
        protected override void OnSplitterPositionChanged() { }
    }
    public class SplittedPanel : DevExpress.XtraEditors.SplitGroupPanel
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public readonly JetBrains.CommonControls.SplittedContainer Owner;
        public SplittedPanel(JetBrains.CommonControls.SplittedContainer container) { }
        protected override bool CanShowCaption { get; }
        public JetBrains.CommonControls.IPresentableItem PresentableItem { get; set; }
        protected override DevExpress.Utils.Drawing.GroupObjectPainter CreatePainter() { }
    }
    public class StringCollectionEdit : JetBrains.UI.CommonControls.SafeTableLayoutPanel
    {
        public readonly JetBrains.DataFlow.Property<string> Caption;
        public readonly JetBrains.DataFlow.Property<JetBrains.UI.Icons.IconId> ItemIcon;
        public readonly JetBrains.DataFlow.Property<string[]> Items;
        public StringCollectionEdit(JetBrains.UI.Application.IUIApplication environment, [JetBrains.Annotations.NotNullAttribute()] string caption, JetBrains.UI.Icons.IconId itemicon, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IMainWindow ownerwin, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.Validation.FormValidators formValidators) { }
        public StringCollectionEdit(JetBrains.UI.Application.IUIApplication environment, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.IWin32Window ownerwin, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.Validation.FormValidators formValidators) { }
        public StringCollectionEdit(JetBrains.UI.Application.IUIApplication environment, [JetBrains.Annotations.NotNullAttribute()] string caption, JetBrains.UI.Icons.IconId itemicon, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IMainWindow ownerwin, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.Validation.FormValidators formValidators, JetBrains.UI.Icons.IconId addImage, JetBrains.UI.Icons.IconId editImage, JetBrains.UI.Icons.IconId removeImage) { }
        public StringCollectionEdit(JetBrains.UI.Application.IUIApplication environment, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.IWin32Window ownerwin, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.Validation.FormValidators formValidators, JetBrains.UI.Icons.IconId addImage, JetBrains.UI.Icons.IconId editImage, JetBrains.UI.Icons.IconId removeImage) { }
        public new JetBrains.UI.Application.IUIApplication Environment { get; }
    }
    public class TabPageEventArgs : System.EventArgs
    {
        public TabPageEventArgs(JetBrains.CommonControls.TabStripPage page) { }
        public TabPageEventArgs(int index, JetBrains.CommonControls.TabStripPage page) { }
        public int Index { get; }
        public JetBrains.CommonControls.TabStripPage Page { get; }
    }
    public delegate void TabPageEventHandler(object sender, JetBrains.CommonControls.TabPageEventArgs args);
    public class TabStrip : System.Windows.Forms.Control, JetBrains.UI.Tooltips.ITooltipProvider
    {
        public System.EventHandler<JetBrains.UI.ContextMenuEventArgs> ContextMenuRequested;
        public TabStrip(JetBrains.UI.Application.IUIApplication environment, bool boldActivePage = True) { }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public JetBrains.CommonControls.TabStripPage ActivePage { get; set; }
        public bool AllowReorder { get; set; }
        public bool CloseOnMiddleClick { get; set; }
        protected override System.Windows.Forms.Padding DefaultPadding { get; }
        protected override System.Drawing.Size DefaultSize { get; }
        public System.Windows.Forms.Padding PagePadding { get; set; }
        public JetBrains.CommonControls.TabStripPageCollection Pages { get; }
        public int PresentableItemMargin { get; set; }
        public JetBrains.CommonControls.ITabStripRenderer Renderer { get; set; }
        public bool ShrinkToFit { get; set; }
        public event System.EventHandler ActivePageChanged;
        public event System.EventHandler ActivePageContentChanged;
        public event System.EventHandler TabDoubleClicked;
        public void ContentControlChanged(JetBrains.CommonControls.TabStripPage page) { }
        protected virtual JetBrains.CommonControls.TabStripRenderer CreateRenderer(JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        protected override void Dispose(bool disposing) { }
        public void EnsureVisible(JetBrains.CommonControls.TabStripPage page) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        protected override void OnDragLeave(System.EventArgs e) { }
        protected override void OnDragOver(System.Windows.Forms.DragEventArgs e) { }
        protected override void OnFontChanged(System.EventArgs e) { }
        protected override void OnHandleCreated(System.EventArgs e) { }
        protected override void OnHandleDestroyed(System.EventArgs e) { }
        protected override void OnLayout(System.Windows.Forms.LayoutEventArgs levent) { }
        protected override void OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseLeave(System.EventArgs e) { }
        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e) { }
        public void PageChanged(JetBrains.CommonControls.TabStripPage page) { }
        public JetBrains.CommonControls.TabStripPage PointToPage(System.Drawing.Point point) { }
        protected override bool ProcessCmdKey(ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData) { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
    }
    public class TabStripControl : JetBrains.UI.CommonControls.SafeUserControl
    {
        protected System.Windows.Forms.Panel myContentPanel;
        protected JetBrains.CommonControls.TabStrip myTabStrip;
        public TabStripControl(JetBrains.UI.Application.IUIApplication environment) { }
        public TabStripControl(string title, JetBrains.UI.Application.IUIApplication environment) { }
        public JetBrains.CommonControls.TabStripPage ActivePage { get; set; }
        public bool AllowReorder { get; set; }
        public bool CloseOnMiddleClick { get; set; }
        protected virtual int DefaultStripHeight { get; }
        public System.Windows.Forms.Control EmptyControl { get; set; }
        public JetBrains.CommonControls.TabStripPageAlignment PageAlignment { get; set; }
        public System.Windows.Forms.Padding PagePadding { get; set; }
        public JetBrains.CommonControls.TabStripPageCollection Pages { get; }
        public bool ShrinkToFit { get; set; }
        public event System.EventHandler ActivePageChanged;
        public event System.EventHandler ActivePageContentChanged;
        public event System.EventHandler TabDoubleClick;
        protected virtual JetBrains.CommonControls.TabStrip CreateCoreTabStrip(JetBrains.UI.Application.IUIApplication environment) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        protected virtual void OnContextMenuRequested(object sender, JetBrains.UI.ContextMenuEventArgs e) { }
        protected override void OnFontChanged(System.EventArgs e) { }
        public JetBrains.CommonControls.TabStripPage PointToPage(System.Drawing.Point clientPoint) { }
        protected override bool ProcessCmdKey(ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData) { }
        public override string ToString() { }
    }
    [System.ComponentModel.DesignTimeVisibleAttribute(false)]
    [System.ComponentModel.ToolboxItemAttribute(false)]
    public class TabStripPage : JetBrains.CommonControls.PresentableItem
    {
        public TabStripPage(System.Func<bool> showCloseButtonDelegate) { }
        public TabStripPage(System.Windows.Forms.Control contentControl, JetBrains.UI.RichText.RichText richText) { }
        public TabStripPage(System.Windows.Forms.Control contentControl, string title, System.Func<bool> showCloseButtonDelegate) { }
        public TabStripPage(JetBrains.UI.RichText.RichText richText) { }
        public TabStripPage(string title) { }
        public TabStripPage(System.Windows.Forms.Control contentControl, JetBrains.UI.RichText.RichText richText, System.Collections.Generic.IList<JetBrains.CommonControls.PresentableItemImage> images) { }
        public TabStripPage(System.Windows.Forms.Control contentControl, string title, System.Collections.Generic.IList<JetBrains.CommonControls.PresentableItemImage> images) { }
        public TabStripPage(JetBrains.UI.RichText.RichText richText, System.Collections.Generic.IList<JetBrains.CommonControls.PresentableItemImage> images) { }
        public TabStripPage(string title, System.Collections.Generic.IList<JetBrains.CommonControls.PresentableItemImage> images) { }
        public TabStripPage(System.Windows.Forms.Control contentControl) { }
        public TabStripPage(System.Windows.Forms.Control contentControl, string title, System.Collections.Generic.IList<JetBrains.CommonControls.PresentableItemImage> images, System.Func<bool> showCloseButtonDelegate) { }
        public bool Active { get; }
        public System.Windows.Forms.Control ContentControl { get; set; }
        public bool IsDisabled { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.CommonControls.TabStrip TabStrip { get; }
        public object Tag { get; set; }
        public JetBrains.UI.RichText.RichText TooltipText { get; set; }
        public event System.EventHandler Activated;
        public event System.ComponentModel.CancelEventHandler Activating;
        public event System.EventHandler Closed;
        public event System.ComponentModel.CancelEventHandler Closing;
        public event System.EventHandler Deactivated;
        public bool CanClose() { }
        public void Close() { }
        public void PerformClick() { }
        public bool ShowCloseButton() { }
        public void Update() { }
        protected override void UpdateItem() { }
    }
    public enum TabStripPageAlignment
    {
        Top = 0,
        Bottom = 1,
    }
    public class TabStripPageCollection : System.Collections.ObjectModel.Collection<JetBrains.CommonControls.TabStripPage>
    {
        public TabStripPageCollection(JetBrains.CommonControls.TabStrip tabStrip) { }
        public event JetBrains.CommonControls.TabPageEventHandler PageAdded;
        public event JetBrains.CommonControls.TabPageEventHandler PageChanged;
        public event JetBrains.CommonControls.TabPageEventHandler PageRemoved;
        public event System.EventHandler PagesCleared;
        public void AddRange(System.Collections.Generic.ICollection<JetBrains.CommonControls.TabStripPage> items) { }
        protected override void ClearItems() { }
        protected override void InsertItem(int index, JetBrains.CommonControls.TabStripPage item) { }
        public void Move(JetBrains.CommonControls.TabStripPage page, int index) { }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, JetBrains.CommonControls.TabStripPage item) { }
        public enum CollectionChangeKind
        {
            Clear = 0,
            Remove = 1,
            Insert = 2,
            Change = 3,
        }
    }
    public class TabStripRenderer : JetBrains.CommonControls.ITabStripRenderer
    {
        public TabStripRenderer(JetBrains.UI.Theming.ITheming themeManager, JetBrains.CommonControls.TabStripPageAlignment alignment) { }
        public void DrawArrow(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, System.Windows.Forms.ArrowDirection direction, bool enabled, bool hotTrack) { }
        public void DrawBackground(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds) { }
        public void DrawCloseGlyph(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, bool hotTrack) { }
        public void DrawPageBackground(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, JetBrains.CommonControls.TabStripPage page, int index) { }
        public void DrawPageBackgroundActive(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, JetBrains.CommonControls.TabStripPage page, int index) { }
        public void DrawPresentableItem(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, JetBrains.CommonControls.TabStripPage page, bool isActive, JetBrains.UI.RenderParams renderParams, System.Nullable<double> fFrame) { }
    }
    public class ThemedColorTable : System.Windows.Forms.ProfessionalColorTable
    {
        public ThemedColorTable(JetBrains.UI.Components.Theming.ColorTheme colorTheme) { }
        public override System.Drawing.Color ButtonCheckedGradientBegin { get; }
        public override System.Drawing.Color ButtonCheckedGradientEnd { get; }
        public override System.Drawing.Color ButtonCheckedGradientMiddle { get; }
        public override System.Drawing.Color ButtonCheckedHighlight { get; }
        public override System.Drawing.Color ButtonCheckedHighlightBorder { get; }
        public override System.Drawing.Color ButtonPressedBorder { get; }
        public override System.Drawing.Color ButtonPressedGradientBegin { get; }
        public override System.Drawing.Color ButtonPressedGradientEnd { get; }
        public override System.Drawing.Color ButtonPressedGradientMiddle { get; }
        public override System.Drawing.Color ButtonPressedHighlight { get; }
        public override System.Drawing.Color ButtonPressedHighlightBorder { get; }
        public override System.Drawing.Color ButtonSelectedBorder { get; }
        public override System.Drawing.Color ButtonSelectedGradientBegin { get; }
        public override System.Drawing.Color ButtonSelectedGradientEnd { get; }
        public override System.Drawing.Color ButtonSelectedGradientMiddle { get; }
        public override System.Drawing.Color ButtonSelectedHighlight { get; }
        public override System.Drawing.Color ButtonSelectedHighlightBorder { get; }
        public override System.Drawing.Color CheckBackground { get; }
        public override System.Drawing.Color CheckPressedBackground { get; }
        public override System.Drawing.Color CheckSelectedBackground { get; }
        public override System.Drawing.Color GripDark { get; }
        public override System.Drawing.Color GripLight { get; }
        public override System.Drawing.Color ImageMarginGradientBegin { get; }
        public override System.Drawing.Color ImageMarginGradientEnd { get; }
        public override System.Drawing.Color ImageMarginGradientMiddle { get; }
        public override System.Drawing.Color ImageMarginRevealedGradientBegin { get; }
        public override System.Drawing.Color ImageMarginRevealedGradientEnd { get; }
        public override System.Drawing.Color ImageMarginRevealedGradientMiddle { get; }
        public override System.Drawing.Color MenuBorder { get; }
        public override System.Drawing.Color MenuItemBorder { get; }
        public override System.Drawing.Color MenuItemPressedGradientBegin { get; }
        public override System.Drawing.Color MenuItemPressedGradientEnd { get; }
        public override System.Drawing.Color MenuItemPressedGradientMiddle { get; }
        public override System.Drawing.Color MenuItemSelected { get; }
        public override System.Drawing.Color MenuItemSelectedGradientBegin { get; }
        public override System.Drawing.Color MenuItemSelectedGradientEnd { get; }
        public override System.Drawing.Color MenuStripGradientBegin { get; }
        public override System.Drawing.Color MenuStripGradientEnd { get; }
        public override System.Drawing.Color OverflowButtonGradientBegin { get; }
        public override System.Drawing.Color OverflowButtonGradientEnd { get; }
        public override System.Drawing.Color OverflowButtonGradientMiddle { get; }
        public override System.Drawing.Color RaftingContainerGradientBegin { get; }
        public override System.Drawing.Color RaftingContainerGradientEnd { get; }
        public override System.Drawing.Color SeparatorDark { get; }
        public override System.Drawing.Color SeparatorLight { get; }
        public override System.Drawing.Color ToolStripBorder { get; }
        public override System.Drawing.Color ToolStripContentPanelGradientBegin { get; }
        public override System.Drawing.Color ToolStripContentPanelGradientEnd { get; }
        public override System.Drawing.Color ToolStripDropDownBackground { get; }
        public override System.Drawing.Color ToolStripGradientBegin { get; }
        public override System.Drawing.Color ToolStripGradientEnd { get; }
        public override System.Drawing.Color ToolStripGradientMiddle { get; }
        public override System.Drawing.Color ToolStripPanelGradientBegin { get; }
        public override System.Drawing.Color ToolStripPanelGradientEnd { get; }
    }
    [System.ComponentModel.DefaultEventAttribute("Click")]
    public class ToolbarButton : JetBrains.UI.CommonControls.SafeUserControl
    {
        public ToolbarButton(JetBrains.UI.Application.IUIApplication environment) { }
        protected override System.Drawing.Size DefaultSize { get; }
        public System.Drawing.Image Image { get; set; }
        protected override void OnEnabledChanged(System.EventArgs e) { }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseLeave(System.EventArgs e) { }
        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e) { }
    }
    public class ToolStripButtonEx<TImage> : System.Windows.Forms.ToolStripButton
        where TImage : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
    {
        public ToolStripButtonEx(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Icons.IThemedIconManager themedIconManager, string text = null, System.EventHandler onClick = null) { }
    }
    public class ToolStripEx : System.Windows.Forms.ToolStrip
    {
        public ToolStripEx() { }
        public bool ClickThrough { get; set; }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
    }
    public class ToolStripProfessionalRendererEx : System.Windows.Forms.ToolStripProfessionalRenderer
    {
        public ToolStripProfessionalRendererEx(System.Windows.Forms.ProfessionalColorTable professionalColorTable, JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        protected override void OnRenderArrow(System.Windows.Forms.ToolStripArrowRenderEventArgs e) { }
        protected override void OnRenderItemCheck(System.Windows.Forms.ToolStripItemImageRenderEventArgs e) { }
        protected override void OnRenderSplitButtonBackground(System.Windows.Forms.ToolStripItemRenderEventArgs e) { }
    }
    public class VsFlatColorTable : System.Windows.Forms.ProfessionalColorTable
    {
        public override System.Drawing.Color ButtonCheckedGradientBegin { get; }
        public override System.Drawing.Color ButtonCheckedGradientEnd { get; }
        public override System.Drawing.Color ButtonCheckedGradientMiddle { get; }
        public override System.Drawing.Color ButtonPressedBorder { get; }
        public override System.Drawing.Color ButtonPressedGradientBegin { get; }
        public override System.Drawing.Color ButtonPressedGradientEnd { get; }
        public override System.Drawing.Color ButtonPressedGradientMiddle { get; }
        public override System.Drawing.Color ButtonSelectedBorder { get; }
        public override System.Drawing.Color ButtonSelectedGradientBegin { get; }
        public override System.Drawing.Color ButtonSelectedGradientEnd { get; }
        public override System.Drawing.Color ButtonSelectedGradientMiddle { get; }
        public override System.Drawing.Color CheckBackground { get; }
        public override System.Drawing.Color CheckPressedBackground { get; }
        public override System.Drawing.Color CheckSelectedBackground { get; }
        public override System.Drawing.Color GripDark { get; }
        public override System.Drawing.Color GripLight { get; }
        public override System.Drawing.Color ImageMarginGradientBegin { get; }
        public override System.Drawing.Color ImageMarginGradientEnd { get; }
        public override System.Drawing.Color ImageMarginGradientMiddle { get; }
        public override System.Drawing.Color ImageMarginRevealedGradientBegin { get; }
        public override System.Drawing.Color ImageMarginRevealedGradientEnd { get; }
        public override System.Drawing.Color ImageMarginRevealedGradientMiddle { get; }
        public override System.Drawing.Color MenuBorder { get; }
        public override System.Drawing.Color MenuItemBorder { get; }
        public override System.Drawing.Color MenuItemPressedGradientBegin { get; }
        public override System.Drawing.Color MenuItemPressedGradientEnd { get; }
        public override System.Drawing.Color MenuItemPressedGradientMiddle { get; }
        public override System.Drawing.Color MenuItemSelected { get; }
        public override System.Drawing.Color MenuItemSelectedGradientBegin { get; }
        public override System.Drawing.Color MenuItemSelectedGradientEnd { get; }
        public override System.Drawing.Color MenuStripGradientBegin { get; }
        public override System.Drawing.Color MenuStripGradientEnd { get; }
        public override System.Drawing.Color OverflowButtonGradientBegin { get; }
        public override System.Drawing.Color OverflowButtonGradientEnd { get; }
        public override System.Drawing.Color OverflowButtonGradientMiddle { get; }
        public override System.Drawing.Color RaftingContainerGradientBegin { get; }
        public override System.Drawing.Color RaftingContainerGradientEnd { get; }
        public override System.Drawing.Color SeparatorDark { get; }
        public override System.Drawing.Color SeparatorLight { get; }
        public override System.Drawing.Color ToolStripBorder { get; }
        public override System.Drawing.Color ToolStripDropDownBackground { get; }
        public override System.Drawing.Color ToolStripGradientBegin { get; }
        public override System.Drawing.Color ToolStripGradientEnd { get; }
        public override System.Drawing.Color ToolStripGradientMiddle { get; }
        public new static System.Drawing.Color GetAlphaBlendedColor(System.Drawing.Graphics g, System.Drawing.Color src, System.Drawing.Color dest, int alpha) { }
        public new static System.Drawing.Color GetAlphaBlendedColorHighRes([JetBrains.Annotations.CanBeNullAttribute()] System.Drawing.Graphics graphics, System.Drawing.Color src, System.Drawing.Color dest, int alpha) { }
    }
    public class VsSpecialColorTable : System.Windows.Forms.ProfessionalColorTable
    {
        public static System.Nullable<bool> OverrideUseBaseColorTable;
        public override System.Drawing.Color ButtonCheckedGradientBegin { get; }
        public override System.Drawing.Color ButtonCheckedGradientEnd { get; }
        public override System.Drawing.Color ButtonCheckedGradientMiddle { get; }
        public override System.Drawing.Color ButtonPressedBorder { get; }
        public override System.Drawing.Color ButtonPressedGradientBegin { get; }
        public override System.Drawing.Color ButtonPressedGradientEnd { get; }
        public override System.Drawing.Color ButtonPressedGradientMiddle { get; }
        public override System.Drawing.Color ButtonSelectedBorder { get; }
        public override System.Drawing.Color ButtonSelectedGradientBegin { get; }
        public override System.Drawing.Color ButtonSelectedGradientEnd { get; }
        public override System.Drawing.Color ButtonSelectedGradientMiddle { get; }
        public override System.Drawing.Color CheckBackground { get; }
        public override System.Drawing.Color CheckPressedBackground { get; }
        public override System.Drawing.Color CheckSelectedBackground { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.Dictionary<JetBrains.CommonControls.VsSpecialColorTable.KnownColors, System.Drawing.Color> ColorTable { get; }
        public override System.Drawing.Color GripDark { get; }
        public override System.Drawing.Color GripLight { get; }
        public override System.Drawing.Color ImageMarginGradientBegin { get; }
        public override System.Drawing.Color ImageMarginGradientEnd { get; }
        public override System.Drawing.Color ImageMarginGradientMiddle { get; }
        public override System.Drawing.Color ImageMarginRevealedGradientBegin { get; }
        public override System.Drawing.Color ImageMarginRevealedGradientEnd { get; }
        public override System.Drawing.Color ImageMarginRevealedGradientMiddle { get; }
        public override System.Drawing.Color MenuBorder { get; }
        public override System.Drawing.Color MenuItemBorder { get; }
        public override System.Drawing.Color MenuItemPressedGradientBegin { get; }
        public override System.Drawing.Color MenuItemPressedGradientEnd { get; }
        public override System.Drawing.Color MenuItemPressedGradientMiddle { get; }
        public override System.Drawing.Color MenuItemSelected { get; }
        public override System.Drawing.Color MenuItemSelectedGradientBegin { get; }
        public override System.Drawing.Color MenuItemSelectedGradientEnd { get; }
        public override System.Drawing.Color MenuStripGradientBegin { get; }
        public override System.Drawing.Color MenuStripGradientEnd { get; }
        public override System.Drawing.Color OverflowButtonGradientBegin { get; }
        public override System.Drawing.Color OverflowButtonGradientEnd { get; }
        public override System.Drawing.Color OverflowButtonGradientMiddle { get; }
        public override System.Drawing.Color RaftingContainerGradientBegin { get; }
        public override System.Drawing.Color RaftingContainerGradientEnd { get; }
        public override System.Drawing.Color SeparatorDark { get; }
        public override System.Drawing.Color SeparatorLight { get; }
        public System.Drawing.Color StatusBar { get; }
        public System.Drawing.Color StatusBarText { get; }
        public override System.Drawing.Color ToolStripBorder { get; }
        public override System.Drawing.Color ToolStripDropDownBackground { get; }
        public override System.Drawing.Color ToolStripGradientBegin { get; }
        public override System.Drawing.Color ToolStripGradientEnd { get; }
        public override System.Drawing.Color ToolStripGradientMiddle { get; }
        protected bool UseBaseColorTable { get; }
        public new static System.Drawing.Color GetAlphaBlendedColor([JetBrains.Annotations.CanBeNullAttribute()] System.Drawing.Graphics g, System.Drawing.Color src, System.Drawing.Color dest, int alpha) { }
        public new static System.Drawing.Color GetAlphaBlendedColorHighRes([JetBrains.Annotations.CanBeNullAttribute()] System.Drawing.Graphics graphics, System.Drawing.Color src, System.Drawing.Color dest, int alpha) { }
        public enum KnownColors
        {
            ButtonPressedBorder = 0,
            MenuItemBorder = 1,
            MenuItemBorderMouseOver = 2,
            MenuItemSelected = 3,
            CheckBackground = 4,
            CheckBackgroundMouseOver = 5,
            GripDark = 6,
            GripLight = 7,
            MenuStripGradientBegin = 8,
            MenuStripGradientEnd = 9,
            ImageMarginRevealedGradientBegin = 10,
            ImageMarginRevealedGradientEnd = 11,
            ImageMarginRevealedGradientMiddle = 12,
            MenuItemPressedGradientBegin = 13,
            MenuItemPressedGradientEnd = 14,
            ButtonPressedGradientBegin = 15,
            ButtonPressedGradientEnd = 16,
            ButtonPressedGradientMiddle = 17,
            ButtonSelectedGradientBegin = 18,
            ButtonSelectedGradientEnd = 19,
            ButtonSelectedGradientMiddle = 20,
            OverflowButtonGradientBegin = 21,
            OverflowButtonGradientEnd = 22,
            OverflowButtonGradientMiddle = 23,
            ButtonCheckedGradientBegin = 24,
            ButtonCheckedGradientEnd = 25,
            ButtonCheckedGradientMiddle = 26,
            ImageMarginGradientBegin = 27,
            ImageMarginGradientEnd = 28,
            ImageMarginGradientMiddle = 29,
            MenuBorder = 30,
            ToolStripDropDownBackground = 31,
            ToolStripBorder = 32,
            SeparatorDark = 33,
            SeparatorLight = 34,
            StatusBar = 35,
            StatusBarText = 36,
            MAX = 37,
        }
    }
    public class static WindowlessControl
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.CommonControls.IWindowlessControl Create([JetBrains.Annotations.NotNullAttribute()] string text) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.CommonControls.IWindowlessControl Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IPresentableItem presentableitem, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Theming.ITheming theming) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.CommonControls.IWindowlessControl Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IPresentableItem presentableitem, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RenderParams renderparams, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Theming.ITheming theming) { }
        public static JetBrains.CommonControls.IWindowlessControl Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichTextBlock block) { }
        public static JetBrains.CommonControls.IWindowlessControl Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichTextBlock block, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RenderParams renderparams) { }
        public static JetBrains.CommonControls.IWindowlessControl Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText richText) { }
        public static JetBrains.CommonControls.IWindowlessControl Create([JetBrains.Annotations.NotNullAttribute()] System.Drawing.Image bitmap) { }
    }
}
namespace JetBrains.CommonControls.Browser
{
    
    public class HtmlViewControl : JetBrains.UI.Controls.Browser.NonSecureWebBrowser, JetBrains.Application.DataContext.IDataRuleProvider
    {
        protected readonly System.Collections.Generic.IList<JetBrains.Application.DataContext.IDataRule> myDataRules;
        public HtmlViewControl(JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.ActionManagement.IActionManager actionManager) { }
        public string DocumentText { get; set; }
        public event System.EventHandler<JetBrains.CommonControls.Browser.HtmlViewControl.StringEventArgs> LocalNavigation;
        protected override void OnDocumentCompleted(System.Windows.Forms.WebBrowserDocumentCompletedEventArgs e) { }
        protected override void OnNavigating(System.Windows.Forms.WebBrowserNavigatingEventArgs e) { }
        public override bool PreProcessMessage(ref System.Windows.Forms.Message msg) { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
        public class StringEventArgs : System.EventArgs
        {
            public StringEventArgs(string uri) { }
            public string String { get; }
        }
    }
}
namespace JetBrains.CommonControls.Utils
{
    
    public sealed class DefaultNodeEqualityRelationship : System.Collections.Generic.IEqualityComparer<DevExpress.XtraTreeList.Nodes.TreeListNode>
    {
        public static readonly System.Collections.Generic.IEqualityComparer<DevExpress.XtraTreeList.Nodes.TreeListNode> INSTANCE;
        public bool Equals(DevExpress.XtraTreeList.Nodes.TreeListNode x, DevExpress.XtraTreeList.Nodes.TreeListNode y) { }
        public int GetHashCode(DevExpress.XtraTreeList.Nodes.TreeListNode node) { }
    }
}
namespace JetBrains.CommonControls.Validation
{
    
    public class CheckedValidator : JetBrains.CommonControls.Validation.ControlValidator
    {
        public CheckedValidator([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, JetBrains.CommonControls.Validation.ValidatorSeverity severity, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText message, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.CommonControls.Validation.FormValidators formValidators, JetBrains.UI.Application.IUIApplication environment) { }
        public CheckedValidator([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, JetBrains.CommonControls.Validation.ValidatorSeverity severity, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText message, [JetBrains.Annotations.NotNullAttribute()] string groupid, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.CommonControls.Validation.FormValidators formValidators, JetBrains.UI.Application.IUIApplication environment) { }
        public string GroupId { get; }
        public static System.Reflection.PropertyInfo GetPropertyInfo(System.Windows.Forms.Control control) { }
        public override void Update() { }
    }
    public class ComboBoxListener : JetBrains.CommonControls.Validation.IControlListener
    {
        public ComboBoxListener(System.Windows.Forms.Control control) { }
        public System.Windows.Forms.Control Control { get; }
        public event System.EventHandler<JetBrains.DataFlow.EventArgs<JetBrains.CommonControls.Validation.IControlListener>> ControlStateChanged;
        public static bool IsApplicable(System.Windows.Forms.Control control) { }
        public class Provider : JetBrains.CommonControls.Validation.IControlListenerProvider
        {
            public JetBrains.CommonControls.Validation.IControlListener CreateListener(System.Windows.Forms.Control control) { }
            public bool IsAvailable(System.Windows.Forms.Control control) { }
        }
    }
    public class static ControlListenerFactory
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.CommonControls.Validation.IControlListener CreateControlListener([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control) { }
        public static void RegisterProvider([JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.Validation.IControlListenerProvider provider) { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=false)]
    public class ControlListenerProviderAttribute : System.Attribute { }
    public abstract class ControlValidator : JetBrains.CommonControls.IConstrainableControl, JetBrains.CommonControls.IWindowlessControl, JetBrains.CommonControls.Validation.IValidator
    {
        protected ControlValidator([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public bool AutoActivate { get; set; }
        public System.Drawing.Rectangle Bounds { get; }
        public System.Windows.Forms.Control Control { get; }
        public JetBrains.UI.Application.IUIApplication Environment { get; }
        public JetBrains.DataFlow.ISimpleSignal GottenDirty { get; }
        public JetBrains.UI.IPopupLayouter Layouter { get; set; }
        public JetBrains.UI.RichText.RichText Message { get; set; }
        public JetBrains.CommonControls.Validation.ValidatorSeverity Severity { get; set; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        public JetBrains.CommonControls.IWindowlessControl WindowlessControl { get; set; }
        public event System.EventHandler<JetBrains.DataFlow.PropertyChangedEventArgs<string, JetBrains.UI.IPopupLayouter>> LayouterChanged;
        public event System.EventHandler<JetBrains.DataFlow.PropertyChangedEventArgs<string, JetBrains.UI.RichText.RichText>> MessageChanged;
        public event System.EventHandler<JetBrains.DataFlow.PropertyChangedEventArgs<string, JetBrains.CommonControls.Validation.ValidatorSeverity>> SeverityChanged;
        public event System.EventHandler<JetBrains.DataFlow.PropertyChangedEventArgs<string, JetBrains.CommonControls.IWindowlessControl>> WindowlessControlChanged;
        protected void FireLayouterChanged(JetBrains.UI.IPopupLayouter old, JetBrains.UI.IPopupLayouter @new) { }
        protected void FireMessageChanged(JetBrains.UI.RichText.RichText old, JetBrains.UI.RichText.RichText @new) { }
        protected void FireSeverityChanged(JetBrains.CommonControls.Validation.ValidatorSeverity old, JetBrains.CommonControls.Validation.ValidatorSeverity @new) { }
        protected void FireWindowlessControlChanged(JetBrains.CommonControls.IWindowlessControl old, JetBrains.CommonControls.IWindowlessControl @new) { }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        public static System.Drawing.Image GetImageFromSeverity(JetBrains.CommonControls.Validation.ValidatorSeverity severity, JetBrains.UI.Application.IUIApplication environment) { }
        protected void OnSeverityChangedShowHide(object sender, JetBrains.DataFlow.PropertyChangedEventArgs<string, JetBrains.CommonControls.Validation.ValidatorSeverity> args) { }
        public void Paint(System.Drawing.Graphics g) { }
        public void SetBounds(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Rectangle bounds) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
        public virtual void Update() { }
    }
    public class DecimalRangeValidator : JetBrains.CommonControls.Validation.ControlValidator
    {
        public DecimalRangeValidator(System.Windows.Forms.NumericUpDown a, System.Windows.Forms.NumericUpDown b, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public override void Update() { }
    }
    public class DynamicTextValidator : JetBrains.CommonControls.Validation.ControlValidator
    {
        public DynamicTextValidator([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, [JetBrains.Annotations.NotNullAttribute()] System.Func<string, JetBrains.Util.JetTuple<JetBrains.CommonControls.Validation.ValidatorSeverity, JetBrains.UI.RichText.RichText>> funcUpdate, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public override void Update() { }
    }
    public class DynamicTextValidatorReentranceSafe : JetBrains.CommonControls.Validation.DynamicTextValidator
    {
        public DynamicTextValidatorReentranceSafe(System.Windows.Forms.Control control, System.Func<string, JetBrains.Util.JetTuple<JetBrains.CommonControls.Validation.ValidatorSeverity, JetBrains.UI.RichText.RichText>> funcUpdate, JetBrains.Application.IShellLocks locks, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public override void Update() { }
    }
    public class ExplicitlyManagedValidator : JetBrains.CommonControls.Validation.ControlValidator
    {
        public ExplicitlyManagedValidator(System.Windows.Forms.Control control, JetBrains.CommonControls.Validation.ValidatorSeverity error, string message, System.Func<bool> predicate, JetBrains.Application.IShellLocks locks, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public override void Update() { }
        public void UpdateSync() { }
    }
    public class FormValidator : JetBrains.CommonControls.Validation.IFormValidator
    {
        protected internal FormValidator([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Form form, JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext, JetBrains.UI.PopupWindowManager.PopupWindowManager popupWindowManager) { }
        public System.Windows.Forms.Form Form { get; }
        public JetBrains.CommonControls.Validation.ValidatorSeverity Severity { get; set; }
        public JetBrains.DataFlow.ICollectionEvents<JetBrains.CommonControls.Validation.IValidatorProvider> ValidatorProviders { get; }
        public JetBrains.DataFlow.ICollectionEvents<JetBrains.CommonControls.Validation.IValidator> Validators { get; }
        public event System.EventHandler<JetBrains.DataFlow.PropertyChangedEventArgs<string, JetBrains.CommonControls.Validation.ValidatorSeverity>> SeverityChanged;
        protected static void AssertValidValidator(JetBrains.CommonControls.Validation.IValidator validator) { }
        protected void FireSeverityChanged(JetBrains.CommonControls.Validation.ValidatorSeverity old, JetBrains.CommonControls.Validation.ValidatorSeverity @new) { }
        public JetBrains.CommonControls.Validation.ValidatorSeverity ShowMessage() { }
        public void Update() { }
        public class BridgeControlsToValidatorProviders
        {
            public BridgeControlsToValidatorProviders([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control rootcontrol, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.ICollectionEvents<JetBrains.CommonControls.Validation.IValidatorProvider> providers) { }
        }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class FormValidators
    {
        public FormValidators(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading getComponent, JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext, JetBrains.UI.PopupWindowManager.PopupWindowManager popupWindowManager) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.CommonControls.Validation.IFormValidator GetOrCreate([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control) { }
    }
    public class FormValidatorView
    {
        public FormValidatorView([JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.Validation.IFormValidator document, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowManager popupWindowManager) { }
        public JetBrains.CommonControls.Validation.IFormValidator Document { get; }
    }
    public interface IControlListener
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Windows.Forms.Control Control { get; }
        public event System.EventHandler<JetBrains.DataFlow.EventArgs<JetBrains.CommonControls.Validation.IControlListener>> ControlStateChanged;
    }
    public interface IControlListenerProvider
    {
        JetBrains.CommonControls.Validation.IControlListener CreateListener(System.Windows.Forms.Control control);
        bool IsAvailable(System.Windows.Forms.Control control);
    }
    public interface IFormValidator
    {
        System.Windows.Forms.Form Form { get; }
        JetBrains.CommonControls.Validation.ValidatorSeverity Severity { get; }
        JetBrains.DataFlow.ICollectionEvents<JetBrains.CommonControls.Validation.IValidatorProvider> ValidatorProviders { get; }
        JetBrains.DataFlow.ICollectionEvents<JetBrains.CommonControls.Validation.IValidator> Validators { get; }
        public event System.EventHandler<JetBrains.DataFlow.PropertyChangedEventArgs<string, JetBrains.CommonControls.Validation.ValidatorSeverity>> SeverityChanged;
        JetBrains.CommonControls.Validation.ValidatorSeverity ShowMessage();
        void Update();
    }
    public interface IValidator
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.IPopupLayouter Layouter { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.RichText.RichText Message { get; }
        JetBrains.CommonControls.Validation.ValidatorSeverity Severity { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.CommonControls.IWindowlessControl WindowlessControl { get; }
        public event System.EventHandler<JetBrains.DataFlow.PropertyChangedEventArgs<string, JetBrains.UI.IPopupLayouter>> LayouterChanged;
        public event System.EventHandler<JetBrains.DataFlow.PropertyChangedEventArgs<string, JetBrains.UI.RichText.RichText>> MessageChanged;
        public event System.EventHandler<JetBrains.DataFlow.PropertyChangedEventArgs<string, JetBrains.CommonControls.Validation.ValidatorSeverity>> SeverityChanged;
        public event System.EventHandler<JetBrains.DataFlow.PropertyChangedEventArgs<string, JetBrains.CommonControls.IWindowlessControl>> WindowlessControlChanged;
        void Update();
    }
    public interface IValidatorProvider
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<JetBrains.CommonControls.Validation.IValidator> Validators { get; }
    }
    public class TextValidator : JetBrains.CommonControls.Validation.ControlValidator
    {
        protected readonly System.Func<string, bool> myChecker;
        protected readonly JetBrains.CommonControls.Validation.ValidatorSeverity myDefaultSeverity;
        public TextValidator([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, JetBrains.CommonControls.Validation.ValidatorSeverity severity, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText message, [JetBrains.Annotations.NotNullAttribute()] System.Func<string, bool> funcIsValid, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public override void Update() { }
    }
    public class TextValidatorReentrantSafe : JetBrains.CommonControls.Validation.TextValidator
    {
        public TextValidatorReentrantSafe(System.Windows.Forms.Control control, JetBrains.CommonControls.Validation.ValidatorSeverity severity, JetBrains.UI.RichText.RichText message, System.Func<string, bool> funcIsValid, JetBrains.Application.IShellLocks locks, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public override void Update() { }
    }
    public abstract class ValidationAttribute : System.Attribute
    {
        protected ValidationAttribute(string message, JetBrains.CommonControls.Validation.ValidatorSeverity severity) { }
        public string Message { get; }
        public JetBrains.CommonControls.Validation.ValidatorSeverity Severity { get; }
        public abstract JetBrains.CommonControls.Validation.IValidator BuildValidator(System.Windows.Forms.Control control, object host);
    }
    public class static ValidatorFactory
    {
        public static JetBrains.CommonControls.Validation.IValidator CreateTextNotEmptyValidator(System.Windows.Forms.Control control, JetBrains.CommonControls.Validation.ValidatorSeverity severity, string message, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public static JetBrains.CommonControls.Validation.DynamicTextValidator CreateTextValidator([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, [JetBrains.Annotations.NotNullAttribute()] System.Func<string, JetBrains.Util.JetTuple<JetBrains.CommonControls.Validation.ValidatorSeverity, JetBrains.UI.RichText.RichText>> funcUpdate, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public static JetBrains.CommonControls.Validation.IValidator CreateTextValidator([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, JetBrains.CommonControls.Validation.ValidatorSeverity severity, [JetBrains.Annotations.NotNullAttribute()] string message, [JetBrains.Annotations.NotNullAttribute()] System.Func<string, bool> funcIsValid, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
    }
    public class static ValidatorHarvester
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.CommonControls.Validation.IValidatorProvider Harvest(System.Windows.Forms.Control control) { }
        public class StaticValidatorProvider : JetBrains.CommonControls.Validation.IValidatorProvider
        {
            public StaticValidatorProvider(System.Collections.Generic.IEnumerable<JetBrains.CommonControls.Validation.IValidator> validators) { }
            public System.Collections.Generic.IEnumerable<JetBrains.CommonControls.Validation.IValidator> Validators { get; }
        }
    }
    public enum ValidatorSeverity
    {
        None = 0,
        Warning = 1,
        ImportantWarning = 2,
        Error = 3,
    }
    public class static ValidatorSeverityHelper
    {
        public static readonly string IgnoreSuffix;
        public static readonly string MessageBoxTitle;
        public static bool CanIgnore(JetBrains.CommonControls.Validation.ValidatorSeverity severity) { }
        public static JetBrains.CommonControls.Validation.ValidatorSeverityHelper.ShowValidatorMessages SeverityToMessageDisplay(JetBrains.CommonControls.Validation.ValidatorSeverity severity) { }
        public static string SeverityToMessagePrefix(JetBrains.CommonControls.Validation.ValidatorSeverity severity) { }
        public enum ShowValidatorMessages
        {
            None = 0,
            One = 1,
            All = 2,
        }
    }
    public class WindowlessControlView : System.Windows.Forms.Form, JetBrains.CommonControls.IConstrainableControl, JetBrains.UI.Tooltips.ITooltipProvider
    {
        public readonly JetBrains.DataFlow.ObsoleteLifetimeAndDefinitionAtTheSameTime Disposables;
        public readonly JetBrains.DataFlow.ISimpleSignal GottenDirty;
        public readonly JetBrains.DataFlow.IProperty<bool> IsTransparent;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.CommonControls.IWindowlessControl> WindowlessControl;
        public WindowlessControlView() { }
        public bool AutoActivate { get; set; }
        protected override System.Windows.Forms.CreateParams CreateParams { get; }
        public bool IsTopMost { get; set; }
        protected override bool ShowWithoutActivation { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Tooltips.ITooltipProvider TooltipProvider { get; set; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        protected override void Dispose(bool disposing) { }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        protected override void OnLayout(System.Windows.Forms.LayoutEventArgs args) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs args) { }
        protected void OnPaint_Layared() { }
        protected void OnPaint_Opaque(System.Drawing.Graphics g) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
    }
}
namespace JetBrains.Components
{
    
    public class static Dumping
    {
        public static void DumpObjectSimple(object o, System.Xml.XmlWriter writer) { }
    }
}
namespace JetBrains.ReSharper.VSI.Misc
{
    
    public class static DashboardView
    {
        public static System.Windows.UIElement Create(JetBrains.DataFlow.Lifetime lifetime, JetBrains.DataFlow.IListEvents<JetBrains.Application.Settings.Storage.ISettingsStorage> storages, JetBrains.DataFlow.IListEvents<JetBrains.Application.Settings.ISettingsStorageMountPoint> mounts, JetBrains.Application.Settings.SettingsSchema schema, JetBrains.ActionManagement.IShortcutManager shortcutman, JetBrains.ActionManagement.IActionManager actionman, JetBrains.Threading.IThreading threading) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class DataConstants
    {
        public static readonly JetBrains.Application.DataContext.DataConstant<System.Collections.Generic.IList<JetBrains.Application.Settings.ISettingsStorageMountPoint>> SettingsStorageMountPoints;
        public static readonly JetBrains.Application.DataContext.DataConstant<System.Collections.Generic.IList<JetBrains.Application.Settings.Storage.ISettingsStorage>> SettingsStorages;
        public DataConstants(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.DataContext.DataContexts contexts) { }
    }
    public class static MountPointsView
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.UIElement Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IListEvents<JetBrains.Application.Settings.ISettingsStorageMountPoint> mounts, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionBarManager barman) { }
        public static JetBrains.UI.Controls.TreeListView.TreeListViewWithDataContext Create_MountsList() { }
    }
    public class static SettingsSchemaView
    {
        public static System.Windows.UIElement Create(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.ISettingsSchema schema, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.Application.IShellLocks locks) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Media.GlyphRun CreateGlyphRun([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] string sFontFamily, double fFontSize, System.Windows.Point origin) { }
        public static void SetSchemaNodesTreeStyle([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Controls.TreeListView.TreeListViewWithDataContext tree) { }
        public abstract class SchemaTreeEntry : JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode
        {
            protected SchemaTreeEntry([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsEntry entry, JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            public override JetBrains.UI.RichText.RichText IconTooltip { get; }
            public override string SettingsStorageKey { get; }
            [JetBrains.Annotations.NotNullAttribute()]
            public static JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeEntry CreateEntryOuterNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsEntry entry, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            public override void RenderDetails(JetBrains.DataFlow.Lifetime lifetime, System.Windows.Documents.FlowDocument doc) { }
            public override string ToString() { }
            protected class static IconBrushes
            {
                public static readonly System.Collections.Generic.IDictionary<JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId, System.Windows.Media.Brush> IndexedIndex;
                public static readonly System.Collections.Generic.IDictionary<JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId, System.Windows.Media.Brush> IndexedInstance;
                public static readonly System.Collections.Generic.IDictionary<JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId, System.Windows.Media.Brush> IndexedRoot;
                public static readonly System.Collections.Generic.IDictionary<JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId, System.Windows.Media.Brush> Scalar;
            }
        }
        public class SchemaTreeIndexedEntryIndex : JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeEntry
        {
            public SchemaTreeIndexedEntryIndex([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsIndexedEntry entry, [JetBrains.Annotations.NotNullAttribute()] object entryindex, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            public override System.Collections.Generic.IList<JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode> Children { get; }
            public override string Description { get; }
            public override System.Windows.Media.Brush IconBrush { get; }
            public override bool IsIndexed { get; }
            public override string LocalName { get; }
            public override JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode.ValueTypes Types { get; }
        }
        public class SchemaTreeIndexedEntryInstance : JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeEntry
        {
            public SchemaTreeIndexedEntryInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsIndexedEntry entry, [JetBrains.Annotations.NotNullAttribute()] object entryindex, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            public override System.Collections.Generic.IList<JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode> Children { get; }
            public override string Description { get; }
            public override System.Windows.Media.Brush IconBrush { get; }
            public override bool IsIndexed { get; }
            public override string LocalName { get; }
            public override JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode.ValueTypes Types { get; }
        }
        public class SchemaTreeIndexedEntryRoot : JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeEntry
        {
            public SchemaTreeIndexedEntryRoot([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsIndexedEntry entry, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            public override System.Collections.Generic.IList<JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode> Children { get; }
            public override string Description { get; }
            public override System.Windows.Media.Brush IconBrush { get; }
            public override bool IsIndexed { get; }
            public override string LocalName { get; }
            public override JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode.ValueTypes Types { get; }
        }
        public abstract class SchemaTreeKey : JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode
        {
            protected static readonly System.Windows.Media.Drawing myDrawFolder;
            protected static readonly System.Windows.Media.Drawing myDrawIndexedOverlay;
            protected readonly JetBrains.Application.Settings.SettingsKey myKey;
            public SchemaTreeKey([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsKey key, JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            public override string SettingsStorageKey { get; }
            [JetBrains.Annotations.NotNullAttribute()]
            public static JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeKey CreateKeyInnerNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsIndexedKey key, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices, [JetBrains.Annotations.NotNullAttribute()] object index) { }
            [JetBrains.Annotations.NotNullAttribute()]
            public static JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeKey CreateKeyOuterNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsKey key, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            [JetBrains.Annotations.NotNullAttribute()]
            protected System.Collections.Generic.IList<JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode> GetSubkeysAndEntriesChildrenList() { }
            public override void RenderDetails(JetBrains.DataFlow.Lifetime lifetime, System.Windows.Documents.FlowDocument doc) { }
            [JetBrains.Annotations.NotNullAttribute()]
            protected static System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> SetDictionaryItemCow([JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> existing, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsKey key, [JetBrains.Annotations.NotNullAttribute()] object value) { }
            public override string ToString() { }
        }
        public abstract class SchemaTreeKeyIndexed : JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeKey
        {
            protected readonly JetBrains.Application.Settings.SettingsIndexedKey myKey;
            protected SchemaTreeKeyIndexed([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsIndexedKey key, JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
        }
        public class SchemaTreeKeyIndexedInstanceReal : JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeKeyIndexed
        {
            public SchemaTreeKeyIndexedInstanceReal([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsIndexedKey key, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            public override System.Collections.Generic.IList<JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode> Children { get; }
            public override string Description { get; }
            public override System.Windows.Media.Brush IconBrush { get; }
            public override JetBrains.UI.RichText.RichText IconTooltip { get; }
            public override bool IsIndexed { get; }
            public override bool IsSchemaOnlyInstance { get; }
            public override string LocalName { get; }
            public override JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode.ValueTypes Types { get; }
        }
        public class SchemaTreeKeyIndexedInstanceSchemaOnly : JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeKeyIndexed
        {
            public SchemaTreeKeyIndexedInstanceSchemaOnly([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsIndexedKey key, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            public override System.Collections.Generic.IList<JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode> Children { get; }
            public override string Description { get; }
            public override System.Windows.Media.Brush IconBrush { get; }
            public override JetBrains.UI.RichText.RichText IconTooltip { get; }
            public override bool IsIndexed { get; }
            public override bool IsSchemaOnlyInstance { get; }
            public override string LocalName { get; }
            public override JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode.ValueTypes Types { get; }
        }
        public class SchemaTreeKeyIndexedRoot : JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeKeyIndexed
        {
            public SchemaTreeKeyIndexedRoot([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsIndexedKey key, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            public override System.Collections.Generic.IList<JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode> Children { get; }
            public override string Description { get; }
            public override System.Windows.Media.Brush IconBrush { get; }
            public override JetBrains.UI.RichText.RichText IconTooltip { get; }
            public override bool IsIndexed { get; }
            public override bool IsSchemaOnlyInstance { get; }
            public override string LocalName { get; }
            public override JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode.ValueTypes Types { get; }
        }
        public class SchemaTreeKeyNonIndexed : JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeKey
        {
            public SchemaTreeKeyNonIndexed([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsKey key, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            public override System.Collections.Generic.IList<JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode> Children { get; }
            public override string Description { get; }
            public override System.Windows.Media.Brush IconBrush { get; }
            public override JetBrains.UI.RichText.RichText IconTooltip { get; }
            public override bool IsIndexed { get; }
            public override string LocalName { get; }
            public override JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode.ValueTypes Types { get; }
        }
        public abstract class SchemaTreeNode
        {
            protected readonly JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory myFactory;
            protected readonly System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> myParentKeyIndices;
            public readonly JetBrains.DataFlow.ISimpleSignal SettingsChanged;
            protected SchemaTreeNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory factory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            [JetBrains.Annotations.NotNullAttribute()]
            public abstract System.Collections.Generic.IList<JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode> Children { get; }
            public abstract string Description { get; }
            public abstract System.Windows.Media.Brush IconBrush { get; }
            public abstract JetBrains.UI.RichText.RichText IconTooltip { get; }
            public abstract bool IsIndexed { get; }
            public virtual bool IsSchemaOnlyInstance { get; }
            public abstract string LocalName { get; }
            public abstract string SettingsStorageKey { get; }
            public abstract JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode.ValueTypes Types { get; }
            public JetBrains.DataFlow.IProperty<object> Value { get; }
            public abstract void RenderDetails([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.Windows.Documents.FlowDocument doc);
            [JetBrains.Annotations.NotNullAttribute()]
            protected System.Windows.Documents.Span RenderType([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Parts.PartCatalogueType type) { }
            public static void UpdateLiveList<TItem>([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.ListEvents<TItem> livelist, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<TItem> currentitems) { }
            public class ValueTypes
            {
                public ValueTypes([JetBrains.Annotations.CanBeNullAttribute()] string mappingKeyType, [JetBrains.Annotations.CanBeNullAttribute()] string valueType, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText tiptext) { }
                [JetBrains.Annotations.CanBeNullAttribute()]
                public string MappingKeyType { get; }
                [JetBrains.Annotations.NotNullAttribute()]
                public JetBrains.UI.RichText.RichText TipText { get; }
                [JetBrains.Annotations.CanBeNullAttribute()]
                public string ValueType { get; }
            }
        }
        public class SchemaTreeNodeFactory
        {
            public bool IsAddingFakeIndexedKeyInstanceWhenNoRealOnes;
            public SchemaTreeNodeFactory(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.ISettingsSchema schema) { }
            public System.Collections.Generic.List<JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode> RootNodes { get; }
            [JetBrains.Annotations.CanBeNullAttribute()]
            public JetBrains.Application.Settings.IContextBoundSettingsStore SettingsStore { get; set; }
            public JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode GetOrCreate<T>([JetBrains.Annotations.NotNullAttribute()] T identity, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> path, [JetBrains.Annotations.NotNullAttribute()] System.Func<T, JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory, System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object>, JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode> FCreateIfMissing) { }
        }
        public class SchemaTreeScalarEntry : JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeEntry
        {
            public SchemaTreeScalarEntry([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsScalarEntry entry, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory nodeFactory, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> parentKeyIndices) { }
            public override System.Collections.Generic.IList<JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode> Children { get; }
            public override string Description { get; }
            public override System.Windows.Media.Brush IconBrush { get; }
            public override bool IsIndexed { get; }
            public override string LocalName { get; }
            public override JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNode.ValueTypes Types { get; }
        }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsStoreView_AddEntryAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsStoreView_EditEntryAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsStoreView_IsHierarchicalAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsStoreView_OpenImportExportWindowAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsStoreView_OpenMountPointAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsStoreView_OpenMountPointsWindowAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsStoreView_OpenSchemaWindowAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsStoreView_OpenSettingsStoreWindowAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsStoreView_OpenStorageAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsStoreView_OpenStoragesWindowAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsStoreView_ResetEntryAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsStoreViewAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.UI.ToolWindowManagement.ToolWindowDescriptorAttribute(Icon=typeof(JetBrains.UI.Resources.OptionsThemedIcons.CopySettings), ProductNeutralId="SettingsStoreView", Text="Settings Store", Type=JetBrains.UI.ToolWindowManagement.ToolWindowType.MultiInstance, VisibilityPersistenceScope=JetBrains.UI.ToolWindowManagement.ToolWindowVisibilityPersistenceScope.Global)]
    public class SettingsStoreViewToolWindow : JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor
    {
        public SettingsStoreViewToolWindow(JetBrains.Application.IApplicationDescriptor applicationDescriptor) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class SettingsStoreViewToolWindowStoragesView
    {
        public SettingsStoreViewToolWindowStoragesView([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.ToolWindowManagement.ToolWindowManager toolman, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.SettingsStoreViewToolWindow toolwindow, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IViewable<JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>> viewableStorages, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionBarManager actionBarManager, JetBrains.Application.IShellLocks locks, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IViewable<JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>> viewableMounts, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsSchema schema, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStore settingsStore, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader, JetBrains.ActionManagement.IShortcutManager shortcutman, JetBrains.ActionManagement.IActionManager actionman) { }
        public JetBrains.UI.ToolWindowManagement.ToolWindowInstance OpenDashboardWindow() { }
        public JetBrains.UI.ToolWindowManagement.ToolWindowInstance OpenImportExportWindow() { }
        public JetBrains.UI.ToolWindowManagement.ToolWindowInstance OpenMountPointsWindow() { }
        public JetBrains.UI.ToolWindowManagement.ToolWindowInstance OpenSchemaWindow() { }
        public JetBrains.UI.ToolWindowManagement.ToolWindowInstance OpenSettingsStoreWindow() { }
        public JetBrains.UI.ToolWindowManagement.ToolWindowInstance OpenStoragesWindow() { }
        public JetBrains.UI.ToolWindowManagement.ToolWindowInstance OpenStorageWindow([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.Storage.ISettingsStorage storage) { }
    }
    public class static StoragesView
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.UIElement Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IListEvents<JetBrains.Application.Settings.Storage.ISettingsStorage> storages, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionBarManager barman) { }
        public static JetBrains.UI.Controls.TreeListView.TreeListViewWithDataContext Create_StoragesList() { }
    }
    public class static StorageView
    {
        public static readonly string ToolbarActionGroupId;
        public static System.Windows.FrameworkElement Create(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.Storage.ISettingsStorage storage, JetBrains.DataFlow.IProperty<bool> isHierarchical, JetBrains.Threading.IThreading threading, JetBrains.ActionManagement.IActionBarManager barman) { }
        public static void EditRawStorageValue([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifeLimit, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Window owner, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.Storage.ISettingsStorage storage, [JetBrains.Annotations.CanBeNullAttribute()] string key, [JetBrains.Annotations.NotNullAttribute()] object value, bool isKeyEditable = False) { }
        public static void EditRawStorageValueView([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifeLimit, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Window owner, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.StorageView.EditRawStorageValueViewModel model, System.Action<bool> FSetValue) { }
        public static void SetTreeStyle([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Controls.TreeListView.TreeListViewWithDataContext tree) { }
        [JetBrains.Application.ShellComponentAttribute()]
        public class DataConstants
        {
            public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.DataFlow.IProperty<bool>> IsViewHierarchical;
            public static readonly JetBrains.Application.DataContext.DataConstant<System.Collections.Generic.IList<JetBrains.ReSharper.VSI.Misc.StorageView.DataConstants.StorageEntry>> SettingsStorageEntries;
            public DataConstants(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.DataContext.DataContexts contexts) { }
            public class StorageEntry
            {
                [JetBrains.Annotations.NotNullAttribute()]
                public readonly string Key;
                [JetBrains.Annotations.NotNullAttribute()]
                public readonly JetBrains.Application.Settings.Storage.ISettingsStorage Storage;
                public StorageEntry([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.Storage.ISettingsStorage storage, [JetBrains.Annotations.NotNullAttribute()] string key) { }
            }
        }
        public class EditRawStorageValueViewModel : System.Windows.DependencyObject
        {
            public static readonly System.Windows.DependencyProperty BlobValueProperty;
            public static readonly System.Windows.DependencyProperty BooleanValueProperty;
            public static readonly System.Windows.DependencyProperty DataTypeAsIndexProperty;
            public static readonly System.Windows.DependencyProperty DataTypeProperty;
            public static readonly System.Windows.DependencyProperty FloatingValueProperty;
            public static readonly System.Windows.DependencyProperty IntegerValueProperty;
            public static readonly System.Windows.DependencyProperty IsKeyEditableProperty;
            public static readonly System.Windows.DependencyProperty KeyProperty;
            public static readonly System.Collections.Generic.Dictionary<JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId, System.Windows.DependencyProperty> MapDataTypeToProperty;
            public static readonly System.Windows.DependencyProperty StringValueProperty;
            public EditRawStorageValueViewModel() { }
            public byte[] BlobValue { get; set; }
            public bool BooleanValue { get; set; }
            public JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId DataType { get; set; }
            public int DataTypeAsIndex { get; set; }
            public double FloatingValue { get; set; }
            public long IntegerValue { get; set; }
            public bool IsKeyEditable { get; set; }
            public string Key { get; set; }
            public string StorageName { get; set; }
            public string StringValue { get; set; }
            public JetBrains.Util.JetTuple<string, object> GetData() { }
            public void SetData([JetBrains.Annotations.CanBeNullAttribute()] string key, [JetBrains.Annotations.CanBeNullAttribute()] object value) { }
        }
        public class StorageViewEntry : System.Windows.DependencyObject
        {
            public readonly JetBrains.DataFlow.ISimpleSignal ContentChanged;
            public static readonly System.Windows.DependencyProperty DisplayNameProperty;
            public static readonly System.Windows.DependencyProperty KeyProperty;
            public static readonly System.Windows.DependencyProperty TypeProperty;
            public static readonly System.Windows.DependencyProperty ValueProperty;
            public StorageViewEntry([JetBrains.Annotations.CanBeNullAttribute()] string key, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.VSI.Misc.StorageView.StorageViewEntryFactory factory) { }
            [JetBrains.Annotations.CanBeNullAttribute()]
            public JetBrains.DataFlow.ListEvents<JetBrains.ReSharper.VSI.Misc.StorageView.StorageViewEntry> Children { get; }
            public string DisplayName { get; set; }
            public bool IsFakeRootEntry { get; }
            [JetBrains.Annotations.CanBeNullAttribute()]
            public string Key { get; set; }
            [JetBrains.Annotations.NotNullAttribute()]
            public string KeyNotNull { get; }
            [JetBrains.Annotations.NotNullAttribute()]
            public JetBrains.Application.Settings.Storage.ISettingsStorage Storage { get; }
            public System.Nullable<JetBrains.Application.Settings.Storage.SettingsStorageHelpers.StorageValueTypeId> Type { get; set; }
            public object Value { get; set; }
        }
        public class StorageViewEntryFactory
        {
            [JetBrains.Annotations.NotNullAttribute()]
            public readonly JetBrains.DataFlow.IProperty<bool> IsHierarchical;
            public readonly JetBrains.Application.Settings.Storage.ISettingsStorage Storage;
            public StorageViewEntryFactory([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.Storage.ISettingsStorage storage, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading) { }
            [JetBrains.Annotations.NotNullAttribute()]
            public JetBrains.DataFlow.ListEvents<JetBrains.ReSharper.VSI.Misc.StorageView.StorageViewEntry> RootItems { get; }
            [JetBrains.Annotations.NotNullAttribute()]
            public JetBrains.ReSharper.VSI.Misc.StorageView.StorageViewEntry GetOrCreate([JetBrains.Annotations.NotNullAttribute()] string key) { }
        }
    }
    public class WizardPage
    {
        public readonly JetBrains.DataFlow.ISimpleSignal ActivatedWithNext;
        public object Content;
        public readonly JetBrains.DataFlow.IProperty<bool> IsActive;
        public string Title;
        public string ToolTip;
        public WizardPage(string title, string toolTip = null, object content = null) { }
        public WizardPage() { }
    }
    public class WizardUidata : System.ComponentModel.INotifyPropertyChanged
    {
        public readonly JetBrains.DataFlow.ListEvents<JetBrains.ReSharper.VSI.Misc.WizardPage> Pages;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.ReSharper.VSI.Misc.WizardPage> SelectedPage;
        public WizardUidata(JetBrains.DataFlow.Lifetime lifetime) { }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
    }
    public class WizardView : System.Windows.Controls.Control { }
}
namespace JetBrains.TreeModels
{
    
    public sealed class CascadeGroup
    {
        public static readonly JetBrains.TreeModels.CascadeGroup Empty;
        public CascadeGroup(System.Collections.IEnumerable groups) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.IEnumerable Groups { get; }
    }
    public interface ITreeGroupProvider<TItem>
    
    {
        object ExtractGroupObject(TItem item);
    }
    public enum RecursionPreventionStyle
    {
        None = 0,
        StopOnOccurence = 1,
        StopOnChain = 2,
    }
    public abstract class TreeDemandModel : JetBrains.TreeModels.TreeModel
    {
        public JetBrains.TreeModels.RecursionPreventionStyle RecursionPrevention { get; set; }
        protected void BuildRoots() { }
        protected internal override JetBrains.TreeModels.TreeModelNode CreateNode(JetBrains.TreeModels.TreeModelNode parent, object value) { }
        protected abstract System.Collections.IEnumerable GetChildren([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.TreeModels.TreeModelNode modelNode);
        protected abstract bool HasChildren([JetBrains.Annotations.NotNullAttribute()] JetBrains.TreeModels.TreeModelNode modelNode);
        protected override void PerformUpdate() { }
        protected class TreeDemandNode : JetBrains.TreeModels.TreeModelNode
        {
            public TreeDemandNode(JetBrains.TreeModels.TreeDemandModel model, JetBrains.TreeModels.TreeModelNode parent, object dataValue) { }
            public override System.Collections.Generic.IList<JetBrains.TreeModels.TreeModelNode> ChildrenUnsorted { get; }
            public bool HasAnyCachedChildren { get; }
            public override bool HasChildren { get; }
        }
    }
    public class TreeDemandModel2 : JetBrains.TreeModels.TreeDemandModel
    {
        public TreeDemandModel2(System.Func<object, System.Collections.IEnumerable> children) { }
        public TreeDemandModel2(System.Func<object, System.Collections.IEnumerable> children, int expandToLevel) { }
        public event System.EventHandler<JetBrains.TreeModels.TreeDemandModel2.ChildrenWantedEventArgs> ChildrenWanted;
        public void Expand(int levels) { }
        protected System.Collections.IEnumerable FireChildrenWanted(object dataValue) { }
        public System.Collections.Generic.IEnumerable<JetBrains.TreeModels.TreeModelNode> GetAllNodes(int levels) { }
        protected override System.Collections.IEnumerable GetChildren(JetBrains.TreeModels.TreeModelNode modelNode) { }
        protected override bool HasChildren(JetBrains.TreeModels.TreeModelNode modelNode) { }
        public class ChildrenWantedEventArgs : System.EventArgs
        {
            public ChildrenWantedEventArgs(object dataValue) { }
            [JetBrains.Annotations.NotNullAttribute()]
            public System.Collections.IEnumerable Children { get; set; }
            public object DataValue { get; }
        }
    }
    public class TreeGroupModel<TItem> : JetBrains.TreeModels.TreeModel
    
    {
        public TreeGroupModel(System.Collections.Generic.IEqualityComparer<object> equalityComparer) { }
        public TreeGroupModel() { }
        public System.Predicate<TItem> Filter { get; set; }
        public int FilteredCount { get; }
        public System.Collections.Generic.ICollection<JetBrains.TreeModels.ITreeGroupProvider<TItem>> GroupProviders { get; set; }
        public System.Collections.Generic.IEnumerable<TItem> Items { get; set; }
        [System.ObsoleteAttribute("Do not use this weird way to add items to tree model, instead add default group i" +
            "tems to model and provide equality on them")]
        public bool SupportDefaultGroups { get; set; }
        public int TotalCount { get; }
        protected internal override JetBrains.TreeModels.TreeModelNode CreateNode(JetBrains.TreeModels.TreeModelNode parent, object value) { }
        protected override void PerformUpdate() { }
        protected virtual void ProcessItem(TItem item) { }
        protected class TreeGroupingNode<TItem> : JetBrains.TreeModels.TreeModelNode
        
        {
            public TreeGroupingNode(JetBrains.TreeModels.TreeGroupModel<TItem> model, JetBrains.TreeModels.TreeModelNode parent, object value) { }
            public override System.Collections.Generic.IList<JetBrains.TreeModels.TreeModelNode> ChildrenUnsorted { get; }
        }
    }
    public abstract class TreeModel
    {
        protected TreeModel() { }
        protected TreeModel(System.Collections.Generic.IEqualityComparer<object> equalityComparer) { }
        public System.Collections.Generic.IComparer<JetBrains.TreeModels.TreeModelNode> Comparer { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IEqualityComparer<object> EqualityComparer { get; }
        public bool InUpdate { get; }
        public System.Collections.Generic.IList<JetBrains.TreeModels.TreeModelNode> Roots { get; }
        public System.Collections.Generic.IList<JetBrains.TreeModels.TreeModelNode> RootsUnsorted { get; }
        public event System.EventHandler Updated;
        public event System.EventHandler Updating;
        public virtual void BeginUpdate() { }
        protected virtual void Clear() { }
        protected internal abstract JetBrains.TreeModels.TreeModelNode CreateNode(JetBrains.TreeModels.TreeModelNode parent, object value);
        public virtual void EndUpdate() { }
        public virtual System.Collections.Generic.IEnumerable<JetBrains.TreeModels.TreeModelNode> GetDescendants() { }
        public virtual JetBrains.TreeModels.TreeModelNode GetNodeContainer(JetBrains.TreeModels.TreeModelNode node) { }
        public virtual System.Collections.Generic.IList<JetBrains.TreeModels.TreeModelNode> GetNodes([JetBrains.Annotations.NotNullAttribute()] object dataValue) { }
        protected JetBrains.TreeModels.TreeModelNode Insert([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.TreeModels.TreeModelNode parent, [JetBrains.Annotations.NotNullAttribute()] object dataValue) { }
        protected void NeedUpdate() { }
        public bool NeedUpdateChildren(JetBrains.TreeModels.TreeModelNode node) { }
        protected virtual void OnUpdated() { }
        protected virtual void OnUpdating() { }
        protected abstract void PerformUpdate();
        protected void Remove(JetBrains.TreeModels.TreeModelNode modelNode) { }
        protected void Remove(object dataValue) { }
        public void Update() { }
        public void UpdateChildren(JetBrains.TreeModels.TreeModelNode node, System.Collections.Generic.List<JetBrains.TreeModels.TreeModelNode> children) { }
        public JetBrains.TreeModels.TreeModel.TreeModelUpdateCookie UpdateCookie() { }
        public struct TreeModelUpdateCookie : System.IDisposable
        {
            public TreeModelUpdateCookie(JetBrains.TreeModels.TreeModel model) { }
            public void Dispose() { }
        }
    }
    public class TreeModelGrouping<T>
        where T :  class
    {
        public TreeModelGrouping(string name) { }
        public TreeModelGrouping(string name, params JetBrains.TreeModels.ITreeGroupProvider<>[] groups) { }
        public TreeModelGrouping(string name, System.Collections.Generic.ICollection<JetBrains.TreeModels.ITreeGroupProvider<T>> groups) { }
        public System.Collections.Generic.ICollection<JetBrains.TreeModels.ITreeGroupProvider<T>> Groups { get; }
        public string Name { get; }
    }
    public abstract class TreeModelNode : JetBrains.Util.IPresentableStructureElement
    {
        protected TreeModelNode(JetBrains.TreeModels.TreeModel model, JetBrains.TreeModels.TreeModelNode parent, object dataValue) { }
        public virtual System.Collections.Generic.IList<JetBrains.TreeModels.TreeModelNode> Children { get; }
        public abstract System.Collections.Generic.IList<JetBrains.TreeModels.TreeModelNode> ChildrenUnsorted { get; }
        public object DataValue { get; }
        public virtual bool HasChildren { get; }
        public JetBrains.TreeModels.TreeModel Model { get; }
        public JetBrains.TreeModels.TreeModelNodeModifiers Modifiers { get; set; }
        public JetBrains.TreeModels.TreeModelNode Parent { get; }
        public virtual System.Collections.Generic.IEnumerable<JetBrains.TreeModels.TreeModelNode> GetDescendants() { }
        public virtual int GetItemCount() { }
        public virtual int GetItemCount<T>() { }
    }
    [System.FlagsAttribute()]
    public enum TreeModelNodeModifiers
    {
        None = 0,
        Recursive = 1,
    }
    public class TreeSection
    {
        public TreeSection(JetBrains.TreeModels.TreeModel model, string title) { }
        public JetBrains.TreeModels.TreeModel Model { get; }
        public string Title { get; }
        protected bool Equals(JetBrains.TreeModels.TreeSection other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class TreeSectionModel : JetBrains.TreeModels.TreeModel
    {
        public System.Collections.Generic.IList<JetBrains.TreeModels.TreeSection> Sections { get; set; }
        public override void BeginUpdate() { }
        protected override void Clear() { }
        protected internal override JetBrains.TreeModels.TreeModelNode CreateNode(JetBrains.TreeModels.TreeModelNode parent, object value) { }
        public override void EndUpdate() { }
        public override JetBrains.TreeModels.TreeModelNode GetNodeContainer(JetBrains.TreeModels.TreeModelNode node) { }
        public override System.Collections.Generic.IList<JetBrains.TreeModels.TreeModelNode> GetNodes(object dataValue) { }
        protected override void PerformUpdate() { }
        protected class TreeSectionNode : JetBrains.TreeModels.TreeModelNode
        {
            public TreeSectionNode(JetBrains.TreeModels.TreeSectionModel model, JetBrains.TreeModels.TreeSection section) { }
            public override System.Collections.Generic.IList<JetBrains.TreeModels.TreeModelNode> Children { get; }
            public override System.Collections.Generic.IList<JetBrains.TreeModels.TreeModelNode> ChildrenUnsorted { get; }
            public JetBrains.TreeModels.TreeModel WrappedModel { get; }
        }
    }
    public class TreeSeparator
    {
        public TreeSeparator(string title) { }
        public string Title { get; set; }
        public override string ToString() { }
    }
    public class TreeSimpleModel : JetBrains.TreeModels.TreeModel
    {
        protected internal override JetBrains.TreeModels.TreeModelNode CreateNode(JetBrains.TreeModels.TreeModelNode parent, object value) { }
        public void Insert(object parentValue, object childValue) { }
        protected override void PerformUpdate() { }
        public new void Remove(object childValue) { }
        protected class TreeSimpleNode : JetBrains.TreeModels.TreeModelNode
        {
            public TreeSimpleNode(JetBrains.TreeModels.TreeSimpleModel model, JetBrains.TreeModels.TreeModelNode parent, object value) { }
            public override System.Collections.Generic.IList<JetBrains.TreeModels.TreeModelNode> ChildrenUnsorted { get; }
        }
    }
}
namespace JetBrains.UI.About
{
    
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Sharing.Product, JetBrains.Application.Lifecycle.DemandReclaimable, JetBrains.Application.Creation.PrimaryThread, JetBrains.Application.Access.PrimaryThread)]
    public class AboutBox
    {
        public readonly JetBrains.DataFlow.ISignal<JetBrains.UI.About.AboutBox.PopulateEventArgs> Populate;
        public AboutBox(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.UI.CommonControls.Fonts.FontsManager fontsManager, JetBrains.UI.Application.ILicenseCheckerComponent licenseCheckerComponent, JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations, JetBrains.UI.Application.IMainWindow appMainWindow, JetBrains.Application.PluginSupport.PluginsDirectory pluginsDirectory, JetBrains.UI.Application.IUIApplication environment) { }
        public void Show() { }
        public class PopulateEventArgs : System.EventArgs
        {
            public PopulateEventArgs(System.Action<System.Windows.Forms.Control> FAddControl, System.Action<string> FAddData) { }
            public void AddClipboardData([JetBrains.Annotations.NotNullAttribute()] string data) { }
            public void AddControl([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control) { }
        }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class AboutBoxActionHandler : JetBrains.ActionManagement.IActionHandler { }
    public class AboutBoxView : System.Windows.Forms.Form
    {
        public AboutBoxView([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow appMainWindow, JetBrains.Application.IApplicationDescriptor descriptor, JetBrains.UI.CommonControls.Fonts.FontsManager fontsManager, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.ILicenseCheckerComponent licenseCheckerComponent, JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations, JetBrains.Application.PluginSupport.PluginsDirectory pluginsDirectory, JetBrains.DataFlow.ISignal<JetBrains.UI.About.AboutBox.PopulateEventArgs> populateAboutBoxExternally, JetBrains.UI.Application.IUIApplication environment) { }
        public void ShowDialog() { }
    }
}
namespace JetBrains.UI.AbstractTreeBuilder
{
    
    public class AbstractTreeBuilder
    {
        public AbstractTreeBuilder(JetBrains.UI.AbstractTreeBuilder.IAbstractTreeControl treeControl, JetBrains.UI.AbstractTreeBuilder.IAbstractTreeStructure treeStructure, JetBrains.UI.AbstractTreeBuilder.ITreeStructurePresenter presenter, bool buildTree, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.IShellLocks shellLocks) { }
        public System.Collections.Generic.IComparer<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode> NodeComparer { get; set; }
        public void BuildNodeByPath(System.Collections.Generic.IEnumerable<object> itemsPath, System.Action<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode> onFinished) { }
        public void CheckConsistency() { }
        public object ItemByNode(JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode node) { }
        public void SortAll() { }
        public void SortSubtree(JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode rootNode) { }
        public void UpdateAll() { }
        public void UpdateNode(JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode rootNode, object rootItem) { }
        public void UpdateSubtree(JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode rootNode, object rootItem) { }
    }
    public delegate void ExpandedChangedHandler(JetBrains.UI.AbstractTreeBuilder.IAbstractTreeControl treeControl, JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode node);
    public interface IAbstractTreeControl
    {
        JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode Root { get; }
        public event JetBrains.UI.AbstractTreeBuilder.ExpandedChangedHandler ExpandedChanged;
        void EndTransaction();
        void StartTransaction();
    }
    public interface IAbstractTreeNode
    {
        System.Collections.Generic.IEnumerable<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode> Children { get; }
        bool Expanded { get; set; }
        JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode Parent { get; }
        JetBrains.CommonControls.IPresentableItem PresentableItem { get; }
        JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode AddChild();
        JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode AddDummyChild();
        void RemoveChild(JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode child);
        void SortChildren(System.Collections.Generic.IComparer<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode> nodeComparer);
    }
    public interface IAbstractTreeStructure
    {
        bool AutoExpandSingleChild { get; }
        object Root { get; }
        bool AreChildrenEquivalent(object child1, object child2);
        bool CanHaveChildren(object item);
        int GetChildEquivalenceHashCode(object child);
        System.Collections.IEnumerable GetChildren(object item);
        bool IsInitiallyExpanded(object item);
        object RestoreItem(object o);
        object SaveItem(object item);
    }
    public interface ITreeStructurePresenter
    {
        void DisposeNode(JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode node, object item);
        void UpdateNode(JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode node, object item);
    }
}
namespace JetBrains.UI.AbstractTreeBuilder.DevExpressTree
{
    
    [System.ComponentModel.ToolboxItemAttribute(true)]
    public class DevExpressTreeControl : JetBrains.UI.CommonControls.SafeTreeList, JetBrains.UI.AbstractTreeBuilder.IAbstractTreeControl, JetBrains.UI.Tooltips.ITooltipProvider
    {
        public DevExpressTreeControl(JetBrains.UI.Application.IUIApplication environment) { }
        public new JetBrains.UI.Application.IUIApplication Environment { get; }
        public DevExpress.XtraTreeList.Nodes.TreeListNode FocusedNode { get; set; }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool FullRowSelect { get; set; }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool HideSelection { get; set; }
        public int MinHeight { get; set; }
        public System.Windows.Forms.MouseButtons MouseButton { get; }
        protected JetBrains.UI.AbstractTreeBuilder.DevExpressTree.NodePainter NodePainter { get; }
        public JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode Root { get; }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool RootNodeVisible { get; set; }
        public event JetBrains.UI.AbstractTreeBuilder.ExpandedChangedHandler ExpandedChanged;
        public virtual void BestFitTreeColumn(DevExpress.XtraTreeList.Columns.TreeListColumn column) { }
        public System.Drawing.Size CalcControlSizeByClientSize(System.Drawing.Size clientSize) { }
        public int CalcTotalRowsHeight() { }
        public int CalculateRequiredColumnWidth(DevExpress.XtraTreeList.Columns.TreeListColumn column) { }
        protected virtual JetBrains.UI.AbstractTreeBuilder.DevExpressTree.NodePainter CreateNodePainter() { }
        protected override DevExpress.XtraTreeList.ViewInfo.TreeListViewInfo CreateViewInfo() { }
        protected override void Dispose(bool disposing) { }
        public virtual void EndTransaction() { }
        public override void ExpandAll() { }
        public JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode GetNodeByCoords(System.Drawing.Point point) { }
        public virtual JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        protected virtual void OnCreateCustomNode(object sender, DevExpress.XtraTreeList.CreateCustomNodeEventArgs e) { }
        protected override void OnGotFocus(System.EventArgs e) { }
        protected override void OnKeyDown(System.Windows.Forms.KeyEventArgs e) { }
        protected override void OnLostFocus(System.EventArgs e) { }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs args) { }
        protected override bool ProcessDialogKey(System.Windows.Forms.Keys keyData) { }
        protected override void RaiseCalcNodeHeight(DevExpress.XtraTreeList.Nodes.TreeListNode node, ref int nodeHeight) { }
        protected override void RaiseCustomDrawNodeCell(DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e) { }
        public void RaiseExpandedChanged(JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode node) { }
        protected override void RaiseFocusedNodeChanged(DevExpress.XtraTreeList.Nodes.TreeListNode oldNode, DevExpress.XtraTreeList.Nodes.TreeListNode newNode) { }
        public static void SetDefaultAppearance(DevExpress.XtraTreeList.TreeList tree) { }
        public virtual void StartTransaction() { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
        public class DevExpressViewInfo : DevExpress.XtraTreeList.ViewInfo.TreeListViewInfo
        {
            public DevExpressViewInfo(DevExpress.XtraTreeList.TreeList treeList) { }
            public override void UpdateRowPaintAppearance(DevExpress.XtraTreeList.ViewInfo.RowInfo ri) { }
        }
    }
    public class DevExpressTreeNode : DevExpress.XtraTreeList.Nodes.TreeListNode, JetBrains.CommonControls.IPresentableItem, JetBrains.UI.AbstractTreeBuilder.DevExpressTree.ITreeCellPresentation, JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode
    {
        public DevExpressTreeNode(int id, DevExpress.XtraTreeList.Nodes.TreeListNodes owner) { }
        public virtual System.Collections.Generic.IEnumerable<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode> Children { get; }
        protected internal JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeControl DevExpressTreeControl { get; }
        public override bool Expanded { get; set; }
        public JetBrains.CommonControls.PresentableItemImageCollection Images { get; }
        public virtual bool IsValid { get; }
        public JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode Node { get; }
        public virtual JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode Parent { get; }
        public JetBrains.UI.RichText.RichText RichText { get; set; }
        public System.Drawing.Color RowBackColor { get; set; }
        public virtual JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode AddChild() { }
        public void Clear() { }
        protected System.Collections.Generic.IEnumerable<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode> FilteredCollection(System.Collections.ICollection nodes) { }
        public JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode GetFirstChild() { }
        public JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode GetLastChild() { }
        public JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode GetNextNode(bool processChildren, bool doExpand) { }
        public JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode GetNextSibling() { }
        public JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode GetPrevNode(bool processChildren, bool doExpand) { }
        public JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode GetPrevSibling() { }
        public System.Drawing.Size GetRichTextSize(System.Drawing.Graphics graphics, JetBrains.UI.RenderParams renderparams) { }
        public void ResetNodeState() { }
    }
    public delegate void GetTreeNodeCheckStateHandler(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode node, out System.Windows.Forms.CheckState state, out bool hasCheckBox);
    public interface ITreeCellPresentation
    {
        JetBrains.CommonControls.PresentableItemImageCollection Images { get; }
        JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode Node { get; }
        JetBrains.UI.RichText.RichText RichText { get; }
        System.Drawing.Size GetRichTextSize(System.Drawing.Graphics graphics, JetBrains.UI.RenderParams renderparams);
    }
    public class NodePainter
    {
        public NodePainter([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeControl treeControl, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IUIApplication environment) { }
        protected JetBrains.UI.RenderParams RenderParams { get; }
        public virtual int GetCellHeight(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.ITreeCellPresentation cell, System.Drawing.Graphics graphics) { }
        public virtual int GetCellWidth(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.ITreeCellPresentation cell, System.Drawing.Graphics graphics) { }
        public virtual JetBrains.CommonControls.PresentableItemImage ImageHitTest(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode node, System.Drawing.Rectangle cellBounds, System.Drawing.Point pos, out System.Drawing.Rectangle imageRect) { }
        public virtual bool Paint(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.ITreeCellPresentation cell, bool selected, bool focused, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs args) { }
        public System.Drawing.Color RowBackColor(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode node) { }
        public virtual bool TextHitTest(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode node, System.Drawing.Rectangle cellBounds, System.Drawing.Point pos, out System.Drawing.Rectangle textRect) { }
        public virtual bool TextRectangleHitTest(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode node, System.Drawing.Rectangle cellBounds, System.Drawing.Point pos, out System.Drawing.Rectangle textRect) { }
    }
    public class SimpleTreeControl : JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeControl, JetBrains.Application.DataContext.IDataRuleProvider
    {
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.UI.AbstractTreeBuilder.DevExpressTree.SimpleTreeControl> TREE_CONTROL;
        public SimpleTreeControl(JetBrains.UI.Application.IUIApplication environment) { }
        protected virtual int ColumnBestFitWidth { get; set; }
        public bool CyclicScroll { get; set; }
        public event JetBrains.UI.AbstractTreeBuilder.DevExpressTree.TreeNodeMouseHandler NodeClick;
        public event JetBrains.UI.AbstractTreeBuilder.DevExpressTree.TreeNodeMouseHandler NodeDoubleClick;
        public override void BestFitTreeColumn(DevExpress.XtraTreeList.Columns.TreeListColumn column) { }
        public override DevExpress.XtraTreeList.Nodes.TreeListNode MoveFirst() { }
        public override DevExpress.XtraTreeList.Nodes.TreeListNode MoveLastVisible() { }
        protected override void OnClick(System.EventArgs e) { }
        protected override void OnDoubleClick(System.EventArgs e) { }
        protected override void OnKeyDown(System.Windows.Forms.KeyEventArgs e) { }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e) { }
        protected void OnNodesReloaded(object sender, System.EventArgs e) { }
        protected virtual void SetProperColumnWidth(int clientWidth) { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
    }
    public delegate void ToggleTreeNodeCheckStateHandler(System.Collections.Generic.ICollection<JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode> nodes);
    public class TreeControlNodeIterator : System.Collections.Generic.IEnumerable<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode>, System.Collections.IEnumerable
    {
        public TreeControlNodeIterator(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeControl treeControl) { }
        public TreeControlNodeIterator(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeControl treeControl, System.Predicate<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode> acceptor) { }
        public TreeControlNodeIterator(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeControl treeControl, System.Predicate<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode> acceptor, bool expandChildren) { }
        public System.Predicate<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode> Acceptor { get; }
        public JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeControl TreeControl { get; }
        public System.Collections.Generic.IEnumerator<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode> GetEnumerator(JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode node) { }
        public System.Collections.Generic.IEnumerator<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode> GetEnumerator(JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode node, bool isBackwards, bool returnCurrent) { }
        public System.Collections.Generic.IEnumerator<JetBrains.UI.AbstractTreeBuilder.IAbstractTreeNode> GetEnumerator() { }
    }
    public class TreeControlWithCheckBoxes : JetBrains.UI.AbstractTreeBuilder.DevExpressTree.SimpleTreeControl
    {
        public TreeControlWithCheckBoxes(JetBrains.UI.Application.IUIApplication environment) { }
        public event JetBrains.UI.AbstractTreeBuilder.DevExpressTree.GetTreeNodeCheckStateHandler OnGetTreeNodeCheckState;
        public event JetBrains.UI.AbstractTreeBuilder.DevExpressTree.ToggleTreeNodeCheckStateHandler OnToggleTreeNodeCheckState;
        protected override JetBrains.UI.AbstractTreeBuilder.DevExpressTree.NodePainter CreateNodePainter() { }
        protected virtual void GetTreeNodeCheckState(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode node, out System.Windows.Forms.CheckState state, out bool hasCheckBox) { }
        protected override void OnKeyDown(System.Windows.Forms.KeyEventArgs e) { }
        protected override void OnLeave(System.EventArgs e) { }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e) { }
        protected virtual void ToggleTreeNodeCheckState(System.Collections.Generic.ICollection<JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode> nodes) { }
        public class TreeControlWithCheckNodePainter : JetBrains.UI.AbstractTreeBuilder.DevExpressTree.NodePainter
        {
            public TreeControlWithCheckNodePainter(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.TreeControlWithCheckBoxes treeList, JetBrains.UI.Application.IUIApplication environment) { }
            public override int GetCellHeight(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.ITreeCellPresentation cell, System.Drawing.Graphics graphics) { }
            public override int GetCellWidth(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.ITreeCellPresentation cell, System.Drawing.Graphics graphics) { }
            public System.Drawing.Size GetCheckBoxSize() { }
            public override JetBrains.CommonControls.PresentableItemImage ImageHitTest(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode node, System.Drawing.Rectangle cellBounds, System.Drawing.Point pos, out System.Drawing.Rectangle imageRect) { }
            public override bool Paint(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.ITreeCellPresentation cell, bool selected, bool focused, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs args) { }
            public override bool TextRectangleHitTest(JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode node, System.Drawing.Rectangle cellBounds, System.Drawing.Point pos, out System.Drawing.Rectangle textRect) { }
        }
    }
    public delegate void TreeNodeMouseHandler(System.Windows.Forms.MouseButtons button, System.Drawing.Point point, JetBrains.UI.AbstractTreeBuilder.DevExpressTree.DevExpressTreeNode node);
}
namespace JetBrains.UI.ActionSystem.ActionBar
{
    
    public class ActionStripButton : System.Windows.Forms.ToolStripButton, JetBrains.ActionManagement.IActionBarItem
    {
        public ActionStripButton([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionBarManager manager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionBar actionBar, JetBrains.ActionManagement.UpdatableAction action) { }
        public JetBrains.ActionManagement.IActionBase Action { get; }
        public System.Nullable<JetBrains.ActionManagement.ActionBarItemDisplayStyle> PreferredDisplayStyle { get; set; }
        public string ShortcutsString { get; }
        protected override void OnCheckedChanged(System.EventArgs e) { }
        protected override void OnClick(System.EventArgs e) { }
        public void Update(JetBrains.Application.DataContext.IDataContext context) { }
    }
    public class static ActionStripUtil
    {
        public static System.Windows.Forms.ToolStripItemDisplayStyle GetToolStripItemDisplayStyle(System.Drawing.Image itemImage, bool isOnDropDown, System.Nullable<JetBrains.ActionManagement.ActionBarItemDisplayStyle> preferredDisplayStyle, JetBrains.ActionManagement.ActionPresentation presentation) { }
    }
}
namespace JetBrains.UI.ActionSystem.ActionManager.Avalon
{
    
    public class ActionManagerCommandBindings
    {
        public readonly JetBrains.ActionManagement.IActionManager ActionManager;
        public readonly JetBrains.ActionManagement.IShortcutManager ShortcutManager;
        public readonly JetBrains.Threading.IThreading Threading;
        public ActionManagerCommandBindings([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IShortcutManager shortcutManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionManager actionManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerRoutedUICommand GetCommand([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IExecutableAction action) { }
    }
    public class ActionManagerCommandBindingsBehavior
    {
        public static readonly System.Windows.DependencyProperty DefineProperty;
        public static JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindings GetDefine(System.Windows.UIElement element) { }
        public static void SetDefine(System.Windows.UIElement element, JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindings value) { }
    }
    public class static ActionManagerCommandBindingsEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerRoutedUICommand GetCommand([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindings thіs, [JetBrains.Annotations.NotNullAttribute()] string sActionId) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerRoutedUICommand GetCommand<THandlerType>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindings thіs) { }
    }
    public class ActionManagerContextMenu
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.ActionManagement.IActionBarManager ActionBarManager;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly string ActionGroupId;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.Lifetime Lifetime;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.Threading.IThreading Threading;
        public ActionManagerContextMenu([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionBarManager actionbarman, [JetBrains.Annotations.NotNullAttribute()] string sActionGroupId, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading) { }
    }
    public class ActionManagerContextMenuBehavior
    {
        public static readonly System.Windows.DependencyProperty DefineProperty;
        public static readonly System.Windows.DependencyProperty StateProperty;
        public static JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerContextMenu GetDefine(System.Windows.FrameworkElement element) { }
        public static void SetDefine(System.Windows.FrameworkElement element, JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerContextMenu value) { }
    }
    public class ActionManagerRoutedUICommand : System.Windows.Input.RoutedUICommand
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.ActionManagement.IExecutableAction Action;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Windows.Input.CommandBinding CommandBinding;
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerRoutedUICommand Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IExecutableAction action, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IShortcutManager shortcutman, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionManager actionManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading) { }
    }
}
namespace JetBrains.UI.ActionSystem.ActionManager
{
    
    public class static ShortcutManagerEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Input.InputGestureCollection GetInputGestures([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IShortcutManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IExecutableAction action) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IList<JetBrains.ActionManagement.ActionShortcut> GetShortcuts([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IShortcutManager shortcutManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IExecutableAction action) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string GetShortcutString([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ActionManagement.IShortcutManager shortcutManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IUpdatableAction action) { }
        public static JetBrains.ActionManagement.ActionShortcut SelectShortcutForPresentation(System.Collections.Generic.IList<JetBrains.ActionManagement.ActionShortcut> shortcuts) { }
    }
}
namespace JetBrains.UI.ActionSystem.Actions.CloseAll
{
    
    public class static CloseAll
    {
        public static readonly string ActionGroupId;
        public static readonly JetBrains.UI.ActionSystem.Actions.CloseAll.ICloseAllItems EmptyItemsList;
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class CloseAll_CloseAllAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class CloseAll_CloseAllButThisAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class CloseAll_CloseThisAction : JetBrains.ActionManagement.IActionHandler { }
    public class CloseAllItem
    {
        public readonly System.Action Close;
        public readonly bool IsCloseable;
        public readonly bool IsCurrent;
        public string Text;
        public CloseAllItem(string text, bool isCurrent, [JetBrains.Annotations.CanBeNullAttribute()] System.Action FClose) { }
    }
    public interface ICloseAllItem
    {
        bool CanClose { get; }
        bool IsCurrentItem { get; }
        bool QueryClose { get; }
        string Title { get; }
    }
    public interface ICloseAllItems
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataStructures.IReadOnlyList<JetBrains.UI.ActionSystem.Actions.CloseAll.ICloseAllItem> Items { get; }
        void QueryClose([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.UI.ActionSystem.Actions.CloseAll.ICloseAllItem> items);
    }
}
namespace JetBrains.UI.ActionSystem.Actions
{
    
    public class static ExpandCollapseDataConstants
    {
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.UI.ActionSystem.Actions.IExpandCollapseProvider> EXPAND_COLLAPSE_PROVIDER;
    }
    public interface IExpandCollapseProvider
    {
        void Collapse();
        void Expand();
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class ObtainPermanentTicketAction : JetBrains.ActionManagement.IActionHandler
    {
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class OpenExceptionReporterAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class ReturnPermanentTicketAction : JetBrains.ActionManagement.IActionHandler
    {
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class ShowEnterLicenseAction : JetBrains.ActionManagement.IActionHandler
    {
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class ShowLogAction : JetBrains.ActionManagement.IActionHandler
    {
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
}
namespace JetBrains.UI.ActionSystem.ShortcutManager
{
    
    public class ActionShortcutPair
    {
        public ActionShortcutPair(JetBrains.ActionManagement.ActionShortcut shortcut, JetBrains.ActionManagement.IExecutableAction action) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public interface ISchemeEntry
    {
        void AddShortcut(JetBrains.ActionManagement.IExecutableAction action, JetBrains.ActionManagement.ShortcutScope scope, JetBrains.ActionManagement.ActionShortcut shortcut);
        System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<JetBrains.ActionManagement.ActionShortcut, JetBrains.ActionManagement.ShortcutScope>> GetShortcuts(JetBrains.ActionManagement.IExecutableAction action);
        void RemoveAction(JetBrains.ActionManagement.IExecutableAction action);
        void RemoveShortcut(JetBrains.ActionManagement.IExecutableAction action, JetBrains.ActionManagement.ShortcutScope scope, JetBrains.ActionManagement.ActionShortcut shortcut);
    }
    public class SchemeEntry : JetBrains.UI.ActionSystem.ShortcutManager.ISchemeEntry
    {
        public readonly JetBrains.ActionManagement.ShortcutScheme Scheme;
        public SchemeEntry(JetBrains.ActionManagement.ShortcutScheme scheme) { }
        public virtual void AddShortcut(JetBrains.ActionManagement.IExecutableAction action, JetBrains.ActionManagement.ShortcutScope scope, JetBrains.ActionManagement.ActionShortcut shortcut) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<JetBrains.ActionManagement.ActionShortcut, JetBrains.ActionManagement.ShortcutScope>> GetShortcuts(JetBrains.ActionManagement.IExecutableAction action) { }
        public void RemoveAction(JetBrains.ActionManagement.IExecutableAction action) { }
        public virtual void RemoveShortcut(JetBrains.ActionManagement.IExecutableAction action, JetBrains.ActionManagement.ShortcutScope scope, JetBrains.ActionManagement.ActionShortcut shortcut) { }
    }
    public abstract class ShortcutManagerBase<TSchemeEntry> : JetBrains.ActionManagement.IShortcutManager
        where TSchemeEntry : JetBrains.UI.ActionSystem.ShortcutManager.ISchemeEntry
    {
        protected ShortcutManagerBase(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ActionManagement.IActionManager actionManager) { }
        protected JetBrains.ActionManagement.IActionManager ActionManager { get; }
        protected TSchemeEntry CurrentEnry { get; }
        public JetBrains.ActionManagement.ShortcutScheme CurrentScheme { get; }
        public virtual void AddShortcut(JetBrains.ActionManagement.ShortcutScheme scheme, JetBrains.ActionManagement.IExecutableAction action, JetBrains.ActionManagement.ShortcutScope scope, JetBrains.ActionManagement.ActionShortcut shortcut) { }
        public virtual void ApplyShortcutScheme(JetBrains.ActionManagement.ShortcutScheme scheme, JetBrains.Application.Progress.IProgressIndicator progress) { }
        protected virtual void ApplyShortcutToCurrentScheme(JetBrains.ActionManagement.IExecutableAction action, JetBrains.ActionManagement.ShortcutScope scope, JetBrains.ActionManagement.ActionShortcut shortcut) { }
        protected abstract TSchemeEntry CreateSchemeEntry(JetBrains.ActionManagement.ShortcutScheme scheme);
        protected TSchemeEntry GetEntry(JetBrains.ActionManagement.ShortcutScheme scheme) { }
        public virtual System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ActionManagement.ActionShortcut, JetBrains.ActionManagement.ShortcutScope>> GetShortcutsWithScopes(JetBrains.ActionManagement.IExecutableAction action) { }
        public virtual void RemoveShortcut(JetBrains.ActionManagement.ShortcutScheme scheme, JetBrains.ActionManagement.IExecutableAction action, JetBrains.ActionManagement.ShortcutScope scope, JetBrains.ActionManagement.ActionShortcut shortcut) { }
        protected virtual void RemoveShortcutFromCurrentScheme(JetBrains.ActionManagement.IExecutableAction action, JetBrains.ActionManagement.ShortcutScope scope, JetBrains.ActionManagement.ActionShortcut shortcut) { }
        public virtual void SelectShortcutScheme(JetBrains.ActionManagement.ShortcutScheme scheme) { }
    }
}
namespace JetBrains.UI.ActiveText
{
    
    public class ActiveTextClickHandler : DevExpress.XtraTreeList.Handler.TreeListHandler
    {
        public ActiveTextClickHandler(DevExpress.XtraTreeList.TreeList conflictsTreeList, int activeTextColumnIndex, JetBrains.UI.Application.IUIApplication environment) { }
        public ActiveTextClickHandler(DevExpress.XtraTreeList.TreeList conflictsTreeList, int activeTextColumnIndex, JetBrains.UI.ActiveText.INodeHostProvider nodeHostProvider, JetBrains.UI.Application.IUIApplication environment) { }
        protected override DevExpress.XtraTreeList.Handler.TreeListHandler.TreeListControlState CreateState(DevExpress.XtraTreeList.TreeListState state) { }
        public string GetAnchor(DevExpress.XtraTreeList.TreeListHitTest ht) { }
    }
    [JetBrains.UI.ActiveText.ProtocolHandlerAttribute(Protocol="*")]
    public class DeafultProtocolHandler : JetBrains.UI.ActiveText.IProtocolHandler
    {
        public DeafultProtocolHandler(JetBrains.UI.Application.UIApplication uiApplication) { }
        public void Navigate(string link, object host) { }
    }
    [JetBrains.UI.ActiveText.ProtocolHandlerAttribute(Protocol="file")]
    [JetBrains.UI.ActiveText.ProtocolHandlerAttribute(Protocol="explorer")]
    public class FileProtocolHandler : JetBrains.UI.ActiveText.IProtocolHandler
    {
        public void Navigate(string link, object host) { }
    }
    public interface INodeHostProvider
    {
        object GetHost(object tag);
    }
    public interface IProtocolHandler
    {
        void Navigate(string link, object host);
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class LinkNavigator
    {
        public LinkNavigator(JetBrains.UI.ActiveText.ProtocolSpecific protocolSpecific) { }
        public void Navigate(string link, object host) { }
    }
    public abstract class ProtocolHandler : JetBrains.UI.ActiveText.IProtocolHandler
    {
        protected ProtocolHandler() { }
        protected static object GetProperty(string link, object host) { }
        public void Navigate(string link, object host) { }
        protected abstract void NavigateNakedLink(string link, object host);
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.UI.ActiveText.IProtocolHandler))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=true)]
    public class ProtocolHandlerAttribute : JetBrains.Application.ShellComponentAttribute
    {
        public ProtocolHandlerAttribute() { }
        public string Protocol { get; set; }
        public string SchemeDelimiter { get; set; }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public sealed class ProtocolSpecific
    {
        public const string Default = "*";
        public ProtocolSpecific(JetBrains.DataFlow.Lifetime lifetime, JetBrains.DataFlow.IViewable<JetBrains.UI.ActiveText.IProtocolHandler> protocolHandlers) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.ActiveText.IProtocolHandler GetHandler(string protocol) { }
    }
}
namespace JetBrains.UI
{
    
    public class AnchoringRect : JetBrains.UI.IAnchoringRect
    {
        protected readonly JetBrains.DataFlow.Lifetime myLifetime;
        public AnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
        public JetBrains.DataFlow.IProperty<System.Windows.Rect> Rectangle { get; }
        public override string ToString() { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class Clipboard
    {
        public Clipboard(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading threading) { }
        public virtual object GetData(string format) { }
        public virtual System.Windows.Forms.IDataObject GetDataObject() { }
        public virtual string GetText() { }
        public virtual System.Windows.Forms.IDataObject SetDataObject(object data) { }
        public virtual void SetText(string text) { }
    }
    public class ContextMenuEventArgs : System.EventArgs
    {
        public ContextMenuEventArgs(System.Drawing.Point location, bool mouseEvent) { }
        public System.Drawing.Point Location { get; }
        public bool MouseEvent { get; }
    }
    public abstract class DataConstants : JetBrains.Application.DataContext.DataConstants
    {
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.UI.ActionSystem.Actions.CloseAll.ICloseAllItems> CloseAllItems;
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.UI.PopupWindowManager.PopupWindowContextSource> PopupWindowContextSource;
    }
    public class DockingLayouter : JetBrains.UI.PopupLayouter
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.IAnchoringRect> Anchor;
        protected readonly JetBrains.UI.StickyDisposition myDispositions;
        protected int myPadding;
        protected readonly bool mySuppressLayout;
        protected bool myUseStickyDispositions;
        public DockingLayouter(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.IAnchoringRect anchor) { }
        public DockingLayouter(JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.IAnchoringRect anchor, System.Collections.Generic.ICollection<JetBrains.UI.Anchoring2D> dispositions, int padding = 0, bool stickydispositions = True) { }
        public System.Collections.Generic.ICollection<JetBrains.UI.Anchoring2D> Dispositions { get; set; }
        public int Padding { get; set; }
        public bool UseStickyDispositions { get; set; }
        public virtual System.Drawing.Rectangle GetScreenBounds(System.Drawing.Rectangle rectAnchor) { }
        protected virtual void UpdateLayout() { }
    }
    public interface IAnchoringRect
    {
        JetBrains.DataFlow.IProperty<System.Windows.Rect> Rectangle { get; }
    }
    public class static IAnchoringRectEx
    {
        public static JetBrains.UI.TransformedAnchoringRect Transform([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.IAnchoringRect anchor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.Windows.Vector offset) { }
        public static JetBrains.UI.TransformedAnchoringRect Transform([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.IAnchoringRect anchor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.Windows.Vector offset = null, JetBrains.UI.Anchoring2D collapseto = null) { }
    }
    public interface IPopupLayouter
    {
        JetBrains.DataFlow.IProperty<JetBrains.UI.LayoutResult> Layout { get; }
        JetBrains.DataFlow.IProperty<System.Drawing.Size> Size { get; }
    }
    public struct LayoutResult
    {
        public System.Drawing.Rectangle AnchoringRect;
        public System.Drawing.Rectangle Bounds;
        public JetBrains.UI.Anchoring2D Disposition;
        public static readonly JetBrains.UI.LayoutResult Empty;
        public System.Drawing.Rectangle Room;
        public LayoutResult(System.Drawing.Rectangle room, System.Drawing.Rectangle bounds, System.Drawing.Rectangle anchor, JetBrains.UI.Anchoring2D disposition) { }
        public System.Drawing.Point Location { get; }
        public System.Drawing.Size Size { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class NestedAnchoringRect : JetBrains.UI.AnchoringRect
    {
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.IAnchoringRect> Nested;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.IAnchoringRect> Outer;
        public NestedAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.IAnchoringRect nested, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.IAnchoringRect outer) { }
        public NestedAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
    }
    public class PopupLayouter : JetBrains.UI.IPopupLayouter
    {
        protected readonly JetBrains.DataFlow.Lifetime myLifetime;
        public PopupLayouter([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.LayoutResult> Layout { get; }
        public JetBrains.DataFlow.IProperty<System.Drawing.Size> Size { get; }
    }
    public struct RectangleDocker
    {
        public RectangleDocker(System.Drawing.Rectangle rectAnchor, System.Drawing.Size size, System.Collections.Generic.ICollection<JetBrains.UI.Anchoring2D> dispositionsAllowed, System.Drawing.Rectangle screen) { }
        public RectangleDocker(System.Drawing.Rectangle rectAnchor, System.Drawing.Size size, System.Collections.Generic.ICollection<JetBrains.UI.Anchoring2D> dispositionsAllowed, System.Drawing.Rectangle screen, int padding) { }
        public System.Collections.Generic.ICollection<JetBrains.UI.Anchoring2D> AllowedDispositions { get; }
        public System.Drawing.Rectangle AnchoringRect { get; }
        public JetBrains.UI.Anchoring2D CandidateDisposition { get; }
        public int CandidateRatio { get; }
        public System.Drawing.Rectangle CandidateRect { get; }
        public System.Drawing.Rectangle CandidateRoom { get; }
        public int Padding { get; }
        public JetBrains.UI.LayoutResult Result { get; }
        public System.Drawing.Rectangle Screen { get; }
        public System.Drawing.Size Size { get; }
    }
    public class StaticAnchoringRect : JetBrains.UI.AnchoringRect
    {
        public StaticAnchoringRect(JetBrains.DataFlow.Lifetime lifetime, System.Windows.Point location) { }
        public StaticAnchoringRect(JetBrains.DataFlow.Lifetime lifetime, System.Windows.Rect anchor) { }
        public static JetBrains.UI.StaticAnchoringRect FromCurrentMousePosition(JetBrains.DataFlow.Lifetime lifetime) { }
        public static JetBrains.UI.StaticAnchoringRect FromCurrentMousePosition(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Size offset) { }
    }
    public class StickyDisposition
    {
        protected System.Collections.Generic.List<JetBrains.UI.Anchoring2D> myDispositions;
        public StickyDisposition(System.Collections.Generic.ICollection<JetBrains.UI.Anchoring2D> dispositions) { }
        public StickyDisposition() { }
        public System.Collections.Generic.ICollection<JetBrains.UI.Anchoring2D> Dispositions { get; set; }
        public void Promote(JetBrains.UI.Anchoring2D disposition) { }
        public override string ToString() { }
    }
    public class TransformedAnchoringRect : JetBrains.UI.AnchoringRect
    {
        public readonly JetBrains.UI.Anchoring2D CollapseTo;
        public readonly System.Windows.Vector Offset;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.IAnchoringRect UnderlyingAnchor;
        public TransformedAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.IAnchoringRect underlying, System.Windows.Vector offset = null, JetBrains.UI.Anchoring2D collapseto = null) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        protected void UpdateAnchor() { }
    }
    public class UndisposableAnchoringRect : JetBrains.UI.AnchoringRect
    {
        public UndisposableAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.IAnchoringRect undisposable) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.Application.Settings.EnvironmentSettings), "General settings of the application user interface.")]
    public class UserInterfaceSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "True: always show modal dialog when exception occurs. False: exception notificati" +
            "on in status bar, collecting exceptions in background (if possible).")]
        public bool AlwaysShowExceptionReporterDialog;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Whether keyboard selection in lists should wrap around ends: pressing Up Arrow on" +
            " the first item selects the last one, and vice versa.")]
        public bool CyclicSelectionInLists;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Wheather to hide VS menus. True: hide.")]
        public bool HideVsMenus;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "True: mouse wheel messages are forced to be processed by the control under cursor" +
            ". False: no behavior enforced; usually, this means the focused control is scroll" +
            "ed instead of the hovered one.")]
        public bool IsFixingMouseWheel;
        [JetBrains.Application.Settings.SettingsEntryAttribute("NotSet", "Shortcuts scheme")]
        public string ShortcutSchemeName;
        [JetBrains.Application.Settings.SettingsEntryAttribute("0:0:0.030", "Interval of time for which the text input changes are deferred before they are co" +
            "mmitted. Helps to process considerable amounts of user input, rather than react " +
            "to each keystroke.")]
        public System.TimeSpan UserInputDeferTime;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Weather to use VS icons instead of R#. True: use VS icons, False: use R# icons.")]
        public bool UseVsIcons;
    }
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    public class UserInterfaceSettingsUpgrader : JetBrains.Application.Configuration.SettingTablesUpgrader
    {
        public UserInterfaceSettingsUpgrader(JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations) { }
        protected override void DoUpgrade(JetBrains.Application.Configuration.IComponentSettingsProvider legacySettingsProvider, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore, JetBrains.DataFlow.Lifetime upgradeLifetime, JetBrains.Application.Configuration.SettingsTableBase workspaceSettingsTable, JetBrains.Application.Configuration.SettingsTableBase globalSettingsTable) { }
    }
    public class ValueChangedEventArgs<T> : System.EventArgs
    
    {
        public ValueChangedEventArgs(T previous, T current) { }
        public T Current { get; }
        public T Previous { get; }
    }
    public delegate void ValueChangedEventHandler<T>(object sender, JetBrains.UI.ValueChangedEventArgs<T> args);
    public class WindowAnchoringRect : JetBrains.UI.AnchoringRect
    {
        public WindowAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.Void* window, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager) { }
        public WindowAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.Windows.Forms.IWin32Window window, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager) { }
        public System.Void* WindowHandle { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.AnchoringRect AnchorToMainWindowSafe([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow mainwin, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager) { }
        public void Update() { }
    }
}
namespace JetBrains.UI.Application
{
    
    [JetBrains.Application.ShellComponentAttribute()]
    public sealed class ApplicationIdleEvent
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ISimpleSignal Idle;
        public ApplicationIdleEvent(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading threading) { }
    }
    public class FreeEvaluationInfo
    {
        public static readonly System.DateTime INSTALLER_TIME;
        public bool IsFeedbackRequested;
        public System.DateTime RecentExipartionNotification;
        public static readonly string ROOT_GUID;
        public static readonly string ROOT_KEY;
        public System.DateTime TrialStart;
        public bool IsNotStarted { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.Application.FreeEvaluationInfo CreateInfo([JetBrains.Annotations.CanBeNullAttribute()] string registryValue) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.Application.FreeEvaluationInfo GetFreeTrialInfo(string productGuid, string rootKeyName) { }
        protected string GetRegistryString() { }
        public static void SetFreeTrialInfo(string productGuid, JetBrains.UI.Application.FreeEvaluationInfo info, string rootKeyName) { }
    }
    public class static FreeEvaluationInfoEx
    {
        public static int GetDaysLeftCount(this JetBrains.UI.Application.FreeEvaluationInfo info, int freeTrialInfoPeriod) { }
        public static int GetUsedDaysCount(this JetBrains.UI.Application.FreeEvaluationInfo info) { }
        public static bool IsValid(this JetBrains.UI.Application.FreeEvaluationInfo info) { }
    }
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Product)]
    public class HelpSystem
    {
        public HelpSystem(System.Collections.Generic.IEnumerable<JetBrains.UI.Application.IShowHelp> showhelps, JetBrains.Util.Lazy.Lazy<JetBrains.UI.Application.OfflineHelp> offlinehelp) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.Util.FileSystemPath GetOfflineHelpFilePath() { }
        public bool IsOfflineHelpFilePresent() { }
        public virtual void ShowHelp([JetBrains.Annotations.NotNullAttribute()] string keyword, JetBrains.UI.Application.HelpSystem.HelpKind kind) { }
        public void ShowOfflineHelp() { }
        public enum HelpKind
        {
            Product = 0,
            Msdn = 1,
        }
    }
    public interface IIsApplicationActiveState
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<bool> IsApplicationActive { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<bool> IsEnabled { get; }
    }
    public interface ILicenseCheckerComponent
    {
        JetBrains.DataFlow.IProperty<JetBrains.UI.Application.License.ILicenseInformation> LicenseInformation { get; }
        JetBrains.DataFlow.IProperty<JetBrains.UI.Application.ProductEditionValue> ProductEditionValue { get; }
        bool CheckLicense([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.License.LicenseInformation licenseInfo, out string checkFailedReason);
        string GetSubmitFeedbackUrl();
        void LicenseWentOff(string licenseWentOffReason);
        void ObtainPermanentTicket(JetBrains.CommonControls.Validation.FormValidators formValidators);
        void ReturnPermanentTicket();
        bool ShowLicense();
        void ShutdownProduct();
    }
    public interface IMainWindow : System.Windows.Forms.IWin32Window { }
    [JetBrains.Application.ShellComponentAttribute()]
    public class IsApplicationActiveState : JetBrains.UI.Application.IIsApplicationActiveState
    {
        protected readonly JetBrains.DataFlow.Lifetime myLifetimeComponent;
        public IsApplicationActiveState([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetimeComponent, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager) { }
        public JetBrains.DataFlow.IProperty<bool> IsApplicationActive { get; }
        public JetBrains.DataFlow.IProperty<bool> IsEnabled { get; }
        protected virtual void Init() { }
    }
    public class IsApplicationActiveStateDummy : JetBrains.UI.Application.IIsApplicationActiveState
    {
        public IsApplicationActiveStateDummy([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
        public JetBrains.DataFlow.IProperty<bool> IsApplicationActive { get; }
        public JetBrains.DataFlow.IProperty<bool> IsEnabled { get; }
    }
    public interface IShowHelp
    {
        double Priority { get; }
        HelpKind[] SupportedKinds { get; }
        bool ShowHelp(string keyword, JetBrains.UI.Application.HelpSystem.HelpKind kind);
    }
    public interface IUIApplication : JetBrains.UI.Application.IUIApplicationSimple
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.Application.Settings.ISettingsStore Settings { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.Application.IShellLocks ShellLocks { get; }
    }
    public class static IUIApplicationEx { }
    public interface IUIApplicationSimple
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.ISimpleSignal Idle { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<bool> IsApplicationActive { get; }
        bool IsInternalMode { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Application.IMainWindow MainWindow { get; }
        JetBrains.DataFlow.OuterLifetime OuterLifetime { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.Theming.ITheming Theming { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.Threading.IThreading Threading { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.Application.IWindowBranding WindowBranding { get; }
        void OpenUri([JetBrains.Annotations.NotNullAttribute()] System.Uri uri);
    }
    public class static IUIApplicationSimpleEx
    {
        public static void OpenUri(this JetBrains.UI.Application.IUIApplicationSimple thіs, [JetBrains.Annotations.NotNullAttribute()] string uri) { }
    }
    public interface IWindowBranding
    {
        [JetBrains.Annotations.NotNullAttribute()]
        string ProductDisplayName { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<System.Drawing.Icon> WindowIcon { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string MakeWindowCaption([JetBrains.Annotations.NotNullAttribute()] string caption);
    }
    public class static IWindowBrandingEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Application.IWindowBranding SetIcon([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Application.IWindowBranding thіs, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Form form) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Forms.Form SetIcon([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Forms.Form thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IWindowBranding branding) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Application.IWindowBranding SetIconAndCaption([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Application.IWindowBranding thіs, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Form form, [JetBrains.Annotations.NotNullAttribute()] string caption) { }
    }
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Product)]
    public class LicenseCheckComponent : JetBrains.Application.Env.IProductCanBeStarted
    {
        public LicenseCheckComponent([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.LicenseCheckerComponent licenseChecker) { }
        protected virtual JetBrains.DataFlow.IProperty<JetBrains.Application.Env.ProductCanBeStartedVerdict> CreateCanBeStartedCore([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
    }
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Product)]
    public class LicenseCheckerComponent : JetBrains.UI.Application.ILicenseCheckerComponent
    {
        protected const string CUSTOM_LICENSE_SERVER_URL = "CustomLicenseServerUrl";
        public readonly JetBrains.DataFlow.Property<bool> IsCheckAllowed;
        protected const string LICENSE_AGREEMENT_SHOWN_TYPE = "LicenseAgreementShownForType";
        protected const string LICENSE_AGREEMENT_SHOWN_USER = "LicenseAgreementShownToUser";
        protected const string LICENSE_MODE = "LicenseMode";
        protected const string PERMANENT_TICKET = "PermanentTicket";
        protected const string PERMANENT_TICKET_EMAIL = "PermanentTicketEmail";
        protected const string UNKNOWN_USER = "<UNKNOWN USER>";
        protected const string USE_CUSTOM_LICENSE_SERVER_URL = "UseCustomLicenseServer";
        public LicenseCheckerComponent([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime componentLifetime, JetBrains.Application.IApplicationDescriptor applicationDescriptor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Env.Components.ProductSettingsLocation productSettingsLocation, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.License.LicenseSettingsLocation licenseSettingsLocation, JetBrains.Util.Lazy.Lazy<JetBrains.UI.Application.IMainWindow> mainWindow, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.OpensUri opensUri, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.HelpSystem helpSystem, JetBrains.Threading.IThreading threading) { }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Application.License.ILicenseInformation> LicenseInformation { get; }
        protected JetBrains.UI.Application.IMainWindow MainWindow { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Application.ProductEditionValue> ProductEditionValue { get; }
        protected virtual string TrialRootKeyName { get; }
        protected virtual bool CheckEvaluation(JetBrains.DataFlow.Lifetime temporaryLifetime, out string checkFailedReason) { }
        public bool CheckLicense([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.License.LicenseInformation licenseInfo, out string checkFailedReason) { }
        protected virtual bool CheckLicense(JetBrains.DataFlow.LifetimeDefinition temporaryLifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.License.LicenseInformation licenseInfo, bool checkLicenseServerImmediately, bool applyNewServerClient, out string checkFailedReason) { }
        protected virtual bool CheckUserLicense(JetBrains.Application.License.LicenseData data, JetBrains.Util.FileSystemPath licenseLocation, out string rejectReason) { }
        protected virtual bool EnterLicense(bool isInformational, string reason) { }
        protected JetBrains.UI.Application.LicenseServerSupport.ILicenseServerClient ExecuteFloatingLicenseCheck(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.License.LicenseServerSupport.SynchronizedLifetimeDefinitionForLicenseServerClient synchronizedLifetimeDefinition, JetBrains.UI.Application.License.ILicenseInformation licenseInfo, out string rejectReason) { }
        protected JetBrains.UI.Application.LicenseServerSupport.ILicenseServerClient ExecuteLicenseServer(JetBrains.DataFlow.Lifetime uiThreadLife, JetBrains.UI.License.LicenseServerSupport.SynchronizedLifetimeDefinitionForLicenseServerClient synchronizedLifetimeDefinition, JetBrains.UI.Application.License.ILicenseInformation licenseInfo, out string rejectReason, System.Func<JetBrains.UI.Application.LicenseServerSupport.ILicenseServerClient, JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult> clientAction) { }
        protected JetBrains.UI.Application.LicenseServerSupport.ILicenseServerClient ExecutePermanentLicenseCheck(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.License.LicenseServerSupport.SynchronizedLifetimeDefinitionForLicenseServerClient synchronizedLifetimeDefinition, JetBrains.UI.Application.License.ILicenseInformation licenseInfo, out string rejectReason) { }
        public virtual string GetCurrentLicenseServerInfo() { }
        protected virtual JetBrains.UI.Application.License.LicenseInformation GetLicenseInformation() { }
        public virtual string GetSubmitFeedbackUrl() { }
        public virtual void LicenseWentOff(string licenseWentOffReason) { }
        [JetBrains.Annotations.StringFormatMethodAttribute("format")]
        protected void Log(string format, params object[] args) { }
        protected virtual void NotifyOfExpiration(int daysLeft, bool showModal) { }
        public virtual void ObtainPermanentTicket(JetBrains.CommonControls.Validation.FormValidators formValidators) { }
        protected virtual void OnCheckAllowed(JetBrains.DataFlow.Lifetime lifetime) { }
        protected void OpenUrl(string url) { }
        protected void QueueFloatingLicenseCheck(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.License.ILicenseInformation licenseInfo, System.TimeSpan delay) { }
        protected void QueuePermanentLicenseCheck(JetBrains.DataFlow.LifetimeDefinition temporaryLifetimeDefinition, JetBrains.UI.Application.License.ILicenseInformation licenseInfo, System.TimeSpan delay) { }
        protected void RecheckEvaluation(JetBrains.DataFlow.Lifetime lifetime) { }
        protected virtual void RequestFeedback(int nDays, bool showModal) { }
        protected void RetryFloatingLicenseCheck(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.License.LicenseServerSupport.SynchronizedLifetimeDefinitionForLicenseServerClient synchronizedLifetimeDefinition, JetBrains.UI.Application.License.ILicenseInformation licenseInfo, System.TimeSpan delay) { }
        protected void RetryPermanentLicenseCheck(JetBrains.DataFlow.LifetimeDefinition temporaryLifetimeDefinition, JetBrains.UI.License.LicenseServerSupport.SynchronizedLifetimeDefinitionForLicenseServerClient synchronizedLifetimeDefinition, JetBrains.UI.Application.License.ILicenseInformation licenseInfo, System.TimeSpan delay) { }
        public virtual void ReturnPermanentTicket() { }
        protected virtual void SaveNewLicense(JetBrains.DataFlow.LifetimeDefinition temporaryLifetimeDefinition, JetBrains.UI.Application.License.ILicenseInformation newLicense) { }
        public virtual bool ShowLicense() { }
        protected virtual bool ShowLicenseAgreement(JetBrains.UI.Application.License.ILicenseInformation licenseInfo) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected virtual JetBrains.UI.Application.License.LicenseInformation ShowLicenseInformation(bool isLicenseValid, string reason, JetBrains.UI.Application.License.LicenseInformation licenseInfo) { }
        public virtual void ShutdownProduct() { }
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Components.ProgramConfigurations.NONE | JetBrains.Application.Components.ProgramConfigurations.STANDALONE | JetBrains.Application.Components.ProgramConfigurations.VS_ADDIN | JetBrains.Application.Components.ProgramConfigurations.ALL)]
    public class MouseWheelRedirector
    {
        public MouseWheelRedirector(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.ISettingsStore settings, JetBrains.Application.Interop.NativeHook.IWindowsHookManager hookManager) { }
    }
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Product)]
    public class OfflineHelp
    {
        public OfflineHelp(JetBrains.Application.IApplicationDescriptor product, JetBrains.Application.Env.Components.ProductSettingsLocation productSettingsLocation, JetBrains.UI.Application.IMainWindow mainWindow) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.Util.FileSystemPath GetOfflineHelpFilePath() { }
        public bool IsOfflineHelpFilePresent() { }
        public void ShowOfflineHelp(string keyword = null) { }
    }
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Common)]
    public class OpensUri
    {
        public virtual bool IsInternetConnected() { }
        public virtual void OpenUri([JetBrains.Annotations.NotNullAttribute()] System.Uri uri) { }
    }
    public class ProductEditionValue
    {
        public static readonly JetBrains.UI.Application.ProductEditionValue LicenseCheckFailed;
        public static readonly JetBrains.UI.Application.ProductEditionValue LicensedNoEditions;
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.Application.ProductEdition Edition { get; }
        public static JetBrains.UI.Application.ProductEditionValue CreateLicensedValue(JetBrains.Application.ProductEdition edition) { }
        public bool Equals(JetBrains.UI.Application.ProductEditionValue other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class static ShellComponentsEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Options.OptionsManager Options([JetBrains.Annotations.NotNullAttribute()] this JetBrains.Application.ShellComponents compo) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.StatusBar.IStatusBar StatusBar([JetBrains.Annotations.NotNullAttribute()] this JetBrains.Application.ShellComponents compo) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Tooltips.ITooltipManager Tooltips([JetBrains.Annotations.NotNullAttribute()] this JetBrains.Application.ShellComponents compo) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Updates.UpdatesManager Updates([JetBrains.Annotations.NotNullAttribute()] this JetBrains.Application.ShellComponents compo) { }
    }
    public class StaticMainWindow : JetBrains.UI.Application.IMainWindow, System.Windows.Forms.IWin32Window
    {
        public StaticMainWindow(System.IntPtr handle) { }
        public StaticMainWindow(System.Void* handle) { }
        public StaticMainWindow([JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window window) { }
        public System.IntPtr Handle { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class StatusBar : JetBrains.UI.StatusBar.IStatusBar
    {
        public StatusBar(JetBrains.DataFlow.Lifetime lifetime) { }
    }
    public class ThemingColorThemeManager : JetBrains.UI.Components.Theming.IColorThemeManager
    {
        public ThemingColorThemeManager([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Theming.ITheming theming) { }
    }
    public class ThemingFontManager : JetBrains.UI.CommonControls.Fonts.FontsManager
    {
        public ThemingFontManager([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Theming.ITheming theming) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class UIApplication : JetBrains.UI.Application.UIApplicationSimple, JetBrains.UI.Application.IUIApplication, JetBrains.UI.Application.IUIApplicationSimple
    {
        public UIApplication(JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IShellLocks locks, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStore settings, JetBrains.UI.Application.IIsApplicationActiveState isApplicationActiveState, JetBrains.UI.Application.ApplicationIdleEvent applicationIdleEvent, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.OpensUri opensUri, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow mainwin, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager hookman, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Theming.ITheming theming, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.IApplicationDescriptor product, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Util.ILogger logger) { }
        public JetBrains.Application.Settings.ISettingsStore Settings { get; }
        public JetBrains.Application.IShellLocks ShellLocks { get; }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class UIApplicationSimple : JetBrains.UI.Application.IUIApplicationSimple
    {
        public UIApplicationSimple([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, JetBrains.UI.Application.IIsApplicationActiveState isApplicationActiveState, JetBrains.UI.Application.ApplicationIdleEvent applicationIdleEvent, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.OpensUri opensUri, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow mainwin, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager hookman, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Theming.ITheming theming, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.IApplicationDescriptor product, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Util.ILogger logger, JetBrains.Application.Env.ProductConfigurationsEx.InternalMode internalmode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.ISimpleSignal Idle { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<bool> IsApplicationActive { get; }
        public bool IsInternalMode { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Application.IMainWindow MainWindow { get; }
        public JetBrains.DataFlow.OuterLifetime OuterLifetime { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Theming.ITheming Theming { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.Threading.IThreading Threading { get; }
        public JetBrains.UI.Application.IWindowBranding WindowBranding { get; }
        public void OpenUri([JetBrains.Annotations.NotNullAttribute()] System.Uri uri) { }
    }
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Product)]
    public class UIEditionProductConfigurationProvider : JetBrains.Application.EditionProductConfigurationProvider
    {
        public UIEditionProductConfigurationProvider([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor product, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.ILicenseCheckerComponent licenseCheckerComponent) { }
        public override string[] Configurations { get; }
    }
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Product)]
    public class UserLicenseConflictCheckerComponent : JetBrains.Application.IPortListener
    {
        protected const string UNKNOWN_USER = "<UNKNOWN USER>";
        public UserLicenseConflictCheckerComponent(JetBrains.DataFlow.Lifetime componentLifetime, JetBrains.UI.Application.ILicenseCheckerComponent licenseChecker, JetBrains.Application.IApplicationDescriptor descriptor, JetBrains.Application.SocketManager socketManager, JetBrains.Threading.IThreading invocator, JetBrains.Util.Lazy.Lazy<JetBrains.UI.Application.IMainWindow> mainWindow) { }
        protected JetBrains.UI.Application.IMainWindow MainWindow { get; }
        protected virtual byte ProductId { get; }
        public void BroadcastLicense() { }
        protected static void CopyArray(byte[] dst, ref int pos, byte[] data) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected JetBrains.Application.License.LicenseData GetLicenseData(byte[] data, out string windowsUserName) { }
        protected static string GetWindowsUserName() { }
    }
    public class WindowBranding : JetBrains.UI.Application.IWindowBranding
    {
        public WindowBranding([JetBrains.Annotations.NotNullAttribute()] string sProductDisplayName, [JetBrains.Annotations.NotNullAttribute()] System.Drawing.Icon iconStatic) { }
        public string ProductDisplayName { get; }
        public JetBrains.DataFlow.IProperty<System.Drawing.Icon> WindowIcon { get; }
        public static JetBrains.UI.Application.WindowBranding FromApplicationDescriptor([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor product) { }
        public string MakeWindowCaption(string caption) { }
    }
    public class static WindowUtil
    {
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.Util.dataStructures.Boxed<JetBrains.UI.Application.WindowUtil.Modality>> ShowDialogModality;
        public static void ForceWindowsLoseFocus() { }
        public static System.Windows.Window GetActiveWindow() { }
        public static void LoadChildDialogPosition(System.Drawing.Rectangle bounds, System.Windows.Forms.Form form, JetBrains.UI.Application.IMainWindow mainwin) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string PrependCaptionWithProductName([JetBrains.Annotations.NotNullAttribute()] string caption, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.IApplicationDescriptor product) { }
        public static void PushDisableWindowsButOne([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.IntPtr hwndModalWindow) { }
        public static void PushFocusedWindowState([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window mainwin) { }
        public static void PushModalWindowEnabledState([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.IntPtr hwndModalWindow, System.Windows.Forms.IWin32Window mainWindow) { }
        public static System.Drawing.Rectangle SaveChildDialogPosition(System.Windows.Forms.Form form, JetBrains.UI.Application.IMainWindow mainwin) { }
        public static void SetOwnerReliable([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Forms.Form form, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window owner) { }
        public static void SetParentWindow([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.IWin32Window window, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.IWin32Window parentWindow) { }
        public static System.Nullable<bool> ShowDialogWithGuardedCreation([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.WindowUtil.Modality modality, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.LifetimeDefinition, JetBrains.DataFlow.Lifetime, System.Windows.Window> FCreateView, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, [JetBrains.Annotations.CanBeNullAttribute()] object ownerwindow) { }
        public enum Modality
        {
            Nonmodal = 0,
            Modal = 1,
            ModalThisStack = 2,
        }
    }
}
namespace JetBrains.UI.Application.ExceptionReport
{
    
    public class AutoSizeTabControl : System.Windows.Forms.TabControl
    {
        public override System.Drawing.Size GetPreferredSize(System.Drawing.Size proposedSize) { }
    }
    public class AuxiliaryTaskExecutor : JetBrains.Application.Progress.ITaskExecutor, System.IDisposable
    {
        public readonly JetBrains.DataFlow.ISimpleSignal Disposing;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.Application.ExceptionReport.AuxiliaryTaskExecutor.ExecutionState> StateProperty;
        public AuxiliaryTaskExecutor(JetBrains.UI.Application.Progress.TaskThreadAffinity taskThreadAffinity, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, JetBrains.Application.Progress.IProgressIndicatorModel, System.IntPtr> funcAttachUi, System.Windows.Forms.IWin32Window parentWindow, JetBrains.Threading.IThreading threading, JetBrains.UI.Application.Progress.WorkerThreadShop workerThreadShop) { }
        public void Cancel() { }
        public void Dispose() { }
        public bool ExecuteTask(string name, JetBrains.Application.Progress.TaskCancelable cancelable, System.Action<JetBrains.Application.Progress.IProgressIndicator> task) { }
        public enum ExecutionState
        {
            Unstarted = 0,
            Running = 1,
            Finished = 2,
        }
        public class Manager : System.IDisposable
        {
            public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.Application.ExceptionReport.AuxiliaryTaskExecutor> CurrentExecutorProperty;
            public Manager([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.Progress.TaskProgressControl progressControl, JetBrains.Threading.IThreading threading, JetBrains.UI.Application.Progress.WorkerThreadShop workerThreadShop) { }
            [JetBrains.Annotations.NotNullAttribute()]
            public JetBrains.UI.Application.Progress.TaskProgressControl ProgressControl { get; }
            public JetBrains.UI.Application.ExceptionReport.AuxiliaryTaskExecutor CreateExecutor(JetBrains.UI.Application.Progress.TaskThreadAffinity threadAffinity, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.IWin32Window ownerWindow) { }
            public void Dispose() { }
        }
    }
    public class static CollectionEventsEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        [System.ObsoleteAttribute("Use CollectionBridge")]
        public static JetBrains.DataFlow.ICollectionEvents<TValue> WhereEvents<TValue>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.DataFlow.ICollectionEvents<TValue> sourceCollection, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Predicate<TValue> filter) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.DataFlow.ICollectionEvents<TValue> WhereEvents<TValue>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.DataFlow.ICollectionEvents<TValue> sourceCollection, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Predicate<TValue> filter, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<TValue, JetBrains.DataFlow.ISimpleSignal> getChangeSignal) { }
    }
    public class CollectionEventsTreeModel<T> : JetBrains.TreeModels.TreeSimpleModel
    
    {
        public CollectionEventsTreeModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.ICollectionEvents<T> collection) { }
        protected override void PerformUpdate() { }
    }
    public class CombinedIssueTracker : JetBrains.Application.ExceptionReport.IIssueTracker
    {
        public CombinedIssueTracker(JetBrains.Application.ExceptionReport.IIssueTracker internalIssueTracker, JetBrains.Application.ExceptionReport.IIssueTracker normalIssueTracker) { }
        public CombinedIssueTracker(JetBrains.Application.ExceptionReport.IIssueTracker internalIssueTracker, JetBrains.Application.ExceptionReport.IIssueTracker normalIssueTracker, string url, bool reportOOMExceptions) { }
        public bool IsInternal { set; }
        public System.Nullable<JetBrains.Application.ExceptionReport.LoginInformation> Register() { }
        public void SubmitException(JetBrains.Application.ExceptionReport.ExceptionData exception, JetBrains.Application.ExceptionReport.LoginInformation loginInformation, string description, System.Net.IWebProxy proxy, System.Windows.Forms.IWin32Window parentWindow, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public void SubmitFeedback(JetBrains.Application.ExceptionReport.LoginInformation loginInformation, string feedback, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public JetBrains.Application.ExceptionReport.CredentialsVerificationResult VerifyCredentials(JetBrains.Application.ExceptionReport.LoginInformation loginInformation, System.Net.IWebProxy proxy) { }
    }
    public class ErrorInfoControl : System.Windows.Forms.UserControl
    {
        public ErrorInfoControl() { }
        public System.Collections.Generic.ICollection<string> Errors { set; }
    }
    public class ExceptionBrowserForm : System.Windows.Forms.Form
    {
        public readonly JetBrains.DataFlow.LifetimeDefinition Disposables;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.Application.ExceptionReport.LoginInformation> LoginInformationProperty;
        public readonly JetBrains.DataFlow.IProperty<bool> ShowBrowserFormAfterSubmission;
        public ExceptionBrowserForm(System.Windows.Forms.IWin32Window mainWindow, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.ICollectionEvents<JetBrains.Application.ExceptionReport.ExceptionData> exceptions, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.ExceptionReport.IIssueTracker issueTracker, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.OpensUri opensUri, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Communication.WebProxySettingsReader proxySettingsReader, JetBrains.Threading.IThreading threading, JetBrains.UI.Application.ExceptionReport.SubmitToTrackerExceptionReportServiceComponent submitToTrackerExceptionReportServiceComponent, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.UI.ExceptionReport.ExceptionReportingIconSet exceptionReportingIconSet, JetBrains.UI.StatusBar.IStatusBar statusBar, JetBrains.UI.Icons.IThemedIconManager themedIconManager, JetBrains.UI.Clipboard clipboard) { }
        public static JetBrains.UI.Application.ExceptionReport.ExceptionBrowserForm Instance { get; }
        protected override void Dispose(bool disposing) { }
        protected override void OnClosed(System.EventArgs e) { }
        protected override void OnVisibleChanged(System.EventArgs e) { }
    }
    public class ExceptionInfoControl : System.Windows.Forms.UserControl
    {
        public readonly JetBrains.DataFlow.IProperty<JetBrains.Application.ExceptionReport.ExceptionData> ExceptionProperty;
        public ExceptionInfoControl(JetBrains.DataFlow.Lifetime lifetime) { }
    }
    public class ExceptionNotifierPopupWindow : System.Windows.Forms.Form, JetBrains.CommonControls.IConstrainableControl
    {
        public ExceptionNotifierPopupWindow([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.ExceptionReport.SubmitToTrackerExceptionReportServiceComponent submitToTrackerExceptionReportServiceComponent, JetBrains.Application.IApplicationDescriptor product, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window parentwindow, JetBrains.UI.Application.IIsApplicationActiveState isApplicationActiveState, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowManager popupWindowManager, System.Collections.Generic.IEnumerable<JetBrains.Application.ExceptionReport.ExceptionData> exceptions, JetBrains.UI.Icons.IThemedIconManager thicman) { }
        public bool AutoActivate { get; set; }
        protected override System.Windows.Forms.CreateParams CreateParams { get; }
        protected override bool ShowWithoutActivation { get; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        protected override void Dispose(bool disposing) { }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        protected override void OnMouseClick(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseEnter(System.EventArgs e) { }
        protected override void OnMouseLeave(System.EventArgs e) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
    }
    public class ExceptionStatusBarIndicator : JetBrains.UI.Tooltips.ITooltipProvider
    {
        public ExceptionStatusBarIndicator(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.ExceptionReport.ExceptionManager exceptionManager, JetBrains.UI.StatusBar.IStatusBar statusBar, JetBrains.Threading.IThreading invocator, JetBrains.Application.ExceptionReport.SubmitToTrackerExceptionReportService repservice, System.Action statusBarIndicatorClickAction, JetBrains.UI.Icons.IThemedIconManager uiIconsComponent) { }
        public void BlinkIndicatorIfNecessary() { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        public void HideIndicator() { }
        public void OnExceptionBrowserShown() { }
        public void SetSubmissionInProgressState(int exceptionsBeingSubmittedCount, bool automatic) { }
        public void SetSubmissionSuccessfulState(int submittedExceptionsCount) { }
        public void StopBlinking() { }
        public void UpdateIndicatorState(bool hideIndicator = False) { }
    }
    public class ExceptionSubmitForm : System.Windows.Forms.Form
    {
        public readonly JetBrains.DataFlow.IProperty<JetBrains.Application.ExceptionReport.IIssueTracker> IssueTrackerProperty;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.Application.ExceptionReport.LoginInformation> LoginInformationProperty;
        public ExceptionSubmitForm([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetimeSubmitForm, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.ExceptionReport.ExceptionData exceptionData, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.OpensUri opensUri, JetBrains.Application.Communication.WebProxySettingsReader proxySettings, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.ExceptionReport.ExceptionReportingIconSet exceptionReportingIconSet, JetBrains.Threading.IThreading threading, JetBrains.UI.Application.Progress.WorkerThreadShop workerThreadShop) { }
        public JetBrains.Application.ExceptionReport.ExceptionData Exception { get; }
        public string SampleErrorReport { get; set; }
        public bool StopShowingExceptions { get; }
        protected override void Dispose(bool disposing) { }
        protected override void OnClosing(System.ComponentModel.CancelEventArgs e) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class IsInternalDetectionComponent
    {
        public IsInternalDetectionComponent(JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations) { }
    }
    public class LoginControl : System.Windows.Forms.UserControl
    {
        public readonly JetBrains.DataFlow.Property<JetBrains.Application.ExceptionReport.IIssueTracker> IssueTrackerProperty;
        public readonly JetBrains.DataFlow.Property<JetBrains.Application.ExceptionReport.LoginInformation> LoginInformationProperty;
        public LoginControl(System.Windows.Forms.IWin32Window mainWindow, JetBrains.UI.Application.ExceptionReport.TrackerLoginForm.IconSet trackericons) { }
    }
    public enum StatusBarIndicatorState
    {
        NoExceptions = 0,
        ReadException = 1,
        NewException = 2,
        AutomaticSubmissionInProgress = 3,
        UserSubmissionInProgress = 4,
        ExceptionsSubmitted = 5,
    }
    public class SubmitInfoControl : System.Windows.Forms.UserControl
    {
        public readonly JetBrains.DataFlow.IProperty<System.Collections.Generic.IEnumerable<JetBrains.Application.ExceptionReport.ExceptionData>> ExceptionDataProperty;
        public SubmitInfoControl([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.OpensUri opensUri) { }
    }
    public class SubmitterParams
    {
        public readonly int BuildNumber;
        public readonly string Description;
        public readonly System.Exception Exception;
        public readonly string Password;
        [JetBrains.Annotations.CanBeNullAttribute()]
        public readonly string PreviousExceptionText;
        public readonly System.Net.IWebProxy proxy;
        public readonly string UserName;
        public SubmitterParams(System.Exception exception, string description, string userName, string password, int buildNumber, System.Net.IWebProxy proxy, string previousException) { }
    }
    public class SubmitterProgressWindow : System.Windows.Forms.Form
    {
        public SubmitterProgressWindow(JetBrains.Application.ExceptionReport.IExceptionSubmitter submitter, JetBrains.UI.Application.ExceptionReport.SubmitterParams @params) { }
        public System.Exception Exception { get; }
        public JetBrains.Application.ExceptionReport.SubmissionResult Result { get; }
        protected override void Dispose(bool disposing) { }
        public new System.Windows.Forms.DialogResult ShowDialog(System.Windows.Forms.IWin32Window owner) { }
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Components.ProgramConfigurations.NONE | JetBrains.Application.Components.ProgramConfigurations.STANDALONE | JetBrains.Application.Components.ProgramConfigurations.VS_ADDIN | JetBrains.Application.Components.ProgramConfigurations.ALL)]
    public class SubmitToTrackerExceptionReportServiceComponent
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<JetBrains.Application.ExceptionReport.LoginInformation> LoginInformationProperty;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<bool> ShowBrowserFormAfterSubmission;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<bool> StoreExceptions;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<bool> SubmitAutomatically;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<bool> WatchExceptionStorage;
        public SubmitToTrackerExceptionReportServiceComponent(
                    JetBrains.DataFlow.Lifetime lifetime, 
                    JetBrains.UI.ExceptionReport.ExceptionReportingIconSet exceptionReportingIconSet, 
                    JetBrains.Application.IApplicationDescriptor product, 
                    JetBrains.UI.Application.Progress.WorkerThreadShop workerThreadShop, 
                    JetBrains.UI.Application.IMainWindow mainwin, 
                    JetBrains.Application.Env.Components.AnyProductSettingsLocation settingsLocation, 
                    JetBrains.UI.StatusBar.IStatusBar statusBar, 
                    System.Collections.Generic.IEnumerable<JetBrains.Application.ExceptionReport.IExceptionReportDataProvider> exceptionReportDataProviders, 
                    JetBrains.UI.Application.IIsApplicationActiveState isApplicationActiveState, 
                    JetBrains.UI.Application.Progress.UITaskExecutor uiTaskExecutor, 
                    JetBrains.UI.Application.OpensUri opensUri, 
                    JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, 
                    JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, 
                    JetBrains.UI.PopupWindowManager.PopupWindowManager popupWindowManager, 
                    JetBrains.Application.Communication.WebProxySettingsReader proxySettings, 
                    JetBrains.Application.FileSystemTracker.IFileSystemTracker fileSystemTracker, 
                    JetBrains.Application.ExceptionReport.IExceptionStorageBehavior exceptionStorageBehavior, 
                    JetBrains.UI.Clipboard clipboard, 
                    JetBrains.UI.Application.IUIApplication environment) { }
        public int ExceptionCount { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.ISignal<JetBrains.Application.ExceptionReport.ExceptionData> ExceptionSignal { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.ISignal<System.Collections.Generic.IEnumerable<JetBrains.Application.ExceptionReport.ExceptionData>> ExceptionsSubmittedSignal { get; }
        public bool IsUiActive { get; }
        public static bool IsPending(JetBrains.Application.ExceptionReport.ExceptionData exceptionData) { }
        public void RegisterException([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.ExceptionReport.ExceptionData exception) { }
        public void ShowExceptionBrowser() { }
        public void StopBlinking() { }
        public void SubmitExceptions(System.Windows.Forms.IWin32Window parentWindow, string description, JetBrains.DataFlow.Lifetime formLifetime, JetBrains.Application.ExceptionReport.IIssueTracker issueTracker, JetBrains.Threading.IThreading threading, JetBrains.Application.Communication.WebProxySettingsReader proxySettingsReader, JetBrains.Application.ExceptionReport.LoginInformation loginInformation, JetBrains.Application.ExceptionReport.ExceptionData[] exceptions, System.Action<System.Collections.Generic.ICollection<JetBrains.Application.ExceptionReport.ExceptionData>> continuation, System.Action<System.Windows.Forms.MouseEventArgs> statusBarClickHandler, JetBrains.UI.ExceptionReport.ExceptionReportingIconSet iconset, JetBrains.UI.StatusBar.IStatusBar statusbar, JetBrains.UI.Icons.IThemedIconManager iconman) { }
    }
    public class TechnicalDetailsForm : System.Windows.Forms.Form
    {
        public readonly JetBrains.DataFlow.Property<string> TechnicalInformationProperty;
        public TechnicalDetailsForm() { }
    }
    public class TrackerLoginForm : System.Windows.Forms.Form
    {
        public TrackerLoginForm([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.ExceptionReport.IIssueTracker issueTracker, JetBrains.UI.Application.ExceptionReport.TrackerLoginForm.IconSet trackericons) { }
        public JetBrains.Application.ExceptionReport.LoginInformation LoginInformation { get; set; }
        protected override void Dispose(bool disposing) { }
        protected override void OnClosed(System.EventArgs e) { }
        public class IconSet
        {
            public readonly JetBrains.UI.Icons.ThemedIconLoader Error;
            public readonly JetBrains.UI.Icons.ThemedIconLoader Refresh;
            public readonly JetBrains.UI.Icons.ThemedIconLoader Success;
            public IconSet(JetBrains.UI.Icons.ThemedIconLoader success, JetBrains.UI.Icons.ThemedIconLoader error, JetBrains.UI.Icons.ThemedIconLoader refresh) { }
        }
    }
}
namespace JetBrains.UI.Application.ExceptionReport.Charisma
{
    
    public class CharismaConnector
    {
        public CharismaConnector(JetBrains.Application.IApplicationDescriptor applicationDescriptor, [JetBrains.Annotations.NotNullAttribute()] System.Uri server, [JetBrains.Annotations.NotNullAttribute()] string projectName, [JetBrains.Annotations.NotNullAttribute()] string submitSubsystem) { }
        public System.Uri RegisterUri { get; }
        public void SubmitException(JetBrains.Application.ExceptionReport.ExceptionData exception, JetBrains.Application.ExceptionReport.LoginInformation loginInformation, string description, System.Net.IWebProxy proxy, JetBrains.Application.Progress.IProgressIndicator progressIndicator, bool isInternalMode) { }
        public JetBrains.Application.ExceptionReport.CredentialsVerificationResult VerifyCredentials(JetBrains.Application.ExceptionReport.LoginInformation loginInformation, System.Net.IWebProxy proxy) { }
    }
    public class CharismaExceptionReportModel
    {
        public CharismaExceptionReportModel() { }
        public string Description { get; set; }
        public string Login { get; set; }
        public string Password { get; set; }
        public System.Net.IWebProxy Proxy { get; set; }
        public string Summary { get; set; }
    }
    public class CharismaIssueTracker : JetBrains.Application.ExceptionReport.IIssueTracker
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.Application.IApplicationDescriptor Descriptor;
        public CharismaIssueTracker([JetBrains.Annotations.NotNullAttribute()] System.Uri server, [JetBrains.Annotations.NotNullAttribute()] string projectName, [JetBrains.Annotations.NotNullAttribute()] string submitSubsystem, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor descriptor, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplication environment, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations) { }
        public string AnonymousPassword { get; set; }
        public string AnonymousUserName { get; set; }
        public bool IsInternal { set; }
        public System.Nullable<JetBrains.Application.ExceptionReport.LoginInformation> Register() { }
        public void SubmitException(JetBrains.Application.ExceptionReport.ExceptionData exception, JetBrains.Application.ExceptionReport.LoginInformation loginInformation, string description, System.Net.IWebProxy proxy, System.Windows.Forms.IWin32Window parentWindow, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public void SubmitFeedback(JetBrains.Application.ExceptionReport.LoginInformation loginInformation, string feedback, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public JetBrains.Application.ExceptionReport.CredentialsVerificationResult VerifyCredentials(JetBrains.Application.ExceptionReport.LoginInformation loginInformation, System.Net.IWebProxy proxy) { }
    }
    [CookComputing.XmlRpc.XmlRpcUrlAttribute("http://easervice.jetbrains.net/xmlrpc")]
    public class ExceptionHandlingService : CookComputing.XmlRpc.XmlRpcClientProtocol
    {
        public CookComputing.XmlRpc.XmlRpcAsyncResult BeginGetRegisterUri(string product, System.AsyncCallback callback, object asyncState) { }
        public CookComputing.XmlRpc.XmlRpcAsyncResult BeginHandleException(string input, System.AsyncCallback callback, object asyncState) { }
        public CookComputing.XmlRpc.XmlRpcAsyncResult BeginVerifyCredentials(string userName, string password, System.AsyncCallback callback, object asyncState) { }
        public string EndGetRegisterUri(System.IAsyncResult ar) { }
        public string EndHandleException(System.IAsyncResult ar) { }
        public string EndVerifyCredentials(System.IAsyncResult ar) { }
        [CookComputing.XmlRpc.XmlRpcMethodAttribute("EAService.getRegisterUri")]
        public string GetRegisterUri(string product) { }
        [CookComputing.XmlRpc.XmlRpcMethodAttribute("EAService.handleException")]
        public string HandleException(string input) { }
        [CookComputing.XmlRpc.XmlRpcMethodAttribute("EAService.verifyCredentials")]
        public string VerifyCredentials(string userName, string password) { }
    }
}
namespace JetBrains.UI.Application.ExceptionReport.ExceptionAnalyzer
{
    
    public class ExceptionAnalyzerConnector
    {
        public ExceptionAnalyzerConnector(System.Uri exceptionAnalyzerUri, JetBrains.Application.IApplicationDescriptor applicationDescriptor) { }
        public string GetRegisterUri() { }
        public void SubmitExceptions(System.Collections.Generic.ICollection<JetBrains.Application.ExceptionReport.ExceptionData> exceptions, string description, JetBrains.Application.ExceptionReport.LoginInformation loginInformation, System.Net.IWebProxy proxy, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public JetBrains.Application.ExceptionReport.CredentialsVerificationResult VerifyCredentials(JetBrains.Application.ExceptionReport.LoginInformation loginInformation, System.Net.IWebProxy proxy) { }
    }
    public class ExceptionAnalyzerTracker : JetBrains.Application.ExceptionReport.IIssueTracker
    {
        public ExceptionAnalyzerTracker(System.Uri exceptionAnalyzerUri, JetBrains.Application.IApplicationDescriptor descriptor) { }
        public bool IsInternal { set; }
        public System.Nullable<JetBrains.Application.ExceptionReport.LoginInformation> Register() { }
        public void SubmitException(JetBrains.Application.ExceptionReport.ExceptionData exception, JetBrains.Application.ExceptionReport.LoginInformation loginInformation, string description, System.Net.IWebProxy proxy, System.Windows.Forms.IWin32Window parentWindow, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public void SubmitFeedback(JetBrains.Application.ExceptionReport.LoginInformation loginInformation, string feedback, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public JetBrains.Application.ExceptionReport.CredentialsVerificationResult VerifyCredentials(JetBrains.Application.ExceptionReport.LoginInformation loginInformation, System.Net.IWebProxy proxy) { }
    }
}
namespace JetBrains.UI.Application.License
{
    
    public class BetaExpiredControl : System.Windows.Forms.UserControl
    {
        public BetaExpiredControl([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor descriptor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.OpensUri opensuri, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.PopupMenu.JetPopupMenus jpms) { }
        public static void ShowModal([JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window parent, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplication environment, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor descriptor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.OpensUri opensuri, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.PopupMenu.JetPopupMenus jpms) { }
    }
    public class EvaluationExpirationControl : System.Windows.Forms.UserControl
    {
        public EvaluationExpirationControl(int daysLeft, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.ILicenseCheckerComponent licenseCheckerComponent, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor applicationDescriptor) { }
        protected override void Dispose(bool disposing) { }
        protected void OnBrowserNavigating(object sender, System.Windows.Forms.WebBrowserNavigatingEventArgs e) { }
    }
    public class EvaluationFeedbackControl : System.Windows.Forms.UserControl
    {
        public EvaluationFeedbackControl(string productDisplayName, int nDays) { }
        protected override void Dispose(bool disposing) { }
    }
    public interface ILicenseInformation
    {
        string CustomLicenseServerUrl { get; }
        JetBrains.Application.ProductEdition Edition { get; }
        int EvaluationStatus { get; set; }
        bool IsEvaluationAvailable { get; }
        JetBrains.Application.License.LicenseMode LicenseMode { get; }
        string LicenseServerInfo { get; }
        string PermanentTicket { get; }
        string PermanentTicketEmail { get; }
        bool UseCustomLicenseServerUrl { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.Application.License.LicenseData UserLicense { get; }
        string GetEvaluationLicenseInfo();
    }
    public class JetWebBrowser : System.Windows.Forms.UserControl
    {
        public JetWebBrowser() { }
        public string BrowserText { get; set; }
        public System.Drawing.Size DesiredSize { get; set; }
        public event System.Windows.Forms.WebBrowserNavigatingEventHandler BrowserNavigating;
        public event System.EventHandler DesiredSizeChanged;
        protected override void Dispose(bool disposing) { }
        protected static string GetMeasuringDivStyle(System.Drawing.Size size) { }
        protected override void OnSizeChanged(System.EventArgs e) { }
    }
    public class LicenseAgreementForm : System.Windows.Forms.Form
    {
        public LicenseAgreementForm() { }
        public LicenseAgreementForm(JetBrains.Application.IApplicationDescriptor descriptor, string caption, string agreementText, JetBrains.UI.Application.OpensUri opensUri) { }
        protected override void Dispose(bool disposing) { }
    }
    public class LicenseConflictForm : System.Windows.Forms.Form
    {
        public LicenseConflictForm(JetBrains.UI.Application.UserLicenseConflictCheckerComponent conflictCompoment, JetBrains.UI.Application.ILicenseCheckerComponent licenseCheckerComponent, System.Net.IPAddress anotherHostAddress, JetBrains.Application.IApplicationDescriptor applicationDescriptor) { }
    }
    public class LicenseInformation : JetBrains.UI.Application.License.ILicenseInformation
    {
        public const int EVALUATION_ERROR = -2;
        public const int EVALUATION_EXPIRED = -4;
        public const int EVALUATION_NOT_STARTED = -3;
        public const int EVALUATION_NOT_SUPPORTED = -1;
        public LicenseInformation(JetBrains.UI.Application.LicenseCheckerComponent licenseCheckerComponent) { }
        public string CustomLicenseServerUrl { get; set; }
        public JetBrains.Application.ProductEdition Edition { get; set; }
        public int EvaluationStatus { get; set; }
        public bool IsEvaluationAvailable { get; }
        public JetBrains.Application.License.LicenseMode LicenseMode { get; set; }
        public string LicenseServerInfo { get; }
        public string PermanentTicket { get; set; }
        public string PermanentTicketEmail { get; set; }
        public bool UseCustomLicenseServerUrl { get; set; }
        public JetBrains.Application.License.LicenseData UserLicense { get; set; }
        public override bool Equals(object obj) { }
        public string GetEvaluationLicenseInfo() { }
        public override int GetHashCode() { }
    }
    public class LicenseInformationControl : System.Windows.Forms.UserControl
    {
        public LicenseInformationControl() { }
        public LicenseInformationControl(bool isLicenseValid, string reason, JetBrains.UI.Application.License.ILicenseInformation info, bool evalationEnabled, JetBrains.Application.IApplicationDescriptor descriptor, JetBrains.UI.Application.OpensUri opensUri) { }
        public string CustomServerUrl { get; }
        public JetBrains.Application.ProductEdition Edition { get; }
        public JetBrains.Application.License.LicenseMode LicenseMode { get; set; }
        public string LicenseString { get; }
        public JetBrains.UI.Application.OpensUri myOpensUri { get; set; }
        public bool UseCustomServerUrl { get; }
        public string UserName { get; }
    }
    public class static LicenseInformationEx
    {
        public static string GetValidLicensePresentation([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Application.License.ILicenseInformation licenseInfo) { }
    }
    public class PasteTextBox : System.Windows.Forms.TextBox
    {
        public PasteTextBox() { }
        public event System.EventHandler TextPasted;
        protected override void Dispose(bool disposing) { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
    }
    public class ProductBaseForm : System.Windows.Forms.Form
    {
        public ProductBaseForm(JetBrains.Application.IApplicationDescriptor descriptor, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplication environment) { }
        public ProductBaseForm(System.Windows.Forms.UserControl innerControl, JetBrains.Application.IApplicationDescriptor descriptor, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplication environment) { }
        public System.Drawing.Image Image { get; set; }
        public System.Windows.Forms.UserControl InnerControl { get; set; }
        public bool LabelBorder { get; set; }
        public System.Drawing.Color LabelColor { get; set; }
        public string LabelText { get; set; }
        protected override void Dispose(bool disposing) { }
        protected override void OnSizeChanged(System.EventArgs e) { }
        public void Show(JetBrains.DataFlow.Lifetime lifetime, System.Windows.Forms.IWin32Window mainWindow, System.Action onOkAction = null) { }
    }
}
namespace JetBrains.UI.Application.LicenseServerSupport
{
    
    public abstract class AbstractObtainTicketRequest<TResponse> : JetBrains.UI.Application.LicenseServerSupport.AbstractRequest<TResponse>
        where TResponse : JetBrains.UI.Application.LicenseServerSupport.AbstractResponse
    {
        public readonly int BuildDate;
        public readonly string Edition;
        public readonly string ProductFamilyId;
        public readonly int Version;
        public readonly int VersionNumber;
        protected AbstractObtainTicketRequest(string productFamilyId, int version, System.DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition) { }
        protected AbstractObtainTicketRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, int version, System.DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition) { }
        public static int GetBuildDateNumber(System.DateTime buildDate) { }
    }
    public abstract class AbstractRequest<Response>
        where Response : JetBrains.UI.Application.LicenseServerSupport.AbstractResponse
    {
        public readonly string HostName;
        public readonly string MachineId;
        public readonly long Salt;
        public readonly string UserName;
        protected AbstractRequest() { }
        protected AbstractRequest(long salt, string machineId, string hostName, string userName) { }
        public abstract string ActionName { get; }
    }
    public class AbstractResponse
    {
        public readonly string Message;
        public readonly JetBrains.UI.Application.LicenseServerSupport.ResponseCode ResponseCode;
        public readonly long Salt;
        public AbstractResponse(JetBrains.UI.Application.LicenseServerSupport.ResponseCode responseCode, string message, long salt) { }
        public static string ConvertFieldName(string fieldName) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static Response CreateResponse<Response>(string xml)
            where Response : JetBrains.UI.Application.LicenseServerSupport.AbstractResponse { }
        public static Response Error<Response>(string message, long salt)
            where Response : JetBrains.UI.Application.LicenseServerSupport.AbstractResponse { }
        public static Response NetworkError<Response>(string message, long salt)
            where Response : JetBrains.UI.Application.LicenseServerSupport.AbstractResponse { }
        public static System.Collections.Generic.Dictionary<string, string> ParseTicketProperties(string ticketProperties) { }
    }
    public class static ClientUtil
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static Response ExecuteRequest<Response>(string baseUrl, JetBrains.UI.Application.LicenseServerSupport.AbstractRequest<Response> request)
            where Response : JetBrains.UI.Application.LicenseServerSupport.AbstractResponse { }
    }
    public class GetPermanentActivationRequest : JetBrains.UI.Application.LicenseServerSupport.AbstractRequest<JetBrains.UI.Application.LicenseServerSupport.GetPermanentActivationResponse>
    {
        public readonly string Email;
        public readonly string ProductFamilyId;
        public GetPermanentActivationRequest(string productFamilyId, string email) { }
        public GetPermanentActivationRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, string email) { }
        public override string ActionName { get; }
    }
    public class GetPermanentActivationResponse : JetBrains.UI.Application.LicenseServerSupport.AbstractResponse
    {
        public GetPermanentActivationResponse(JetBrains.UI.Application.LicenseServerSupport.ResponseCode responseCode, string message, long salt) { }
        public override string ToString() { }
    }
    public interface ILicenseServerClient
    {
        string LicenseServerUrl { get; }
        string TicketId { get; }
        JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult CheckPermanentTicket(string productFamily, int version, string edition, System.DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string ticketId);
        JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult DetectLicenseServer();
        JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult DetectLicenseServer(string serverUrl);
        JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult ObtainFloatingTicket(string productFamily, int version, string edition, System.DateTime buildDate, bool sendBuildDateAsVersionToOldServers);
        JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult ObtainPermanentTicket(string productFamily, int version, string edition, System.DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string email, string activationCode);
        JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult ReleaseFloatingTicket();
        JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult ReleasePermanentTicket();
        JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult RequestPermanentActivationCode(string productFamily, string email);
    }
    public class LicenseServerClient : JetBrains.UI.Application.LicenseServerSupport.ILicenseServerClient
    {
        public LicenseServerClient([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime uiThreadLifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.License.LicenseServerSupport.SynchronizedLifetimeDefinitionForLicenseServerClient lifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.DataStructures.RegistrySettingsTable settingsTable, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.ILicenseCheckerComponent licenseCheckerComponent, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor descriptor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading invocator) { }
        protected bool DoReleaseTicket { get; set; }
        public string LicenseServerUrl { get; }
        public string TicketId { get; }
        public JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult CheckPermanentTicket(string productFamily, int version, string edition, System.DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string ticketId) { }
        public JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult DetectLicenseServer() { }
        public JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult DetectLicenseServer(string serverUrl) { }
        public static System.DateTime GetLicenseServerAccessTime(JetBrains.Util.DataStructures.ISettingsTable settings) { }
        public JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult ObtainFloatingTicket(string productFamilyId, int version, string edition, System.DateTime buildDate, bool sendBuildDateAsVersionToOldServers) { }
        public JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult ObtainPermanentTicket(string productFamily, int version, string edition, System.DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string email, string activationCode) { }
        public JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult ReleaseFloatingTicket() { }
        public JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult ReleasePermanentTicket() { }
        public JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult RequestPermanentActivationCode(string productFamily, string email) { }
        public void SetLicenseServerAccessTime() { }
    }
    public struct LicenseServerResult
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public readonly System.Exception Exception;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly string Message;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Application.LicenseServerSupport.ResponseCode ResponseCode;
        public static JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult Success;
        public bool Successful { get; }
        public static JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult Error(string message) { }
        public static JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult Error(JetBrains.UI.Application.LicenseServerSupport.AbstractResponse response) { }
        public static JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult Error(string message, System.Exception e) { }
        public static JetBrains.UI.Application.LicenseServerSupport.LicenseServerResult NetworkError(string message) { }
    }
    public class ObtainPermanentTicketRequest : JetBrains.UI.Application.LicenseServerSupport.AbstractObtainTicketRequest<JetBrains.UI.Application.LicenseServerSupport.ObtainPermanentTicketResponse>
    {
        public string ActivationCode;
        public string Email;
        public ObtainPermanentTicketRequest(string productFamilyId, int version, System.DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition, string email, string activationCode) { }
        public ObtainPermanentTicketRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, int version, System.DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition, string email, string activationCode) { }
        public override string ActionName { get; }
    }
    public class ObtainPermanentTicketResponse : JetBrains.UI.Application.LicenseServerSupport.AbstractResponse
    {
        public readonly string TicketId;
        public readonly string TicketProperties;
        public ObtainPermanentTicketResponse(JetBrains.UI.Application.LicenseServerSupport.ResponseCode responseCode, string message, long salt, string ticketId, string ticketProperties) { }
        public override string ToString() { }
    }
    public class ObtainTicketRequest : JetBrains.UI.Application.LicenseServerSupport.AbstractObtainTicketRequest<JetBrains.UI.Application.LicenseServerSupport.ObtainTicketResponse>
    {
        public ObtainTicketRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, int version, System.DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition) { }
        public ObtainTicketRequest(string productFamilyId, int version, System.DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition) { }
        public override string ActionName { get; }
    }
    public class ObtainTicketResponse : JetBrains.UI.Application.LicenseServerSupport.AbstractResponse
    {
        public long ProlongationPeriod;
        public readonly string TicketId;
        public readonly string TicketProperties;
        public ObtainTicketResponse(string ticketId, JetBrains.UI.Application.LicenseServerSupport.ResponseCode responseCode, string ticketProperties, string message, long salt) { }
        public override string ToString() { }
    }
    public class PingRequest : JetBrains.UI.Application.LicenseServerSupport.AbstractRequest<JetBrains.UI.Application.LicenseServerSupport.PingResponse>
    {
        public PingRequest(long salt, string machineId, string hostName, string userName) { }
        public override string ActionName { get; }
    }
    public class PingResponse : JetBrains.UI.Application.LicenseServerSupport.AbstractResponse
    {
        public PingResponse(JetBrains.UI.Application.LicenseServerSupport.ResponseCode responseCode, string message, long salt) { }
    }
    public class ProlongTicketRequest : JetBrains.UI.Application.LicenseServerSupport.AbstractRequest<JetBrains.UI.Application.LicenseServerSupport.ProlongTicketResponse>
    {
        public readonly string ProductFamilyId;
        public readonly string TicketId;
        public ProlongTicketRequest(string ticketId, string productFamilyId) { }
        public ProlongTicketRequest(long salt, string machineId, string hostName, string userName, string ticketId, string productFamilyId) { }
        public override string ActionName { get; }
    }
    public class ProlongTicketResponse : JetBrains.UI.Application.LicenseServerSupport.AbstractResponse
    {
        public readonly string TicketId;
        public ProlongTicketResponse(JetBrains.UI.Application.LicenseServerSupport.ResponseCode responseCode, string message, long salt, string ticketId) { }
        public override string ToString() { }
    }
    public class static PublicKeys
    {
        public static readonly string ENCRYPTION_EXPONENT;
        public static readonly string ENCRYPTION_MODULUS;
        public static readonly string SIG_END;
        public static readonly string SIG_START;
    }
    public class ReleaseTicketRequest : JetBrains.UI.Application.LicenseServerSupport.AbstractRequest<JetBrains.UI.Application.LicenseServerSupport.ReleaseTicketResponse>
    {
        public readonly string ProductFamilyId;
        public readonly string TicketId;
        public ReleaseTicketRequest(string productFamilyId, string ticketId) { }
        public ReleaseTicketRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, string ticketId) { }
        public override string ActionName { get; }
    }
    public class ReleaseTicketResponse : JetBrains.UI.Application.LicenseServerSupport.AbstractResponse
    {
        public ReleaseTicketResponse(JetBrains.UI.Application.LicenseServerSupport.ResponseCode responseCode, string message, long salt) { }
    }
    public enum ResponseCode
    {
        OK = 0,
        ERROR = 1,
        NETWORK_ERROR = 2,
    }
}
namespace JetBrains.UI.Application.PluginSupport
{
    
    [JetBrains.UI.Options.OptionsPageAttribute("Plugins", "Plugins", typeof(JetBrains.UI.Resources.OptionsThemedIcons.Plugins), HelpKeyword="Reference__Options__Environment__Plugins", ParentId="Environment")]
    public class PluginsPage : JetBrains.UI.Options.Helpers.AOptionsPage
    {
        public const string Pid = "Plugins";
        public PluginsPage([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.IUIApplication environment, JetBrains.Application.PluginSupport.PluginsDirectory pluginsDirectory) { }
    }
    public class PluginsPageUidata
    {
        public PluginsPageUidata(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.PluginSupport.PluginsDirectory pluginsDirectory) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Application.PluginSupport.PluginsDirectory.Record> InfoRecords { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Application.PluginSupport.PluginUidata> Plugins { get; }
    }
    public class PluginsPageView : System.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector
    {
        public PluginsPageView() { }
        public void InitializeComponent() { }
    }
    public class PluginUidata
    {
        public PluginUidata(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.PluginSupport.Plugin plugin) { }
        public bool HasErrors { get; }
        public JetBrains.DataFlow.IProperty<bool> IsCollapsed { get; }
        public string[] Messages { get; }
        public JetBrains.Application.PluginSupport.Plugin Plugin { get; }
    }
    public class RecordKindToColor : System.Windows.Data.IValueConverter
    {
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
}
namespace JetBrains.UI.Application.Progress
{
    
    public class CustomProgressDialog : System.IDisposable
    {
        public readonly JetBrains.DataFlow.IProperty<string> DescriptionLine1;
        public readonly JetBrains.DataFlow.IProperty<string> DescriptionLine2;
        public readonly JetBrains.DataFlow.IProperty<bool> IsCancelable;
        public readonly JetBrains.DataFlow.IProperty<bool> IsRunning;
        public readonly JetBrains.DataFlow.IProperty<bool> IsUserCanceled;
        public readonly JetBrains.DataFlow.IProperty<string> Title;
        public readonly JetBrains.DataFlow.IProperty<double> Value;
        public readonly JetBrains.DataFlow.IProperty<System.IntPtr> WindowHandle;
        public CustomProgressDialog([JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window parentwin, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IUIApplicationSimple uiapp, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager) { }
        public void Dispose() { }
    }
    public class static CustomProgressDialogEx
    {
        public static void BindToProgressIndicator([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Application.Progress.CustomProgressDialog dlg, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Progress.IProgressIndicatorModel indicator) { }
    }
    public class JetProgressWnd : System.Windows.Forms.Form, JetBrains.CommonControls.IConstrainableControl
    {
        public readonly JetBrains.DataFlow.IProperty<string> DescriptionLine1;
        public readonly JetBrains.DataFlow.IProperty<string> DescriptionLine2;
        public readonly JetBrains.DataFlow.IProperty<bool> IsCancelable;
        public readonly JetBrains.DataFlow.IProperty<bool> IsUserCanceled;
        public readonly JetBrains.DataFlow.IProperty<string> Title;
        public readonly JetBrains.DataFlow.IProperty<double> Value;
        public JetProgressWnd([JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window parent, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IUIApplicationSimple uiapp, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager) { }
        protected override System.Windows.Forms.CreateParams CreateParams { get; }
        protected override void Dispose(bool disposing) { }
        protected override void OnClosing(System.ComponentModel.CancelEventArgs e) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e) { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
    }
    public class SystemProgressDialog : System.IDisposable
    {
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.Application.Progress.SystemProgressDialog.ShellProgressAnimations> Animation;
        public static readonly System.Guid ClsidProgressDialog;
        public readonly JetBrains.DataFlow.IProperty<string> DescriptionLine1;
        public readonly JetBrains.DataFlow.IProperty<string> DescriptionLine2;
        public readonly JetBrains.DataFlow.IProperty<string> DescriptionLine3;
        public readonly JetBrains.DataFlow.IProperty<bool> IsCancelable;
        public readonly JetBrains.DataFlow.IProperty<bool> IsEstimatingTime;
        public readonly JetBrains.DataFlow.IProperty<bool> IsMarquee;
        public readonly JetBrains.DataFlow.IProperty<bool> IsRunning;
        public readonly JetBrains.DataFlow.IProperty<bool> IsShownWithoutDelay;
        public readonly JetBrains.DataFlow.IProperty<bool> IsUserCanceled;
        public readonly JetBrains.DataFlow.IProperty<string> Title;
        public readonly JetBrains.DataFlow.IProperty<double> Value;
        public readonly JetBrains.DataFlow.IProperty<System.IntPtr> WindowHandle;
        public SystemProgressDialog([JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window parentwin) { }
        public void Dispose() { }
        public enum ShellProgressAnimations
        {
            None = 0,
            FileMove = 160,
            FileCopy = 161,
            FlyingPapers = 165,
            SearchGlobe = 166,
            PermanentDelete = 164,
            FromRecycleBinDelete = 163,
            ToRecycleBinDelete = 162,
            SearchComputer = 152,
            SearchDocument = 151,
            SearchFlashlight = 150,
            Whatever167 = 167,
            Whatever168 = 168,
            Whatever169 = 169,
        }
    }
    public class static SystemProgressDialogEx
    {
        public static void BindToProgressIndicator([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Application.Progress.SystemProgressDialog dlg, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Progress.IProgressIndicatorModel indicator, JetBrains.Threading.IThreading invocator) { }
    }
    public class TaskProgressControl : JetBrains.UI.CommonControls.SafeUserControl
    {
        public readonly JetBrains.DataFlow.IProperty<System.Drawing.Color> FillColor;
        public readonly JetBrains.DataFlow.IProperty<double> Fraction;
        public readonly JetBrains.DataFlow.IProperty<string> ItemText;
        public readonly JetBrains.DataFlow.IProperty<string> TaskName;
        public TaskProgressControl(JetBrains.UI.Application.IUIApplication environment) { }
        public override System.Drawing.Size GetPreferredSize(System.Drawing.Size proposedSize) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs args) { }
    }
    public enum TaskThreadAffinity
    {
        Primary = 0,
        Free = 1,
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class TrackFocus
    {
        public readonly JetBrains.DataFlow.ISimpleSignal FocusChanged;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.Application.Progress.TrackFocus.FocusedItem> Focused;
        public readonly JetBrains.DataFlow.IProperty<bool> IsEnabled;
        public readonly JetBrains.DataFlow.IProperty<bool> IsLoggingAvalon;
        public readonly JetBrains.DataFlow.IProperty<bool> IsLoggingFullChain;
        public readonly JetBrains.DataFlow.IProperty<bool> IsLoggingStackTraces;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ListEvents<JetBrains.UI.Application.Progress.TrackFocus.LogEntry> Log;
        public static readonly int LogLengthLimit;
        public static readonly bool OptionTrace;
        public TrackFocus([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetimeGlobal, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager hookman) { }
        public static System.Void* GetHwndOfUia([JetBrains.Annotations.NotNullAttribute()] System.Windows.Automation.AutomationElement uia) { }
        public static System.Void* GetHwndOfUiaRecursive([JetBrains.Annotations.NotNullAttribute()] System.Windows.Automation.AutomationElement uia) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IList<System.Diagnostics.StackFrame> RemoveServiceFramesFromCallStack([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<System.Diagnostics.StackFrame> frames) { }
        public static void ReportFocusedWindowToString([JetBrains.Annotations.CanBeNullAttribute()] System.Void* hwndReport, [JetBrains.Annotations.NotNullAttribute()] System.Text.StringBuilder sb, bool isDumpingStackTraces) { }
        public struct FocusedItem : System.IEquatable<JetBrains.UI.Application.Progress.TrackFocus.FocusedItem>
        {
            public System.Windows.IInputElement Element;
            public System.Void* Hwnd;
            public override bool Equals(object obj) { }
            public bool Equals(JetBrains.UI.Application.Progress.TrackFocus.FocusedItem other) { }
            public override int GetHashCode() { }
        }
        public class LogEntry
        {
            [JetBrains.Annotations.CanBeNullAttribute()]
            public System.Diagnostics.StackTrace CallStack;
            public System.Drawing.Rectangle ScreenBounds;
            public System.Windows.IInputElement TargetElement;
            public System.Void* TargetHwnd;
            public System.DateTime When;
            public readonly System.Collections.Generic.List<JetBrains.UI.Application.Progress.TrackFocus.LogEntry.WindowRecord> Windows;
            public LogEntry() { }
            public override string ToString() { }
            public class WindowRecord
            {
                [JetBrains.Annotations.CanBeNullAttribute()]
                public System.Nullable<System.Drawing.Rectangle> BoundsOnScreen;
                [JetBrains.Annotations.CanBeNullAttribute()]
                public System.Void* Hwnd;
                public ulong Id;
                public bool IsTopLevel;
                [JetBrains.Annotations.CanBeNullAttribute()]
                public string ManagedClassName;
                [JetBrains.Annotations.CanBeNullAttribute()]
                public string Name;
                [JetBrains.Annotations.NotNullAttribute()]
                public string Title;
                [JetBrains.Annotations.CanBeNullAttribute()]
                public string WndClassName;
                public string GetHwndOrClass() { }
                public static string GetIdAsTechnicalString(JetBrains.UI.Application.Progress.TrackFocus.LogEntry.WindowRecord wndrec) { }
                public static string GetIdAsUserFriendlyString(JetBrains.UI.Application.Progress.TrackFocus.LogEntry.WindowRecord wndrec) { }
            }
        }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class UITaskExecutor
    {
        public UITaskExecutor([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.Progress.UITaskExecutorSwitchingImplementation switchingImplementation) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.Application.Progress.ITaskExecutor FreeThreaded { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.Application.Progress.ITaskExecutor SingleThreaded { get; }
    }
    public class static UITaskExecutorRun
    {
        public static string DefaultTaskName { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.IDisposable PushProgressCanceledInterruptableCookie(JetBrains.Application.Progress.IProgressIndicator pi, JetBrains.UI.Application.Progress.TaskThreadAffinity threadAffinity) { }
        public static bool Run(JetBrains.UI.Application.Progress.TaskThreadAffinity taskThreadAffinity, [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.Application.Progress.IProgressIndicator> task, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, JetBrains.Application.Progress.IProgressIndicatorModel, System.IntPtr> FAttachUi, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Progress.ProgressIndicator indicator, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window parentWindow, JetBrains.Threading.IThreading threading, JetBrains.UI.Application.Progress.WorkerThreadShop workerThreadShop, bool enforceModalityState = True) { }
    }
    public class UITaskExecutorRuns : JetBrains.Application.Progress.ITaskExecutor
    {
        public UITaskExecutorRuns(JetBrains.UI.Application.Progress.TaskThreadAffinity threading, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading invocator, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IUIApplicationSimple uiApplicationSimple, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.Progress.WorkerThreadShop workerThreadShop, System.Windows.Forms.IWin32Window parentwin = null) { }
        public bool ExecuteTask(string name, JetBrains.Application.Progress.TaskCancelable cancelable, System.Action<JetBrains.Application.Progress.IProgressIndicator> task) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class UITaskExecutorSwitchingImplementation
    {
        public UITaskExecutorSwitchingImplementation([JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading invocator, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IUIApplicationSimple uiApplicationSimple, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.Progress.WorkerThreadShop workerThreadShop, JetBrains.UI.Application.IMainWindow mainwin = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public virtual JetBrains.Application.Progress.ITaskExecutor CreateExecutor(JetBrains.UI.Application.Progress.TaskThreadAffinity threading, System.Windows.Forms.IWin32Window mainWindow = null) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class WorkerThreadShop : System.IDisposable
    {
        public WorkerThreadShop() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.Threading.JetDispatcher Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] string name) { }
        public void Dispose() { }
    }
}
namespace JetBrains.UI.Automation
{
    
    [JetBrains.Application.ShellComponentAttribute()]
    public class ApplicationAutomation
    {
        public ApplicationAutomation(JetBrains.UI.Application.IMainWindow mainWindow) { }
        public System.Windows.Automation.AutomationElement ApplicationRootElement { get; }
    }
    public class static AutomationElementEx
    {
        public static string AutomationId([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Automation.AutomationElement uia) { }
        public static string ClassName([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Automation.AutomationElement uia) { }
        public static System.Windows.Automation.ControlType ControlType([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Automation.AutomationElement uia) { }
        public static System.IntPtr Hwnd([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Automation.AutomationElement uia) { }
        public static void Invoke([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Automation.AutomationElement uia) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Automation.InvokePattern InvokePattern([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Automation.AutomationElement uia) { }
        public static string Name([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Automation.AutomationElement uia) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static TPattern Pattern<TPattern>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Automation.AutomationElement uia)
            where TPattern : System.Windows.Automation.BasePattern { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static TValue Property<TValue>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Automation.AutomationElement uia, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Automation.AutomationProperty prop) { }
        public static string Render([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Automation.Condition condition) { }
        public static JetBrains.UI.Automation.AutomationElementEx.AutomationElementSearch Search(this System.Windows.Automation.AutomationElement element, System.Windows.Automation.TreeScope scope) { }
        public static JetBrains.UI.Automation.AutomationElementEx.AutomationElementSearch SearchHwnd(this System.Windows.Automation.AutomationElement element, System.Windows.Automation.TreeScope scope) { }
        public static void ToggleInto(this System.Windows.Automation.AutomationElement uia, System.Windows.Automation.ToggleState state) { }
        public static string ValueGet(this System.Windows.Automation.AutomationElement uia) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Automation.ValuePattern ValuePattern([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Automation.AutomationElement uia) { }
        public static void ValueSet(this System.Windows.Automation.AutomationElement uia, string value) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Automation.AutomationElementEx.AutomationElementSearch WhereAutomationIdIs([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Automation.AutomationElementEx.AutomationElementSearch search, [JetBrains.Annotations.NotNullAttribute()] string automationid) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Automation.AutomationElementEx.AutomationElementSearch WhereControlTypeIs([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Automation.AutomationElementEx.AutomationElementSearch search, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Automation.ControlType controltype) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Automation.AutomationElementEx.AutomationElementSearch WhereEnabled([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Automation.AutomationElementEx.AutomationElementSearch search) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Automation.AutomationElementEx.AutomationElementSearch WhereNameIs([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Automation.AutomationElementEx.AutomationElementSearch search, [JetBrains.Annotations.NotNullAttribute()] string name) { }
        public class AutomationElementSearch
        {
            public AutomationElementSearch([JetBrains.Annotations.NotNullAttribute()] System.Windows.Automation.AutomationElement element, System.Windows.Automation.TreeScope scope, bool isHwndMode) { }
            [JetBrains.Annotations.NotNullAttribute()]
            public System.Collections.Generic.ICollection<System.Windows.Automation.AutomationElement> All() { }
            [JetBrains.Annotations.NotNullAttribute()]
            public System.Windows.Automation.AutomationElement First() { }
            [JetBrains.Annotations.CanBeNullAttribute()]
            public System.Windows.Automation.AutomationElement FirstOrDefault() { }
            [JetBrains.Annotations.NotNullAttribute()]
            public System.Windows.Automation.AutomationElement Single(string errormessage = "") { }
            public JetBrains.UI.Automation.AutomationElementEx.AutomationElementSearch Union(System.Windows.Automation.AutomationProperty prop, object value) { }
            public JetBrains.UI.Automation.AutomationElementEx.AutomationElementSearch Where(System.Windows.Automation.AutomationProperty prop, object value) { }
        }
    }
    public class static AutomationProperties
    {
        public static readonly System.Windows.Automation.AutomationProperty AutomationId;
        public static readonly System.Windows.Automation.AutomationProperty ClassName;
        public static readonly System.Windows.Automation.AutomationProperty ControlType;
        public static readonly System.Windows.Automation.AutomationProperty IsEnabled;
        public static readonly System.Windows.Automation.AutomationProperty Name;
        public static readonly System.Windows.Automation.AutomationProperty NativeWindowHandle;
    }
}
namespace JetBrains.UI.Avalon
{
    
    public class static AvalonEx
    {
        public static void Add([JetBrains.Annotations.NotNullAttribute()] this System.Windows.ResourceDictionary thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, object key, object value) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static TPanel AddChild<TPanel>([JetBrains.Annotations.NotNullAttribute()] this TPanel panel, System.Windows.UIElement child)
            where TPanel : System.Windows.Controls.Panel { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Controls.Grid AddColumnChild([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.Grid grid, [JetBrains.Annotations.CanBeNullAttribute()] string size, [JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement child) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Documents.Paragraph AddPara([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Documents.FlowDocument thіs) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Documents.Paragraph AddPara([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Documents.Section thіs) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Documents.Paragraph AddPara([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Documents.List thіs) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Controls.Grid AddRowChild([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.Grid grid, [JetBrains.Annotations.CanBeNullAttribute()] string size, [JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement child) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Style AddSetter([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Style thіs, [JetBrains.Annotations.NotNullAttribute()] System.Windows.DependencyProperty property, [JetBrains.Annotations.CanBeNullAttribute()] object value) { }
        public static System.Windows.Controls.TextBlock Append([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.TextBlock block, [JetBrains.Annotations.NotNullAttribute()] string text) { }
        public static System.Windows.Documents.Span Append([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Documents.Span thіs, [JetBrains.Annotations.NotNullAttribute()] string text) { }
        public static System.Windows.Documents.Span Append([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Documents.Span thіs, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Documents.Inline inline) { }
        public static System.Windows.Controls.TextBlock Append([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.TextBlock block, [JetBrains.Annotations.NotNullAttribute()] string text, System.Windows.FontStyle style) { }
        public static System.Windows.Controls.TextBlock Append([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.TextBlock block, [JetBrains.Annotations.NotNullAttribute()] string text, System.Windows.FontWeight weight) { }
        public static System.Windows.Controls.TextBlock Append([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.TextBlock block, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Documents.Run run) { }
        public static System.Windows.Controls.TextBlock Append([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.TextBlock block, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Documents.Inline run) { }
        public static System.Windows.Controls.TextBlock Append([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.TextBlock block, [JetBrains.Annotations.NotNullAttribute()] string text, System.Windows.FontStyle style = null, System.Windows.FontWeight weight = null, System.Windows.Media.Brush forecolor = null) { }
        public static System.Windows.Documents.Span Append([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Documents.Span thіs, [JetBrains.Annotations.NotNullAttribute()] string text, System.Windows.FontStyle style = null, System.Windows.FontWeight weight = null, System.Windows.Media.Brush forecolor = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Documents.Paragraph Append([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Documents.Paragraph para, [JetBrains.Annotations.NotNullAttribute()] string text) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Documents.Paragraph Append([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Documents.Paragraph para, [JetBrains.Annotations.NotNullAttribute()] string text, System.Windows.FontStyle style = null, System.Windows.FontWeight weight = null, System.Windows.Media.Brush forecolor = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Documents.Paragraph Append([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Documents.Paragraph para, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Documents.Inline inline) { }
        public static System.Windows.Documents.Span AppendLine([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Documents.Span thіs) { }
        public static uint BGR(this System.Windows.Media.Color color) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static TElement Bind<TElement>([JetBrains.Annotations.NotNullAttribute()] this TElement element, [JetBrains.Annotations.NotNullAttribute()] System.Windows.DependencyProperty property, [JetBrains.Annotations.NotNullAttribute()] string path)
            where TElement : System.Windows.FrameworkElement { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static TDependencyObject Bind<TDependencyObject>([JetBrains.Annotations.NotNullAttribute()] this TDependencyObject element, [JetBrains.Annotations.NotNullAttribute()] System.Windows.DependencyProperty property, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Data.BindingBase binding)
            where TDependencyObject : System.Windows.DependencyObject { }
        public static TElement BindOnChange<TElement>(this TElement element, System.Windows.DependencyProperty property, string path)
            where TElement : System.Windows.FrameworkElement { }
        public static System.Windows.Controls.Grid Cols([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.Grid grid, [JetBrains.Annotations.NotNullAttribute()] params string[] sizes) { }
        public static System.Windows.Visibility ConvertBoolToVisibility(bool visible) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Controls.ContentControl CreateView([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Wpf.IAutomation thіs) { }
        public static TElement Dock<TElement>(this TElement element, System.Windows.Controls.Dock dock)
            where TElement : System.Windows.UIElement { }
        public static void FlowIntoVisibility([JetBrains.Annotations.NotNullAttribute()] this JetBrains.DataFlow.IProperty<bool> isVisible, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement target) { }
        public static TFreezable Freezed<TFreezable>([JetBrains.Annotations.NotNullAttribute()] this TFreezable thіs)
            where TFreezable : System.Windows.Freezable { }
        public static System.Windows.Application GetCurrentApplicationOrCreate() { }
        public static System.Windows.Size GetSize([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Media.ImageSource thіs) { }
        public static TElement InGrid<TElement>(this TElement element, int col, int row)
            where TElement : System.Windows.UIElement { }
        public static TElement InGrid<TElement>(this TElement element, int col, int row, int colspan, int rowspan)
            where TElement : System.Windows.UIElement { }
        public static bool IsVisibleEntirely(this System.Windows.UIElement uiElement) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Media.DrawingBrush MakeGeometryBrush([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Media.Geometry geometry, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Media.SolidColorBrush brush, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Media.Pen pen) { }
        public static System.Windows.Media.Color MixWith(this System.Windows.Media.Color first, System.Windows.Media.Color second, float firstpercentage) { }
        public static TObject Name<TObject>(this TObject @object, System.Windows.FrameworkElement host, string name)
            where TObject : System.Windows.DependencyObject { }
        public static TElement OnEvent<TElement>(this TElement element, System.Windows.RoutedEvent @event, System.Windows.RoutedEventHandler handler)
            where TElement : System.Windows.UIElement { }
        public static TElement OnEvent<TElement>(this TElement element, System.Windows.RoutedEvent @event, System.Action handler)
            where TElement : System.Windows.UIElement { }
        public static TElement OnEventC<TElement>(this TElement element, System.Windows.RoutedEvent @event, System.Windows.RoutedEventHandler handler)
            where TElement : System.Windows.ContentElement { }
        public static System.Nullable<System.Windows.Media.Color> ParseWPFColor(string colorText) { }
        public static void PushHandler<TEventHandler>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.UIElement thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime disposables, [JetBrains.Annotations.NotNullAttribute()] System.Windows.RoutedEvent evt, [JetBrains.Annotations.NotNullAttribute()] TEventHandler handler)
            where TEventHandler :  class { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Media.Imaging.RenderTargetBitmap Rasterize([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Media.Drawing drawing, JetBrains.Util.Interop.DpiResolution resolution, System.Nullable<System.Windows.Size> size = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Media.Imaging.BitmapSource Rasterize([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Media.ImageSource image, JetBrains.Util.Interop.DpiResolution resolution, System.Nullable<System.Windows.Size> size = null) { }
        public static System.Windows.Rect RectFromScreen([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Media.Visual visual, System.Windows.Rect rcScreen) { }
        public static System.Windows.Rect RectToScreen([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Media.Visual visual, System.Windows.Rect rcClient) { }
        public static uint RGB(this System.Windows.Media.Color color) { }
        public static System.Windows.Controls.Grid Rows([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.Grid grid, [JetBrains.Annotations.NotNullAttribute()] params string[] sizes) { }
        public static TElement Scale<TElement>(this TElement element, double factor)
            where TElement : System.Windows.FrameworkElement { }
        public static TDependencyObject Set<TDependencyObject>([JetBrains.Annotations.NotNullAttribute()] this TDependencyObject dependencyobject, [JetBrains.Annotations.NotNullAttribute()] System.Windows.DependencyProperty dependencyproperty, object value)
            where TDependencyObject : System.Windows.DependencyObject { }
        public static TElement SetDialogFont<TElement>(this TElement element)
            where TElement : System.Windows.Controls.Control { }
        public static System.Windows.Documents.FlowDocument SetDialogFont(this System.Windows.Documents.FlowDocument thіs) { }
        public static System.Windows.Documents.FlowDocument SetDialogFontD(this System.Windows.Documents.FlowDocument thіs) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static TElement SetDynamicResourceValue<TElement>([JetBrains.Annotations.NotNullAttribute()] this TElement thіs, [JetBrains.Annotations.NotNullAttribute()] System.Windows.DependencyProperty property, [JetBrains.Annotations.NotNullAttribute()] System.Windows.ResourceKey resourcekey)
            where TElement : System.Windows.DependencyObject { }
        public static TElement SetEditorFont<TElement>(this TElement element)
            where TElement : System.Windows.Controls.Control { }
        public static System.Windows.Documents.FlowDocument SetEditorFont([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Documents.FlowDocument document) { }
        public static TElement SetEditorFontC<TElement>(this TElement element)
            where TElement : System.Windows.Documents.TextElement { }
        public static TElement SetEditorFontT<TElement>(this TElement element)
            where TElement : System.Windows.Controls.TextBlock { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Controls.Image SetSource([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.Image thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IProperty<System.Windows.Media.ImageSource> propSource) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Controls.Image SetSource([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.Image thіs, [JetBrains.Annotations.NotNullAttribute()] System.Windows.ResourceKey resourcekey) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Documents.FlowDocument SetSystemFont([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Documents.FlowDocument document) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.FrameworkElementFactory SetValueFluent([JetBrains.Annotations.NotNullAttribute()] this System.Windows.FrameworkElementFactory thіs, [JetBrains.Annotations.NotNullAttribute()] System.Windows.DependencyProperty dp, [JetBrains.Annotations.CanBeNullAttribute()] object value) { }
        public static System.Drawing.Color ToWinForms(this System.Windows.Media.Color color) { }
        public static System.Windows.Media.Color ToWPF(this System.Drawing.Color color) { }
        public static System.Nullable<System.Windows.Point> TryPointFromScreen(this System.Windows.Media.Visual thіs, System.Windows.Point point) { }
        public static void WhenLoaded([JetBrains.Annotations.NotNullAttribute()] this System.Windows.FrameworkElement thіs, System.Action<JetBrains.DataFlow.Lifetime> FWhenLoaded) { }
        public static void WhenLoaded([JetBrains.Annotations.NotNullAttribute()] this System.Windows.FrameworkElement thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.Action<JetBrains.DataFlow.Lifetime> FWhenLoaded) { }
    }
    public class static AvalonTemplates
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.FrameworkElement CreateBrokenViewCueBanner([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText message) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Controls.ControlTemplate CreateControlTemplate([JetBrains.Annotations.NotNullAttribute()] System.Func<System.Windows.UIElement> funcObjectGraphCreator) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.DataTemplate CreateDataTemplate([JetBrains.Annotations.NotNullAttribute()] System.Func<System.Windows.UIElement> funcObjectGraphCreator) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static void OverrideTemplate<TViewModel, TTemplatedParent>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.DependencyProperty propTemplate, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, TViewModel, TTemplatedParent, System.Windows.UIElement> FObjectGraphCreator)
            where TViewModel :  class
            where TTemplatedParent : System.Windows.UIElement { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.ResourceDictionary RegisterView<TViewModel, TView>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.ResourceDictionary thіs) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.ResourceDictionary RegisterView<TViewModel>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.ResourceDictionary thіs, System.Windows.FrameworkElementFactory frameworkElementFactory) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static TTemplate SetTemplate<TTemplate>([JetBrains.Annotations.NotNullAttribute()] this TTemplate template, [JetBrains.Annotations.NotNullAttribute()] System.Func<System.Windows.UIElement> funcObjectGraphCreator)
            where TTemplate : System.Windows.FrameworkTemplate { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Controls.ControlTemplate SetTemplate<TViewModel, TTemplatedParent>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Controls.ControlTemplate template, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, TViewModel, TTemplatedParent, System.Windows.UIElement> FObjectGraphCreator)
            where TViewModel :  class
            where TTemplatedParent : System.Windows.UIElement { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.DataTemplate SetTemplate<TViewModel, TTemplatedParent>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.DataTemplate template, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, TViewModel, TTemplatedParent, System.Windows.UIElement> FObjectGraphCreator)
            where TViewModel :  class
            where TTemplatedParent : System.Windows.UIElement { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static TTemplatedWindow SetTemplate<TViewModel, TTemplatedWindow>([JetBrains.Annotations.NotNullAttribute()] this TTemplatedWindow window, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, TViewModel, TTemplatedWindow, System.Windows.UIElement> FObjectGraphCreator)
            where TViewModel :  class
            where TTemplatedWindow : System.Windows.Window { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static TTemplate SetTemplateManually<TTemplate>([JetBrains.Annotations.NotNullAttribute()] this TTemplate template, [JetBrains.Annotations.NotNullAttribute()] System.Action<System.Windows.FrameworkElementFactory> FWithFactory)
            where TTemplate : System.Windows.FrameworkTemplate { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static TTemplate SetTemplateWithDataContext<TTemplate>([JetBrains.Annotations.NotNullAttribute()] this TTemplate template, [JetBrains.Annotations.NotNullAttribute()] System.Func<System.Windows.UIElement> funcObjectGraphCreator)
            where TTemplate : System.Windows.FrameworkTemplate { }
        public static void WithAutomationObject<TAutomation, TView>([JetBrains.Annotations.NotNullAttribute()] this TView view, [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.DataFlow.Lifetime, TAutomation, TView> FWithAutomationObject)
            where TAutomation :  class
            where TView : System.Windows.FrameworkElement { }
    }
    public class static AvalonTreeHelpers
    {
        public static readonly System.Action<System.Exception, System.Windows.DependencyObject> AddAvalonTreeData;
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<System.Windows.DependencyObject> GetLogicalDescendantsBreadthFirst([JetBrains.Annotations.NotNullAttribute()] System.Windows.DependencyObject root) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static System.Windows.DependencyObject GetLogicalOrVisualParent([JetBrains.Annotations.NotNullAttribute()] System.Windows.DependencyObject d) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<System.Windows.DependencyObject> GetVisualDescendantsBreadthFirst([JetBrains.Annotations.NotNullAttribute()] this System.Windows.DependencyObject root) { }
    }
    public abstract class ControlTemplateBorder : System.Windows.Controls.Decorator
    {
        public static readonly System.Windows.DependencyProperty TemplatedParentDependencyProperty;
        public static readonly System.Windows.DependencyProperty ViewModelDependencyProperty;
        public abstract void OnTemplatedParentDependencyPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs args);
        public abstract void OnViewModelDependencyPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs args);
    }
    public class ControlTemplateBorder<TViewModel, TTemplatedParent> : JetBrains.UI.Avalon.ControlTemplateBorder
        where TViewModel :  class
        where TTemplatedParent : System.Windows.UIElement
    {
        public static readonly System.Windows.DependencyProperty ObjectGraphCreatorDependencyProperty;
        public ControlTemplateBorder() { }
        public override void OnTemplatedParentDependencyPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs args) { }
        public override void OnViewModelDependencyPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs args) { }
    }
    public class DataTemplateDelegate : System.Windows.DataTemplate
    {
        public DataTemplateDelegate([JetBrains.Annotations.NotNullAttribute()] System.Func<System.Windows.UIElement> funcObjectGraphCreator) { }
    }
    public class DataTemplateSwitchSelector : System.Windows.Controls.DataTemplateSelector, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Windows.DataTemplate>>, System.Collections.IEnumerable
    {
        public DataTemplateSwitchSelector() { }
        public void Add<TType>([JetBrains.Annotations.NotNullAttribute()] System.Windows.DataTemplate template) { }
        public void Add([JetBrains.Annotations.NotNullAttribute()] System.Type type, [JetBrains.Annotations.NotNullAttribute()] System.Windows.DataTemplate template) { }
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Type, System.Windows.DataTemplate>> GetEnumerator() { }
        public override System.Windows.DataTemplate SelectTemplate(object item, System.Windows.DependencyObject container) { }
    }
    public class static DispatcherEx
    {
        public static void AssertAccess([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Threading.Dispatcher dispatcher) { }
        public static void BeginInvoke([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Threading.Dispatcher dispatcher, [JetBrains.Annotations.NotNullAttribute()] System.Action action) { }
        public static void BeginInvoke([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Threading.Dispatcher dispatcher, System.Windows.Threading.DispatcherPriority priority, [JetBrains.Annotations.NotNullAttribute()] System.Action action) { }
        public static void BeginOrInvoke([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Threading.Dispatcher dispatcher, [JetBrains.Annotations.NotNullAttribute()] System.Action action) { }
    }
    public class static Helpers
    {
        public static bool Glassify([JetBrains.Annotations.NotNullAttribute()] System.Windows.Window window, bool enable, JetBrains.UI.Avalon.Helpers.NoWindowHandleAction action) { }
        public static bool Glassify(System.IntPtr handle, bool enable) { }
        public enum NoWindowHandleAction
        {
            Ignore = 0,
            Throw = 1,
        }
    }
    public class static HwndSourceEx
    {
        public static System.Windows.Rect GetElementBoundsInScreenPixels([JetBrains.Annotations.NotNullAttribute()] this System.Windows.UIElement uielement) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.DataFlow.IProperty<System.Windows.Interop.HwndSource> GetHwndSourceLive([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement element) { }
    }
    public interface IStringConverter
    {
        object FromString(string value);
        string ToString([JetBrains.Annotations.NotNullAttribute()] object value);
    }
    public class MultiValueConverter : System.Windows.Data.IMultiValueConverter
    {
        public MultiValueConverter([JetBrains.Annotations.NotNullAttribute()] System.Func<object[], object> FConvert) { }
    }
    public class static PersistenceBehaviour
    {
        public static readonly System.Windows.DependencyProperty PersistenceIdProperty;
        public static string GetPersistenceId(System.Windows.DependencyObject o) { }
        public static void SetPersistenceId(System.Windows.DependencyObject o, string value) { }
    }
    public class static RectEx
    {
        public static System.Windows.Point GetCenter(this System.Windows.Rect rect) { }
    }
    public class Setting : System.Windows.DependencyObject
    {
        public static readonly System.Windows.DependencyProperty ValueProperty;
        public JetBrains.UI.Avalon.IStringConverter Converter { get; set; }
        public string Id { get; set; }
        public System.Windows.DependencyProperty Property { get; set; }
        public object Value { get; set; }
    }
    public class static SizeEx
    {
        public static System.Windows.Size Mul(this System.Windows.Size size, System.Windows.Vector factor) { }
        public static System.Windows.Size Mul(this System.Windows.Size size, double factor) { }
    }
    public class TemplateBorder : System.Windows.Controls.Decorator
    {
        public static readonly System.Windows.DependencyProperty ObjectGraphCreatorProperty;
    }
    public class static ThicknessEx
    {
        public static System.Windows.Thickness Add(this System.Windows.Thickness α, System.Windows.Thickness β) { }
        public static System.Windows.Size ToTotalSize(this System.Windows.Thickness thіs) { }
    }
    public class UISettingsPersistence : System.Windows.Freezable
    {
        public static readonly System.Windows.DependencyProperty InstanceProperty;
        public static readonly System.Windows.DependencyProperty SettingsTableProperty;
        public UISettingsPersistence() { }
        public System.Collections.ObjectModel.ObservableCollection<JetBrains.UI.Avalon.Setting> Settings { get; set; }
        public JetBrains.Application.Configuration.SettingsTableBase SettingsTable { get; set; }
        protected override System.Windows.Freezable CreateInstanceCore() { }
        public static JetBrains.UI.Avalon.UISettingsPersistence GetInstance(System.Windows.DependencyObject o) { }
        public static void SetInstance(System.Windows.DependencyObject o, JetBrains.UI.Avalon.UISettingsPersistence instance) { }
    }
    public class static ValueConverter
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Avalon.ValueConverter<TSource, TTarget> Create<TSource, TTarget>([JetBrains.Annotations.NotNullAttribute()] System.Func<TSource, TTarget> converter) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Data.IMultiValueConverter Create2<TSource0, TSource1, TTarget>([JetBrains.Annotations.NotNullAttribute()] System.Func<TSource0, TSource1, TTarget> converter) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Data.IMultiValueConverter Create3<TSource0, TSource1, TSource2, TTarget>([JetBrains.Annotations.NotNullAttribute()] System.Func<TSource0, TSource1, TSource2, TTarget> converter) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Data.IMultiValueConverter Create4<TSource0, TSource1, TSource2, TSource3, TTarget>([JetBrains.Annotations.NotNullAttribute()] System.Func<TSource0, TSource1, TSource2, TSource3, TTarget> converter) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Avalon.ValueConverter<TSource, TTarget> CreateTwoWay<TSource, TTarget>([JetBrains.Annotations.NotNullAttribute()] System.Func<TSource, TTarget> converterForth, [JetBrains.Annotations.NotNullAttribute()] System.Func<TTarget, TSource> converterBack) { }
    }
    public class ValueConverter<TSource, TTarget> : System.Windows.Data.IValueConverter
    
    
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public readonly System.Func<TTarget, TSource> ConverterBack;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Func<TSource, TTarget> ConverterForth;
        public ValueConverter([JetBrains.Annotations.NotNullAttribute()] System.Func<TSource, TTarget> converterForth, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<TTarget, TSource> converterBack = null) { }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
}
namespace JetBrains.UI.Avalon.Controls.Automation
{
    
    [JetBrains.Application.ShellComponentAttribute()]
    public class AutomationProviders
    {
        public static void Initialize() { }
    }
}
namespace JetBrains.UI.Avalon.Controls.Automation.Providers
{
    
    public class JetPopupMenuTitleViewAutomationProvider : System.Windows.Automation.Provider.IRawElementProviderFragment, System.Windows.Automation.Provider.IRawElementProviderFragmentRoot, System.Windows.Automation.Provider.IRawElementProviderSimple
    {
        public readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView TitleView;
        public System.Windows.Rect BoundingRectangle { get; }
        public System.Windows.Automation.Provider.IRawElementProviderFragmentRoot FragmentRoot { get; }
        public System.Windows.Automation.Provider.IRawElementProviderSimple HostRawElementProvider { get; }
        public System.Windows.Automation.Provider.ProviderOptions ProviderOptions { get; }
        public System.Windows.Automation.Provider.IRawElementProviderFragment ElementProviderFromPoint(double x, double y) { }
        public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetEmbeddedFragmentRoots() { }
        public System.Windows.Automation.Provider.IRawElementProviderFragment GetFocus() { }
        public object GetPatternProvider(int patternId) { }
        public object GetPropertyValue(int propertyId) { }
        public int[] GetRuntimeId() { }
        public System.Windows.Automation.Provider.IRawElementProviderFragment Navigate(System.Windows.Automation.Provider.NavigateDirection direction) { }
        public void SetFocus() { }
    }
    public class JetPopupMenuViewAutomationProvider : System.Windows.Automation.Provider.IInvokeProvider, System.Windows.Automation.Provider.IRawElementProviderSimple
    {
        public readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuView MenuView;
        public System.Windows.Automation.Provider.IRawElementProviderSimple HostRawElementProvider { get; }
        public System.Windows.Automation.Provider.ProviderOptions ProviderOptions { get; }
        public object GetPatternProvider(int patternId) { }
        public object GetPropertyValue(int propertyId) { }
        public void Invoke() { }
    }
    public class TipControlViewAutomationProvider : System.Windows.Automation.Provider.IRawElementProviderSimple, System.Windows.Automation.Provider.IValueProvider
    {
        public JetBrains.UI.Tooltips.TipControlView View;
        public System.Windows.Automation.Provider.IRawElementProviderSimple HostRawElementProvider { get; }
        public bool IsReadOnly { get; }
        public System.Windows.Automation.Provider.ProviderOptions ProviderOptions { get; }
        public string Value { get; }
        public object GetPatternProvider(int patternId) { }
        public object GetPropertyValue(int propertyId) { }
        public void SetValue(string value) { }
    }
}
namespace JetBrains.UI.Avalon.Controls
{
    
    public class static AvalonStatusBarShim
    {
        public static readonly bool OptionDevTenBeta2PlantIntoStatusDockPanel;
        public static void AddItemsHostToStatusBar([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.DependencyObject statbar, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Controls.ItemsControl panelToHostOnStatusBar) { }
        public static void ConvertIndicatorsIntoViewsLive(JetBrains.DataFlow.Lifetime lifetime, JetBrains.DataFlow.IListEvents<JetBrains.UI.StatusBar.JetStatusBarIndicator> indicators, JetBrains.DataFlow.IListEvents<JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorView> arIndicatorViews, JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Theming.ITheming environment) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Controls.ItemsControl CreateIndicatorsHostPanel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IListEvents<JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorView> indicatorviews) { }
        public static JetBrains.DataFlow.IListEvents<JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorView> CreateIndicatorViewsCollectionLive(JetBrains.DataFlow.Lifetime lifetime, JetBrains.DataFlow.IListEvents<JetBrains.UI.StatusBar.JetStatusBarIndicator> indicators, JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Theming.ITheming environment) { }
        public static void SubclassAvalonStatusBar(JetBrains.DataFlow.Lifetime lifetime, System.Windows.Controls.Primitives.StatusBar avalonStatusBar, JetBrains.DataFlow.IListEvents<JetBrains.UI.StatusBar.JetStatusBarIndicator> indicators, JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Theming.ITheming environment) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static System.Windows.Controls.Panel TryFindDevTenBeta2StatusDockPanelInHwnd(System.IntPtr hwnd) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static System.Windows.Controls.Primitives.StatusBar TryFindStatusBarInHwnd(System.IntPtr hwnd) { }
        public static bool TrySubclassAvalonStatusBarInWindow(JetBrains.DataFlow.Lifetime lifetime, System.IntPtr hwnd, JetBrains.DataFlow.IListEvents<JetBrains.UI.StatusBar.JetStatusBarIndicator> indicators, JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Theming.ITheming environment) { }
        public class IndicatorView : JetBrains.UI.Avalon.Controls.WindowlessControlElement
        {
            public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.StatusBar.JetStatusBarIndicator> Data;
            public IndicatorView([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Theming.ITheming environment, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.StatusBar.JetStatusBarIndicator data, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager) { }
            public IndicatorView([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Theming.ITheming environment) { }
            protected override void OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs e) { }
            protected override void OnMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
            protected override void OnMouseEnter(System.Windows.Input.MouseEventArgs e) { }
            protected override void OnMouseLeave(System.Windows.Input.MouseEventArgs e) { }
        }
    }
    public class CustomRender : System.Windows.FrameworkElement
    {
        public CustomRender(System.Action<System.Windows.Media.DrawingContext> render) { }
        protected override void OnRender(System.Windows.Media.DrawingContext drawingContext) { }
    }
    public class CustomVisualsControl<PanelType> : System.Windows.FrameworkElement
        where PanelType : System.Windows.FrameworkElement, new ()
    {
        public CustomVisualsControl() { }
        protected override System.Collections.IEnumerator LogicalChildren { get; }
        protected PanelType Panel { get; }
        protected override int VisualChildrenCount { get; }
        protected override System.Windows.Size ArrangeOverride(System.Windows.Size arrangeSize) { }
        protected override System.Windows.Media.Visual GetVisualChild(int index) { }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size constraint) { }
    }
    public class PixelSnappedDecorator : System.Windows.Controls.Decorator
    {
        public PixelSnappedDecorator([JetBrains.Annotations.CanBeNullAttribute()] System.Windows.UIElement child) { }
        protected override System.Windows.Size ArrangeOverride(System.Windows.Size arrangeSize) { }
    }
    public class ProgressCircle : System.Windows.Controls.Primitives.RangeBase
    {
        public ProgressCircle() { }
        protected override System.Windows.Size ArrangeOverride(System.Windows.Size arrangeBounds) { }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size constraint) { }
        protected override void OnMaximumChanged(double oldMaximum, double newMaximum) { }
        protected override void OnMinimumChanged(double oldMinimum, double newMinimum) { }
        protected override void OnValueChanged(double oldValue, double newValue) { }
    }
    public class RichTextPresenter : System.Windows.Controls.TextBlock
    {
        public static readonly System.Windows.DependencyProperty IsAutoContrastedProperty;
        public static readonly System.Windows.DependencyProperty IsKeyAccessedProperty;
        public static readonly System.Windows.DependencyProperty RichTextProperty;
        public RichTextPresenter() { }
        public RichTextPresenter(JetBrains.UI.RichText.RichText text) { }
        public bool IsAutoContrasted { get; set; }
        public bool IsKeyAccessed { get; set; }
        public JetBrains.UI.RichText.RichText RichText { get; set; }
    }
    public class RunBindable : System.Windows.Documents.Run
    {
        public readonly JetBrains.DataFlow.IProperty<bool> IsVisible;
        public static readonly System.Windows.DependencyProperty IsVisibleProperty;
        public readonly JetBrains.DataFlow.IProperty<string> Text;
        public static readonly System.Windows.DependencyProperty TextProperty;
        public RunBindable() { }
        public RunBindable(string text) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<System.Windows.Media.Brush> GetForegroundProp() { }
    }
    public class static RunBindableEx
    {
        public static JetBrains.UI.Avalon.Controls.RunBindable BindFrom<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Avalon.Controls.RunBindable thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IProperty<T> propText, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime disposables, [JetBrains.Annotations.NotNullAttribute()] System.Func<T, string> FConvert) { }
        public static JetBrains.UI.Avalon.Controls.RunBindable BindFrom([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Avalon.Controls.RunBindable thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IProperty<string> propText) { }
        public static JetBrains.UI.Avalon.Controls.RunBindable BindFrom([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Avalon.Controls.RunBindable thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IProperty<int> propNumber) { }
    }
    public class UIElementWindowlessControl : JetBrains.CommonControls.IConstrainableControl, JetBrains.CommonControls.IWindowlessControl
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Windows.UIElement UIElement;
        public UIElementWindowlessControl([JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement element) { }
    }
    public class WindowlessControlElement : System.Windows.FrameworkElement
    {
        public JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel AlphaChannel;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.CommonControls.IWindowlessControl> Presentation;
        public readonly JetBrains.DataFlow.ISignal<JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs> TooltipRequested;
        public WindowlessControlElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
        protected override System.Windows.Size ArrangeOverride(System.Windows.Size finalSize) { }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size availableSize) { }
        protected override void OnRender(System.Windows.Media.DrawingContext drawingContext) { }
    }
}
namespace JetBrains.UI.Avalon.Controls.CheckedList
{
    
    public class CheckedList : System.Windows.Controls.ListView
    {
        public static readonly System.Windows.DependencyProperty ColumnsProperty;
        public CheckedList() { }
        public System.Windows.Data.Binding CheckedStateBinding { get; set; }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Controls.GridViewColumnCollection Columns { get; }
        public event System.EventHandler CheckingChanged;
        protected override System.Windows.DependencyObject GetContainerForItemOverride() { }
        protected override bool IsItemItsOwnContainerOverride(object item) { }
    }
    public class CheckedListItem : System.Windows.Controls.ListBoxItem
    {
        public static readonly System.Windows.DependencyProperty ColumnsProperty;
        public static readonly System.Windows.DependencyProperty IsCheckedBindingProperty;
        public static readonly System.Windows.DependencyProperty IsCheckedProperty;
        public static readonly System.Windows.Input.RoutedCommand ToggleCommand;
        public CheckedListItem(JetBrains.UI.Avalon.Controls.CheckedList.CheckedList list) { }
        public System.Windows.Controls.GridViewColumnCollection Columns { get; }
        public bool IsChecked { get; set; }
        public System.Windows.Data.Binding IsCheckedBinding { get; set; }
        protected override void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected override void OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    }
}
namespace JetBrains.UI.Avalon.Controls.ColorPickerDialog
{
    
    public class ColorAxisSlider : JetBrains.UI.Avalon.Controls.ColorPickerDialog.ContentSlider
    {
        public ColorAxisSlider() { }
        public JetBrains.DataFlow.IProperty<int> AxisIn { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Avalon.Controls.ColorPickerDialog.I3DColorSpace> ColorSpaceIn { get; }
    }
    public class ColorPickerControl : System.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector
    {
        public ColorPickerControl() { }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Avalon.Controls.ColorPickerDialog.ColorSpaceState> ActiveColorSpace { get; }
        public JetBrains.DataFlow.IProperty<double> ColorOpacity { get; }
        public System.Windows.Media.Color SelectedColor { get; set; }
        public void InitializeComponent() { }
        protected override void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
    }
    public class static ColorPickerUtis
    {
        public static int[] AxisToPalleteIndeces(JetBrains.Util.Pair<int, int> mapping, int leadAxisIndex) { }
        public static System.Windows.Media.Media3D.Vector3D GetUnitVector(int axis) { }
        public static int[] PaletteToAxisIndeces(JetBrains.Util.Pair<int, int> mapping, int leadAxisIndex) { }
        public static T[] Swizzle<T>(int[] indeces, params T[] properties) { }
        public static uint ToBgr32(this System.Windows.Media.Media3D.Vector3D vector) { }
        public static System.Windows.Media.Color ToColor(this System.Windows.Media.Media3D.Vector3D vector) { }
        public static System.Windows.Media.Color ToColor(this System.Windows.Media.Media3D.Vector3D vector, double alpha) { }
        public static System.Windows.Media.Media3D.Vector3D ToVector3(this System.Windows.Media.Color color) { }
    }
    public class ColorSpaceState
    {
        public ColorSpaceState(JetBrains.UI.Avalon.Controls.ColorPickerDialog.I3DColorSpace colorSpace) { }
        public JetBrains.UI.Avalon.Controls.ColorPickerDialog.I3DColorSpace ColorSpace { get; }
        public JetBrains.DataFlow.IProperty<int> LeadAxis { get; }
        public JetBrains.DataFlow.IProperty<System.Windows.Media.Media3D.Vector3D> RGB { get; }
        public JetBrains.DataFlow.IProperty<double> UAxis { get; }
        public JetBrains.DataFlow.IProperty<System.Windows.Media.Media3D.Vector3D> UVW { get; }
        public JetBrains.DataFlow.IProperty<double> VAxis { get; }
        public JetBrains.DataFlow.IProperty<double> WAxis { get; }
        public JetBrains.DataFlow.IProperty<>[] Axis() { }
        public void SetUVW(System.Windows.Media.Media3D.Vector3D newUVW) { }
        public void UpdateFromRGB(System.Windows.Media.Media3D.Vector3D nearestRGB) { }
    }
    public class ContentSlider : System.Windows.Controls.Slider, System.Windows.Markup.IComponentConnector
    {
        public static readonly System.Windows.DependencyProperty ContentProperty;
        public ContentSlider() { }
        public object Content { get; set; }
        public JetBrains.DataFlow.IProperty<double> ValueIProperty { get; }
        public void InitializeComponent() { }
        public override void OnApplyTemplate() { }
    }
    public class HSBColorSpace : JetBrains.UI.Avalon.Controls.ColorPickerDialog.I3DColorSpace
    {
        public uint AxisRgbGradient(int axis, double u, double v) { }
        public JetBrains.Util.Pair<int, int> Get2DProjectionAxisMapping(int leadAxis) { }
        public System.Windows.Media.Media3D.Vector3D RgbToSpace(System.Windows.Media.Media3D.Vector3D v) { }
        public System.Windows.Media.Media3D.Vector3D SpaceToRgb(System.Windows.Media.Media3D.Vector3D v) { }
    }
    public interface I3DColorSpace
    {
        uint AxisRgbGradient(int axis, double u, double v);
        JetBrains.Util.Pair<int, int> Get2DProjectionAxisMapping(int leadAxis);
        System.Windows.Media.Media3D.Vector3D RgbToSpace(System.Windows.Media.Media3D.Vector3D v);
        System.Windows.Media.Media3D.Vector3D SpaceToRgb(System.Windows.Media.Media3D.Vector3D v);
    }
    public class LeadColorAxisSlider : JetBrains.UI.Avalon.Controls.ColorPickerDialog.ContentSlider
    {
        public LeadColorAxisSlider() { }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Avalon.Controls.ColorPickerDialog.ColorSpaceState> ColorSpaceState { get; }
    }
    public class MouseTracker : System.Windows.Window
    {
        public MouseTracker(System.Action onStart, System.Action onMove, System.Action<bool> onFinish) { }
        public bool Canceled { get; set; }
        public event System.Action<System.Windows.Point> TrackedMouseDown;
        public event System.Action<System.Windows.Point> TrackedMouseMove;
        public event System.Action<System.Windows.Point> TrackedMouseUp;
        public static System.Windows.Point CursorPosition() { }
        public static System.Windows.Media.Color GetPixelColor() { }
        public static System.Windows.Media.Color GetPixelColor(int size) { }
        public static System.Windows.Media.Color GetPixelColor(int x, int y, int size) { }
        protected override void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected override void OnMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected override void OnMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
        public void StartTracking() { }
    }
    public class PaletteControl : JetBrains.UI.Avalon.Controls.CustomVisualsControl<System.Windows.Controls.Grid>
    {
        public PaletteControl() { }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Avalon.Controls.ColorPickerDialog.I3DColorSpace> ColorSpace { get; }
        public JetBrains.DataFlow.IProperty<int> LeadAxis { get; }
        public JetBrains.DataFlow.IProperty<double> UPosition { get; }
        public JetBrains.DataFlow.IProperty<double> VPosition { get; }
        public JetBrains.DataFlow.IProperty<double> WPosition { get; }
        protected override void OnMouseLeave(System.Windows.Input.MouseEventArgs e) { }
        protected override void OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected override void OnMouseMove(System.Windows.Input.MouseEventArgs e) { }
        protected override void OnMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
    }
    public class PixelDrawer : System.Windows.Controls.Border
    {
        public PixelDrawer(JetBrains.UI.Avalon.Controls.ColorPickerDialog.PixelDrawer.GetPixelDelegate getPixel) { }
        public PixelDrawer(JetBrains.UI.Avalon.Controls.ColorPickerDialog.PixelDrawer.GetPixelDelegate getPixel, int bitmapWidth, int bitmapHeight) { }
        public JetBrains.UI.Avalon.Controls.ColorPickerDialog.PixelDrawer.GetPixelDelegate GetPixel { get; set; }
        public void InvalidatePixels() { }
        protected override void OnRender(System.Windows.Media.DrawingContext dc) { }
        public delegate uint GetPixelDelegate(double x, double y);
    }
    public class RGBColorSpace : JetBrains.UI.Avalon.Controls.ColorPickerDialog.I3DColorSpace
    {
        public uint AxisRgbGradient(int axis, double u, double v) { }
        public JetBrains.Util.Pair<int, int> Get2DProjectionAxisMapping(int leadAxis) { }
        public System.Windows.Media.Media3D.Vector3D RgbToSpace(System.Windows.Media.Media3D.Vector3D v) { }
        public System.Windows.Media.Media3D.Vector3D SpaceToRgb(System.Windows.Media.Media3D.Vector3D v) { }
    }
}
namespace JetBrains.UI.Avalon.DataContext
{
    
    [JetBrains.Application.DataContext.ExportFindDataRulesAttribute(Priority=1D)]
    public class FindAvalonDataRules : JetBrains.Application.DataContext.IFindDataRules { }
    public class GetDataRulesEventArgs : System.Windows.RoutedEventArgs
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Collections.Generic.List<JetBrains.Application.DataContext.IDataRule> DataRules;
        public static readonly System.Windows.DependencyProperty GetDataRulesBehaviorProperty;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly System.Windows.RoutedEvent GetDataRulesEvent;
        public GetDataRulesEventArgs(object source) { }
        public static JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs.GetDataRulesEventHandler GetGetDataRulesBehavior([JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement element) { }
        public static void SetGetDataRulesBehavior([JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement element, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs.GetDataRulesEventHandler value) { }
        public delegate void GetDataRulesEventHandler(object sender, JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs args);
    }
}
namespace JetBrains.UI.Avalon.Interop
{
    
    [JetBrains.Application.ShellComponentAttribute()]
    public class DwmStatus
    {
        public static readonly JetBrains.DataFlow.Property<bool> IsDwmCompositionEnabled;
        public DwmStatus(JetBrains.DataFlow.Lifetime lifetime) { }
        public DwmStatus(bool noop) { }
    }
    public class static RichTextEx
    {
        public static System.Windows.Documents.Span ToSpan(this JetBrains.UI.RichText.RichText richtext, bool handleAccessKeyCharacter = False, bool adjustContrast = False, System.Windows.Media.Color foregroundHint = null) { }
    }
}
namespace JetBrains.UI.Avalon.Src.Controls.ColorPickerDialog
{
    
    public class ColorPickerDialog : System.Windows.Window, System.Windows.Markup.IComponentConnector
    {
        public ColorPickerDialog() { }
        public System.Windows.Media.Color SelectedColor { get; set; }
        public void InitializeComponent() { }
    }
}
namespace JetBrains.UI.Avalon.Tooltips
{
    
    public class AvalonTooltipElement : JetBrains.UI.Tooltips.TooltipElement
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Windows.UIElement UIElement;
        public AvalonTooltipElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement element, System.Drawing.Point ptScreen, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Tooltips.ITooltipInfo tooltipInfo) { }
        public override void AddExceptionData(System.Exception ex) { }
        public override bool IsValid() { }
        public override System.Windows.Point ScreenToClient(System.Drawing.Point ptScreen) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class AvalonTooltipManagerComponent
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly System.Windows.RoutedEvent GetJetTooltipEvent;
    }
    public class GetJetTooltipEventArgs : System.Windows.RoutedEventArgs
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Windows.IInputElement HitElement;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.Lifetime Lifetime;
        public GetJetTooltipEventArgs([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.IInputElement elemHit, [JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement elemRoot, System.Windows.Point ptRoot, System.Drawing.Point ptScreen) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Avalon.Tooltips.AvalonTooltipElement TooltipElement { get; }
        public System.Windows.Point GetPointInVisual([JetBrains.Annotations.NotNullAttribute()] System.Windows.Media.Visual visual) { }
        public void SetTooltip([JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Tooltips.ITooltipInfo tti) { }
    }
    public delegate void GetJetTooltipEventHandler(object sender, JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs args);
}
namespace JetBrains.UI.Avalon.TreeListView
{
    
    public class BoolToVisibilityConverter : System.Windows.Data.IValueConverter
    {
        public object Convert(object o, System.Type type, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object o, System.Type type, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class ContextMenuRequestArgs
    {
        public ContextMenuRequestArgs(System.Windows.Point positionRelativeToSender) { }
        public System.Windows.Point LocationRelativeToSender { get; }
    }
    public class CookieHelper
    {
        public CookieHelper(System.Func<System.IDisposable> innerDisposable) { }
        public CookieHelper(System.Action begin, System.Action end) { }
        public System.IDisposable Cookie { get; }
        public bool IsTaken { get; }
        public void Close() { }
        public void Open() { }
    }
    public class ItemActivatedArgs : System.Windows.RoutedEventArgs
    {
        public ItemActivatedArgs(object sourceObject, System.Windows.Input.ModifierKeys modifierKeys) { }
        public System.Windows.Input.ModifierKeys ModifierKeys { get; }
        public object SourceObject { get; }
    }
    public class LevelToIndentConverter : System.Windows.Data.IValueConverter
    {
        public object Convert(object o, System.Type type, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object o, System.Type type, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class ObservableObject : System.ComponentModel.INotifyPropertyChanged
    {
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        [JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute()]
        public void OnPropertyChanged([JetBrains.Annotations.NotNullAttribute()] string name) { }
    }
    public class ProvideComparisionArgs
    {
        public System.Comparison<object> Comparison;
        public readonly object Parent;
        public ProvideComparisionArgs(object parent) { }
    }
    public delegate void ProvideComparisionDelegate(JetBrains.UI.Avalon.TreeListView.TreeListViewColumn column, JetBrains.UI.Avalon.TreeListView.ProvideComparisionArgs args);
    public abstract class ReadOnlyListAdapterBase<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    
    {
        public abstract int Count { get; }
        public bool IsFixedSize { get; }
        public bool IsReadOnly { get; }
        public bool IsSynchronized { get; }
        public abstract T this[int index] { get; set; }
        public object SyncRoot { get; }
        public void Add(T item) { }
        public int Add(object value) { }
        public virtual void Clear() { }
        public abstract bool Contains(object value);
        public virtual bool Contains(T item) { }
        public void CopyTo(T[] array, int arrayIndex) { }
        public void CopyTo(System.Array array, int index) { }
        public System.Collections.Generic.IEnumerator<T> GetEnumerator() { }
        public int IndexOf(object value) { }
        public abstract int IndexOf(T item);
        public void Insert(int index, object value) { }
        public void Insert(int index, T item) { }
        public void Remove(object value) { }
        public bool Remove(T item) { }
        public void RemoveAt(int index) { }
    }
    public class TreeGridViewRowPresenter : System.Windows.Controls.GridViewRowPresenter
    {
        public static System.Windows.DependencyProperty ExpanderProperty;
        public static System.Windows.DependencyProperty FirstColumnIndentProperty;
        public TreeGridViewRowPresenter() { }
        public System.Windows.UIElement Expander { get; set; }
        public double FirstColumnIndent { get; set; }
        protected override int VisualChildrenCount { get; }
        protected override System.Windows.Size ArrangeOverride(System.Windows.Size arrangeSize) { }
        protected override System.Windows.Media.Visual GetVisualChild(int index) { }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size constraint) { }
    }
    [JetBrains.Annotations.XamlItemsControlAttribute()]
    public class TreeListView : System.Windows.Controls.Control
    {
        public static readonly System.Windows.DependencyProperty AllowMultiselectProperty;
        public static readonly System.Windows.DependencyProperty AutoSizeColumnsProperty;
        public static readonly System.Windows.DependencyProperty ColumnsProperty;
        public static readonly System.Windows.DependencyProperty FilterDescriptorProperty;
        public static readonly System.Windows.DependencyProperty FlattenedTreeProperty;
        public static readonly System.Windows.DependencyProperty HeaderMarginProperty;
        public static readonly System.Windows.DependencyProperty IsDataVirtualizationEnabledProperty;
        public static readonly System.Windows.DependencyProperty IsHeaderVisibleCalculatedProperty;
        public static readonly System.Windows.DependencyProperty IsHeaderVisibleProperty;
        public static readonly System.Windows.DependencyProperty IsSelectedItemsPropertyActiveProperty;
        public static readonly System.Windows.DependencyProperty IsTopLevelLockedProperty;
        public static readonly System.Windows.RoutedEvent ItemActivatedEvent;
        public static readonly System.Windows.DependencyProperty ItemsSourceProperty;
        public static readonly System.Windows.DependencyProperty SelectedItemProperty;
        public static readonly System.Windows.DependencyProperty SelectedItemsDependencyProperty;
        public readonly JetBrains.DataFlow.IProperty<System.Collections.Generic.IList<object>> SelectedItemsProperty;
        public static readonly System.Windows.RoutedEvent SelectionChangedEvent;
        public TreeListView() { }
        public bool AllowMultiselect { get; set; }
        public bool AutoExpandSingleChild { get; set; }
        public bool AutoRestoreStateWhenSourceChanges { get; set; }
        public bool AutoSizeColumns { get; set; }
        [JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute()]
        public System.Windows.Data.Binding ChildrenBinding { get; set; }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Controls.GridViewColumnCollection Columns { get; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.IFilterDescriptor FilterDescriptor { get; set; }
        public System.Collections.Generic.IList<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> FlattenedTree { get; }
        public System.Windows.Data.Binding HasChildrenBinding { get; set; }
        public System.Windows.Thickness HeaderMargin { get; set; }
        public bool IsDataVirtualizationEnabled { get; set; }
        public bool IsHeaderVisible { get; set; }
        public bool IsHeaderVisibleCalculated { get; }
        public System.Func<object, bool> IsInitiallyExpanded { get; set; }
        public bool IsSelectedItemsPropertyActive { get; set; }
        public bool IsTopLevelLocked { get; set; }
        public System.Collections.IEnumerable ItemsSource { get; set; }
        public int KeyboardExpandAllLimit { get; set; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider ModelSource { get; set; }
        public System.Func<System.IDisposable> ReadBrackets { get; set; }
        public System.Func<string, System.Action<bool>, bool> ReentrancyGuardExecuteOrQueueOrMerge { get; set; }
        public object SelectedItem { get; set; }
        public System.Collections.Generic.IEnumerable<object> SelectedItems { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> SelectedNodes { get; }
        public event System.Action<JetBrains.UI.Avalon.TreeListView.TreeListView, JetBrains.UI.Avalon.TreeListView.ContextMenuRequestArgs> ContextMenuRequested;
        public event System.EventHandler IsTopLevelLockedChanged;
        public event JetBrains.UI.Avalon.TreeListView.TreeListView.ItemActivatedHandler ItemActivated;
        public event System.Windows.RoutedEventHandler SelectionChanged;
        protected override System.Windows.Size ArrangeOverride(System.Windows.Size arrangeBounds) { }
        public void AsyncAutosizeColumns() { }
        public void BringIntoView(object model) { }
        public void BringPathIntoView(System.Collections.Generic.IEnumerable<object> modelPath, bool focus = False, bool select = False) { }
        public void CollapseAll() { }
        public void CollapseAll(object o) { }
        public void CollapseAllByPath(System.Collections.Generic.IEnumerable<object> objectPath) { }
        public void EnsureVisible(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState item) { }
        public void ExpandAll(System.Nullable<int> maxDepthCount) { }
        public void ExpandAll(object o, JetBrains.UI.Avalon.TreeListView.TreeListView.ExpandDescendantDelegate expandDescendants) { }
        public void ExpandAllByPath(System.Collections.Generic.IEnumerable<object> objectPath, JetBrains.UI.Avalon.TreeListView.TreeListView.ExpandDescendantDelegate expandDescendants) { }
        public JetBrains.UI.Avalon.TreeListView.TreeListViewItem FindLogicFocusNode() { }
        public void Focus([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Avalon.TreeListView.Contracts.INodeState newFocus) { }
        public JetBrains.UI.Avalon.TreeListView.TreeListViewItem GetContainer(object item) { }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size constraint) { }
        public override void OnApplyTemplate() { }
        protected override void OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs e) { }
        public void OnContextMenuRequested(JetBrains.UI.Avalon.TreeListView.ContextMenuRequestArgs arg2) { }
        protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { }
        protected override void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected override void OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected void OnMouseLeftButtonDownGuarded(System.Windows.Input.MouseButtonEventArgs e) { }
        protected override void OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected void OnMouseRightButtonUpGuarded(System.Windows.Input.MouseButtonEventArgs e) { }
        public System.IDisposable ReadBracketsOrDefault() { }
        public void RestoreState([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Avalon.TreeListView.TreeListView.TreeListViewState state) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Avalon.TreeListView.TreeListView.TreeListViewState SaveState() { }
        public void ScheduleFocus([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node) { }
        public void Select(System.Collections.Generic.IEnumerable<object> items) { }
        public void SelectAll() { }
        public void SelectPath(System.Collections.Generic.IEnumerable<object> modelPath) { }
        public void SetExpandState(System.Collections.Generic.IEnumerable<int> indexPath, bool isExpanded) { }
        public void SetExpandState(System.Collections.Generic.IEnumerable<object> objectPath, bool isExpanded) { }
        public delegate bool ExpandDescendantDelegate(object child, int level);
        public delegate void ItemActivatedHandler(object sender, JetBrains.UI.Avalon.TreeListView.ItemActivatedArgs args);
        public class TreeListViewState { }
    }
    public class TreeListViewAutomationPeer : System.Windows.Automation.Peers.FrameworkElementAutomationPeer, System.Windows.Automation.Provider.ISelectionProvider
    {
        public TreeListViewAutomationPeer(JetBrains.UI.Avalon.TreeListView.TreeListView owner) { }
        protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { }
        protected override System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildrenCore() { }
        protected override string GetClassNameCore() { }
        protected override string GetNameCore() { }
        public override object GetPattern(System.Windows.Automation.Peers.PatternInterface patternInterface) { }
    }
    public class TreeListViewColumn : System.Windows.Controls.GridViewColumn
    {
        public static readonly System.Windows.DependencyProperty ComparisonProperty;
        public static readonly System.Windows.DependencyProperty SortDescriptorProperty;
        public static readonly System.Windows.DependencyProperty SortOrderProperty;
        public System.Comparison<object> Comparison { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public new System.Windows.Data.BindingBase DisplayMemberBinding { get; set; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.ISortDescriptor SortDescriptor { get; set; }
        public System.Nullable<JetBrains.UI.Avalon.TreeListView.Contracts.SortOrder> SortOrder { get; }
        public event JetBrains.UI.Avalon.TreeListView.ProvideComparisionDelegate GetComparition;
    }
    public class TreeListViewItem : System.Windows.Controls.Control
    {
        public static readonly System.Windows.DependencyProperty HasChildrenProperty;
        public static readonly System.Windows.DependencyProperty IsExpandedProperty;
        public static readonly System.Windows.DependencyProperty IsLockedProperty;
        public static readonly System.Windows.DependencyProperty IsSelectedProperty;
        public static readonly System.Windows.DependencyProperty LevelProperty;
        public static readonly System.Windows.DependencyProperty SourceObjectProperty;
        public TreeListViewItem([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Avalon.TreeListView.TreeListView tree) { }
        public bool HasChildren { get; }
        public bool IsExpanded { get; set; }
        public bool IsLocked { get; set; }
        public bool IsSelected { get; }
        public int Level { get; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.INodeState NodeState { get; }
        public object SourceObject { get; }
        protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { }
        protected override void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected override void OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    }
    public class TreeListViewItemAdorner : System.Windows.Controls.ContentControl { }
    public class TreeListViewItemAutomationPeer : System.Windows.Automation.Peers.AutomationPeer, System.Windows.Automation.Provider.IExpandCollapseProvider, System.Windows.Automation.Provider.IScrollItemProvider, System.Windows.Automation.Provider.ISelectionItemProvider
    {
        public TreeListViewItemAutomationPeer(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState nodeState, JetBrains.UI.Avalon.TreeListView.TreeListView tree) { }
        protected override string GetAcceleratorKeyCore() { }
        protected override string GetAccessKeyCore() { }
        protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { }
        protected override string GetAutomationIdCore() { }
        protected override System.Windows.Rect GetBoundingRectangleCore() { }
        protected override System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildrenCore() { }
        protected override string GetClassNameCore() { }
        protected override System.Windows.Point GetClickablePointCore() { }
        protected override string GetHelpTextCore() { }
        protected override string GetItemStatusCore() { }
        protected override string GetItemTypeCore() { }
        protected override System.Windows.Automation.Peers.AutomationPeer GetLabeledByCore() { }
        protected override string GetNameCore() { }
        protected override System.Windows.Automation.Peers.AutomationOrientation GetOrientationCore() { }
        public override object GetPattern(System.Windows.Automation.Peers.PatternInterface patternInterface) { }
        protected override bool HasKeyboardFocusCore() { }
        protected override bool IsContentElementCore() { }
        protected override bool IsControlElementCore() { }
        protected override bool IsEnabledCore() { }
        protected override bool IsKeyboardFocusableCore() { }
        protected override bool IsOffscreenCore() { }
        protected override bool IsPasswordCore() { }
        protected override bool IsRequiredForFormCore() { }
        protected override void SetFocusCore() { }
    }
    public class TreeListViewPanel : System.Windows.Controls.VirtualizingStackPanel
    {
        protected override System.Windows.Size ArrangeOverride(System.Windows.Size arrangeSize) { }
        public new void BringIndexIntoView(int index) { }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size constraint) { }
    }
    public class TreeListViewPresenter : System.Windows.Controls.ItemsControl
    {
        public TreeListViewPresenter() { }
        protected override bool HandlesScrolling { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Avalon.TreeListView.TreeListViewItem> LoadedChildren { get; }
        public void BringIndexIntoView(int index) { }
        protected override System.Windows.DependencyObject GetContainerForItemOverride() { }
        public JetBrains.UI.Avalon.TreeListView.TreeListView GetTreeListView() { }
        protected override bool IsItemItsOwnContainerOverride(object item) { }
        public override void OnApplyTemplate() { }
        public double VerticalOffset() { }
        public double ViewportHeight() { }
    }
    public class static Utils
    {
        [System.ObsoleteAttribute("Use BinarySearch from BinarySearchUtil.")]
        public static int BinarySearch<T, S>(this System.Collections.Generic.List<T> list, S target, System.Func<T, S> value, out bool isMissing)
        
            where S : System.IComparable { }
        public static T FindVisualParentOfType<T>(object child)
            where T : System.Windows.DependencyObject { }
        public static string PathName<T>(this T testNode, string separator, System.Func<T, string> getName, System.Func<T, T> getParent)
            where T :  class { }
        public static string PathName<T>(this T testNode, System.Func<T, string> getName, System.Func<T, T> getParent)
            where T :  class { }
    }
}
namespace JetBrains.UI.Avalon.TreeListView.Contracts
{
    
    public class DelegateFilterDescriptor : JetBrains.UI.Avalon.TreeListView.Contracts.IFilterDescriptor
    {
        public DelegateFilterDescriptor(System.Predicate<object> predicate) { }
        public System.Predicate<object> Predicate { get; set; }
        public bool PassesFilter([JetBrains.Annotations.NotNullAttribute()] object target) { }
    }
    public class DelegateFilterDescriptor<TItem> : JetBrains.UI.Avalon.TreeListView.Contracts.IFilterDescriptor
    
    {
        public DelegateFilterDescriptor(System.Predicate<TItem> predicate) { }
        public System.Predicate<TItem> Predicate { get; set; }
        public bool PassesFilter([JetBrains.Annotations.NotNullAttribute()] object target) { }
    }
    public class DelegateSortDescriptor : JetBrains.UI.Avalon.TreeListView.Contracts.ISortDescriptor
    {
        public DelegateSortDescriptor(System.Comparison<object> comparition) { }
        public DelegateSortDescriptor(System.Func<object, System.Comparison<object>> comparitionFactory) { }
        public System.Func<object, System.Comparison<object>> ComparitionFactory { get; set; }
        public System.Comparison<object> GetComparision([JetBrains.Annotations.NotNullAttribute()] object parent) { }
    }
    public interface IFilterDescriptor
    {
        bool PassesFilter([JetBrains.Annotations.NotNullAttribute()] object target);
    }
    public interface IFilterSortController
    {
        void ApplyFilter(JetBrains.UI.Avalon.TreeListView.Contracts.IFilterDescriptor filterDescriptor);
        void ApplySort(JetBrains.UI.Avalon.TreeListView.Contracts.ISortDescriptor sortDescriptor, JetBrains.UI.Avalon.TreeListView.Contracts.SortOrder sortOrder);
        void RemoveFilter();
        void RemoveSort();
        bool SupportsFilter();
        bool SupportsSort();
    }
    public interface IIterativeTreeModelChangeTracker : JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker
    {
        public event JetBrains.UI.Avalon.TreeListView.Contracts.InsertRemoveChangeDelegate NotifyInsert;
        public event JetBrains.UI.Avalon.TreeListView.Contracts.InsertRemoveChangeDelegate NotifyRemove;
        public event JetBrains.UI.Avalon.TreeListView.Contracts.ReplaceChangeDelegate NotifyReplace;
    }
    public interface INodeState
    {
        System.Collections.Generic.IEnumerable<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> Children { get; }
        System.Collections.Generic.IEnumerable<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> FilteredChildren { get; }
        bool HasChildren { get; }
        int Index { get; }
        bool IsExpanded { get; }
        int Level { get; }
        JetBrains.UI.Avalon.TreeListView.Contracts.INodeState Parent { get; }
        JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider Provider { get; }
        object SourceObject { get; }
    }
    public delegate void InsertRemoveChangeDelegate(JetBrains.UI.Avalon.TreeListView.Contracts.IIterativeTreeModelChangeTracker tracker, [JetBrains.Annotations.NotNullAttribute()] object owner, int offset, int count);
    public interface ISelectionManager
    {
        System.Collections.Generic.IEnumerable<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> SelectedNodes { get; }
        public event JetBrains.UI.Avalon.TreeListView.Contracts.SelectionChangedDelegate SelectionChangeBegin;
        public event JetBrains.UI.Avalon.TreeListView.Contracts.SelectionChangedDelegate SelectionChangeEnd;
        void Clear();
        bool IsSelected(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node);
        void SetSelection(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState start, JetBrains.UI.Avalon.TreeListView.Contracts.INodeState finish, JetBrains.UI.Avalon.TreeListView.Contracts.SelectionOperation operation);
    }
    public interface ISortDescriptor
    {
        System.Comparison<object> GetComparision([JetBrains.Annotations.NotNullAttribute()] object parent);
    }
    public interface ITrackingAware
    {
        void FinishTracking([JetBrains.Annotations.NotNullAttribute()] object item);
        void StartTracking([JetBrains.Annotations.NotNullAttribute()] object item);
    }
    public interface ITreeModelChangeTracker
    {
        public event System.Action<JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker> ModelChanged;
        public event System.Action<JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker> ModelChanging;
        public event JetBrains.UI.Avalon.TreeListView.Contracts.ResetChangeDelegate NotifyReset;
    }
    public interface ITreeModelProvider
    {
        [JetBrains.Annotations.NotNullAttribute()]
        object Root { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker GetChangeTracker();
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Collections.IList GetChildren([JetBrains.Annotations.NotNullAttribute()] object parent);
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Collections.Generic.IEqualityComparer<object> GetCustomComparer();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Avalon.TreeListView.Contracts.ITreeStateRestoreSupportSimple GetStateRestoreSupport();
        bool HasChildren([JetBrains.Annotations.NotNullAttribute()] object model);
    }
    public interface ITreeNodeStateProvider
    {
        JetBrains.UI.Avalon.TreeListView.Contracts.IFilterSortController FilterSortController { get; }
        JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider Model { get; set; }
        System.IDisposable ModificationCookie { get; }
        JetBrains.UI.Avalon.TreeListView.Contracts.TreeNodeStateProviderOptions Options { get; set; }
        JetBrains.UI.Avalon.TreeListView.Contracts.INodeState Root { get; }
        JetBrains.UI.Avalon.TreeListView.Contracts.ISelectionManager SelectionManager { get; }
        int VisibleNodeCount { get; }
        public event System.Action<JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider> ItemsInvalidated;
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Avalon.TreeListView.Contracts.INodeState ByIndexPath(System.Collections.Generic.IEnumerable<int> indexPath);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Avalon.TreeListView.Contracts.INodeState ByObjectPath(System.Collections.Generic.IEnumerable<object> objectPath);
        void CollapseAll([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node);
        void ExpandAll([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node, System.Predicate<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> expandDescendants);
        System.Collections.Generic.IEnumerable<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> FetchRange(int offset, int count);
        void SetIsExpanded([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Avalon.TreeListView.Contracts.INodeState nodeState, bool state);
        int TraverseIndex(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node);
    }
    public interface ITreeStateRestoreSupportAdvanced
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.IEnumerable<object> FromIdentity([JetBrains.Annotations.NotNullAttribute()] object identity);
        object GetParent([JetBrains.Annotations.NotNullAttribute()] object model);
    }
    public interface ITreeStateRestoreSupportSimple
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Avalon.TreeListView.Contracts.ITreeStateRestoreSupportAdvanced GetAdvanced();
        [JetBrains.Annotations.NotNullAttribute()]
        object GetIdentity([JetBrains.Annotations.NotNullAttribute()] object model);
    }
    public class static NodeStateUtils
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> ParentPath(this JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> SelfAndParentPath(this JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node) { }
    }
    public class ProviderSavedState
    {
        public ProviderSavedState(JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider provider) { }
        public void ApplyTo(JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider nodeStateProvider) { }
    }
    public class static ProviderUtils
    {
        public static void CollapseAll(this JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider provider) { }
        public static bool CustomEquals(JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider model, object a, object b) { }
        public static void ExpandAll(this JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider provider) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEqualityComparer<object> GetCustomEqualityComparerOrDefault(this JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider model) { }
        public static JetBrains.UI.Avalon.TreeListView.Implementation.IndexPath GetIndexPath(this JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node) { }
        public static bool IsSelected([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node) { }
        public static void SetIsExpanded(this JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider provider, bool state, params object[] path) { }
        public static void SetIsExpanded(this JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider provider, System.Collections.Generic.IEnumerable<object> path, bool isExpanded) { }
        public static void SetIsExpanded(this JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider provider, System.Collections.Generic.IEnumerable<int> path, bool isExpanded) { }
        public static int TraverseIndex(this JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider provider, System.Collections.Generic.IEnumerable<int> path) { }
        public static int TraverseIndex(this JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider provider, System.Collections.Generic.IEnumerable<object> path) { }
    }
    public delegate void ReplaceChangeDelegate(JetBrains.UI.Avalon.TreeListView.Contracts.IIterativeTreeModelChangeTracker tracker, [JetBrains.Annotations.NotNullAttribute()] object owner, int offset, int count);
    public delegate void ResetChangeDelegate(JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker tracker, [JetBrains.Annotations.NotNullAttribute()] object owner, JetBrains.UI.Avalon.TreeListView.Contracts.ResetType resetType);
    public enum ResetType
    {
        ResetChildren = 0,
        ResetSubtree = 1,
    }
    public delegate void SelectionChangedDelegate(JetBrains.UI.Avalon.TreeListView.Contracts.ISelectionManager sender);
    public enum SelectionOperation
    {
        Add = 0,
        Remove = 1,
        Toggle = 2,
        Set = 3,
    }
    public class static SortDescriptor
    {
        public static readonly JetBrains.UI.Avalon.TreeListView.Contracts.ISortDescriptor IComparableSortDescriptor;
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Avalon.TreeListView.Contracts.ISortDescriptor Create<TItem>([JetBrains.Annotations.NotNullAttribute()] System.Func<TItem, TItem, int> FComparer) { }
    }
    public enum SortOrder
    {
        Ascending = 1,
        Descending = -1,
    }
    public class TreeNodeStateProviderOptions
    {
        public readonly bool AutoExpandSingleChild;
        public TreeNodeStateProviderOptions(bool autoExpandSingleChild, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<object, bool> expandNodeInitially) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Func<object, bool> ExpandNodeInitially { get; }
    }
}
namespace JetBrains.UI.Avalon.TreeListView.Implementation.Default
{
    
    public class NodeStateProvider : JetBrains.UI.Avalon.TreeListView.Contracts.IFilterSortController, JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider
    {
        public NodeStateProvider(JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider treeProvider) { }
        public JetBrains.UI.Avalon.TreeListView.Contracts.IFilterSortController FilterSortController { get; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider Model { get; set; }
        public System.IDisposable ModificationCookie { get; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.TreeNodeStateProviderOptions Options { get; set; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.INodeState Root { get; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.ISelectionManager SelectionManager { get; }
        public int VisibleNodeCount { get; }
        public event System.Action<JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider> ItemsInvalidated;
        public void ApplyFilter(JetBrains.UI.Avalon.TreeListView.Contracts.IFilterDescriptor filterDescriptor) { }
        public void ApplySort(JetBrains.UI.Avalon.TreeListView.Contracts.ISortDescriptor sortDescriptor, JetBrains.UI.Avalon.TreeListView.Contracts.SortOrder sortOrder) { }
        public JetBrains.UI.Avalon.TreeListView.Contracts.INodeState ByIndexPath(System.Collections.Generic.IEnumerable<int> indexPath) { }
        public JetBrains.UI.Avalon.TreeListView.Contracts.INodeState ByObjectPath(System.Collections.Generic.IEnumerable<object> objectPath) { }
        public void CollapseAll(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node) { }
        public void ExpandAll(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node, System.Predicate<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> expandDescendants) { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> FetchRange(int offset, int count) { }
        public void InvokeItemsInvalidated() { }
        public void RemoveFilter() { }
        public void RemoveSort() { }
        public void SetIsExpanded(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState nodeState, bool state) { }
        public bool SupportsFilter() { }
        public bool SupportsSort() { }
        public int TraverseIndex(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node) { }
    }
}
namespace JetBrains.UI.Avalon.TreeListView.Implementation
{
    
    public class ExpandNodesVisitor : JetBrains.UI.Avalon.TreeListView.Implementation.ModelVisitor
    {
        public ExpandNodesVisitor(JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider treeNodeStateProvider, System.Func<object, bool> shouldExpand) { }
        protected override JetBrains.UI.Avalon.TreeListView.Implementation.ModelVisitor.VisitResult OnVisit(object root, JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider model, System.Collections.Generic.List<object> path, System.Collections.Generic.HashSet<object> visited) { }
    }
    public class FindPathVisitor : JetBrains.UI.Avalon.TreeListView.Implementation.ModelVisitor
    {
        public FindPathVisitor(object target) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public System.Collections.Generic.List<object> Path { get; }
        protected override JetBrains.UI.Avalon.TreeListView.Implementation.ModelVisitor.VisitResult OnVisit(object root, JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider model, System.Collections.Generic.List<object> path, System.Collections.Generic.HashSet<object> visited) { }
    }
    public sealed class IndexPath : System.Collections.Generic.IEnumerable<int>, System.Collections.IEnumerable, System.IComparable<JetBrains.UI.Avalon.TreeListView.Implementation.IndexPath>
    {
        public IndexPath(System.Collections.Generic.IList<int> path) { }
        public IndexPath(System.Collections.Generic.IEnumerable<int> path, bool isReversed) { }
        public int Count { get; }
        public int this[int index] { get; set; }
        public int CompareTo(JetBrains.UI.Avalon.TreeListView.Implementation.IndexPath other) { }
        public bool Equals(JetBrains.UI.Avalon.TreeListView.Implementation.IndexPath other) { }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IEnumerator<int> GetEnumerator() { }
        public override int GetHashCode() { }
    }
    public class ItemsSourceTreeModel : JetBrains.UI.Avalon.TreeListView.Implementation.TreeModelChangeTrackerBase, JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider
    {
        public ItemsSourceTreeModel(System.Collections.IList roots, System.Windows.Data.Binding childrenBinding) { }
        public ItemsSourceTreeModel(System.Collections.IList roots, System.Windows.Data.Binding childrenBinding, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Data.Binding hasChildrenBinding) { }
        public virtual object Root { get; }
        public override void FinishTracking(object item) { }
        public JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker GetChangeTracker() { }
        public virtual System.Collections.IList GetChildren(object parent) { }
        public virtual System.Collections.Generic.IEqualityComparer<object> GetCustomComparer() { }
        public JetBrains.UI.Avalon.TreeListView.Contracts.ITreeStateRestoreSupportSimple GetStateRestoreSupport() { }
        public virtual bool HasChildren(object model) { }
        public override void StartTracking(object item) { }
        public void UpdateHasChildrenBinding(System.Windows.Data.Binding hasChildrenBinding) { }
    }
    public abstract class ModelVisitor
    {
        protected System.Collections.Generic.IEqualityComparer<object> Comparer { get; }
        protected virtual JetBrains.UI.Avalon.TreeListView.Implementation.ModelVisitor.VisitResult OnBeforeVisit(object root, JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider model, System.Collections.Generic.List<object> parentPath, System.Collections.Generic.HashSet<object> visited) { }
        protected virtual JetBrains.UI.Avalon.TreeListView.Implementation.ModelVisitor.VisitResult OnVisit(object root, JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider model, System.Collections.Generic.List<object> path, System.Collections.Generic.HashSet<object> visited) { }
        public void Visit(JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider model) { }
        protected enum VisitResult
        {
            Finish = 0,
            Continue = 1,
        }
    }
    public class SelectNodesVisitor : JetBrains.UI.Avalon.TreeListView.Implementation.ModelVisitor
    {
        public SelectNodesVisitor(JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider treeNodeStateProvider, System.Func<object, bool> shouldSelect) { }
        protected override JetBrains.UI.Avalon.TreeListView.Implementation.ModelVisitor.VisitResult OnBeforeVisit(object root, JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider model, System.Collections.Generic.List<object> parentPath, System.Collections.Generic.HashSet<object> visited) { }
        protected override JetBrains.UI.Avalon.TreeListView.Implementation.ModelVisitor.VisitResult OnVisit(object root, JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider model, System.Collections.Generic.List<object> path, System.Collections.Generic.HashSet<object> visited) { }
    }
    public abstract class TreeModelChangeTrackerBase : JetBrains.UI.Avalon.TreeListView.Contracts.IIterativeTreeModelChangeTracker, JetBrains.UI.Avalon.TreeListView.Contracts.ITrackingAware, JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker
    {
        public event System.Action<JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker> ModelChanged;
        public event System.Action<JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker> ModelChanging;
        public event JetBrains.UI.Avalon.TreeListView.Contracts.InsertRemoveChangeDelegate NotifyInsert;
        public event JetBrains.UI.Avalon.TreeListView.Contracts.InsertRemoveChangeDelegate NotifyRemove;
        public event JetBrains.UI.Avalon.TreeListView.Contracts.ReplaceChangeDelegate NotifyReplace;
        public event JetBrains.UI.Avalon.TreeListView.Contracts.ResetChangeDelegate NotifyReset;
        public abstract void FinishTracking(object item);
        protected virtual void OnModelChanged() { }
        protected virtual void OnModelChanging() { }
        protected virtual void OnNotifyInsert(object owner, int offset, int count) { }
        protected virtual void OnNotifyRemove(object owner, int offset, int count) { }
        protected virtual void OnNotifyReplace(object owner, int offset, int count) { }
        protected virtual void OnNotifyReset(object owner, JetBrains.UI.Avalon.TreeListView.Contracts.ResetType arg) { }
        public abstract void StartTracking(object item);
    }
    [System.Diagnostics.DebuggerDisplayAttribute("{Count}")]
    public class TreeToListAdapter : JetBrains.UI.Avalon.TreeListView.ReadOnlyListAdapterBase<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState>, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.INotifyPropertyChanged
    {
        public TreeToListAdapter(JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider treeNodeStateProvider) { }
        public int CacheThreshold { get; set; }
        public override int Count { get; }
        public override JetBrains.UI.Avalon.TreeListView.Contracts.INodeState this[int index] { get; set; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider Provider { get; }
        public bool UseCaching { get; set; }
        public event System.Collections.Specialized.NotifyCollectionChangedEventHandler CollectionChanged;
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        public override bool Contains(object value) { }
        public override bool Contains(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState item) { }
        public override int IndexOf(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState item) { }
        public void OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        public void OnPropertyChanged(string propertyName) { }
    }
}
namespace JetBrains.UI.Avalon.TreeListView.Implementation.VirtualData
{
    
    public class DataVirtualizingNodeStateProvider : JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider
    {
        public DataVirtualizingNodeStateProvider(JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider treeModelProvider) { }
        public JetBrains.UI.Avalon.TreeListView.Contracts.IFilterSortController FilterSortController { get; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider Model { get; set; }
        public System.IDisposable ModificationCookie { get; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.TreeNodeStateProviderOptions Options { get; set; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.INodeState Root { get; }
        public JetBrains.UI.Avalon.TreeListView.Contracts.ISelectionManager SelectionManager { get; }
        public int VisibleNodeCount { get; }
        public event System.Action<JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider> ItemsInvalidated;
        public event System.Action<JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider> VisibleRangeChanged;
        public event System.Action<JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider> VisibleRangeChanging;
        public event JetBrains.UI.Avalon.TreeListView.Implementation.VirtualData.RangeReplaceDelegate VisibleRangeReplaced;
        public JetBrains.UI.Avalon.TreeListView.Contracts.INodeState ByIndexPath(System.Collections.Generic.IEnumerable<int> path) { }
        public JetBrains.UI.Avalon.TreeListView.Contracts.INodeState ByObjectPath(System.Collections.Generic.IEnumerable<object> path) { }
        public void CollapseAll(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node) { }
        public void CollapseAll() { }
        public void ExpandAll(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node, System.Predicate<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> expandDescendants) { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> FetchRange(int offset, int count) { }
        public void SetIsExpanded(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState nodeState, bool state) { }
        public int TraverseIndex(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node) { }
        public int TraverseIndex(System.Collections.Generic.IEnumerable<int> indexPath) { }
    }
    public delegate void RangeReplaceDelegate(JetBrains.UI.Avalon.TreeListView.Contracts.ITreeNodeStateProvider sender, int offset, int oldLen, int newLen);
    public class RangeSetTracker
    {
        public RangeSetTracker() { }
        public System.Collections.Generic.IList<JetBrains.Util.TextRange> Ranges { get; }
        public void Clear() { }
        public bool Contains(int index) { }
        public void Invert(JetBrains.Util.TextRange range) { }
        public void SetOff(JetBrains.Util.TextRange range) { }
        public void SetOn(JetBrains.Util.TextRange range) { }
        public static void Split(JetBrains.Util.TextRange textRange, JetBrains.Util.TextRange range, out System.Nullable<> leftR, out System.Nullable<> rightR) { }
        public void UpdateRange(JetBrains.Util.TextRange oldRange, JetBrains.Util.TextRange newRange) { }
        public void UpdateRange(int offset, int oldLen, int newLen) { }
    }
    public class TraverseIndexSelectionManager : JetBrains.UI.Avalon.TreeListView.Contracts.ISelectionManager
    {
        public TraverseIndexSelectionManager(JetBrains.UI.Avalon.TreeListView.Implementation.VirtualData.DataVirtualizingNodeStateProvider provider) { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Avalon.TreeListView.Contracts.INodeState> SelectedNodes { get; }
        public event JetBrains.UI.Avalon.TreeListView.Contracts.SelectionChangedDelegate SelectionChangeBegin;
        public event JetBrains.UI.Avalon.TreeListView.Contracts.SelectionChangedDelegate SelectionChangeEnd;
        public void Clear() { }
        public bool IsSelected(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState node) { }
        public void OnSelectionChangeBegin() { }
        public void OnSelectionChangeEnd() { }
        public void SetSelection(JetBrains.UI.Avalon.TreeListView.Contracts.INodeState start, JetBrains.UI.Avalon.TreeListView.Contracts.INodeState finish, JetBrains.UI.Avalon.TreeListView.Contracts.SelectionOperation operation) { }
    }
}
namespace JetBrains.UI.Behavior
{
    
    public class static AvalonBehaviorHelpers
    {
        public static readonly System.Windows.DependencyProperty AvalonBehaviorStateProperty;
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.PropertyChangedCallback GetPropertyChangedCallback<TValue, TElement>([JetBrains.Annotations.NotNullAttribute()] string sName, [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.DataFlow.Lifetime, TValue, TElement> FBehave)
        
            where TElement : System.Windows.FrameworkElement { }
        public static System.Windows.DependencyProperty RegisterBehavior<TValue, TOwningClass, TElement>([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.DataFlow.Lifetime, TValue, TElement> FBehave)
        
        
            where TElement : System.Windows.FrameworkElement { }
        public static System.Windows.DependencyProperty RegisterBehavior<TValue, TOwningClass>([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.DataFlow.Lifetime, TValue, System.Windows.FrameworkElement> FBehave) { }
        public static System.Windows.DependencyProperty RegisterOnOffBehavior<TOwningClass>([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.DataFlow.Lifetime, System.Windows.FrameworkElement> FBehave) { }
    }
    public class HierarchicalFocusScopeRootBehavior
    {
        public static readonly System.Windows.DependencyProperty HierarchicalFocusScopeRootTokensProperty;
        public static readonly System.Windows.DependencyProperty IsHierarchicalFocusScopeRootProperty;
        public static bool GetIsHierarchicalFocusScopeRoot(System.Windows.FrameworkElement element) { }
        public static void SetIsHierarchicalFocusScopeRoot(System.Windows.FrameworkElement element, bool value) { }
        public static void SetIsHierarchicalFocusScopeRoot([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.FrameworkElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.StandardPreconditions.ReadonlyToken tokenOwner) { }
    }
}
namespace JetBrains.UI.BulbMenu
{
    
    public class static AnchorPosition
    {
        public static JetBrains.UI.BulbMenu.IAnchorPosition NewBasePosition() { }
        public static JetBrains.UI.BulbMenu.IAnchorPosition NewStringPosition(string position) { }
        public static JetBrains.UI.BulbMenu.IAnchorPosition NewStringSubposition(this JetBrains.UI.BulbMenu.IAnchorPosition position, string positionName) { }
        public static JetBrains.UI.BulbMenu.IAnchorPosition NewSubposition(this JetBrains.UI.BulbMenu.IAnchorPosition position) { }
    }
    public class AnchorPositionNumeric : JetBrains.UI.BulbMenu.IAnchorPosition, System.IComparable<JetBrains.UI.BulbMenu.IAnchorPosition>
    {
        public AnchorPositionNumeric() { }
        public int CompareTo(JetBrains.UI.BulbMenu.IAnchorPosition other) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.UI.BulbMenu.IAnchorPosition GetNext() { }
        public override string ToString() { }
    }
    public class AnchorsTrieNode
    {
        public AnchorsTrieNode(JetBrains.UI.BulbMenu.IAnchor anchor) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.BulbMenu.IAnchor Anchor { get; set; }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.BulbMenu.IAnchor> Anchors { get; }
        public System.Collections.Generic.List<JetBrains.UI.BulbMenu.BulbMenuItem> ChildrenItems { get; set; }
        public JetBrains.UI.BulbMenu.AnchorsTrieNode Parent { get; }
        public System.Collections.Generic.List<JetBrains.UI.BulbMenu.IAnchor> SortedAnchors { get; }
        public JetBrains.UI.BulbMenu.AnchorsTrieNode GetChildNode(JetBrains.UI.BulbMenu.IAnchor anchor) { }
        public JetBrains.UI.BulbMenu.AnchorsTrieNode GetOrCreateChild(JetBrains.UI.BulbMenu.IAnchor anchor) { }
        public void SortSubitems() { }
    }
    public class BuilbItemPresentation : JetBrains.UI.BulbMenu.IBuilbItemPresentation
    {
        public BuilbItemPresentation(JetBrains.UI.RichText.RichText richText, JetBrains.UI.Icons.IconId iconId) { }
        public JetBrains.UI.Icons.IconId IconId { get; }
        public JetBrains.UI.RichText.RichText RichText { get; }
    }
    public class BulbActionKey
    {
        public BulbActionKey() { }
        public BulbActionKey([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.BulbMenu.BulbActionKey ownerKey, JetBrains.UI.BulbMenu.IAnchor anchor) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.BulbMenu.IAnchor Anchor { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.BulbMenu.IExecutableItem Executable { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.BulbMenu.IAnchor GroupingAnchor { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Icons.IconId IconId { get; set; }
        public bool IsSeparator { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.BulbMenu.BulbActionKey ParentKey { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.RichText.RichText RichText { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.List<JetBrains.UI.BulbMenu.BulbActionKey> Subitems { get; }
        public void Clicked() { }
        public void DescribeOn(JetBrains.UI.PopupMenu.IMenuItemDescriptor descriptor) { }
        public override string ToString() { }
        public void WriteTo(System.IO.TextWriter writer, string indent) { }
    }
    public class BulbKeysBuilder
    {
        public System.Collections.Generic.ICollection<JetBrains.UI.BulbMenu.BulbActionKey> BuildMenuKeys(System.Collections.Generic.IEnumerable<JetBrains.UI.BulbMenu.BulbMenuItem> menuItems) { }
    }
    public class static BulbMenuAnchorPositions
    {
        public static readonly JetBrains.UI.BulbMenu.IAnchor FirstClassContextItems;
        public static readonly JetBrains.UI.BulbMenu.IAnchorPosition FirstClassContextItemsPosition;
        public static readonly JetBrains.UI.BulbMenu.IAnchorPosition PermanentBackgroundItemPosition;
        public static readonly JetBrains.UI.BulbMenu.IAnchor PermanentBackgroundItems;
        public static readonly JetBrains.UI.BulbMenu.IAnchor PermanentItem;
        public static readonly JetBrains.UI.BulbMenu.IAnchorPosition PermanentItemPosition;
        public static readonly JetBrains.UI.BulbMenu.IAnchor SecondClassContextItems;
        public static readonly JetBrains.UI.BulbMenu.IAnchorPosition SecondClassContextItemsPosition;
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class BulbMenuComponent
    {
        public readonly JetBrains.DataFlow.ISignal<bool> BeforeActionExecuted;
        public readonly JetBrains.DataFlow.ISignal<bool> BeforeMenuShow;
        public BulbMenuComponent(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.IUIApplication environment, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, JetBrains.Application.IShellLocks locks) { }
        public JetBrains.UI.Application.IUIApplication Environment { get; }
        public void ShowBulbMenu(System.Collections.Generic.IEnumerable<JetBrains.UI.BulbMenu.BulbMenuItem> menuItems, JetBrains.UI.PopupWindowManager.PopupWindowContextSource context, System.Func<JetBrains.DataFlow.Lifetime, JetBrains.CommonControls.IWindowlessControl> getCaptionControl = null, System.Action<JetBrains.DataFlow.Lifetime> beforeShow = null) { }
        public void ShowBulbMenu(System.Collections.Generic.ICollection<JetBrains.UI.BulbMenu.BulbActionKey> keys, JetBrains.UI.PopupWindowManager.PopupWindowContextSource context, System.Func<JetBrains.DataFlow.Lifetime, JetBrains.CommonControls.IWindowlessControl> getCaptionControl = null, System.Action<JetBrains.DataFlow.Lifetime> beforeShow = null) { }
    }
    public class BulbMenuItem : JetBrains.UI.BulbMenu.IBulbMenuItem
    {
        public BulbMenuItem(JetBrains.UI.BulbMenu.IExecutableItem bulbAction, JetBrains.UI.RichText.RichText richText, JetBrains.UI.Icons.IconId iconId, JetBrains.UI.BulbMenu.IAnchor anchor, bool autoExecuteSingleItem = False) { }
        public JetBrains.UI.BulbMenu.IAnchor Anchor { get; }
        public bool AutoExecuteSingleItem { get; }
        public JetBrains.UI.BulbMenu.IExecutableItem ExecutableItem { get; }
        public JetBrains.UI.Icons.IconId IconId { get; }
        public JetBrains.UI.RichText.RichText RichText { get; }
    }
    public class ExecutableGroupAnchor : JetBrains.UI.BulbMenu.IAnchor
    {
        public ExecutableGroupAnchor(JetBrains.UI.BulbMenu.IAnchor ownerAnchor, JetBrains.UI.BulbMenu.IAnchorPosition position, object identity = null, bool duplicateFirstItem = True) { }
        public JetBrains.UI.BulbMenu.IAnchor OwnerAnchor { get; }
        public JetBrains.UI.BulbMenu.IAnchorPosition Position { get; }
        public JetBrains.UI.BulbMenu.BulbActionKey BuildMenuKey(JetBrains.UI.BulbMenu.IAnchor ownerGroupingAnchor, JetBrains.UI.BulbMenu.BulbActionKey ownerKey, out JetBrains.UI.BulbMenu.IAnchor groupingAnchor) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public void PostInitMenuKeys(JetBrains.UI.BulbMenu.AnchorsTrieNode node) { }
    }
    public class ExecutableItem : JetBrains.UI.BulbMenu.IExecutableItem
    {
        public ExecutableItem([JetBrains.Annotations.NotNullAttribute()] System.Action action) { }
        public void Execute() { }
    }
    public interface IAnchor
    {
        JetBrains.UI.BulbMenu.IAnchor OwnerAnchor { get; }
        JetBrains.UI.BulbMenu.IAnchorPosition Position { get; }
        JetBrains.UI.BulbMenu.BulbActionKey BuildMenuKey(JetBrains.UI.BulbMenu.IAnchor ownerGroupingAnchor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.BulbMenu.BulbActionKey key, out JetBrains.UI.BulbMenu.IAnchor groupingAnchor);
        void PostInitMenuKeys(JetBrains.UI.BulbMenu.AnchorsTrieNode node);
    }
    public interface IAnchorPosition : System.IComparable<JetBrains.UI.BulbMenu.IAnchorPosition>
    {
        JetBrains.UI.BulbMenu.IAnchorPosition GetNext();
    }
    public interface IBuilbItemPresentation
    {
        JetBrains.UI.Icons.IconId IconId { get; }
        JetBrains.UI.RichText.RichText RichText { get; }
    }
    public interface IBulbItemRichText
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.RichText.RichText RichText { get; }
    }
    public interface IBulbMenuItem
    {
        JetBrains.UI.BulbMenu.IAnchor Anchor { get; }
        JetBrains.UI.BulbMenu.IExecutableItem ExecutableItem { get; }
        JetBrains.UI.Icons.IconId IconId { get; }
        JetBrains.UI.RichText.RichText RichText { get; }
    }
    public interface IExecutableItem
    {
        void Execute();
    }
    public class InvisibleAnchor : JetBrains.UI.BulbMenu.IAnchor
    {
        public InvisibleAnchor(JetBrains.UI.BulbMenu.IAnchorPosition position, JetBrains.UI.BulbMenu.IAnchor ownerAnchor, bool separate = False) { }
        public JetBrains.UI.BulbMenu.IAnchor OwnerAnchor { get; }
        public JetBrains.UI.BulbMenu.IAnchorPosition Position { get; }
        public bool Separate { get; }
        public JetBrains.UI.BulbMenu.BulbActionKey BuildMenuKey(JetBrains.UI.BulbMenu.IAnchor ownerGroupingAnchor, JetBrains.UI.BulbMenu.BulbActionKey key, out JetBrains.UI.BulbMenu.IAnchor groupingAnchor) { }
        public void PostInitMenuKeys(JetBrains.UI.BulbMenu.AnchorsTrieNode node) { }
    }
    public class StaticAnchor : JetBrains.UI.BulbMenu.IAnchor
    {
        public StaticAnchor(JetBrains.UI.BulbMenu.IBuilbItemPresentation itemPresentation, JetBrains.UI.BulbMenu.IAnchorPosition position, JetBrains.UI.BulbMenu.IAnchor ownerAnchor, object identity = null) { }
        public JetBrains.UI.BulbMenu.IBuilbItemPresentation ItemPresentation { get; }
        public JetBrains.UI.BulbMenu.IAnchor OwnerAnchor { get; }
        public JetBrains.UI.BulbMenu.IAnchorPosition Position { get; }
        public JetBrains.UI.BulbMenu.BulbActionKey BuildMenuKey(JetBrains.UI.BulbMenu.IAnchor ownerGroupingAnchor, JetBrains.UI.BulbMenu.BulbActionKey parentKey, out JetBrains.UI.BulbMenu.IAnchor groupingAnchor) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public void PostInitMenuKeys(JetBrains.UI.BulbMenu.AnchorsTrieNode node) { }
    }
}
namespace JetBrains.UI.CommonControls
{
    
    public class static AutomationProvidersRegistry
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.DataFlow.IDictionaryEvents<System.Type, System.Func<JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest, System.IntPtr>> Items;
        public static bool TryHandleWindowsMessage([JetBrains.Annotations.NotNullAttribute()] object owner, ref System.Windows.Forms.Message msg) { }
        public struct AutomationProviderRequest
        {
            public System.IntPtr Hwnd;
            public object Owner;
            public System.IntPtr WParam;
            public System.IntPtr LParam { get; }
        }
    }
    public class CheckBoxDisabledNoCheck : System.Windows.Forms.CheckBox
    {
        public readonly JetBrains.DataFlow.Property<bool> CheckedLogicallyProperty;
        public readonly JetBrains.DataFlow.Property<bool> CheckedVisuallyProperty;
        public readonly JetBrains.DataFlow.Property<bool> IsEnabled;
        public readonly JetBrains.DataFlow.Property<bool> IsVisible;
        public readonly JetBrains.DataFlow.Property<string> Text;
        public CheckBoxDisabledNoCheck([JetBrains.Annotations.NotNullAttribute()] string text) { }
        public CheckBoxDisabledNoCheck() { }
        public bool CheckedLogically { get; set; }
        public bool CheckedVisually { get; }
        protected override void OnCheckedChanged(System.EventArgs e) { }
        protected override void OnEnabledChanged(System.EventArgs e) { }
    }
    public class EditboxGlyph : System.Windows.Forms.Label, JetBrains.UI.Tooltips.ITooltipProvider
    {
        public EditboxGlyph([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.TextBox parent, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId glyph, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Icons.IconId Glyph { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Tooltips.ITooltipProvider TooltipProvider { get; set; }
        public override System.Drawing.Size GetPreferredSize(System.Drawing.Size proposedSize) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs args) { }
    }
    public class GoTransparentOnControlKey
    {
        public GoTransparentOnControlKey([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.IWin32Window window, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading invocator) { }
        public GoTransparentOnControlKey([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Void* hwnd, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading invocator) { }
    }
    public class LinkLabel : System.Windows.Forms.LinkLabel, JetBrains.UI.Tooltips.ITooltipProvider
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ISignal<JetBrains.UI.PopupMenu.JetPopupMenu> ContextMenu;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ISimpleSignal LinkClicked;
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.RichText.RichTextBlock ToolTip;
        public LinkLabel([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] System.Uri uri, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.OpensUri opensUri, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus) { }
        public LinkLabel([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] System.Action action, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus) { }
        public LinkLabel([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus) { }
        public LinkLabel([JetBrains.Annotations.NotNullAttribute()] System.Uri uri, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.OpensUri opensUri, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        protected override void OnClick(System.EventArgs e) { }
        protected override void OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs args) { }
        public void ShowContextMenu() { }
        protected override void WndProc(ref System.Windows.Forms.Message msg) { }
    }
    public class RadioGroup<TValue> : JetBrains.UI.CommonControls.SafeFlowLayoutPanel
    
    {
        public readonly JetBrains.DataFlow.Property<bool> HasCheckbox;
        public readonly JetBrains.DataFlow.Property<bool> IsEnabled;
        public readonly JetBrains.DataFlow.Property<bool> IsVisible;
        public readonly JetBrains.DataFlow.Property<string> LabelText;
        protected readonly JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck myCheckbox;
        protected readonly System.Windows.Forms.Label myLabel;
        public readonly JetBrains.DataFlow.Property<TValue> NothingSelectedValue;
        public readonly JetBrains.DataFlow.Property<System.Windows.Forms.Padding> RadioButtonsAdditionalMargin;
        public readonly JetBrains.DataFlow.Property<TValue> Value;
        public RadioGroup(JetBrains.UI.Application.IUIApplication environment) { }
        public void AddComment([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control) { }
        public void AddDependent([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control) { }
        public void AddRadioButton([JetBrains.Annotations.NotNullAttribute()] string text, TValue value) { }
        public System.Windows.Forms.RadioButton AddRadioButton([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.CanBeNullAttribute()] System.Drawing.Image image, TValue value) { }
        protected void AddRef(System.IDisposable @ref) { }
        protected override void Dispose(bool disposing) { }
    }
    public abstract class SafeFlowLayoutPanel : System.Windows.Forms.FlowLayoutPanel, JetBrains.UI.CommonControls.ITopLevelOwner
    {
        protected SafeFlowLayoutPanel([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplication environment) { }
        public JetBrains.UI.Application.IUIApplication Environment { get; }
        protected override void Dispose(bool disposing) { }
    }
    public abstract class SafePanel : System.Windows.Forms.Panel, JetBrains.UI.CommonControls.ITopLevelOwner
    {
        protected SafePanel([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplicationSimple uiapp) { }
        protected override void Dispose(bool disposing) { }
    }
    public class SafeTableLayoutPanel : System.Windows.Forms.TableLayoutPanel, JetBrains.UI.CommonControls.ITopLevelOwner
    {
        protected SafeTableLayoutPanel([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplication environment) { }
        public JetBrains.UI.Application.IUIApplication Environment { get; }
        protected override void Dispose(bool disposing) { }
    }
    public abstract class SafeTreeList : DevExpress.XtraTreeList.TreeList, JetBrains.UI.CommonControls.ITopLevelOwner
    {
        protected SafeTreeList([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplication environment) { }
        public JetBrains.UI.Application.IUIApplication Environment { get; }
        protected override void Dispose(bool disposing) { }
    }
    public abstract class SafeUserControl : System.Windows.Forms.UserControl, JetBrains.UI.CommonControls.ITopLevelOwner
    {
        protected SafeUserControl([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplication environment) { }
        public JetBrains.UI.Application.IUIApplication Environment { get; }
        protected override void Dispose(bool disposing) { }
    }
    public class Spacer : System.Windows.Forms.Control
    {
        public Spacer() { }
        public override System.Drawing.Size GetPreferredSize(System.Drawing.Size proposedSize) { }
    }
    public class StatusBarProgressIndicator : JetBrains.UI.StatusBar.JetStatusBarIndicator, JetBrains.CommonControls.IConstrainableControl, JetBrains.CommonControls.IWindowlessControl, JetBrains.UI.Tooltips.ITooltipProvider
    {
        public static readonly string DefaultText;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.Icons.IconId> Icon;
        public readonly JetBrains.DataFlow.Property<bool> IsVisible;
        public readonly JetBrains.DataFlow.IProperty<string> Text;
        public readonly JetBrains.DataFlow.IProperty<double> Value;
        public StatusBarProgressIndicator([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager thicman, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.StatusBar.IStatusBar statusBar, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor product) { }
        public bool AutoActivate { get; set; }
        public System.Drawing.Rectangle Bounds { get; }
        public JetBrains.DataFlow.ISimpleSignal GottenDirty { get; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        protected void OnUpdateDesiredSize(JetBrains.UI.Icons.IThemedIconManager thicman) { }
        public void Paint(System.Drawing.Graphics g) { }
        public void SetBounds(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Rectangle bounds) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
    }
    [System.ObsoleteAttribute("Task executors are modal, this one does not seem to be. Just create a status-base" +
        "d progress and make use of it.")]
    public class StatusBarTaskExecutor : JetBrains.Application.Progress.ITaskExecutor, System.IDisposable
    {
        public StatusBarTaskExecutor(JetBrains.Threading.IThreading getComponent, JetBrains.UI.Icons.IThemedIconManager themedIconManager, JetBrains.UI.StatusBar.IStatusBar statusBar, JetBrains.Application.IApplicationDescriptor applicationDescriptor) { }
        public void Cancel() { }
        public void Dispose() { }
        public bool ExecuteTask(string name, JetBrains.Application.Progress.TaskCancelable cancelable, System.Action<JetBrains.Application.Progress.IProgressIndicator> task) { }
    }
    public class TableLayoutPanelColored : JetBrains.UI.CommonControls.SafeTableLayoutPanel
    {
        public TableLayoutPanelColored(System.Drawing.Color fillcolor, JetBrains.UI.Application.IUIApplication environment) { }
        public System.Drawing.Color FillColor { get; set; }
        protected override void OnPaintBackground(System.Windows.Forms.PaintEventArgs args) { }
    }
}
namespace JetBrains.UI.CommonControls.Controls.Browser
{
    
    public class static HtmlElementEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.IDisposable AttachEventsDeferred([JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.Browser.HtmlViewControl html, [JetBrains.Annotations.NotNullAttribute()] string sHtmlElementId, [JetBrains.Annotations.NotNullAttribute()] System.Action<System.Windows.Forms.HtmlElement> FOnEvent, [JetBrains.Annotations.NotNullAttribute()] string sEventName) { }
        public static System.Windows.Forms.HtmlElement CreateCheckbox([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.HtmlDocument htmlDoc, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IProperty<bool> propIsChecked, [JetBrains.Annotations.NotNullAttribute()] string label) { }
        public static T GetAttribute<T>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Forms.HtmlElement htmlElement, [JetBrains.Annotations.NotNullAttribute()] string name) { }
        public static object GetComObject([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Forms.HtmlElement htmlElement) { }
        public static void SetAttribute([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Forms.HtmlElement htmlElement, [JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] object value) { }
    }
    public class MshtmlBrowserControl2 : System.Windows.Forms.WebBrowser
    {
        public MshtmlBrowserControl2() { }
        protected override System.Windows.Forms.WebBrowserSiteBase CreateWebBrowserSiteBase() { }
        public new bool ShowContextMenu(int x, int y) { }
        public struct MSG
        {
            public System.IntPtr hwnd;
            public System.IntPtr lParam;
            public int message;
            public int pt_x;
            public int pt_y;
            public int time;
            public System.IntPtr wParam;
        }
        [System.Runtime.InteropServices.ComVisibleAttribute(true)]
        protected class MshtmlSite2 : System.Windows.Forms.WebBrowser.WebBrowserSite, JetBrains.UI.CommonControls.Controls.Browser.Interop.IDocHostUIHandler, JetBrains.UI.CommonControls.Controls.Browser.Interop.IDocHostUIHandler2
        {
            public MshtmlSite2(JetBrains.UI.CommonControls.Controls.Browser.MshtmlBrowserControl2 browser) { }
            public int EnableModeless(bool fEnable) { }
            public int FilterDataObject(object pDO, out object ppDORet) { }
            public int GetDropTarget(object ptr1, out object ptr2) { }
            public int GetExternal(out object ppDispatch) { }
            public int GetHostInfo(ref JetBrains.UI.CommonControls.Controls.Browser.Interop.DOCHOSTUIINFO info) { }
            public int GetOptionKeyPath(out string pbstrKey, int dw) { }
            public int GetOverrideKeyPath(out string pchKey, uint dw) { }
            public int HideUI() { }
            public int OnDocWindowActivate(bool fActivate) { }
            public int OnFrameWindowActivate(bool fActivate) { }
            public int ResizeBorder(JetBrains.UI.CommonControls.Controls.Browser.Interop.COMRECT rect, object ptr1, bool fFrameWindow) { }
            public int ShowContextMenu(int dwID, ref JetBrains.Interop.WinApi.POINTAPI pt, object pcmdtReserved, object pdispReserved) { }
            public int ShowUI(int dwID, object ptr1, object ptr2, object ptr3, object ptr4) { }
            public int TranslateAccelerator(ref JetBrains.UI.CommonControls.Controls.Browser.Interop.MSG msg, ref System.Guid group, int nCmdID) { }
            public int TranslateUrl(int dwTranslate, string strURLIn, out string pstrURLOut) { }
            public int UpdateUI() { }
        }
    }
}
namespace JetBrains.UI.CommonControls.Controls.Browser.Interop
{
    
    public class COMRECT
    {
        public int bottom;
        public int left;
        public int right;
        public int top;
        public COMRECT(System.Drawing.Rectangle r) { }
        public COMRECT(int left, int top, int right, int bottom) { }
        public static JetBrains.UI.CommonControls.Controls.Browser.Interop.COMRECT FromXYWH(int x, int y, int width, int height) { }
        public override string ToString() { }
    }
    [System.Runtime.InteropServices.ComConversionLossAttribute()]
    public struct DOCHOSTUIINFO
    {
        public uint cbSize;
        public uint dwDoubleClick;
        public uint dwFlags;
        [System.Runtime.InteropServices.ComConversionLossAttribute()]
        public System.IntPtr pchHostCss;
        [System.Runtime.InteropServices.ComConversionLossAttribute()]
        public System.IntPtr pchHostNS;
    }
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.Runtime.InteropServices.GuidAttribute("79EAC9EE-BAF9-11CE-8C82-00AA004BA90B")]
    [System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
    public interface IInternetSecurityManager
    {
        int GetSecurityId(string pwszUrl, out System.IntPtr pbSecurityId, out uint pcbSecurityId, ref uint dwReserved);
        int GetSecuritySite(out System.IntPtr pSite);
        int GetZoneMappings(uint dwZone, out System.Runtime.InteropServices.ComTypes.IEnumString ppenumString, uint dwFlags);
        int MapUrlToZone(string pwszUrl, out uint pdwZone, uint dwFlags);
        int ProcessUrlAction(string pwszUrl, uint dwAction, System.IntPtr pPolicy, uint cbPolicy, System.IntPtr pContext, uint cbContext, uint dwFlags, uint dwReserved);
        int QueryCustomPolicy(string pwszUrl, ref System.Guid guidKey, out System.IntPtr ppPolicy, out uint pcbPolicy, System.IntPtr pContext, uint cbContext, uint dwReserved);
        int SetSecuritySite(System.IntPtr pSite);
        int SetZoneMapping(uint dwZone, string lpszPattern, uint dwFlags);
    }
    public class static InterfacesID
    {
        public const string InternetSecurityManager = "79EAC9EE-BAF9-11CE-8C82-00AA004BA90B";
    }
    [System.Runtime.InteropServices.ComVisibleAttribute(true)]
    [System.Runtime.InteropServices.GuidAttribute("6d5140c1-7436-11ce-8034-00aa006009fa")]
    [System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
    public interface IServiceProvider
    {
        int QueryService(ref System.Guid guidService, ref System.Guid riid, out System.IntPtr ppvObject);
    }
    public struct MSG
    {
        public System.IntPtr hwnd;
        public System.IntPtr lParam;
        public int message;
        public int pt_x;
        public int pt_y;
        public int time;
        public System.IntPtr wParam;
    }
    public enum UrlPolicy : uint
    {
        ALLOW = 0u,
        QUERY = 1u,
        DISALLOW = 3u,
        ACTIVEX_CHECK_LIST = 65536u,
        CREDENTIALS_SILENT_LOGON_OK = 0u,
        CREDENTIALS_MUST_PROMPT_USER = 65536u,
        CREDENTIALS_CONDITIONAL_PROMPT = 131072u,
        CREDENTIALS_ANONYMOUS_ONLY = 196608u,
        AUTHENTICATE_CLEARTEXT_OK = 0u,
        AUTHENTICATE_CHALLENGE_RESPONSE = 65536u,
        AUTHENTICATE_MUTUAL_ONLY = 196608u,
        JAVA_PROHIBIT = 0u,
        JAVA_HIGH = 65536u,
        JAVA_MEDIUM = 131072u,
        JAVA_LOW = 196608u,
        JAVA_CUSTOM = 8388608u,
        CHANNEL_SOFTDIST_PROHIBIT = 65536u,
        CHANNEL_SOFTDIST_PRECACHE = 131072u,
        CHANNEL_SOFTDIST_AUTOINSTALL = 196608u,
        NOTIFY_ON_ALLOW = 16u,
        NOTIFY_ON_DISALLOW = 32u,
        LOG_ON_ALLOW = 64u,
        LOG_ON_DISALLOW = 128u,
        DONTCHECKDLGBOX = 256u,
    }
}
namespace JetBrains.UI.CommonControls.Controls
{
    
    public class FormOwnedByMainWindow : System.Windows.Forms.Form
    {
        public FormOwnedByMainWindow([JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window mainwin) { }
        protected override System.Windows.Forms.CreateParams CreateParams { get; }
    }
    public class SplitedButton : System.Windows.Forms.Button
    {
        public SplitedButton() { }
        [System.ComponentModel.CategoryAttribute("Split Button")]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the SplitButton always shows the drop down menu even if the but" +
            "ton part of the SplitButton is clicked.")]
        public bool AlwaysDropDown { get; set; }
        [System.ComponentModel.CategoryAttribute("Split Button")]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the SplitButton always shows the Hover image status in the spli" +
            "t part even if the button part of the SplitButton is hovered.")]
        public bool AlwaysHoverChange { get; set; }
        [System.ComponentModel.CategoryAttribute("Split Button")]
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the split rectange must be calculated (basing on Split image si" +
            "ze)")]
        public bool CalculateSplitRect { get; set; }
        [System.ComponentModel.CategoryAttribute("Split Button Images")]
        [System.ComponentModel.DefaultValueAttribute("")]
        [System.ComponentModel.DescriptionAttribute("The Clicked status image name in the ImageList.")]
        [System.ComponentModel.EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=2.0.0.0, Cul" +
            "ture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
        [System.ComponentModel.LocalizableAttribute(true)]
        [System.ComponentModel.RefreshPropertiesAttribute(System.ComponentModel.RefreshProperties.Repaint)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Forms.ImageKeyConverter))]
        public string ClickedImage { get; set; }
        [System.ComponentModel.CategoryAttribute("Split Button Images")]
        [System.ComponentModel.DefaultValueAttribute("")]
        [System.ComponentModel.DescriptionAttribute("The Disabled status image name in the ImageList.")]
        [System.ComponentModel.EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=2.0.0.0, Cul" +
            "ture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
        [System.ComponentModel.LocalizableAttribute(true)]
        [System.ComponentModel.RefreshPropertiesAttribute(System.ComponentModel.RefreshProperties.Repaint)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Forms.ImageKeyConverter))]
        public string DisabledImage { get; set; }
        [System.ComponentModel.CategoryAttribute("Behavior")]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the double click event is raised on the SplitButton")]
        public bool DoubleClickedEnabled { get; set; }
        [System.ComponentModel.CategoryAttribute("Split Button")]
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the split height must be filled to the button height even if th" +
            "e split image height is lower.")]
        public bool FillSplitHeight { get; set; }
        [System.ComponentModel.CategoryAttribute("Split Button Images")]
        [System.ComponentModel.DefaultValueAttribute("")]
        [System.ComponentModel.DescriptionAttribute("The Focused status image name in the ImageList.")]
        [System.ComponentModel.EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=2.0.0.0, Cul" +
            "ture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
        [System.ComponentModel.LocalizableAttribute(true)]
        [System.ComponentModel.RefreshPropertiesAttribute(System.ComponentModel.RefreshProperties.Repaint)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Forms.ImageKeyConverter))]
        public string FocusedImage { get; set; }
        [System.ComponentModel.CategoryAttribute("Split Button Images")]
        [System.ComponentModel.DefaultValueAttribute("")]
        [System.ComponentModel.DescriptionAttribute("The Hover status image name in the ImageList.")]
        [System.ComponentModel.EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=2.0.0.0, Cul" +
            "ture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
        [System.ComponentModel.LocalizableAttribute(true)]
        [System.ComponentModel.RefreshPropertiesAttribute(System.ComponentModel.RefreshProperties.Repaint)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Forms.ImageKeyConverter))]
        public string HoverImage { get; set; }
        [System.ComponentModel.CategoryAttribute("Split Button Images")]
        [System.ComponentModel.DefaultValueAttribute("")]
        [System.ComponentModel.DescriptionAttribute("The Normal status image name in the ImageList.")]
        [System.ComponentModel.EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=2.0.0.0, Cul" +
            "ture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]
        [System.ComponentModel.LocalizableAttribute(true)]
        [System.ComponentModel.RefreshPropertiesAttribute(System.ComponentModel.RefreshProperties.Repaint)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Forms.ImageKeyConverter))]
        public string NormalImage { get; set; }
        [System.ComponentModel.CategoryAttribute("Split Button")]
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("The split height (ignored if CalculateSplitRect is setted to true).")]
        public int SplitHeight { get; set; }
        [System.ComponentModel.CategoryAttribute("Split Button")]
        [System.ComponentModel.DefaultValueAttribute(0)]
        [System.ComponentModel.DescriptionAttribute("The split width (ignored if CalculateSplitRect is setted to true).")]
        public int SplitWidth { get; set; }
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.CategoryAttribute("Action")]
        [System.ComponentModel.DescriptionAttribute("Occurs when the button part of the SplitButton is clicked.")]
        public event System.EventHandler ButtonClick;
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.CategoryAttribute("Action")]
        [System.ComponentModel.DescriptionAttribute("Occurs when the button part of the SplitButton is clicked.")]
        public event System.EventHandler ButtonDoubleClick;
        protected override void Dispose(bool disposing) { }
        public System.Drawing.Rectangle GetImageRect(string imageKey) { }
        public bool MouseInSplit() { }
        protected override void OnClick(System.EventArgs e) { }
        protected override void OnCreateControl() { }
        protected override void OnDoubleClick(System.EventArgs e) { }
        protected override void OnEnabledChanged(System.EventArgs e) { }
        protected override void OnGotFocus(System.EventArgs e) { }
        protected override void OnLostFocus(System.EventArgs e) { }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs mevent) { }
        protected override void OnMouseLeave(System.EventArgs e) { }
        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs mevent) { }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs mevent) { }
        public bool PointInSplit(System.Drawing.Point pt) { }
    }
}
namespace JetBrains.UI.CommonControls.Fonts
{
    
    public abstract class FontsManager
    {
        protected FontsManager([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
        public virtual JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Fonts.EitherFont> DefaultCodeFont { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Fonts.EitherFont> DialogFont { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Fonts.EitherFont> ListFont { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Fonts.EitherFont> LookupFont { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Fonts.EitherFont> MenuFont { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Fonts.EitherFont> TipFont { get; }
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Components.ProgramConfigurations.NONE | JetBrains.Application.Components.ProgramConfigurations.STANDALONE | JetBrains.Application.Components.ProgramConfigurations.TEST | JetBrains.Application.Components.ProgramConfigurations.COMMAND_LINE | JetBrains.Application.Components.ProgramConfigurations.ALL)]
    public class FontsManagerImpl : JetBrains.UI.CommonControls.Fonts.FontsManager
    {
        public FontsManagerImpl(JetBrains.DataFlow.Lifetime lifetime) { }
    }
    public interface IFontsManager
    {
        JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Fonts.EitherFont> DefaultCodeFont { get; }
        JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Fonts.EitherFont> DialogFont { get; }
        JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Fonts.EitherFont> MenuFont { get; }
        JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Fonts.EitherFont> TipFont { get; }
    }
}
namespace JetBrains.UI.CommonControls.Utils
{
    
    public class static ControlUtil
    {
        public static System.Drawing.Rectangle CenterInMainWindow(System.Drawing.Size size, JetBrains.UI.Application.IMainWindow mainWindow) { }
        public static System.Drawing.Rectangle CenterInWindow(System.IntPtr hwndOwner, System.Drawing.Size size) { }
        public static System.Drawing.Rectangle FitToScreen(System.Drawing.Rectangle bounds) { }
        public static bool FocusChildControl(System.Windows.Forms.Control parent, bool tabStopOnly) { }
        public static bool FocusControl(System.Windows.Forms.Control control, bool tabStopOnly) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static System.Windows.Forms.Control GetControl(System.Void* hwnd) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static System.Windows.Forms.Control GetControlContainingFocus() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static System.Windows.Forms.Control GetControlContainingPoint(System.Drawing.Point screenPoint) { }
        public static System.Windows.Forms.Control GetParentControl(System.Windows.Forms.Control c) { }
        public static bool IsParent(System.Windows.Forms.Control parent, System.Windows.Forms.Control child) { }
        public static void SetControlBounds(System.Windows.Forms.Control c, System.Drawing.Point location, System.Drawing.Size size) { }
        public static void SetFocus(System.IntPtr handle) { }
    }
}
namespace JetBrains.UI.CommonDialogs
{
    
    public class PromptWinForm : System.Windows.Forms.Form
    {
        public PromptWinForm([JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window parentWindow, [JetBrains.Annotations.NotNullAttribute()] string title, [JetBrains.Annotations.NotNullAttribute()] string label, [JetBrains.Annotations.NotNullAttribute()] string defaultValue, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<string, string> validator, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.Validation.FormValidators formvalidators, JetBrains.UI.Application.IUIApplication environment) { }
        public string Value { get; }
        protected override void Dispose(bool disposing) { }
        public bool ShowDialog() { }
    }
}
namespace JetBrains.UI.Components.CustomListBox
{
    
    public enum DrawMode
    {
        Normal = 0,
        Selected = 1,
        Highlighted = 2,
    }
    public interface IItemPainter<T>
    
    {
        void Draw(T item, System.Drawing.Graphics g, System.Drawing.Rectangle rect, JetBrains.UI.Components.CustomListBox.DrawMode drawMode, bool hovered);
        System.Drawing.Size GetSize(T item, JetBrains.UI.IGraphicsContainer g);
        bool IsHandled(T item);
    }
}
namespace JetBrains.UI.Components.Fonts
{
    
    public class AvalonFont
    {
        public AvalonFont([JetBrains.Annotations.NotNullAttribute()] string fontFamilyName, float size, System.Windows.FontWeight weight, System.Windows.FontStyle style) { }
        public System.Windows.Media.FontFamily FontFamily { get; }
        public string FontFamilyName { get; }
        public float Size { get; }
        public System.Windows.FontStyle Style { get; }
        public System.Windows.FontWeight Weight { get; }
    }
    public class EitherFont
    {
        public EitherFont(System.Drawing.Font font) { }
        public EitherFont(JetBrains.UI.Components.Fonts.AvalonFont font) { }
        public JetBrains.UI.Components.Fonts.AvalonFont AvalonFont { get; }
        public System.Drawing.Font SystemDrawingFont { get; }
    }
    public class static EitherFontEx
    {
        public static void ApplyTo(this JetBrains.UI.Components.Fonts.EitherFont eitherFont, System.Windows.Controls.Control element) { }
    }
}
namespace JetBrains.UI.Components
{
    
    [JetBrains.Application.ShellComponentAttribute()]
    public class GetCursorPosWowFix
    {
        public GetCursorPosWowFix() { }
        public static bool IsEnvironmentAffected() { }
    }
    public class SaveStateCheckBox : System.Windows.Forms.CheckBox
    {
        public void Disable(bool check) { }
        public void Enable() { }
        protected override void OnCheckedChanged(System.EventArgs e) { }
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Sharing.Common, JetBrains.Application.Lifecycle.Deferred, JetBrains.Application.Creation.PrimaryThread, JetBrains.Application.Access.None)]
    public class SuspendFileSystemTrackerWhenInactive
    {
        public SuspendFileSystemTrackerWhenInactive([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.FileSystemTracker.IFileSystemTracker filetracker, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IIsApplicationActiveState activestate) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class UserActivityMonitor
    {
        public readonly JetBrains.DataFlow.SimpleSignal IncomingUserContextSwitchDetected;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ISimpleSignal UserContextSwitch;
        public UserActivityMonitor(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading invocator, JetBrains.UI.Application.IIsApplicationActiveState appactive) { }
        protected virtual void Init(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading invocator, JetBrains.UI.Application.IIsApplicationActiveState appactive) { }
    }
}
namespace JetBrains.UI.Components.ImageListButton
{
    
    public class ImageListButton : JetBrains.UI.CommonControls.SafeUserControl
    {
        public ImageListButton(JetBrains.UI.Application.IUIApplication environment) { }
        [System.ComponentModel.DefaultValueAttribute(-1)]
        public int DisabledImageIndex { get; set; }
        [System.ComponentModel.DefaultValueAttribute(-1)]
        public int HotImageIndex { get; set; }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Windows.Forms.ImageList ImageList { get; set; }
        [System.ComponentModel.DefaultValueAttribute(-1)]
        public int NormalImageIndex { get; set; }
        public int PressedImageIndex { get; set; }
        protected override void OnEnabledChanged(System.EventArgs e) { }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseEnter(System.EventArgs e) { }
        protected override void OnMouseLeave(System.EventArgs e) { }
        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs pe) { }
    }
}
namespace JetBrains.UI.Components.Separator
{
    
    public class Separator : System.Windows.Forms.Label
    {
        public Separator() { }
        protected override void Dispose(bool disposing) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs pe) { }
    }
}
namespace JetBrains.UI.Components.Theming
{
    
    public class ColorTheme
    {
        public ColorTheme() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public byte[] GetARGBColor(JetBrains.UI.Components.Theming.ThemeColor color) { }
        public System.Drawing.Color GetGDIColor(JetBrains.UI.Components.Theming.ThemeColor color) { }
        public System.Drawing.Color GetGDIColorBlended(JetBrains.UI.Components.Theming.ThemeColor source, JetBrains.UI.Components.Theming.ThemeColor destionation, double alpha) { }
        public void PopulateResourceDictionary(System.Windows.ResourceDictionary dict) { }
        public void SetGDIColor(JetBrains.UI.Components.Theming.ThemeColor color, System.Drawing.Color v) { }
        public void SetRawColor(JetBrains.UI.Components.Theming.ThemeColor color, byte[] argb) { }
    }
    public struct EitherColor : System.IEquatable<JetBrains.UI.Components.Theming.EitherColor>
    {
        public EitherColor(byte[] argb) { }
        public EitherColor(System.Drawing.Color color) { }
        public byte[] ARGB { get; }
        public System.Drawing.Color GDIColor { get; }
        public System.Windows.Media.Color WpfColor { get; }
        public bool Equals(JetBrains.UI.Components.Theming.EitherColor other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public interface IColorThemeManager
    {
        JetBrains.DataFlow.ISimpleSignal ColorThemeChanged { get; }
        JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Theming.EitherColor> CreateLiveColor([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Components.Theming.ThemeColor themeColor);
        JetBrains.UI.Components.Theming.ColorTheme GetCurrentColorTheme();
        void PrepareFrameworkElement(System.Windows.FrameworkElement element);
        void PrepareWinForm(JetBrains.DataFlow.Lifetime handleLifetime, System.IntPtr handle);
    }
    public interface IScreenResolution
    {
        JetBrains.Util.Interop.DpiResolution ScreenResolution { get; }
    }
    public interface IStatusBarColorsManager
    {
        JetBrains.Util.Pair<JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Theming.EitherColor>, JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Theming.EitherColor>> CurrentStatusBarColors { get; }
    }
    public interface IThemeColorFiller
    {
        void FillColorTheme(JetBrains.UI.Components.Theming.ColorTheme theme);
    }
    public class static IThemeManagerEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.DataFlow.IProperty<bool> IsDarkTheme([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Components.Theming.IColorThemeManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.DataFlow.IProperty<bool> IsMonochromeTheme([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Components.Theming.IColorThemeManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class StatusBarColorsManager : JetBrains.UI.Components.Theming.IStatusBarColorsManager
    {
        public StatusBarColorsManager(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Components.Theming.IColorThemeManager themeManager) { }
        public virtual JetBrains.Util.Pair<JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Theming.EitherColor>, JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Theming.EitherColor>> CurrentStatusBarColors { get; }
    }
    public enum SystemColor
    {
        ScrollBar = 0,
        Desktop = 1,
        ActiveCaption = 2,
        InactiveCaption = 3,
        Menu = 4,
        Window = 5,
        WindowFrame = 6,
        MenuText = 7,
        WindowText = 8,
        ActiveCaptionText = 9,
        ActiveBorder = 10,
        InactiveBorder = 11,
        AppWorkspace = 12,
        Highlight = 13,
        HighlightText = 14,
        Control = 15,
        ControlDark = 16,
        GrayText = 17,
        ControlText = 18,
        InactiveCaptionText = 19,
        ControlLightLight = 20,
        ControlDarkDark = 21,
        ControlLight = 22,
        InfoText = 23,
        Info = 24,
        HotTrack = 26,
        GradientActiveCaption = 27,
        GradientInactiveCaption = 28,
        MenuHighlight = 29,
        MenuBar = 30,
    }
    public class ThemeColor : JetBrains.Util.EnumPattern
    {
        public static readonly JetBrains.UI.Components.Theming.ThemeColor Background;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuBackgroundGradientBegin;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuBackgroundGradientEnd;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuForegroundInactive;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuForegroundMouseOver;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuIconBackgroundGradientBegin;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuIconBackgroundGradientEnd;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuIconBackgroundGradientMiddle;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuItemMouseOverBackgroundGradientBegin;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuItemMouseOverBackgroundGradientEnd;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuItemMouseOverBackgroundGradientMiddle1;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuItemMouseOverBackgroundGradientMiddle2;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuItemMouseOverBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuItemPressedBackgroundGradientBegin;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuItemPressedBackgroundGradientEnd;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuItemPressedBackgroundGradientMiddle;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuItemPressedBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ContextMenuSeparator;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor Control;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ControlLinkText;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ControlLinkTextPressed;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor DialogFooterBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor DialogFooterForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor DisabledText;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor EnvironmentBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor Highlight;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor HighlightText;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ScrollBarBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor SolutionWideAnalysisErrorsIndicatorBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor SolutionWideAnalysisErrorsIndicatorForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor SolutionWideAnalysisErrorsIndicatorSeparator;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor StatusBarBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor StatusBarForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripDisabledBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripDisabledBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripDisabledForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripItemActiveBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripItemActiveBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripItemActiveForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripItemBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripItemBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripItemForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripMouseOverBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripMouseOverBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TabStripMouseOverForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TextBoxBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarBackgroundGradientBegin;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarBackgroundGradientEnd;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarBackgroundGradientMiddle;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxCheckedBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxCheckedBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxCheckedForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxHoveredBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxHoveredBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxHoveredForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxItemSelectedBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxItemSelectedBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxItemSelectedForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxPopupBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxPopupBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarComboBoxPopupForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarItemCheckedBackgroundGradientBegin;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarItemCheckedBackgroundGradientEnd;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarItemCheckedBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarItemCheckedForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarItemHoveredBackgroundGradientBegin;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarItemHoveredBackgroundGradientEnd;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarItemHoveredBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarItemHoveredForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarItemPressedBackgroundGradientBegin;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarItemPressedBackgroundGradientEnd;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarItemPressedBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarItemPressedForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarSeparatorDark;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolbarSeparatorLight;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TooltipBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TooltipBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TooltipForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowSelectedActiveTreeItemBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowSelectedActiveTreeItemBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowSelectedActiveTreeItemForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowSelectedInactiveTreeItemBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowSelectedInactiveTreeItemBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowSelectedInactiveTreeItemForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowTreeBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowTreeForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowTreeHeaderBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowTreeHeaderBorder;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowTreeHeaderForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowTreeHeaderGlyph;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowTreeHeaderHoverBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowTreeHeaderHoverForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowTreeHeaderHoverGlyph;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowTreeHeaderPressedBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowTreeHeaderPressedForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor ToolWindowTreeHeaderPressedGlyph;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewBackground;
        public static readonly object TreeViewBackgroundBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewColumnBackground;
        public static readonly object TreeViewColumnBackgroundBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewColumnBorder;
        public static readonly object TreeViewColumnBorderBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewColumnForeground;
        public static readonly object TreeViewColumnForegroundBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewColumnMouseOverBackground;
        public static readonly object TreeViewColumnMouseOverBackgroundBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewColumnMouseOverBorder;
        public static readonly object TreeViewColumnMouseOverBorderBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewColumnMouseOverForeground;
        public static readonly object TreeViewColumnMouseOverForegroundBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewForeground;
        public static readonly object TreeViewForegroundBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewItemSelectedActiveBackground;
        public static readonly object TreeViewItemSelectedActiveBackgroundBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewItemSelectedActiveBorder;
        public static readonly object TreeViewItemSelectedActiveBorderBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewItemSelectedActiveForeground;
        public static readonly object TreeViewItemSelectedActiveForegroundBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewItemSelectedInactiveBackground;
        public static readonly object TreeViewItemSelectedInactiveBackgroundBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewItemSelectedInactiveBorder;
        public static readonly object TreeViewItemSelectedInactiveBorderBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor TreeViewItemSelectedInactiveForeground;
        public static readonly object TreeViewItemSelectedInactiveForegroundBrush;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor UnitTestSessionStatusStripBackground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor UnitTestSessionStatusStripForeground;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor Window;
        public static readonly JetBrains.UI.Components.Theming.ThemeColor WindowText;
        public ThemeColor([JetBrains.Annotations.NotNullAttribute()] string name, bool alphaAllowed = False, bool isBrushNeeded = False) { }
        public ThemeColor([JetBrains.Annotations.NotNullAttribute()] string name, System.Drawing.Color defaultColor, bool alphaAllowed = False, bool isBrushNeeded = False) { }
        public bool AlphaAllowed { get; }
        public object BrushKey { get; }
        public byte[] DefaultColor { get; }
        public static System.Collections.Generic.IEnumerable<JetBrains.UI.Components.Theming.ThemeColor> EnumerateColors() { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class ThemeManager : JetBrains.UI.Components.Theming.IColorThemeManager
    {
        public ThemeManager(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading threading, JetBrains.DataFlow.IViewable<JetBrains.UI.Components.Theming.IThemeColorFiller> fillers) { }
        public JetBrains.DataFlow.ISimpleSignal ColorThemeChanged { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Theming.EitherColor> CreateLiveColor(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Components.Theming.ThemeColor themeColor) { }
        protected virtual JetBrains.UI.Components.Theming.ColorTheme CreateTheme() { }
        protected void FireColorThemeChanged() { }
        public virtual JetBrains.UI.Components.Theming.ColorTheme GetCurrentColorTheme() { }
        public virtual void PrepareFrameworkElement(System.Windows.FrameworkElement element) { }
        public virtual void PrepareWinForm(JetBrains.DataFlow.Lifetime handleLifetime, System.IntPtr handle) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class ThemingAggregator : JetBrains.UI.CommonControls.Fonts.IFontsManager, JetBrains.UI.Components.Theming.IScreenResolution, JetBrains.UI.Icons.IThemedIconManager, JetBrains.UI.Theming.ITheming
    {
        public ThemingAggregator([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap iconowners, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.DataFlow.IViewable<JetBrains.UI.Icons.Settings.IThemedIconThemeOracle> themeoracles, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Components.Theming.IStatusBarColorsManager statusBarColorsManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Components.Theming.IColorThemeManager colorThemeManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.CommonControls.Fonts.FontsManager fontsman) { }
        public void PrepareFrameworkElement(System.Windows.FrameworkElement element) { }
        public void PrepareWinForm(JetBrains.DataFlow.Lifetime handleLifetime, System.IntPtr handle) { }
    }
}
namespace JetBrains.UI.Controls
{
    
    public class ActionBarAutomation : JetBrains.UI.Wpf.AAutomation
    {
        public readonly JetBrains.ActionManagement.IActionBarManager ActionBarManager;
        public readonly string ActionGroupId;
        public ActionBarAutomation([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionBarManager actionBarManager, [JetBrains.Annotations.NotNullAttribute()] string sActionGroupId) { }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class ActionBarView : System.Windows.Controls.Control, JetBrains.UI.Wpf.IView, JetBrains.UI.Wpf.IView<JetBrains.UI.Controls.ActionBarAutomation> { }
    public class ActionManagerToolBar : System.Windows.Controls.Control
    {
        public static readonly System.Windows.DependencyProperty ActionBarManagerProperty;
        public static readonly System.Windows.DependencyProperty ActionGroupIdProperty;
        public static readonly System.Windows.DependencyProperty ContextParentProperty;
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ActionManagement.IActionBarManager ActionBarManager { get; set; }
        public string ActionGroupId { get; set; }
        public System.Windows.UIElement ContextParent { get; set; }
        public class PresentWhenLoaded : System.Windows.Controls.Decorator
        {
            public PresentWhenLoaded([JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, System.Windows.UIElement> FPresent) { }
        }
    }
    public class ActionMenuAutomation : JetBrains.UI.Wpf.AAutomation
    {
        public readonly JetBrains.ActionManagement.IActionBarManager ActionBarManager;
        public readonly string ActionGroupId;
        public ActionMenuAutomation([JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionBarManager actionBarManager, [JetBrains.Annotations.NotNullAttribute()] string sActionGroupId) { }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class ActionMenuView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.Controls.ActionMenuAutomation>
    {
        protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Controls.ActionMenuAutomation automation) { }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class AutomationWrapperView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.Wpf.AutomationWrapper>
    {
        protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Wpf.AutomationWrapper automation) { }
    }
    public class BorderedPanel : JetBrains.UI.CommonControls.SafeTableLayoutPanel
    {
        public BorderedPanel(JetBrains.UI.Application.IUIApplication environment) { }
        public BorderedPanel([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control child, JetBrains.UI.Application.IUIApplication environment) { }
        public System.Drawing.Color BorderColor { get; set; }
        public System.Windows.Forms.Padding BorderWidth { get; set; }
        public System.Drawing.Color FillColor { get; set; }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e) { }
    }
    public class CheckBoxAutomation : JetBrains.UI.Controls.ICheckBoxAutomation, JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        public CheckBoxAutomation([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
        public CheckBoxAutomation([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.RichText.RichText text) { }
        public JetBrains.DataFlow.IProperty<bool> IsAppearingChecked { get; }
        public JetBrains.DataFlow.IProperty<bool> IsCheckedLogically { get; }
        public JetBrains.DataFlow.IProperty<bool> IsEnabled { get; }
        public JetBrains.DataFlow.IProperty<bool> IsVisible { get; }
        public JetBrains.DataFlow.IProperty<bool> ShouldBeDisabled { get; }
        public JetBrains.DataFlow.IProperty<bool> ShouldBeHidden { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.RichText.RichText> Text { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
    }
    public class CheckBoxDisabledNoCheck2 : System.Windows.Controls.Control, JetBrains.UI.Controls.ICheckBoxDisabledNoCheckViewModel, System.Windows.Markup.IComponentConnector
    {
        public static readonly System.Windows.DependencyProperty ContentProperty;
        public static readonly System.Windows.DependencyProperty IsAppearingCheckedDependencyProperty;
        public static readonly System.Windows.DependencyProperty IsCheckedLogicallyDependencyProperty;
        public static readonly System.Windows.DependencyProperty ShouldBeDisabledDependencyProperty;
        public static readonly System.Windows.DependencyProperty ShouldBeHiddenDependencyProperty;
        public CheckBoxDisabledNoCheck2() { }
        public CheckBoxDisabledNoCheck2(JetBrains.UI.RichText.RichText text) { }
        public object Content { get; set; }
        public JetBrains.DataFlow.IProperty<bool> IsAppearingChecked { get; }
        public bool IsAppearingCheckedDependency { get; set; }
        public JetBrains.DataFlow.IProperty<bool> IsCheckedLogically { get; }
        public bool IsCheckedLogicallyDependency { get; set; }
        public JetBrains.DataFlow.IProperty<bool> IsEnabled { get; }
        public JetBrains.DataFlow.IProperty<bool> IsVisible { get; }
        public JetBrains.DataFlow.IProperty<bool> ShouldBeDisabled { get; }
        public bool ShouldBeDisabledDependency { get; set; }
        public JetBrains.DataFlow.IProperty<bool> ShouldBeHidden { get; }
        public bool ShouldBeHiddenDependency { get; set; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.RichText.RichText> Text { get; }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class CheckBoxView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.Controls.CheckBoxAutomation>
    {
        protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Controls.CheckBoxAutomation automation) { }
    }
    public class ConfirmationForm<TKey> : System.Windows.Forms.Form
    
    {
        public ConfirmationForm(string caption, string text, System.Linq.Expressions.Expression<System.Func<TKey, bool>> expr, JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.IContextBoundSettingsStore settingsStore) { }
        protected override void Dispose(bool disposing) { }
    }
    public class CustomListBoxControl<T> : System.Windows.Forms.ListBox
        where T :  class
    {
        public CustomListBoxControl() { }
        protected override System.Windows.Forms.CreateParams CreateParams { get; }
        public bool DrawSelectionAsFocus { get; set; }
        public int HoveredItem { get; }
        public JetBrains.UI.Components.CustomListBox.IItemPainter<T> ItemPainter { set; }
        public override int SelectedIndex { get; set; }
        public event System.EventHandler Scrolled;
        protected override void OnDrawItem(System.Windows.Forms.DrawItemEventArgs e) { }
        protected override void OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs e) { }
        protected override void OnMouseLeave(System.EventArgs e) { }
        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnSelectedIndexChanged(System.EventArgs e) { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
    }
    public class DependentControlIndent : System.Windows.Controls.Border
    {
        public DependentControlIndent(System.Windows.UIElement child) { }
    }
    public class DropDownButton : System.Windows.Controls.Primitives.ToggleButton
    {
        public static readonly System.Windows.DependencyProperty ActionManagerDropDownMenuProperty;
        public static readonly System.Windows.DependencyProperty DropDownMenuProperty;
        public static readonly System.Windows.DependencyProperty ShellLocksProperty;
        public DropDownButton(JetBrains.Application.IShellLocks shellLocks) { }
        public JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerContextMenu ActionManagerDropDownMenu { get; set; }
        public System.Windows.Controls.ContextMenu DropDownMenu { get; set; }
        public JetBrains.Application.IShellLocks ShellLocks { get; set; }
        protected override void OnClick() { }
    }
    public interface ICheckBoxAutomation : JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        JetBrains.DataFlow.IProperty<bool> IsAppearingChecked { get; }
        JetBrains.DataFlow.IProperty<System.Nullable<bool>> IsCheckedForChildControl { get; }
        JetBrains.DataFlow.IProperty<bool> IsCheckedLogically { get; }
        JetBrains.DataFlow.IProperty<bool> IsEnabled { get; }
        JetBrains.DataFlow.IProperty<bool> IsVisible { get; }
        JetBrains.DataFlow.IProperty<bool> ShouldBeDisabled { get; }
        JetBrains.DataFlow.IProperty<bool> ShouldBeHidden { get; }
        JetBrains.DataFlow.IProperty<JetBrains.UI.RichText.RichText> Text { get; }
    }
    public interface ICheckBoxDisabledNoCheckViewModel
    {
        JetBrains.DataFlow.IProperty<bool> IsAppearingChecked { get; }
        JetBrains.DataFlow.IProperty<System.Nullable<bool>> IsCheckedForChildControl { get; }
        JetBrains.DataFlow.IProperty<bool> IsCheckedLogically { get; }
        JetBrains.DataFlow.IProperty<bool> IsEnabled { get; }
        JetBrains.DataFlow.IProperty<bool> IsVisible { get; }
        JetBrains.DataFlow.IProperty<bool> ShouldBeDisabled { get; }
        JetBrains.DataFlow.IProperty<bool> ShouldBeHidden { get; }
        JetBrains.DataFlow.IProperty<JetBrains.UI.RichText.RichText> Text { get; }
    }
    public interface IRadioGroupButtonViewModel
    {
        JetBrains.DataFlow.IListEvents<object> DependentItems { get; }
        JetBrains.DataFlow.IProperty<double> IndendDependentItems { get; }
        JetBrains.DataFlow.IProperty<bool> IsChecked { get; }
        JetBrains.DataFlow.IProperty<object> Label { get; }
        JetBrains.DataFlow.IProperty<System.Windows.Controls.Orientation> PanelOrientation { get; }
        JetBrains.DataFlow.IProperty<bool> ShouldBeDisabled { get; }
    }
    public interface IRadioGroupViewModel : JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        JetBrains.DataFlow.IProperty<double> IndentRadioButtons { get; }
        JetBrains.DataFlow.IProperty<bool> IsCheckBoxCheckedLogically { get; }
        JetBrains.DataFlow.IProperty<bool> IsCheckBoxCheckedVisually { get; }
        JetBrains.DataFlow.IProperty<bool> IsCheckBoxVisible { get; }
        JetBrains.DataFlow.IProperty<bool> IsLabelVisible { get; }
        JetBrains.DataFlow.IProperty<JetBrains.UI.RichText.RichText> Label { get; }
        JetBrains.DataFlow.IProperty<System.Windows.Controls.Orientation> PanelOrientation { get; }
        JetBrains.DataFlow.IListEvents<JetBrains.UI.Controls.IRadioGroupButtonViewModel> RadioButtonViewModels { get; }
    }
    public class LayoutSuspender : System.IDisposable
    {
        public LayoutSuspender([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, bool recursive, bool bLayoutOnResume) { }
        public LayoutSuspender(System.Windows.Forms.Control control) { }
        public void Dispose() { }
    }
    public class MetroBusyIndicator : System.Windows.FrameworkElement
    {
        public static readonly System.Windows.DependencyProperty BackgroundProperty;
        public static readonly System.Windows.DependencyProperty IndicatorBrushProperty;
        public static readonly System.Windows.DependencyProperty IndicatorLengthProperty;
        public static readonly System.Windows.DependencyProperty IsBusyProperty;
        public static readonly System.Windows.DependencyProperty VelocityProperty;
        public System.Windows.Media.Brush Background { get; set; }
        public System.Windows.Media.Brush IndicatorBrush { get; set; }
        public double IndicatorLength { get; set; }
        public bool IsBusy { get; set; }
        public double Velocity { get; set; }
        protected override void OnRender(System.Windows.Media.DrawingContext drawingContext) { }
    }
    public class PromptDecorator : System.Windows.Controls.Decorator
    {
        public static readonly System.Windows.DependencyProperty ChildContentPathProperty;
        public static readonly System.Windows.DependencyProperty ChildContentProperty;
        public static readonly System.Windows.DependencyProperty IsPromptVisibleProperty;
        public static readonly System.Windows.DependencyProperty PromtProperty;
        public PromptDecorator() { }
        public object ChildContent { get; set; }
        public string ChildContentPath { get; set; }
        public bool IsPromptVisible { get; set; }
        public object Prompt { get; set; }
    }
    public class RadioGroupButtonViewModel<TValue> : JetBrains.UI.Controls.IRadioGroupButtonViewModel
    
    {
        public RadioGroupButtonViewModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Controls.IRadioGroupViewModel modelParent, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Controls.RadioGroupModel<TValue>.RadioButtonModel modelButton) { }
        public JetBrains.UI.Controls.RadioGroupModel<TValue>.RadioButtonModel ButtonModel { get; }
        public JetBrains.DataFlow.IListEvents<object> DependentItems { get; }
        public JetBrains.DataFlow.IProperty<double> IndendDependentItems { get; }
        public JetBrains.DataFlow.IProperty<bool> IsChecked { get; }
        public JetBrains.DataFlow.IProperty<object> Label { get; }
        public JetBrains.DataFlow.IProperty<System.Windows.Controls.Orientation> PanelOrientation { get; }
        public JetBrains.DataFlow.IProperty<bool> ShouldBeDisabled { get; }
    }
    public class RadioGroupModel<TValue>
    
    {
        public readonly JetBrains.DataFlow.Property<bool> HasCheckbox;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.RichText.RichText> LabelText;
        public readonly JetBrains.DataFlow.Property<TValue> NothingSelectedValue;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ListEvents<JetBrains.UI.Controls.RadioGroupModel<TValue>.RadioButtonModel> RadioButtons;
        public readonly JetBrains.DataFlow.Property<TValue> Value;
        public RadioGroupModel(JetBrains.DataFlow.Lifetime lifetime) { }
        public JetBrains.DataFlow.Lifetime Lifetime { get; }
        [System.ObsoleteAttribute("Do the adds on the radio button object returned from AddRadioButton call.")]
        public void AddComment([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText text) { }
        [System.ObsoleteAttribute("Do the adds on the radio button object returned from AddRadioButton call.")]
        public void AddDependent([JetBrains.Annotations.NotNullAttribute()] object control) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Controls.RadioGroupModel<TValue>.RadioButtonModel AddRadioButton([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText text, TValue value) { }
        public class RadioButtonModel<TValue>
        
        {
            public readonly JetBrains.DataFlow.IListEvents<object> DependentItems;
            public readonly JetBrains.DataFlow.IProperty<object> Label;
            public readonly TValue Value;
            public RadioButtonModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, TValue value, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText label) { }
            public void AddComment([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText text) { }
        }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class RadioGroupView : System.Windows.Controls.Control, JetBrains.UI.Wpf.IView, JetBrains.UI.Wpf.IView<JetBrains.UI.Controls.RadioGroupViewModel>
    {
        public RadioGroupView(JetBrains.UI.Controls.IRadioGroupViewModel viewmodel) { }
        public JetBrains.UI.Controls.RadioGroupView SetModel<TValue>(JetBrains.UI.Controls.RadioGroupModel<TValue> model, System.Windows.Controls.Orientation orientation = 0) { }
    }
    public class RadioGroupViewModel : JetBrains.UI.Wpf.AAutomation, JetBrains.UI.Controls.IRadioGroupViewModel, JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        public RadioGroupViewModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IProperty<JetBrains.UI.RichText.RichText> labelText) { }
        public JetBrains.DataFlow.IProperty<double> IndentRadioButtons { get; }
        public JetBrains.DataFlow.IProperty<bool> IsCheckBoxCheckedLogically { get; }
        public JetBrains.DataFlow.IProperty<bool> IsCheckBoxCheckedVisually { get; }
        public JetBrains.DataFlow.IProperty<bool> IsCheckBoxVisible { get; }
        public JetBrains.DataFlow.IProperty<bool> IsLabelVisible { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.RichText.RichText> Label { get; }
        public JetBrains.DataFlow.IProperty<System.Windows.Controls.Orientation> PanelOrientation { get; }
        public JetBrains.DataFlow.IListEvents<JetBrains.UI.Controls.IRadioGroupButtonViewModel> RadioButtonViewModels { get; }
    }
    public class RadioGroupViewModel<TValue> : JetBrains.UI.Controls.RadioGroupViewModel
    
    {
        public RadioGroupViewModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Controls.RadioGroupModel<TValue> model) { }
        public JetBrains.UI.Controls.RadioGroupModel<TValue> Model { get; }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class RegisterRichTextView
    {
        public RegisterRichTextView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Wpf.IAutomationViewsRegistry registry) { }
    }
    public class RichTextHeading : JetBrains.UI.CommonControls.SafeTableLayoutPanel
    {
        public RichTextHeading(JetBrains.UI.Application.IUIApplication environment) { }
        public RichTextHeading([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichTextBlock title, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichTextBlock body, JetBrains.UI.Application.IUIApplication environment) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.RichText.RichTextBlock Body { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Controls.RichTextLabel LabelBody { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Controls.RichTextLabel LabelTitle { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.RichText.RichTextBlock Title { get; set; }
    }
    public class RichTextLabel : System.Windows.Forms.Control
    {
        public readonly JetBrains.DataFlow.Property<bool> Enabled;
        public RichTextLabel([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplication environment) { }
        public RichTextLabel(JetBrains.UI.RichText.RichTextBlock text, System.Windows.Forms.Padding marginAdditional, JetBrains.UI.Application.IUIApplication environment) { }
        public RichTextLabel(JetBrains.UI.RichText.RichTextBlock text, JetBrains.UI.Application.IUIApplication environment) { }
        public RichTextLabel(JetBrains.UI.RichText.RichText text, JetBrains.UI.Application.IUIApplication environment) { }
        public override System.Drawing.Color BackColor { get; set; }
        protected override System.Drawing.Size DefaultSize { get; }
        public override System.Drawing.Rectangle DisplayRectangle { get; }
        public override System.Drawing.Font Font { get; set; }
        public override System.Drawing.Color ForeColor { get; set; }
        public char Mnemonic { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.RenderParams RenderParams { get; set; }
        public JetBrains.UI.RichText.RichText RichText { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.RichText.RichTextBlock RichTextBlock { get; set; }
        public override string Text { get; set; }
        protected override void Dispose(bool disposing) { }
        public static JetBrains.UI.RenderParams GetDefaultRichTextLabelRenderParams([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplication environment) { }
        public override System.Drawing.Size GetPreferredSize(System.Drawing.Size proposedSize) { }
        protected override void OnFontChanged(System.EventArgs e) { }
        protected override void OnLayout(System.Windows.Forms.LayoutEventArgs levent) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs args) { }
        protected override bool ProcessMnemonic(char charCode) { }
    }
    public class RichTextView : System.Windows.Controls.Decorator
    {
        public RichTextView() { }
    }
    public class SectionHeading : System.Windows.Controls.TextBlock
    {
        public SectionHeading(string text) { }
    }
    public class StackPanelAutomation : JetBrains.UI.Wpf.AAutomation
    {
        public StackPanelAutomation(JetBrains.DataFlow.Lifetime lifetime) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.ListEvents<JetBrains.UI.Wpf.IAutomation> Children { get; }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class StackPanelView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.Controls.StackPanelAutomation>
    {
        protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Controls.StackPanelAutomation automation) { }
    }
}
namespace JetBrains.UI.Controls.ActiveRichText
{
    
    public class ActiveTextViewInfo : DevExpress.XtraEditors.ViewInfo.BaseEditViewInfo, DevExpress.XtraEditors.ViewInfo.IHeightAdaptable, JetBrains.CommonControls.ActiveRichText.IColorScheme
    {
        public ActiveTextViewInfo(DevExpress.XtraEditors.Repository.RepositoryItem repositoryItem) { }
        public JetBrains.CommonControls.ActiveRichText.IActiveText ActiveText { get; }
        public override bool DefaultAllowDrawFocusRect { get; }
        public bool IsGuarded { get; }
        public override bool IsSupportFastViewInfo { get; }
        protected override void Assign(DevExpress.XtraEditors.ViewInfo.BaseControlViewInfo info) { }
        public int CalcHeight(System.Drawing.Graphics graphics, int width) { }
        public int CalcHeight(DevExpress.Utils.Drawing.GraphicsCache cache, int width) { }
        public System.Drawing.Color GetColor(string name) { }
        public override System.Windows.Forms.Cursor GetMouseCursor(System.Drawing.Point point) { }
        protected override void OnEditValueChanged() { }
    }
}
namespace JetBrains.UI.Controls.Browser
{
    
    public class NonSecureWebBrowser : System.Windows.Forms.WebBrowser
    {
        protected override System.Windows.Forms.WebBrowserSiteBase CreateWebBrowserSiteBase() { }
    }
}
namespace JetBrains.UI.Controls.ColorPickerDialog
{
    
    public class ColorFormatSelector : System.Windows.Controls.UserControl, System.ComponentModel.INotifyPropertyChanged, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector
    {
        public JetBrains.DataFlow.IProperty<bool> PickerToggle;
        public ColorFormatSelector() { }
        public ColorFormatItem[] AllItems { get; }
        public JetBrains.Util.JetTuple<double, double, double, double> Color { get; set; }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Controls.ColorPickerDialog.ColorFormatSelector.ColorFormatItem> TabItems { get; }
        public static System.Windows.Data.IValueConverter ToTextBlock { get; }
        public bool Workaround { get; set; }
        public event System.Action ColorChanged;
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        public void InitializeComponent() { }
        public void UnpressPickerButton() { }
        public class ColorFormatItem : JetBrains.UI.Avalon.TreeListView.ObservableObject
        {
            public System.Func<string, JetBrains.Util.JetTuple<double, double, double, double>> FromText;
            public System.Func<JetBrains.Util.JetTuple<double, double, double, double>, string> ToText;
            public ColorFormatItem(JetBrains.UI.Controls.ColorPickerDialog.ColorFormatSelector colorFormatSelector) { }
            public string ColorText { get; set; }
            public bool HasError { get; set; }
            public string Header { get; set; }
            public void RaiseChange() { }
        }
    }
    public class static RealColorEx
    {
        public static JetBrains.Util.JetTuple<double, double, double, double> ToRealColor(this System.Windows.Media.Media3D.Vector3D rgb, double alpha) { }
        public static JetBrains.Util.JetTuple<double, double, double, double> ToRealColor(double alpha, double x, double y, double z) { }
        public static JetBrains.Util.JetTuple<double, double, double, double> ToRealColor(this System.Drawing.Color c) { }
        public static System.Windows.Media.Media3D.Vector3D ToVector3(this JetBrains.Util.JetTuple<double, double, double, double> c) { }
    }
}
namespace JetBrains.UI.Controls.GotoByName
{
    
    public class static GotoByNameDataConstants
    {
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.UI.Controls.GotoByName.GotoByNameDataConstants.SearchTextData> CurrentSearchText;
        public class SearchTextData
        {
            public readonly System.Nullable<JetBrains.Util.TextRange> Selection;
            [JetBrains.Annotations.CanBeNullAttribute()]
            public readonly string Text;
            public SearchTextData(string text, System.Nullable<JetBrains.Util.TextRange> selection) { }
        }
    }
}
namespace JetBrains.UI.Controls.Misc
{
    
    public class FilterController<FilterItemType> : JetBrains.UI.Avalon.TreeListView.ObservableObject
        where FilterItemType :  class
    {
        public FilterController(System.Collections.Generic.IEnumerable<FilterItemType> filterOptions, System.Func<FilterItemType, string> displayText) { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Controls.Misc.FilterController<FilterItemType>.FilterItem> ActiveFilterItems { get; }
        public bool AllowMultipleActiveItems { get; set; }
        public System.Collections.Generic.IEnumerable<FilterItemType> AppliedFilters { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Controls.Misc.FilterController<FilterItemType>.FilterItem> FilterItems { get; }
        public event System.Action FiltersChanged;
        public bool CheckAny(System.Collections.Generic.IEnumerable<FilterItemType> toCheck) { }
        public class FilterItem<FilterItemType> : JetBrains.UI.Avalon.TreeListView.ObservableObject
            where FilterItemType :  class
        {
            public FilterItem(System.Func<FilterItemType, string> display, FilterItemType value, JetBrains.UI.Controls.Misc.FilterController<FilterItemType> parent) { }
            [JetBrains.Annotations.UsedImplicitlyAttribute()]
            public string DisplayText { get; }
            [JetBrains.Annotations.UsedImplicitlyAttribute()]
            public bool IsApplied { get; set; }
            public FilterItemType Value { get; }
            public void RaiseChange() { }
        }
    }
    public class static ItemStyles
    {
        public static readonly System.Windows.DependencyProperty EnableItemStylesProperty;
        public static readonly System.Windows.DependencyProperty IsFirstProperty;
        public static readonly System.Windows.DependencyProperty IsLastProperty;
        public static bool GetEnableItemStyles(System.Windows.UIElement element) { }
        public static bool GetIsFirst(System.Windows.UIElement element) { }
        public static bool GetIsLast(System.Windows.UIElement element) { }
        public static void SetEnableItemStyles(System.Windows.UIElement element, bool value) { }
        public static void SetIsFirst(System.Windows.UIElement element, bool value) { }
        public static void SetIsLast(System.Windows.UIElement element, bool value) { }
    }
    public class SearchEventArgs : System.Windows.RoutedEventArgs
    {
        public SearchEventArgs(object source, [JetBrains.Annotations.NotNullAttribute()] string text) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string SearchText { get; }
    }
    public delegate void SearchEventHandler(object sender, JetBrains.UI.Controls.Misc.SearchEventArgs args);
    public enum SearchMode
    {
        Instant = 0,
        Delayed = 1,
    }
    public class SearchTextBox : System.Windows.Controls.TextBox
    {
        public static readonly System.Windows.DependencyProperty AutoHideProperty;
        public static System.Windows.DependencyProperty HasTextProperty;
        public static System.Windows.DependencyProperty IsMouseLeftButtonDownProperty;
        public static System.Windows.DependencyProperty LabelTextColorProperty;
        public static System.Windows.DependencyProperty LabelTextProperty;
        public static readonly System.Windows.DependencyProperty ListenKeyboardOnProperty;
        public static readonly System.Windows.DependencyProperty SearchBehaviorProperty;
        public static readonly System.Windows.RoutedEvent SearchEvent;
        public static System.Windows.DependencyProperty SearchEventTimeDelayProperty;
        public static System.Windows.DependencyProperty SearchModeProperty;
        public SearchTextBox() { }
        public bool AutoHide { get; set; }
        public bool HasText { get; }
        public bool IsMouseLeftButtonDown { get; }
        public string LabelText { get; set; }
        public System.Windows.Media.Brush LabelTextColor { get; set; }
        public System.Windows.FrameworkElement ListenKeyboardOn { get; set; }
        public JetBrains.UI.Controls.Misc.SearchEventHandler SearchBehavior { get; set; }
        public System.Windows.Duration SearchEventTimeDelay { get; set; }
        public JetBrains.UI.Controls.Misc.SearchMode SearchMode { get; set; }
        public event JetBrains.UI.Controls.Misc.SearchEventHandler Search;
        public override void OnApplyTemplate() { }
        protected override void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected override void OnTextChanged(System.Windows.Controls.TextChangedEventArgs e) { }
    }
    public class StackOrStretchPanel : System.Windows.Controls.Panel
    {
        protected override System.Windows.Size ArrangeOverride(System.Windows.Size arrangeSize) { }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size availableSize) { }
    }
    public class static TextSearchHighlighting
    {
        public static readonly System.Windows.DependencyProperty HighlightBrushProperty;
        public static readonly System.Windows.DependencyProperty SearchTextProperty;
        public static readonly System.Windows.DependencyProperty SourceTextProperty;
        public static System.Windows.Media.Brush GetHighlightBrush(System.Windows.DependencyObject target) { }
        public static string GetSearchText(System.Windows.DependencyObject target) { }
        public static string GetSourceText(System.Windows.DependencyObject target) { }
        public static void SetHighlightBrush(System.Windows.DependencyObject target, System.Windows.Media.Brush value) { }
        public static void SetSearchText(System.Windows.DependencyObject target, string value) { }
        public static void SetSourceText(System.Windows.DependencyObject target, string value) { }
    }
    public class TreeToggleButton : System.Windows.Controls.Primitives.ToggleButton { }
}
namespace JetBrains.UI.Controls.TreeListView
{
    
    public class TreeListViewWithDataContext : JetBrains.UI.Avalon.TreeListView.TreeListView
    {
        public readonly JetBrains.DataFlow.IProperty<object> SelectedItem;
        public TreeListViewWithDataContext() { }
        public class static DataConstants
        {
            public static readonly JetBrains.Application.DataContext.DataConstant<System.Collections.Generic.IList<object>> SelectedItems;
            public static readonly JetBrains.Application.DataContext.DataConstant<object> SingleSelectedItem;
        }
    }
}
namespace JetBrains.UI.Controls.TreeView
{
    
    public interface ITreeModelVisitor
    {
        void VisitPresentableItem(JetBrains.CommonControls.IPresentableItem presentableItem, JetBrains.Application.Progress.IProgressIndicator progress);
        void VisitPresentableItemBlock(JetBrains.CommonControls.PresentableItemBlock presentableItemBlock, JetBrains.Application.Progress.IProgressIndicator progress);
        void VisitPresentableItemImage(JetBrains.CommonControls.PresentableItemImage presentableItemImage, JetBrains.Application.Progress.IProgressIndicator progress);
        void VisitRichString(JetBrains.UI.RichText.RichString richString, JetBrains.Application.Progress.IProgressIndicator progress);
        void VisitRichText(JetBrains.UI.RichText.RichText richText, JetBrains.Application.Progress.IProgressIndicator progress);
        void VisitRichTextBlock(JetBrains.UI.RichText.RichTextBlock richTextBlock, JetBrains.Application.Progress.IProgressIndicator progress);
        void VisitTreeModel(JetBrains.TreeModels.TreeModel modelNode, JetBrains.Application.Progress.IProgressIndicator progress);
        void VisitTreeModelNode(JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.Application.Progress.IProgressIndicator progress);
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.UI.UserInterfaceSettings), "Quick search settings")]
    public class QuickSearchBoxSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Whether filter checked")]
        public bool FilterChecked;
    }
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    public class QuickSearchBoxSettingsUpgrader : JetBrains.Application.Configuration.SettingTablesUpgrader
    {
        public QuickSearchBoxSettingsUpgrader(JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations) { }
        protected override void DoUpgrade(JetBrains.Application.Configuration.IComponentSettingsProvider legacySettingsProvider, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore, JetBrains.DataFlow.Lifetime upgradeLifetime, JetBrains.Application.Configuration.SettingsTableBase workspaceSettingsTable, JetBrains.Application.Configuration.SettingsTableBase globalSettingsTable) { }
    }
}
namespace JetBrains.UI.Controls.Utils
{
    
    public class InitCookie : System.IDisposable
    {
        public InitCookie(System.ComponentModel.ISupportInitialize control) { }
        public void Dispose() { }
    }
    public class static PasswordBoxHelper
    {
        public static readonly System.Windows.DependencyProperty AttachProperty;
        public static readonly System.Windows.DependencyProperty PasswordProperty;
        public static bool GetAttach(System.Windows.DependencyObject dp) { }
        public static string GetPassword(System.Windows.DependencyObject dp) { }
        public static void SetAttach(System.Windows.DependencyObject dp, bool value) { }
        public static void SetPassword(System.Windows.DependencyObject dp, string value) { }
    }
}
namespace JetBrains.UI.CrossFramework
{
    
    public class static AvalonBitmapInterop
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Media.Imaging.BitmapSource RenderGdipIntoAvalonImage(System.Windows.Size size, JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel alpha, [JetBrains.Annotations.NotNullAttribute()] System.Action<System.Drawing.Graphics> FRender) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Media.Imaging.BitmapSource RenderGdipIntoAvalonImage_GdiBitmap_DIBitmap(System.Windows.Size size, JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel alpha, [JetBrains.Annotations.NotNullAttribute()] System.Action<System.Drawing.Graphics> FRender) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Media.Imaging.BitmapSource RenderGdipIntoAvalonImage_GdipBitmap(System.Windows.Size size, JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel alpha, [JetBrains.Annotations.NotNullAttribute()] System.Action<System.Drawing.Graphics> FRender) { }
        public enum AlphaChannel
        {
            No = 0,
            Yes = 1,
        }
    }
    public class GdipWritableAvalonBitmap : System.IDisposable
    {
        public GdipWritableAvalonBitmap(JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ResizePolicy policy, JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel alpha) { }
        public void Dispose() { }
        public void PaintGdip(System.Windows.Size sizeNew, [JetBrains.Annotations.NotNullAttribute()] System.Action<System.Drawing.Graphics> FRender) { }
        public void Render(System.Windows.Media.DrawingContext dc, System.Windows.Rect rect) { }
        public enum ResizePolicy
        {
            Exact = 0,
            Lazy = 1,
        }
    }
    public class static SizeAndLength
    {
        [JetBrains.Annotations.PureAttribute()]
        public static System.Windows.Point ToAvalonPoint96(this System.Drawing.Point value) { }
        [JetBrains.Annotations.PureAttribute()]
        public static System.Windows.Point ToAvalonPoint96(this System.Drawing.PointF value) { }
        [JetBrains.Annotations.PureAttribute()]
        public static System.Windows.Rect ToAvalonRect96(this System.Drawing.Rectangle value) { }
        [JetBrains.Annotations.PureAttribute()]
        public static System.Windows.Size ToAvalonSize(this System.Drawing.SizeF value, JetBrains.Util.Interop.DpiResolution resolution) { }
        [JetBrains.Annotations.PureAttribute()]
        public static System.Windows.Size ToAvalonSize(this System.Drawing.Size value, JetBrains.Util.Interop.DpiResolution resolution) { }
        [JetBrains.Annotations.PureAttribute()]
        public static System.Windows.Size ToAvalonSize96(this System.Drawing.Size value) { }
        public static System.Drawing.Point ToWinFormsPoint96(this System.Windows.Point value) { }
        public static System.Drawing.PointF ToWinFormsPointF96(this System.Windows.Point value) { }
        public static System.Drawing.Rectangle ToWinFormsRectangle96(this System.Windows.Rect value) { }
        public static System.Drawing.RectangleF ToWinFormsRectangleF96(this System.Windows.Rect value) { }
        public static System.Drawing.Size ToWinFormsSize(this System.Windows.Vector value, JetBrains.Util.Interop.DpiResolution resolution) { }
        public static System.Drawing.Size ToWinFormsSize(this System.Windows.Size value, JetBrains.Util.Interop.DpiResolution resolution) { }
        public static System.Drawing.Size ToWinFormsSize96(this System.Windows.Size value) { }
        public static System.Drawing.Size ToWinFormsSizeCeiling(this System.Windows.Vector value, JetBrains.Util.Interop.DpiResolution resolution) { }
        public static System.Drawing.SizeF ToWinFormsSizeF(this System.Windows.Vector value, JetBrains.Util.Interop.DpiResolution resolution) { }
        public static System.Drawing.SizeF ToWinFormsSizeF(this System.Windows.Size value, JetBrains.Util.Interop.DpiResolution resolution) { }
        public static System.Drawing.Size ToWinFormsSizeRounded(this System.Windows.Size value, JetBrains.Util.Interop.DpiResolution resolution) { }
    }
    public class static WindowsFormsIntegration
    {
        public static TElement SetFontA<TElement>(this TElement element, System.Drawing.Font font)
            where TElement : System.Windows.Documents.TextElement { }
        public static TElement SetFontB<TElement>(this TElement element, System.Drawing.Font font, bool sized)
            where TElement : System.Windows.Controls.Control { }
        public static TElement SetFontC<TElement>(this TElement element, System.Drawing.Font font, bool sized)
            where TElement : System.Windows.Controls.TextBlock { }
        public static void Show([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Window window, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window win32Owner) { }
        public static System.Nullable<bool> ShowDialog([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Window window, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window win32Owner) { }
        public static System.Nullable<bool> ShowDialog([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Window window, System.IntPtr handle) { }
        public static System.Nullable<bool> ShowDialog([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Window window, System.Void* handle) { }
        public static System.Windows.Media.Color ToAvalonColor(this System.Drawing.Color value) { }
        public static System.Windows.Controls.Image ToAvalonImage([JetBrains.Annotations.NotNullAttribute()] this System.Drawing.Image value) { }
        public static System.Windows.Media.Imaging.BitmapSource ToAvalonImageSource([JetBrains.Annotations.NotNullAttribute()] this System.Drawing.Image value) { }
        public static System.Windows.Media.ImageSource ToAvalonImageSource([JetBrains.Annotations.NotNullAttribute()] this System.Drawing.Icon value) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Drawing.Bitmap ToGdiPlusBitmap([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Media.Imaging.BitmapSource bmpAvalon) { }
        public static System.Windows.Forms.MessageBoxButtons ToWinFormsMessageBoxButtons(this System.Windows.MessageBoxButton button) { }
        public static System.Windows.Forms.MessageBoxIcon ToWinFormsMessageBoxIcon(this System.Windows.MessageBoxImage image) { }
        public static System.Windows.Forms.MouseButtons ToWinFormsMouseButton(this System.Windows.Input.MouseButton button) { }
    }
}
namespace JetBrains.UI.Diagnostics.FocusMonitor
{
    
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class FocusInFocusMonitorLogEntryView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.Diagnostics.FocusMonitorAutomation.FocusInFocusMonitorLogEntry>
    {
        protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Diagnostics.FocusMonitorAutomation.FocusInFocusMonitorLogEntry automation) { }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class FocusMonitorView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.Diagnostics.FocusMonitorAutomation>
    {
        protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Diagnostics.FocusMonitorAutomation automation) { }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class FocusMonitorWindowRecordTooltipView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.Diagnostics.FocusMonitorAutomation.WindowRecordTooltipAutomation>
    {
        protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Diagnostics.FocusMonitorAutomation.WindowRecordTooltipAutomation automation) { }
    }
}
namespace JetBrains.UI.Diagnostics
{
    
    public class FocusMonitorAutomation : JetBrains.UI.Wpf.AAutomation
    {
        public readonly JetBrains.UI.Extensions.Commands.SignalCommand ClearCommand;
        public readonly string FocusMonitorWindowName;
        public readonly JetBrains.DataFlow.IProperty<bool> IsLiveLoggingEnabled;
        public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.Diagnostics.FocusMonitorAutomation.LogEntry> LogEntries;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.Diagnostics.FocusMonitorAutomation.LogEntry> SelectedEntry;
        public FocusMonitorAutomation(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading threading, JetBrains.UI.Application.Progress.TrackFocus trackFocus) { }
        public static JetBrains.UI.Diagnostics.FocusMonitorAutomation.WindowRecordTooltipAutomation GetTooltip(JetBrains.UI.Application.Progress.TrackFocus.LogEntry.WindowRecord wndrec) { }
        public class FakeLogEntry : JetBrains.UI.Diagnostics.FocusMonitorAutomation.LogEntry
        {
            public FakeLogEntry(System.DateTime when) { }
        }
        public class FocusInFocusMonitorLogEntry : JetBrains.UI.Diagnostics.FocusMonitorAutomation.FakeLogEntry
        {
            public FocusInFocusMonitorLogEntry(System.DateTime when) { }
        }
        public abstract class LogEntry : JetBrains.UI.Wpf.AAutomation
        {
            public System.DateTime When;
            public LogEntry(System.DateTime when) { }
            [JetBrains.Annotations.NotNullAttribute()]
            public virtual System.Collections.Generic.IList<System.Diagnostics.StackFrame> GetStackFrames() { }
        }
        public class RealLogEntry : JetBrains.UI.Diagnostics.FocusMonitorAutomation.LogEntry
        {
            [JetBrains.Annotations.NotNullAttribute()]
            public readonly JetBrains.UI.Application.Progress.TrackFocus.LogEntry RealEntry;
            public RealLogEntry([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.Progress.TrackFocus.LogEntry value) { }
            public override System.Collections.Generic.IList<System.Diagnostics.StackFrame> GetStackFrames() { }
            public override string ToString() { }
        }
        public class WindowRecordTooltipAutomation : JetBrains.UI.Wpf.AAutomation
        {
            public readonly string IdAsTechnicalString;
            public readonly string IdAsUserFriendlyString;
            public readonly string Title;
            public readonly JetBrains.UI.Application.Progress.TrackFocus.LogEntry.WindowRecord WindowRecord;
            public WindowRecordTooltipAutomation([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.Progress.TrackFocus.LogEntry.WindowRecord wndrec) { }
        }
    }
}
namespace JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v2
{
    
    public class ActionResult
    {
        public System.Collections.Generic.List<string> Errors { get; set; }
        public string Guid { get; set; }
        public System.Collections.Generic.List<JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v2.Issue> Issues { get; set; }
    }
    public enum ActionType
    {
        Submit = 0,
    }
    public class ExceptionParameter : JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v2.RequestParameter
    {
        public string Description { get; set; }
        public string Guid { get; set; }
        public string Summary { get; set; }
    }
    public class ExceptionParameterWithComment : JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v2.ExceptionParameter
    {
        public string Comment { get; set; }
    }
    public class Issue
    {
        public string Guid { get; set; }
        public string Key { get; set; }
        public string Url { get; set; }
    }
    public class RequestAction
    {
        public string Guid { get; set; }
        public System.Collections.Generic.List<JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v2.RequestParameter> Parameters { get; set; }
        public JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v2.ActionType Type { get; set; }
    }
    public class RequestBody
    {
        public System.Collections.Generic.List<JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v2.RequestAction> Actions { get; set; }
        public string Password { get; set; }
        public string Product { get; set; }
        public string ProductVersion { get; set; }
        public bool SubmitAnonymously { get; set; }
        public string UserName { get; set; }
    }
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v2.ExceptionParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v2.ExceptionParameterWithComment))]
    public class RequestParameter { }
    public class ResponseBody
    {
        public System.Collections.Generic.List<JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v2.ActionResult> ActionResults { get; set; }
        public System.Collections.Generic.List<string> Errors { get; set; }
        public string Info { get; set; }
    }
}
namespace JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v3
{
    
    public class Action
    {
        public Action() { }
        public int Code { get; set; }
        public string Key { get; set; }
        public string Text { get; set; }
    }
    public class static ActionCodes
    {
        public const int ChangedStorage = 3;
        public const int CommentedException = 2;
        public const int Error = -1;
        public const int MatchedExistingException = 1;
        public const int NewException = 0;
    }
    public class ActionCollection
    {
        public ActionCollection() { }
        public System.Collections.Generic.List<JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v3.Action> Actions { get; set; }
    }
    public class ActionResult
    {
        public System.Collections.Generic.List<JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v3.Action> Actions { get; set; }
        public System.Collections.Generic.List<string> Errors { get; set; }
        public string Guid { get; set; }
        public System.Collections.Generic.List<JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v3.Issue> Issues { get; set; }
    }
    public enum ActionType
    {
        Submit = 0,
    }
    public class ExceptionParameter : JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v3.RequestParameter
    {
        public string Description { get; set; }
        public string Guid { get; set; }
        public string Summary { get; set; }
    }
    public class ExceptionParameterWithComment : JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v3.ExceptionParameter
    {
        public string Comment { get; set; }
    }
    public class Issue
    {
        public string Guid { get; set; }
        public string Key { get; set; }
        public string Url { get; set; }
    }
    public class RequestAction
    {
        public string Guid { get; set; }
        public System.Collections.Generic.List<JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v3.RequestParameter> Parameters { get; set; }
        public JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v3.ActionType Type { get; set; }
    }
    public class RequestBody
    {
        public System.Collections.Generic.List<JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v3.RequestAction> Actions { get; set; }
        public string Password { get; set; }
        public string Product { get; set; }
        public string ProductVersion { get; set; }
        public bool SubmitAnonymously { get; set; }
        public string UserName { get; set; }
    }
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v3.ExceptionParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v3.ExceptionParameterWithComment))]
    public class RequestParameter { }
    public class ResponseBody
    {
        public System.Collections.Generic.List<JetBrains.UI.ExceptionReport.ExceptionAnalyzer.v3.ActionResult> ActionResults { get; set; }
        public System.Collections.Generic.List<string> Errors { get; set; }
        public string Info { get; set; }
    }
}
namespace JetBrains.UI.ExceptionReport
{
    
    [JetBrains.Application.ShellComponentAttribute()]
    public class ExceptionReportingIconSet
    {
        public readonly JetBrains.UI.Icons.ThemedIconLoader Error;
        public readonly JetBrains.UI.Icons.ThemedIconLoader Refresh;
        public readonly JetBrains.UI.Icons.ThemedIconLoader SubmittingExceptionInProgress;
        public readonly JetBrains.UI.Icons.ThemedIconLoader Success;
        public ExceptionReportingIconSet(JetBrains.UI.Icons.ThemedIconLoader submittingExceptionInProgress, JetBrains.UI.Icons.ThemedIconLoader success, JetBrains.UI.Icons.ThemedIconLoader error, JetBrains.UI.Icons.ThemedIconLoader refresh) { }
        public ExceptionReportingIconSet([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager iconman) { }
        public JetBrains.UI.Application.ExceptionReport.TrackerLoginForm.IconSet GetTrackerLoginFormIconSet() { }
    }
    public class static ShellLessExceptionReporting
    {
        public static bool CanCreateWithAppDescriptor([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.IApplicationDescriptor product) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Application.ExceptionReport.ExceptionReporting CreateDeadEnd([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor product) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Application.ExceptionReport.ExceptionReporting CreateNoAppDescriptor() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.Application.ExceptionReport.ExceptionReporting CreateWithAppDescriptor([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor descriptor) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.Application.Settings.HousekeepingSettings), "Exception submitter settings")]
    public class SubmitToTrackerExceptionReportServiceSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute("", "Tracker password")]
        public string Password;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Persist exceptions")]
        public bool PersistExceptions;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Show form after submission")]
        public bool ShowBrowserFormAfterSubmission;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Whether to submit anonymously")]
        public bool SubmitAnonymously;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Submit all exceptions automatically")]
        public bool SubmitAutomatically;
        [JetBrains.Application.Settings.SettingsEntryAttribute("", "Tracker username")]
        public string Username;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Watch exception storage")]
        public bool WatchExceptionStorage;
    }
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    public class SubmitToTrackerExceptionReportServiceUpgrader : JetBrains.Application.Configuration.SettingTablesUpgrader
    {
        public SubmitToTrackerExceptionReportServiceUpgrader(JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations) { }
        protected override void DoUpgrade(JetBrains.Application.Configuration.IComponentSettingsProvider legacySettingsProvider, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore, JetBrains.DataFlow.Lifetime upgradeLifetime, JetBrains.Application.Configuration.SettingsTableBase workspaceSettingsTable, JetBrains.Application.Configuration.SettingsTableBase globalSettingsTable) { }
    }
}
namespace JetBrains.UI.Extensions
{
    
    public class static Bindings
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Data.Binding Converter<TSource, TTarget>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Data.Binding thіs, [JetBrains.Annotations.NotNullAttribute()] System.Func<TSource, TTarget> FConverter) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Data.Binding Converter<TSource, TTarget>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Data.Binding thіs, [JetBrains.Annotations.NotNullAttribute()] System.Func<TSource, TTarget> FConverterForth, [JetBrains.Annotations.NotNullAttribute()] System.Func<TTarget, TSource> FConverterBack) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Data.Binding Create<TContainingType, TMemberValue>([JetBrains.Annotations.NotNullAttribute()] System.Linq.Expressions.Expression<System.Func<TContainingType, TMemberValue>> lambdaexpression) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Data.Binding IProperty<TValue>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Data.Binding thіs, JetBrains.DataFlow.IProperty<TValue> propertySource) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Data.Binding Mode([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Data.Binding thіs, System.Windows.Data.BindingMode bindingMode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Data.Binding Path<TContainingType, TMemberValue>([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Data.Binding thіs, [JetBrains.Annotations.NotNullAttribute()] System.Linq.Expressions.Expression<System.Func<TContainingType, TMemberValue>> lambdaexpression) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Data.Binding Path([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Data.Binding thіs, [JetBrains.Annotations.NotNullAttribute()] System.Windows.DependencyProperty property) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Data.Binding RelativeSource([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Data.Binding thіs, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Data.RelativeSource source) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Data.Binding Source([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Data.Binding thіs, object source) { }
    }
    public class static ColorEx
    {
        public static System.Drawing.SolidBrush ToBrush(this System.Drawing.Color color) { }
    }
    public class CreateOrReuseWindow
    {
        public CreateOrReuseWindow([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window owner, [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.DataFlow.Lifetime, System.Windows.Window> FCreateNew) { }
        public void Show() { }
    }
    public class DataTemplateSelectorDelegate : System.Windows.Controls.DataTemplateSelector
    {
        public DataTemplateSelectorDelegate([JetBrains.Annotations.NotNullAttribute()] System.Func<object, System.Windows.DependencyObject, System.Windows.DataTemplate> FSelect) { }
        public override System.Windows.DataTemplate SelectTemplate(object item, System.Windows.DependencyObject container) { }
    }
    public class static ImageEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Drawing.Bitmap ToGrayscale([JetBrains.Annotations.NotNullAttribute()] this System.Drawing.Image thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
    }
    public class ListViewColumn : System.Windows.DependencyObject
    {
        public static readonly System.Windows.DependencyProperty IsStretchedProperty;
        public static bool GetIsStretched(System.Windows.DependencyObject obj) { }
        public static object OnCoerceStretch(System.Windows.DependencyObject source, object value) { }
        public static void SetIsStretched(System.Windows.DependencyObject obj, bool value) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.UI.Settings.LayoutSettings), "Window persistence data.")]
    public class PersistenceBehaviorSettings
    {
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Window bounds")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, string> WindowBounds;
    }
    public class StyleSelectorDelegate : System.Windows.Controls.StyleSelector
    {
        public StyleSelectorDelegate([JetBrains.Annotations.NotNullAttribute()] System.Func<object, System.Windows.DependencyObject, System.Windows.Style> FSelect) { }
        public override System.Windows.Style SelectStyle(object item, System.Windows.DependencyObject container) { }
    }
    public class static WindowsFormsUtil
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static T BindToLifetime<T>([JetBrains.Annotations.NotNullAttribute()] this T control, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime)
            where T : System.Windows.Forms.Control { }
        public static System.Drawing.Color FromWebColor(string color) { }
        public static T GetDataTyped<T>(this System.Windows.Forms.IDataObject dataObject)
            where T :  class { }
        public static void SetTabOrder(params System.Windows.Forms.Control[] controls) { }
    }
    public class static WindowsPresentaionTreeHelper
    {
        public static T FindAncestor<T>(this System.Windows.DependencyObject reference)
            where T : System.Windows.DependencyObject { }
        public static System.Windows.DependencyObject FindAncestor(this System.Windows.DependencyObject reference, System.Func<System.Windows.DependencyObject, bool> predicate) { }
        public static T FindDescendant<T>(this System.Windows.DependencyObject reference)
            where T : System.Windows.DependencyObject { }
        public static System.Windows.DependencyObject FindDescendant(this System.Windows.DependencyObject reference, System.Func<System.Windows.DependencyObject, bool> predicate) { }
        public static T FindLogicalAncestor<T>(this System.Windows.DependencyObject reference)
            where T : System.Windows.DependencyObject { }
        public static System.Windows.DependencyObject FindLogicalAncestor(this System.Windows.DependencyObject reference, System.Func<System.Windows.DependencyObject, bool> predicate) { }
        public static T FindLogicalDescendant<T>(this System.Windows.DependencyObject reference)
            where T : System.Windows.DependencyObject { }
        public static System.Windows.DependencyObject FindLogicalDescendant(this System.Windows.DependencyObject reference, System.Func<System.Windows.DependencyObject, bool> predicate) { }
        public static T FindVisualAncestor<T>(this System.Windows.DependencyObject reference)
            where T : System.Windows.DependencyObject { }
        public static System.Windows.DependencyObject FindVisualAncestor(this System.Windows.DependencyObject reference, System.Func<System.Windows.DependencyObject, bool> predicate) { }
        public static T FindVisualDescendant<T>(this System.Windows.DependencyObject reference)
            where T : System.Windows.DependencyObject { }
        public static System.Windows.DependencyObject FindVisualDescendant(this System.Windows.DependencyObject reference, System.Func<System.Windows.DependencyObject, bool> predicate) { }
        public static T GetLogicalRoot<T>(this System.Windows.DependencyObject reference)
            where T : System.Windows.DependencyObject { }
        public static T GetVisualRoot<T>(this System.Windows.DependencyObject reference)
            where T : System.Windows.DependencyObject { }
    }
    public class static WindowStyles
    {
        public static readonly System.Windows.DependencyProperty CanMaximizeProperty;
        public static readonly System.Windows.DependencyProperty CanMinimizeProperty;
        public static readonly System.Windows.DependencyProperty HasHelpButtonProperty;
        public static readonly System.Windows.RoutedEvent HelpRequestedEvent;
        public static void AddHelpRequestedHandler(System.Windows.DependencyObject window, System.Windows.RoutedEventHandler handler) { }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.Window))]
        public static bool GetCanMaximize(System.Windows.Window element) { }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.Window))]
        public static bool GetCanMinimize(System.Windows.Window element) { }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.Window))]
        public static bool GetHasHelpButton(System.Windows.Window element) { }
        public static void RemoveHelpRequestedHandler(System.Windows.DependencyObject window, System.Windows.RoutedEventHandler handler) { }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.Window))]
        public static void SetCanMaximize(System.Windows.Window element, bool value) { }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.Window))]
        public static void SetCanMinimize(System.Windows.Window element, bool value) { }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.Window))]
        public static void SetHasHelpButton(System.Windows.Window element, bool value) { }
    }
}
namespace JetBrains.UI.Extensions.Commands
{
    
    public abstract class Command<T> : JetBrains.UI.Extensions.Commands.CommandMixin, JetBrains.UI.Extensions.Commands.ICommand<T>, System.Windows.Input.ICommand
    
    {
        public abstract bool CanExecute(T parameter);
        public abstract void Execute(T parameter);
    }
    public abstract class CommandMixin
    {
        protected CommandMixin() { }
        public event System.EventHandler CanExecuteChanged;
        protected void RaiseCanExecuteChangedOnCorrectThread() { }
    }
    public class CommandReference : System.Windows.Freezable, System.Windows.Input.ICommand
    {
        public static readonly System.Windows.DependencyProperty CommandProperty;
        public System.Windows.Input.ICommand Command { get; set; }
        public event System.EventHandler CanExecuteChanged;
        public event System.Func<object, bool> CanExecuteRequested;
        public event System.Action<object> ExecuteRequested;
        public bool CanExecute(object parameter) { }
        protected override System.Windows.Freezable CreateInstanceCore() { }
        public void Execute(object parameter) { }
    }
    public class DelegateCommand : JetBrains.UI.Extensions.Commands.CommandMixin, System.Windows.Input.ICommand
    {
        public DelegateCommand([JetBrains.Annotations.NotNullAttribute()] System.Action<object> execute, System.Predicate<object> canExecute = null) { }
        public DelegateCommand([JetBrains.Annotations.NotNullAttribute()] System.Action execute, System.Func<bool> canExecute = null) { }
        public bool CanExecute(object parameter) { }
        public void Execute(object parameter) { }
        public void RaiseCanExecuteChanged() { }
    }
    public class DelegateCommand<T> : JetBrains.UI.Extensions.Commands.Command<T>
    
    {
        public DelegateCommand([JetBrains.Annotations.NotNullAttribute()] System.Action<T> execute, System.Predicate<T> canExecute = null) { }
        public override bool CanExecute(T parameter) { }
        public override void Execute(T parameter) { }
        public void RaiseCanExecuteChanged() { }
    }
    public interface ICommand<in T> : System.Windows.Input.ICommand
    
    {
        bool CanExecute(T param);
        void Execute(T param);
    }
    public class SignalCommand : JetBrains.DataFlow.ISignal<bool>, JetBrains.DataFlow.ISimpleSignal, System.IDisposable, System.Windows.Input.ICommand
    {
        public readonly JetBrains.DataFlow.IProperty<bool> IsCanExecute;
        public SignalCommand([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] string sSignalName, System.Action FFirstHandler = null) { }
        public event System.EventHandler System.Windows.Input.ICommand.CanExecuteChanged;
        public void Advise(JetBrains.DataFlow.Lifetime lifetime, System.Action<bool> handler) { }
        public void Fire(bool value) { }
        public void Fire(bool value, object cookie) { }
        public void Fire() { }
    }
    public class SimpleCommand : JetBrains.UI.Extensions.Commands.CommandMixin, System.Windows.Input.ICommand
    {
        public SimpleCommand(System.Action execute, bool canExecute = True) { }
        public bool CanExecute { set; }
    }
    public class SimpleCommand<T> : JetBrains.UI.Extensions.Commands.CommandMixin, JetBrains.UI.Extensions.Commands.ICommand<T>, System.Windows.Input.ICommand
    
    {
        public SimpleCommand(System.Action<T> action, bool canExecute = True) { }
        public bool CanExecute { set; }
    }
}
namespace JetBrains.UI.GotoByName
{
    
    public abstract class GotoByNameController
    {
        public static readonly object EtcItemKey;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.Property<System.Action> FuncEtcItemExecute;
        protected readonly JetBrains.DataFlow.Property<bool> IsComplete;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ISimpleSignal ItemsGottenDirty;
        protected GotoByNameController([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.GotoByName.GotoByNameModel model, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IShellLocks locks) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Icons.IconId EtcItemIcon { get; set; }
        public virtual int MenuItemsCountLimit { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.GotoByName.GotoByNameModel Model { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.DataFlow.Lifetime NestedLifetime { get; }
        protected virtual void BeforeUpdateItems() { }
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem CreateEtcItem() { }
        protected abstract bool ExecuteItem([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item, JetBrains.DataFlow.ISignal<bool> closeBeforeExecute);
        protected abstract bool UpdateItems([JetBrains.Annotations.NotNullAttribute()] string filterString, System.Func<System.Collections.Generic.IEnumerable<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem>, JetBrains.UI.GotoByName.GotoByNameController.AddItemsBehavior, bool> itemsConsumer);
        public enum AddItemsBehavior
        {
            Append = 0,
            Replace = 1,
        }
    }
    public class GotoByNameMenu
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.PopupMenu.Impl.JetPopupMenuView> MenuView;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.PopupWindowManager.IPopupWindow> PopupWindow;
        public GotoByNameMenu(JetBrains.UI.GotoByName.GotoByNameMenuComponent gotoByNameMenuComponent, JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, JetBrains.UI.GotoByName.GotoByNameModel model, System.Windows.Forms.IWin32Window ownerwin, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Controls.GotoByName.GotoByNameDataConstants.SearchTextData initialSearchTextData) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class GotoByNameMenuComponent
    {
        public GotoByNameMenuComponent(JetBrains.Threading.IThreading invocator, JetBrains.UI.Application.IUIApplication environment, JetBrains.Application.Settings.ISettingsStore settings, JetBrains.UI.Tooltips.ITooltipManager tooltipman, JetBrains.UI.PopupWindowManager.PopupWindowManager popupWindowManager, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext, JetBrains.ActionManagement.IActionManager actionManager, JetBrains.ActionManagement.IShortcutManager shortcutManager, JetBrains.UI.Theming.ITheming theming) { }
        public JetBrains.ActionManagement.IActionManager ActionManager { get; }
        public JetBrains.UI.Application.IUIApplication Environment { get; }
        public JetBrains.Threading.IThreading Invocator { get; }
        public JetBrains.Application.Interop.NativeHook.IWindowsHookManager IWindowsHookManager { get; }
        public JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext MainWindowPopupWindowContext { get; }
        public JetBrains.UI.PopupWindowManager.PopupWindowManager PopupWindowManager { get; }
        public JetBrains.Application.Settings.ISettingsStore Settings { get; }
        public JetBrains.ActionManagement.IShortcutManager ShortcutManager { get; }
        public JetBrains.UI.Theming.ITheming Theming { get; }
        public JetBrains.UI.Tooltips.ITooltipManager Tooltipman { get; }
    }
    public class GotoByNameMenuView : JetBrains.UI.PopupMenu.Impl.JetPopupMenuView, JetBrains.Application.DataContext.IDataRuleProvider
    {
        public GotoByNameMenuView([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, JetBrains.UI.GotoByName.GotoByNameMenuComponent menuComponent, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc document, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window ownerwin, JetBrains.UI.Controls.GotoByName.GotoByNameDataConstants.SearchTextData initialSearchTextData, JetBrains.ActionManagement.IActionManager actionManager, JetBrains.ActionManagement.IShortcutManager shortcutManager) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Application.DataContext.IDataRule> GetDataRules() { }
    }
    public class GotoByNameModel
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<string> CaptionText;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<string> CheckBoxText;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ISignal<bool> CloseBeforeExecute;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<string> FilterText;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ISignal<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> IncomingExecuteItem;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<bool> IsCheckBoxChecked;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<bool> IsCheckBoxCheckerVisible;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<bool> IsCheckBoxVisible;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<bool> IsReady;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> Items;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<string> NotReadyMessage;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.IToolBarItemInfo> ToolbarButtons;
        public GotoByNameModel(JetBrains.DataFlow.Lifetime lifetime) { }
    }
}
namespace JetBrains.UI.GridTree.Helpers
{
    
    public class WeakCollectionChangedListener
    {
        public WeakCollectionChangedListener(System.Collections.Specialized.INotifyCollectionChanged source, System.Collections.Specialized.NotifyCollectionChangedEventHandler handler) { }
        public static JetBrains.UI.GridTree.Helpers.WeakCollectionChangedListener Create(System.Collections.Specialized.INotifyCollectionChanged source, System.Collections.Specialized.NotifyCollectionChangedEventHandler handler) { }
        public void Disconnect() { }
    }
}
namespace JetBrains.UI.Help
{
    
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Product)]
    public class ShowLocalHelpHandler : JetBrains.UI.Application.IShowHelp
    {
        public ShowLocalHelpHandler([JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.Lazy.Lazy<JetBrains.UI.Application.OfflineHelp> offlinehelp) { }
    }
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Product)]
    public class ShowOnlineHelpHandler : JetBrains.UI.Application.IShowHelp
    {
        public ShowOnlineHelpHandler([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor product, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.OpensUri opensUri) { }
        public virtual bool IsDisabled { get; set; }
    }
}
namespace JetBrains.UI.Hooks
{
    
    public class static AvalonOperationCrisp
    {
        public static void Execute() { }
        public delegate int SystemParametersInfoWDelegate(uint uiAction, uint uiParam, System.Void* pvParam, uint fWinIni);
    }
    public class AvalonOperationCrispComponent
    {
        public AvalonOperationCrispComponent() { }
    }
}
namespace JetBrains.UI.Icons.Animation
{
    
    public abstract class AnimatedIconId : JetBrains.UI.Icons.IconId { }
    public class RotatedIconId : JetBrains.UI.Icons.Animation.AnimatedIconId
    {
        public static readonly System.Windows.Media.Transform AnimatedRenderTransform;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Icons.IconId StaticIcon;
        public RotatedIconId([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId iconidStatic) { }
        public override int CompareTo(JetBrains.UI.Icons.IconId otherRaw) { }
        public override bool Equals(JetBrains.UI.Icons.IconId otherRaw) { }
        protected override int GetHashCodeCore() { }
        protected override string ToStringCore() { }
        public class static GdipBitmapFrames
        {
            [JetBrains.Annotations.NotNullAttribute()]
            public static System.Drawing.Bitmap GetAnimationFrameGdipBitmap([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.Animation.RotatedIconId id, double fFramePercentage, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager, JetBrains.UI.Icons.RasterizationResolution resolution) { }
        }
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Sharing.Common, JetBrains.Application.Lifecycle.DemandReclaimable, JetBrains.Application.Creation.PrimaryThread, JetBrains.Application.Access.PrimaryThread)]
    public class RotatedIconIdOwner : JetBrains.UI.Icons.IIconIdOwner { }
}
namespace JetBrains.UI.Icons.ColorIcons
{
    
    public class ColorIconId : JetBrains.UI.Icons.IconId
    {
        public readonly System.Drawing.Color Color;
        public ColorIconId(System.Drawing.Color color) { }
        public override int CompareTo(JetBrains.UI.Icons.IconId otherRaw) { }
        public override bool Equals(JetBrains.UI.Icons.IconId otherRaw) { }
        protected override int GetHashCodeCore() { }
        protected override string ToStringCore() { }
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Sharing.Common, JetBrains.Application.Lifecycle.DemandReclaimable, JetBrains.Application.Creation.PrimaryThread, JetBrains.Application.Access.PrimaryThread)]
    public class ColorIconIdOwner : JetBrains.UI.Icons.IIconIdOwner { }
}
namespace JetBrains.UI.Icons.CompiledIcons
{
    
    public abstract class CompiledIconClass { }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=false)]
    public class CompiledIconClassAttribute : JetBrains.Application.Parts.PartAttribute
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Icons.CompiledIcons.CompiledIconId IconId;
        public CompiledIconClassAttribute([JetBrains.Annotations.NotNullAttribute()] string sIconPackResourceName, int nIconInPack, [JetBrains.Annotations.NotNullAttribute()] string sIconName) { }
        public static JetBrains.UI.Icons.CompiledIcons.CompiledIconId TryGetCompiledIconClassId([JetBrains.Annotations.NotNullAttribute()] System.Type type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.OnError onerror) { }
        public static JetBrains.UI.Icons.CompiledIcons.CompiledIconId TryGetCompiledIconClassId([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Parts.PartCatalogueType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.OnError onerror) { }
    }
    public class CompiledIconId : JetBrains.UI.Icons.IconId
    {
        public readonly int IconIndex;
        public readonly string IconName;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Icons.CompiledIcons.CompiledIconPackIdentity IconPack;
        public CompiledIconId([JetBrains.Annotations.NotNullAttribute()] string sIconPackResourceName, int nIconInPack, [JetBrains.Annotations.NotNullAttribute()] string sIconName) { }
        public override int CompareTo(JetBrains.UI.Icons.IconId otherRaw) { }
        public override bool Equals(JetBrains.UI.Icons.IconId otherRaw) { }
        protected override int GetHashCodeCore() { }
        protected override string ToStringCore() { }
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Sharing.Common, JetBrains.Application.Lifecycle.DemandReclaimable, JetBrains.Application.Creation.PrimaryThread, JetBrains.Application.Access.PrimaryThread)]
    public class CompiledIconIdOwner : JetBrains.UI.Icons.IIconIdOwner
    {
        public CompiledIconIdOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Parts.IPartsCatalogueSet catalogset, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
    }
    public class CompiledIconPackIdentity
    {
        public readonly string Value;
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Icons.CompiledIcons.CompiledIconPackIdentity Create([JetBrains.Annotations.NotNullAttribute()] string value) { }
        public override string ToString() { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly | System.AttributeTargets.All, AllowMultiple=true)]
    public class CompiledIconsPackAttribute : JetBrains.Application.Parts.PartAttribute
    {
        public string[] IconNames;
        public string IconPackResourceIdentification;
        public class static ReflectionHelpers
        {
            public static readonly string IconNamesFieldName;
            public static readonly string IconPackResourceIdentificationFieldName;
        }
    }
}
namespace JetBrains.UI.Icons.ComposedIcons
{
    
    public class CompositeIconId : JetBrains.UI.Icons.IconId
    {
        public readonly JetBrains.UI.Icons.IconId[] Parts;
        public override int CompareTo(JetBrains.UI.Icons.IconId otherRaw) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Icons.IconId Compose([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId part0, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId part1) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Icons.IconId Compose([JetBrains.Annotations.NotNullAttribute()] params JetBrains.UI.Icons.IconId[] parts) { }
        public override bool Equals(JetBrains.UI.Icons.IconId otherRaw) { }
        protected override int GetHashCodeCore() { }
        protected override string ToStringCore() { }
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Sharing.Common, JetBrains.Application.Lifecycle.DemandReclaimable, JetBrains.Application.Creation.PrimaryThread, JetBrains.Application.Access.PrimaryThread)]
    public class CompositeIconIdOwner : JetBrains.UI.Icons.IIconIdOwner { }
}
namespace JetBrains.UI.Icons.EffectsOnIcons
{
    
    public class EffectOnIconId : JetBrains.UI.Icons.IconId
    {
        public readonly double Alpha;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Icons.IconId BaseIcon;
        public readonly double BlurRadius;
        public readonly System.Nullable<System.Windows.Media.Color> MonochromeColor;
        public EffectOnIconId([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId baseicon, double alpha = 1, System.Nullable<System.Windows.Media.Color> colorMonochrome = null, double fBlurRadius = 0) { }
        public override int CompareTo(JetBrains.UI.Icons.IconId otherRaw) { }
        public override bool Equals(JetBrains.UI.Icons.IconId otherRaw) { }
        protected override int GetHashCodeCore() { }
        protected override string ToStringCore() { }
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Sharing.Common, JetBrains.Application.Lifecycle.DemandReclaimable, JetBrains.Application.Creation.PrimaryThread, JetBrains.Application.Access.PrimaryThread)]
    public class EffectOnIconIdOwner : JetBrains.UI.Icons.IIconIdOwner { }
}
namespace JetBrains.UI.Icons
{
    
    public class static GenericIconThemeAspect
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.UI.Icons.IconThemeAspect Color;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.UI.Icons.IconThemeAspect Gray;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.UI.Icons.IconThemeAspect GrayDark;
        public class static Constants
        {
            public static readonly string AspectName;
            public static readonly double AspectPriority;
        }
    }
    public abstract class IconId : System.IComparable<JetBrains.UI.Icons.IconId>, System.IEquatable<JetBrains.UI.Icons.IconId>
    {
        public abstract int CompareTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId otherRaw);
        public virtual bool Equals(object obj) { }
        public abstract bool Equals(JetBrains.UI.Icons.IconId otherRaw);
        public virtual int GetHashCode() { }
        protected abstract int GetHashCodeCore();
        public virtual string ToString() { }
        protected abstract string ToStringCore();
    }
    public class static IconPlaceholder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Media.DrawingImage IconPlaceholderAvalon { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Drawing.Bitmap IconPlaceholderGdip { get; }
    }
    public sealed class IconTheme : System.IEquatable<JetBrains.UI.Icons.IconTheme>
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Icons.IconThemeAspect[] Aspects;
        public static readonly JetBrains.UI.Icons.IconTheme Default;
        public override bool Equals(object obj) { }
        public bool Equals(JetBrains.UI.Icons.IconTheme other) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Icons.IconTheme FromAspectsUnsorted([JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.UI.Icons.IconThemeAspect> aspects1) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Icons.IconTheme FromSingleAspect([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconThemeAspect aspect) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public sealed class IconThemeAspect : System.IEquatable<JetBrains.UI.Icons.IconThemeAspect>
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly string AspectName;
        public readonly double AspectPriority;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly string AspectValue;
        public IconThemeAspect([JetBrains.Annotations.NotNullAttribute()] string aspectName, double aspectPriority, [JetBrains.Annotations.NotNullAttribute()] string aspectValue) { }
        public override bool Equals(object obj) { }
        public bool Equals(JetBrains.UI.Icons.IconThemeAspect other) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public interface IIconIdOwner
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Type IconIdType { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Windows.Media.ImageSource TryGetImage([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId iconid, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconTheme theme, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.OnError onerror);
    }
    public interface IThemedIconManager
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<JetBrains.UI.Icons.IconTheme> CurrentIconTheme { get; }
        JetBrains.UI.Icons.ThemedIconManagerIcons Icons { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.Icons.IThemedIconManagerRawApi GetRawApi();
    }
    public class static IThemedIconManagerEx
    {
        public static JetBrains.UI.Icons.ThemedIconLoader GetIcon<TIconClass>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Icons.IThemedIconManager thіs)
            where TIconClass : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass { }
    }
    public interface IThemedIconManagerPerThemeCache
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Drawing.Bitmap GetIconGdipBitmap([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId id, JetBrains.UI.Icons.RasterizationResolution resolution);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Windows.Media.ImageSource GetIconImageSource([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId iconid);
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Windows.Media.ImageSource TryGetIconImageSource([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId id);
    }
    public interface IThemedIconManagerRawApi
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Drawing.Bitmap GetIconGdipBitmap([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId id, JetBrains.UI.Icons.RasterizationResolution resolution);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<System.Drawing.Bitmap> GetIconGdipBitmapLive([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId iconId, JetBrains.UI.Icons.RasterizationResolution resolution);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Windows.Media.ImageSource GetIconImageSource([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId id);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<System.Windows.Media.ImageSource> GetIconImageSourceLive([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId iconId);
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Windows.Media.ImageSource TryGetIconImageSource([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId id);
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class PublishThemedIconManagerToPlatformResources
    {
        public PublishThemedIconManagerToPlatformResources([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Wpf.IPlatformResourceDictionary platformResourceDictionary, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
    }
    public enum RasterizationResolution
    {
        DeviceIndependent96dpi = 0,
        ScreenResolution = 1,
        NotSure = 0,
    }
    public class static RasterizationResolutionEx
    {
        public static JetBrains.Util.Interop.DpiResolution ToDpi(this JetBrains.UI.Icons.RasterizationResolution thіs) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class RegisterThemedIconDefaultViews
    {
        public RegisterThemedIconDefaultViews([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Wpf.IAutomationViewsRegistry automationViewsRegistry) { }
    }
    public class ThemedIconExtension : System.Windows.Markup.MarkupExtension
    {
        public static readonly System.Windows.DependencyProperty ThemedIconExtensionAppliedProperty;
        public ThemedIconExtension(System.Type typeofIcon) { }
        public System.Type TypeofIcon { get; set; }
        public static void ApplyTo([JetBrains.Annotations.NotNullAttribute()] System.Windows.FrameworkElement elemTarget, [JetBrains.Annotations.NotNullAttribute()] System.Windows.DependencyProperty propTarget, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId iconid, [JetBrains.Annotations.CanBeNullAttribute()] System.IServiceProvider serviceProvider) { }
        public override object ProvideValue([JetBrains.Annotations.CanBeNullAttribute()] System.IServiceProvider serviceProvider) { }
    }
    public struct ThemedIconLoader
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Icons.IconId IconId;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Icons.IThemedIconManager ThemedIconManager;
        public ThemedIconLoader([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId iconId, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [System.ObsoleteAttribute("For private use of DotCover only.")]
        public System.Drawing.Bitmap CurrentGdipBitmap { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Drawing.Bitmap CurrentGdipBitmap96 { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Drawing.Bitmap CurrentGdipBitmapScreenDpi { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Windows.Media.ImageSource CurrentImageSource { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        [System.ObsoleteAttribute("For private use of DotCover only.")]
        public JetBrains.DataFlow.IProperty<System.Drawing.Bitmap> LiveGdipBitmap { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<System.Drawing.Bitmap> LiveGdipBitmap96 { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<System.Drawing.Bitmap> LiveGdipBitmapScreenDpi { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<System.Windows.Media.ImageSource> LiveImageSource { get; }
    }
    public class static ThemedIconLoaderEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Drawing.Bitmap CurrentGdipBitmapNotSure(this JetBrains.UI.Icons.ThemedIconLoader thіs) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.DataFlow.IProperty<System.Drawing.Bitmap> LiveGdipBitmapNotSure(this JetBrains.UI.Icons.ThemedIconLoader thіs) { }
        public static System.Drawing.Size MeasureGdip(this JetBrains.UI.Icons.ThemedIconLoader thіs, JetBrains.UI.Icons.RasterizationResolution resolution) { }
        public static void PaintGdip(this JetBrains.UI.Icons.ThemedIconLoader thіs, System.Drawing.Graphics g, System.Drawing.Rectangle rectangle, JetBrains.UI.Icons.RasterizationResolution resolution) { }
    }
    public class ThemedIconManager : JetBrains.UI.Icons.IThemedIconManager, JetBrains.UI.Icons.IThemedIconManagerRawApi
    {
        public ThemedIconManager([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifeComponent, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap iconowners, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.DataFlow.IViewable<JetBrains.UI.Icons.Settings.IThemedIconThemeOracle> themeoracles) { }
        [JetBrains.Application.ShellComponentAttribute()]
        public class IconIdOwnersMap
        {
            public IconIdOwnersMap([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.DataFlow.IViewable<JetBrains.UI.Icons.IIconIdOwner> iconowners) { }
            [JetBrains.Annotations.NotNullAttribute()]
            public static JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] params JetBrains.UI.Icons.IIconIdOwner[] owners) { }
            [JetBrains.Annotations.CanBeNullAttribute()]
            public JetBrains.UI.Icons.IIconIdOwner TryGetOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId iconid, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.OnError onerror) { }
        }
    }
    public struct ThemedIconManagerIcons
    {
        public ThemedIconManagerIcons([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager thicman) { }
        public JetBrains.UI.Icons.ThemedIconLoader this[JetBrains.UI.Icons.IconId id] { get; }
    }
    public class ThemedIconManagerPerThemeCache : JetBrains.UI.Icons.IThemedIconManagerPerThemeCache
    {
        public ThemedIconManagerPerThemeCache([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconTheme theme, JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap iconowners, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Drawing.Bitmap GetIconGdipBitmap([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId id, JetBrains.UI.Icons.RasterizationResolution resolution) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Windows.Media.ImageSource GetIconImageSource([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId iconid) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public System.Windows.Media.ImageSource TryGetIconImageSource([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId id) { }
    }
    public class ThemedIconManagerResourceKey : System.Windows.ResourceKey, System.IEquatable<JetBrains.UI.Icons.ThemedIconManagerResourceKey>
    {
        public static readonly JetBrains.UI.Icons.ThemedIconManagerResourceKey Key;
        public override System.Reflection.Assembly Assembly { get; }
        public bool Equals(JetBrains.UI.Icons.ThemedIconManagerResourceKey other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    [JetBrains.Annotations.UsedImplicitlyAttribute()]
    public class ThemedIconViewImage : System.Windows.Controls.Image
    {
        public static readonly System.Windows.DependencyProperty LiveImageSourceProperty;
        public static readonly System.Windows.DependencyProperty ThemedIconsManagerProperty;
        public ThemedIconViewImage() { }
        public ThemedIconViewImage([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Icons.IconId id) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Icons.IconId IconId { get; set; }
        protected override void OnRender(System.Windows.Media.DrawingContext dc) { }
    }
}
namespace JetBrains.UI.Icons.Settings
{
    
    public class GeneralThemeSelectionControlAutomation : JetBrains.UI.Controls.StackPanelAutomation
    {
        public GeneralThemeSelectionControlAutomation(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Options.OptionsSettingsSmartContext settings, System.Collections.Generic.IEnumerable<JetBrains.UI.Icons.Settings.IIconsForIconThemeSelectionSample> samples, JetBrains.Threading.IThreading threading, JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap iconowners, JetBrains.Util.ILogger logger) { }
        public GeneralThemeSelectionControlAutomation(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.IContextBoundSettingsStoreLive settings, System.Collections.Generic.IEnumerable<JetBrains.UI.Icons.Settings.IIconsForIconThemeSelectionSample> samples, JetBrains.Threading.IThreading threading, JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap iconowners, JetBrains.Util.ILogger logger, int dummyToHideCtorFromContainer) { }
        public class IconThemeRadioLabelAutomation : JetBrains.UI.Wpf.AAutomation
        {
            public IconThemeRadioLabelAutomation([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText text, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.List<JetBrains.UI.RichText.RichText> alllabels, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.Settings.GeneralThemeSelectionControlAutomation.IconThemeSampleAutomation sample) { }
            public System.Collections.Generic.List<JetBrains.UI.RichText.RichText> AllLabels { get; }
            public JetBrains.UI.Icons.Settings.GeneralThemeSelectionControlAutomation.IconThemeSampleAutomation IconsSample { get; }
            public JetBrains.UI.RichText.RichText Text { get; }
        }
        public class IconThemeSampleAutomation : JetBrains.UI.Wpf.AAutomation
        {
            public readonly System.Collections.Generic.List<System.Windows.Media.ImageSource> SampleIconImages;
            public IconThemeSampleAutomation([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconTheme theme, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<JetBrains.UI.Icons.IconId> samples, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap iconowners, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
        }
    }
    public class static GeneralThemeSelectionControlView
    {
        [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
        public class IconThemeRadioLabelView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.Icons.Settings.GeneralThemeSelectionControlAutomation.IconThemeRadioLabelAutomation>
        {
            protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Icons.Settings.GeneralThemeSelectionControlAutomation.IconThemeRadioLabelAutomation automation) { }
        }
        [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
        public class IconThemeSampleView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.Icons.Settings.GeneralThemeSelectionControlAutomation.IconThemeSampleAutomation>
        {
            protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Icons.Settings.GeneralThemeSelectionControlAutomation.IconThemeSampleAutomation automation) { }
        }
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Sharing.Common, JetBrains.Application.Lifecycle.DemandReclaimable, JetBrains.Application.Creation.AnyThread, JetBrains.Application.Access.AnyThread)]
    public class IconsForIconThemeSelectionSampleUi : JetBrains.UI.Icons.Settings.IIconsForIconThemeSelectionSample { }
    public enum IconThemeSelection
    {
        Automatic = 0,
        Color = 1,
        Gray = 2,
        GrayDark = 3,
    }
    public interface IIconsForIconThemeSelectionSample
    {
        System.Collections.Generic.IEnumerable<JetBrains.UI.Icons.IconId> SampleIcons { get; }
    }
    public interface IThemedIconThemeOracle
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<JetBrains.UI.Icons.IconThemeAspect[]> SuggestedIconTheme { get; }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.UI.UserInterfaceSettings), "Controls theme selection for themed icons.")]
    public class ThemedIconSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(0, "Selects the icon theme to use when rendering application icons.")]
        public JetBrains.UI.Icons.Settings.IconThemeSelection IconThemeSelection;
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Sharing.Common, JetBrains.Application.Lifecycle.DemandReclaimable, JetBrains.Application.Creation.PrimaryThread, JetBrains.Application.Access.PrimaryThread)]
    public class ThemedIconSettingsLoader : JetBrains.UI.Icons.Settings.IThemedIconThemeOracle
    {
        public ThemedIconSettingsLoader(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.ISettingsStore store, JetBrains.DataFlow.IProperty<JetBrains.UI.Icons.IconThemeAspect[]> propAutoSelectOverride) { }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Icons.IconThemeAspect[]> SuggestedIconTheme { get; }
    }
}
namespace JetBrains.UI.License
{
    
    public class EditionsVisibilityConverter : System.Windows.Data.IValueConverter
    {
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public interface ILicenseInformationViewModel
    {
        System.Windows.Input.ICommand AboutLicenseServerCommand { get; }
        System.Windows.Input.ICommand AboutPermanentLicenseCommand { get; }
        bool AutoDetectLicenseServer { get; set; }
        System.Windows.Input.ICommand DeactivateCommand { get; }
        string EditionFixedByReason { get; }
        System.Collections.Generic.IEnumerable<JetBrains.UI.License.IProductEditionViewModel> Editions { get; }
        double EvaluationPercentage { get; }
        string ExpirationDescription { get; }
        System.Nullable<bool> HasIssues { get; }
        System.Nullable<bool> HasNonTrivialIssues { get; }
        System.Windows.Input.ICommand HelpCommand { get; }
        bool IsEvaluationAvailable { get; }
        bool IsExpirationInfoAvailable { get; }
        bool IsExpired { get; }
        System.Nullable<bool> IsLicenseKeyValid { get; }
        bool IsLicenseServerAddressFormatValid { get; }
        bool IsLicenseToValid { get; }
        bool IsPermanentLicenseIssued { get; }
        string IssuesDescription { get; }
        string LicensedTo { get; set; }
        string LicenseKey { get; set; }
        string LicenseKeyValidationDescription { get; }
        JetBrains.UI.License.LicenseMethod LicenseMethod { get; set; }
        string LicenseServerAddress { get; set; }
        string LicenseToValidationDescription { get; }
        System.Windows.Input.ICommand ObtainPermanentLicenseCommand { get; }
        string ProductDescription { get; }
        System.Windows.Input.ICommand ReleasePermanentLicenseCommand { get; }
        JetBrains.UI.License.IProductEditionViewModel SelectedEdition { get; set; }
        public event System.EventHandler CancelRequest;
        public event System.EventHandler OkRequest;
    }
    public interface IProductEditionViewModel
    {
        string Name { get; }
        JetBrains.Application.ProductEdition GetModel();
    }
    public class LicenseInformationViewModel : JetBrains.UI.License.ILicenseInformationViewModel, System.ComponentModel.INotifyPropertyChanged
    {
        public LicenseInformationViewModel(JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.UI.Application.ILicenseCheckerComponent licenseChecker, JetBrains.UI.Application.HelpSystem helpSystem, JetBrains.UI.Application.OpensUri opensUri, System.Func<JetBrains.UI.Application.License.LicenseInformation> getLicenseInformation) { }
        public System.Windows.Input.ICommand AboutLicenseServerCommand { get; }
        public System.Windows.Input.ICommand AboutPermanentLicenseCommand { get; }
        public bool AutoDetectLicenseServer { get; set; }
        public System.Windows.Input.ICommand DeactivateCommand { get; }
        public System.Windows.Media.ImageSource DialogHeaderImage { get; }
        public System.Windows.Media.ImageSource DialogIcon { get; }
        public string EditionFixedByReason { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.License.IProductEditionViewModel> Editions { get; }
        public double EvaluationPercentage { get; }
        public string ExpirationDescription { get; }
        public System.Nullable<bool> HasIssues { get; set; }
        public System.Nullable<bool> HasNonTrivialIssues { get; }
        public System.Windows.Input.ICommand HelpCommand { get; }
        public bool IsEvaluationAvailable { get; }
        public bool IsExpirationInfoAvailable { get; }
        public bool IsExpired { get; }
        public System.Nullable<bool> IsLicenseKeyValid { get; set; }
        public bool IsLicenseServerAddressFormatValid { get; }
        public bool IsLicenseToValid { get; }
        public bool IsPermanentLicenseIssued { get; }
        public bool IsSelectedEditionFixed { get; }
        public string IssuesDescription { get; set; }
        public string LicensedTo { get; set; }
        public string LicenseKey { get; set; }
        public string LicenseKeyValidationDescription { get; }
        public JetBrains.UI.License.LicenseMethod LicenseMethod { get; set; }
        public string LicenseServerAddress { get; set; }
        public string LicenseToValidationDescription { get; }
        public System.Windows.Input.ICommand ObtainPermanentLicenseCommand { get; }
        public string ProductDescription { get; }
        public System.Windows.Input.ICommand PurchaseCommand { get; }
        public System.Windows.Input.ICommand ReleasePermanentLicenseCommand { get; }
        public JetBrains.UI.License.IProductEditionViewModel SelectedEdition { get; set; }
        public event System.EventHandler CancelRequest;
        public event System.EventHandler OkRequest;
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        public JetBrains.Application.License.LicenseMode GetLicenseMode() { }
        [JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute()]
        protected virtual void OnPropertyChanged(string propertyName) { }
        public JetBrains.UI.Application.License.LicenseInformation ToLicenseInformation() { }
    }
    public class LicenseInformationWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector
    {
        public LicenseInformationWindow() { }
        public LicenseInformationWindow(JetBrains.UI.License.ILicenseInformationViewModel licenseInformationViewModel) { }
        public void InitializeComponent() { }
    }
    public enum LicenseMethod
    {
        [System.ComponentModel.DescriptionAttribute("Free Evaluation")]
        Evaluation = 0,
        [System.ComponentModel.DescriptionAttribute("Single User")]
        LicenseKey = 1,
        [System.ComponentModel.DescriptionAttribute("From License Server")]
        LicenseServer = 2,
    }
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Product)]
    public class LicenseSettingsLocation
    {
        public LicenseSettingsLocation([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Env.Components.ProductSettingsLocation productSettingsLocation) { }
        public virtual string EnvironmentSuffix { get; }
        public virtual string ProductRegistryKey { get; }
        public virtual JetBrains.Util.FileSystemPath UserSettingsRoamingDir { get; }
    }
    public class ObtainPermanentLicenseRequestEventArgs : System.EventArgs
    {
        public bool IsSuccessful { get; set; }
        public string Message { get; set; }
    }
    public class ObtainPermanentLicenseWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector
    {
        public static readonly System.Windows.DependencyProperty ActivationCodeProperty;
        public static readonly System.Windows.DependencyProperty BannerProperty;
        public static readonly System.Windows.DependencyProperty CanInitiateLicenseActivationProperty;
        public static readonly System.Windows.DependencyProperty CanSendRequestProperty;
        public static readonly System.Windows.DependencyProperty EmailProperty;
        public static readonly System.Windows.DependencyProperty ErrorMessageProperty;
        public static readonly System.Windows.DependencyProperty HasErrorOccuredProperty;
        public static readonly System.Windows.DependencyProperty HasLicenseIssuedProperty;
        public ObtainPermanentLicenseWindow(JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.UI.Application.HelpSystem helpSystem) { }
        public string ActivationCode { get; set; }
        public System.Windows.Media.ImageSource Banner { get; set; }
        public bool CanInitiateLicenseActivation { get; set; }
        public bool CanInitiateRequestSending { get; set; }
        public string Email { get; set; }
        public string ErrorMessage { get; set; }
        public bool HasErrorOccured { get; set; }
        public bool HasLicenseIssued { get; set; }
        public event System.EventHandler<JetBrains.UI.License.ObtainPermanentLicenseRequestEventArgs> ActivateLicense;
        public event System.EventHandler<JetBrains.UI.License.ObtainPermanentLicenseRequestEventArgs> SendRequest;
        public void InitializeComponent() { }
        protected override void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
    }
    public class ProductEditionViewModel : JetBrains.UI.License.IProductEditionViewModel
    {
        public ProductEditionViewModel(JetBrains.Application.ProductEdition productEdition) { }
        public string Name { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public JetBrains.Application.ProductEdition GetModel() { }
        public override string ToString() { }
    }
    [JetBrains.Application.Env.EnvironmentComponentAttribute(JetBrains.Application.Sharing.Product)]
    public class UITimeBombComponent : JetBrains.Application.License.TimeBombComponent
    {
        public UITimeBombComponent([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.Util.Lazy.Lazy<JetBrains.UI.Application.IMainWindow> mainWindow, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading invocator, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor applicationDescriptor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.OpensUri opensUri) { }
        protected override void ReportBetaExpired() { }
    }
}
namespace JetBrains.UI.License.LicenseServerSupport
{
    
    public class SynchronizedLifetimeDefinitionForLicenseServerClient
    {
        public SynchronizedLifetimeDefinitionForLicenseServerClient(string id) { }
        public SynchronizedLifetimeDefinitionForLicenseServerClient(string id, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime otherThreadLifetime) { }
        public bool IsTerminated { get; }
        public bool DoIfAlive(System.Action<JetBrains.DataFlow.Lifetime> action) { }
        public void Terminate() { }
    }
}
namespace JetBrains.UI.Options
{
    
    public enum Defaultness
    {
        AllInDefault = 0,
        SomeSetExplicitlyToDefaultValue = 1,
        SomeSetToNonDefault = 2,
    }
    public class DependentSettingsState
    {
        public readonly JetBrains.UI.Options.Defaultness Defaultness;
        public readonly JetBrains.UI.Options.Dirtiness Dirtiness;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly JetBrains.UI.Options.DependentSettingsState Empty;
        public readonly bool IsActive;
        public DependentSettingsState(bool isActive, JetBrains.UI.Options.Dirtiness dirtiness, JetBrains.UI.Options.Defaultness defaultness) { }
    }
    public enum Dirtiness
    {
        AllClean = 0,
        SomeDirty = 1,
    }
    public interface IDependentSettings
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<JetBrains.UI.Options.DependentSettingsState> State { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Action ForceDefaultValueAction();
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Action ResetAction();
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Action RevertAction();
    }
    public interface IDependentSettingsComposite : JetBrains.UI.Options.IDependentSettings { }
    public interface IOptionPagesList
    {
        void AddOptionsPage([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Type typePage, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.OptionsPageAttribute attribute);
        [JetBrains.Annotations.NotNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.UI.Options.OptionsPageEntity> GetOptionPages();
    }
    public interface IOptionsAutomation1 : JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.UI.Options.IOptionsAutomation1> Children { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.UI.Options.SettingsSchemaInstance> Settings { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Options.OptionsSettingsSmartContext Store { get; }
    }
    public interface IOptionsAutomation2 : JetBrains.UI.Options.IDependentSettings, JetBrains.UI.Options.IDependentSettingsComposite, JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Collections.Generic.ICollection<JetBrains.UI.Options.IOptionsAutomation2> Children { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Wpf.IAutomation Content { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Options.IDependentSettings DependentSettings { get; }
        JetBrains.UI.Options.SettingsStateIndicatorAutomation Indicator { get; }
    }
    public interface IOptionsDialog : System.Windows.Forms.IWin32Window
    {
        JetBrains.UI.Options.IOptionsPage CurrentPage { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.Options.OptionsSettingsSmartContext SettingsStoreSmartContext { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.WindowManagement.WindowFrame GetOptionsPageWindowFrame([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.IOptionsPage page);
        [JetBrains.Threading.GuardAttribute(JetBrains.Threading.Rgc.Guarded)]
        JetBrains.UI.Options.IOptionsPage GetPage([JetBrains.Annotations.NotNullAttribute()] string id);
    }
    public interface IOptionsPage
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.CrossFramework.EitherControl Control { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string Id { get; }
        bool OnOk();
        bool ValidatePage();
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class OptionPagesList : JetBrains.UI.Options.IOptionPagesList
    {
        protected readonly System.Collections.Generic.IList<JetBrains.UI.Options.OptionsPageEntity> myManuallyAddedPages;
        public OptionPagesList([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Parts.IPartsCatalogueSet catalogueSet, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IApplicationDescriptor product) { }
        public virtual void AddOptionsPage([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Type typePage, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.OptionsPageAttribute attribute) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public virtual System.Collections.Generic.ICollection<JetBrains.UI.Options.OptionsPageEntity> GetOptionPages() { }
        protected virtual bool IsPageInConfiguration(JetBrains.UI.Options.OptionsPageAttribute attribute, JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations, JetBrains.Application.IApplicationDescriptor product) { }
    }
    public class OptionPagesTree
    {
        public OptionPagesTree(System.Collections.Generic.IEnumerable<JetBrains.UI.Options.OptionsPageEntity> optionpages) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Options.OptionsPageDescriptor RootElement { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Options.OptionsPageDescriptor GetElementByID([JetBrains.Annotations.NotNullAttribute()] string id) { }
        public bool IsValidID([JetBrains.Annotations.CanBeNullAttribute()] string id) { }
    }
    public class OptionsAutomationBase : JetBrains.UI.Options.IDependentSettings, JetBrains.UI.Options.IDependentSettingsComposite, JetBrains.UI.Options.IOptionsAutomation2, JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.DataFlow.ICollectionEvents<JetBrains.UI.Options.IOptionsAutomation2> Children;
        public OptionsAutomationBase(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Options.IDependentSettings dependentSettings, JetBrains.UI.Wpf.IAutomation content) { }
        public JetBrains.UI.Options.SettingsStateIndicatorAutomation Indicator { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Options.DependentSettingsState> State { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
        public System.Action ForceDefaultValueAction() { }
        public System.Action ResetAction() { }
        public System.Action RevertAction() { }
    }
    public class OptionsDialog : System.Windows.Forms.Form, JetBrains.UI.Options.IOptionsDialog, System.Windows.Forms.IWin32Window
    {
        public readonly JetBrains.DataFlow.Property<JetBrains.UI.Options.IOptionsPage> CurrentPageProperty;
        public OptionsDialog(
                    JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, 
                    JetBrains.Application.DataContext.DataContexts datacontexts, 
                    JetBrains.Threading.IThreading invocator, 
                    JetBrains.Application.IApplicationDescriptor product, 
                    JetBrains.UI.CommonControls.Fonts.FontsManager fontsman, 
                    JetBrains.UI.Application.HelpSystem helpsystem, 
                    JetBrains.UI.Application.IMainWindow mainwin, 
                    JetBrains.UI.Options.OptionsPageViewFactoryManager optionsPageViewFactoryManager, 
                    [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.OptionPagesTree pagestree, 
                    JetBrains.Application.Env.ProductConfigurationsEx.InternalMode isInternalMode, 
                    JetBrains.UI.Options.OptionsDialogSettings optionsDialogSettings, 
                    JetBrains.CommonControls.Validation.FormValidators formValidators, 
                    JetBrains.Application.Settings.ISettingsStore settingsStore, 
                    JetBrains.UI.Components.Theming.IColorThemeManager themeManager, 
                    JetBrains.UI.Icons.IThemedIconManager themedIconManager, 
                    JetBrains.UI.Application.IUIApplication environment) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Options.IOptionsPage CurrentPage { get; set; }
        public JetBrains.UI.Options.OptionsSettingsSmartContext SettingsStoreSmartContext { get; }
        public JetBrains.UI.Options.OptionsSettingsStore SettingsStoreTransaction { get; }
        protected override void Dispose(bool disposing) { }
        public static System.Drawing.Color GetEditionColor(string seed, string edition) { }
        public JetBrains.UI.WindowManagement.WindowFrame GetOptionsPageWindowFrame([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.IOptionsPage page) { }
        public JetBrains.UI.Options.IOptionsPage GetPage([JetBrains.Annotations.CanBeNullAttribute()] string id) { }
        protected override void OnClosed(System.EventArgs e) { }
        protected override void OnClosing(System.ComponentModel.CancelEventArgs e) { }
        protected override void OnHelpButtonClicked(System.ComponentModel.CancelEventArgs e) { }
        protected override void OnKeyDown(System.Windows.Forms.KeyEventArgs e) { }
        public class History
        {
            public readonly JetBrains.DataFlow.Property<string> CurrentPageId;
            public readonly JetBrains.DataFlow.Property<int> Index;
            public readonly JetBrains.DataFlow.Property<bool> IsBackEnabled;
            public readonly JetBrains.DataFlow.Property<bool> IsForwardEnabled;
            public static readonly int MaximumHistoryDepth;
            public History(JetBrains.DataFlow.Lifetime lifetime) { }
            public void GoBack() { }
            public void GoTo(string id) { }
        }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class OptionsDialogOwner
    {
        public OptionsDialogOwner(JetBrains.DataFlow.Lifetime lifetimeComponent, JetBrains.Threading.IThreading threading, JetBrains.UI.Application.IMainWindow mainWindow, JetBrains.Application.DataContext.DataContexts datacontexts, JetBrains.Application.Settings.Logging.ISettingsLogger logging, JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap iconowners, JetBrains.UI.Components.Theming.IStatusBarColorsManager statusBarColorsManager, JetBrains.UI.CommonControls.Fonts.FontsManager fontsman) { }
        [JetBrains.Threading.GuardAttribute(JetBrains.Threading.Rgc.Guarded)]
        public void Show(JetBrains.UI.Application.WindowUtil.Modality modality = 1, string page = null, JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity layer = null, System.Action closeCallback = null) { }
        public class OptionsDialogSelectionMru
        {
            public OptionsDialogSelectionMru(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Options.OptionsDialogOwner.OptionsDialogSettingsContext settings, JetBrains.UI.Options.OptionsDialog2.OptionsDialogModel model, JetBrains.UI.Options.OptionsDialogOwner.OptionsSessionDefinition session) { }
        }
        public class OptionsDialogSettingsContext
        {
            public readonly JetBrains.Application.Settings.IContextBoundSettingsStoreLive BoundContext;
            public readonly JetBrains.UI.Options.OptionsDialogSettings InitialSettings;
            public OptionsDialogSettingsContext(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.ISettingsStore store, JetBrains.Application.Settings.ISettingsOptimization settingsOptimization) { }
        }
        public class OptionsSessionDefinition
        {
            [JetBrains.Annotations.CanBeNullAttribute()]
            public readonly System.Action CloseCallback;
            [JetBrains.Annotations.CanBeNullAttribute()]
            public readonly JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity InitialLayerId;
            [JetBrains.Annotations.CanBeNullAttribute()]
            public readonly string InitialPageId;
            [JetBrains.Annotations.NotNullAttribute()]
            public readonly JetBrains.DataFlow.LifetimeDefinition LifetimeDefinition;
            public OptionsSessionDefinition([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.CanBeNullAttribute()] string initialPageId, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity initialLayerId, [JetBrains.Annotations.CanBeNullAttribute()] System.Action closeCallback) { }
        }
        public class ViewCreator
        {
            public readonly JetBrains.UI.Options.OptionsDialog2.OptionsDialogView View;
            public ViewCreator(JetBrains.UI.Options.OptionsDialog2.OptionsDialogUidata uidata, JetBrains.UI.Options.OptionsDialogOwner.OptionsSessionDefinition session) { }
        }
        public class ViewSizeMru
        {
            public ViewSizeMru(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Options.OptionsDialogOwner.OptionsDialogSettingsContext settings, JetBrains.UI.Options.OptionsDialogOwner.ViewCreator view, JetBrains.UI.Application.IMainWindow mainWindow) { }
        }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.UI.Settings.DialogWindowsSettings), "Options dialog settings")]
    public class OptionsDialogSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(200, "Tree width")]
        public int OptionsTreeWidth;
        [JetBrains.Application.Settings.SettingsEntryAttribute("[0,0](1024,768)", "MRU dialog position.")]
        public JetBrains.UI.Settings.OwnedDialogPosition Position;
        [JetBrains.Application.Settings.SettingsEntryAttribute("Root", "MRU selected page.")]
        public string SelectedPageId;
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class OptionsManager
    {
        public OptionsManager([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.IOptionPagesList optionPagesList, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.OptionsDialogOwner optionsDialogOwner, JetBrains.Application.Settings.ISettingsStore settingsStore) { }
        public void AddOptionsPage([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Type typePage, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.OptionsPageAttribute attribute) { }
        [JetBrains.Threading.GuardAttribute(JetBrains.Threading.Rgc.Invariant)]
        public void BeginShowOptions([JetBrains.Annotations.NotNullAttribute()] string pageId = null) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Options.OptionPagesTree CreateOptionPagesTree() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.ICollection<JetBrains.UI.Options.OptionsPageEntity> GetOptionPages() { }
        [JetBrains.Threading.GuardAttribute(JetBrains.Threading.Rgc.Guarded)]
        public void ShowOptionsModal([JetBrains.Annotations.NotNullAttribute()] string pageId = null) { }
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.UI.Options.IOptionsPage))]
    [JetBrains.Annotations.MeansImplicitUseAttribute(JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature)]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All)]
    public class OptionsPageAttribute : JetBrains.Application.Parts.PartAttribute, System.IComparable<JetBrains.UI.Options.OptionsPageAttribute>
    {
        public OptionsPageAttribute([JetBrains.Annotations.NotNullAttribute()] string id, [JetBrains.Annotations.NotNullAttribute()] string name, System.Type typeofIcon) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public string HelpKeyword { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Icons.IconId Icon { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string Id { get; }
        public bool Internal { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string Name { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public string ParentId { get; set; }
        public double Sequence { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public string[] SupportedEditions { get; set; }
        public int CompareTo(JetBrains.UI.Options.OptionsPageAttribute other) { }
    }
    public class OptionsPageDescriptor
    {
        public OptionsPageDescriptor([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.OptionsPageEntity entity, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Options.OptionsPageDescriptor parent) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Options.OptionsPageAttribute Attribute { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IList<JetBrains.UI.Options.OptionsPageDescriptor> Children { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string Id { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Type PageType { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Options.OptionsPageDescriptor Parent { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string GetFullPath() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Icons.IconId GetIcon(JetBrains.Application.Env.ProductConfigurationsEx.InternalMode internalmode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Drawing.Image GetIcon1(JetBrains.UI.Application.IUIApplication environment) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Options.OptionsPageDescriptor TryGetNext() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Options.OptionsPageDescriptor TryGetPrevious() { }
    }
    public class OptionsPageEntity
    {
        public OptionsPageEntity([JetBrains.Annotations.NotNullAttribute()] System.Type pageType, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.OptionsPageAttribute attribute) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Options.OptionsPageAttribute Attribute { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Type PageType { get; }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class OptionsPageViewFactoryManager
    {
        public readonly JetBrains.DataFlow.ICollectionEvents<JetBrains.UI.Options.OptionsPageViewFactoryManager.FactoryEntry> Factories;
        public OptionsPageViewFactoryManager(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.IShellLocks locks) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Threading.GuardAttribute(JetBrains.Threading.Rgc.Guarded)]
        public System.Func<System.Type, object> GetFactoryFunction([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.DataContext.IDataContext dc, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<object> injections) { }
        public class FactoryEntry
        {
            [JetBrains.Annotations.NotNullAttribute()]
            public readonly JetBrains.Application.Components.IComponentContainer FactoryContainer;
            [JetBrains.Annotations.NotNullAttribute()]
            public readonly System.Func<JetBrains.Application.DataContext.IDataContext, bool> IsAvailable;
            public readonly double Priority;
            public FactoryEntry([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Components.IComponentContainer factoryContainer, double priority, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.Application.DataContext.IDataContext, bool> isAvailable) { }
        }
    }
    public class OptionsSectionDescriptor : JetBrains.UI.Options.OptionsPageDescriptor
    {
        public OptionsSectionDescriptor(JetBrains.UI.Options.OptionsPageEntity entity, JetBrains.UI.Options.OptionsPageDescriptor parent) { }
    }
    public class OptionsSettingsSmartContext : JetBrains.Application.Settings.IContextBoundSettingsStore, JetBrains.Application.Settings.IContextBoundSettingsStoreLive, JetBrains.Application.Settings.ISettingsChangedEventSource
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.Application.Settings.IContextBoundSettingsStoreLive StoreOptionsTransactionContext;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.Application.Settings.IContextBoundSettingsStoreLive StoreUnchangedSnapshotContext;
        public OptionsSettingsSmartContext([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.IContextBoundSettingsStoreLive storeOptionsTransaction, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.IContextBoundSettingsStoreLive storeUnchangedSnapshot) { }
        public JetBrains.DataFlow.ISignal<JetBrains.Application.Settings.SettingsStoreChangeArgs> Changed { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.Application.Settings.ISettingsStorageMountPoint> InvolvedMountPoints { get; }
        public bool IsIgnoringReadonlyFlag { get; set; }
        public JetBrains.Application.Settings.ISettingsSchema Schema { get; }
        public JetBrains.Application.Settings.ISettingsStore SettingsStore { get; }
        public void CopyTo(JetBrains.Application.Settings.IContextBoundSettingsStore target, JetBrains.Util.ILogger logger) { }
        public void CreateIndexedKey(JetBrains.Application.Settings.SettingsIndexedKey key, System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
        public void DeleteIndexedKey(JetBrains.Application.Settings.SettingsIndexedKey key, System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
        public void ExportToStorage(JetBrains.Application.Settings.ISettingsStorageMountPoint storage, JetBrains.Util.OnError onerror) { }
        public object GetIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry entry, object entryIndex, System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
        public object GetValue(JetBrains.Application.Settings.SettingsScalarEntry entry, System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
        public JetBrains.DataFlow.IProperty<TValue> GetValueProperty<TValue>(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.SettingsScalarEntry entry, System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
        public void ImportFromStorage(JetBrains.Application.Settings.ISettingsStorageMountPoint storage, JetBrains.Util.OnError onerror) { }
        public bool IsIndexedKeyDefined(JetBrains.Application.Settings.SettingsKey key, System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
        public void RemoveIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry entry, object entryIndex, System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
        public void ResetValue(JetBrains.Application.Settings.SettingsScalarEntry entry, System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
        public void SetIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry entry, object entryIndex, System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices, object value) { }
        public void SetValue(JetBrains.Application.Settings.SettingsScalarEntry entry, object value, System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
    }
    [System.ObsoleteAttribute("Import OptionsSettingsSmartContext and use its SettingsStore property.")]
    public class OptionsSettingsStore : JetBrains.Application.Settings.ISettingsChangedEventSource, JetBrains.Application.Settings.ISettingsStore
    {
        public OptionsSettingsStore(JetBrains.Application.Settings.ISettingsStore underlying) { }
        public JetBrains.Application.DataContext.DataContexts DataContexts { get; }
        public JetBrains.Application.Settings.ISettingsSchema Schema { get; }
        public JetBrains.Application.Settings.IContextBoundSettingsStore BindToContext(JetBrains.Application.DataContext.IDataContext context) { }
        public JetBrains.Application.Settings.IContextBoundSettingsStoreLive BindToContextLive(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.ContextRange contextrange, JetBrains.Application.Settings.Store.Implementation.BindToContextFlags flags = 0) { }
        public JetBrains.Application.Settings.IContextBoundSettingsStore BindToContexts(JetBrains.Application.DataContext.IDataContext contextNarrow, JetBrains.Application.DataContext.IDataContext contextWide) { }
        public JetBrains.Application.Settings.IContextBoundSettingsStore BindToContextTransient(JetBrains.Application.Settings.ContextRange contextrange, JetBrains.Application.Settings.Store.Implementation.BindToContextFlags flags) { }
        public JetBrains.Application.Settings.ISettingsStoreInTransaction CreateNestedTransaction(JetBrains.DataFlow.Lifetime lifetime, string name) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Application.Settings.ISettingsStorageMountPoint> GetOrderedMountPointsInContext(JetBrains.Application.DataContext.IDataContext context) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class SettingsLayersDialogOwner
    {
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Threading.GuardAttribute(JetBrains.Threading.Rgc.Guarded)]
        public readonly System.Action<JetBrains.UI.Application.WindowUtil.Modality> Show;
        public SettingsLayersDialogOwner(
                    JetBrains.DataFlow.Lifetime lifetimeComponent, 
                    JetBrains.Application.IShellLocks locks, 
                    JetBrains.UI.Application.IMainWindow mw, 
                    JetBrains.Application.Settings.ISettingsStore store, 
                    JetBrains.ActionManagement.IActionManager actionman, 
                    JetBrains.Application.IApplicationDescriptor product, 
                    JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader, 
                    JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, 
                    JetBrains.CommonControls.Validation.FormValidators formValidators, 
                    JetBrains.Application.Settings.UserInterface.ResetSettings resetSettings, 
                    JetBrains.Application.Settings.Logging.ISettingsLogger settingsLogger, 
                    JetBrains.ActionManagement.IActionBarManager actionBarManager, 
                    JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers injector, 
                    JetBrains.ActionManagement.IShortcutManager shortcutman, 
                    JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap iconowners, 
                    JetBrains.UI.Components.Theming.IStatusBarColorsManager statusBarColorsManager, 
                    JetBrains.UI.CommonControls.Fonts.FontsManager fontsman, 
                    JetBrains.UI.Application.IUIApplication environment) { }
    }
    public abstract class SettingsSchemaEntryInstance : JetBrains.UI.Options.SettingsSchemaInstance
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.Application.Settings.SettingsEntry Entry;
        protected SettingsSchemaEntryInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsEntry entry, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
    }
    public class SettingsSchemaIndexedEntryInstance : JetBrains.UI.Options.SettingsSchemaEntryInstance
    {
        public readonly JetBrains.Application.Settings.SettingsIndexedEntry Entry;
        public readonly object EntryIndex;
        public SettingsSchemaIndexedEntryInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsIndexedEntry entry, [JetBrains.Annotations.NotNullAttribute()] object entryindex, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
    }
    public class SettingsSchemaIndexedKeyInstance : JetBrains.UI.Options.SettingsSchemaKeyInstance
    {
        public readonly JetBrains.Application.Settings.SettingsIndexedKey Key;
        public SettingsSchemaIndexedKeyInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsIndexedKey key, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
    }
    public abstract class SettingsSchemaInstance
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public readonly System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> KeyIndices;
        protected SettingsSchemaInstance([JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
    }
    public class SettingsSchemaKeyInstance : JetBrains.UI.Options.SettingsSchemaInstance
    {
        public readonly JetBrains.Application.Settings.SettingsKey Key;
        public SettingsSchemaKeyInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsKey key, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
    }
    public class SettingsSchemaScalarEntryInstance : JetBrains.UI.Options.SettingsSchemaEntryInstance
    {
        public readonly JetBrains.Application.Settings.SettingsScalarEntry Entry;
        public SettingsSchemaScalarEntryInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsScalarEntry entry, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> keyIndices) { }
    }
    public class SettingsStateIndicatorAutomation : JetBrains.UI.Wpf.AAutomation
    {
        public SettingsStateIndicatorAutomation([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.IDependentSettings data) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Options.IDependentSettings Data { get; }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class ShowOptionsAction : JetBrains.ActionManagement.IActionHandler
    {
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity> ShowOptionsForLayer;
        public static readonly JetBrains.Application.DataContext.DataConstant<string> ShowOptionsPage;
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class ShowSettingsLayersDialogAction : JetBrains.ActionManagement.IActionHandler { }
    public class StaticOptionPagesList : JetBrains.UI.Options.IOptionPagesList
    {
        public readonly JetBrains.DataFlow.ICollectionEvents<JetBrains.UI.Options.OptionsPageEntity> PagesList;
        public StaticOptionPagesList([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
    }
}
namespace JetBrains.UI.Options.Helpers
{
    
    public class AEmptyOptionsPage : JetBrains.UI.Options.IOptionsPage
    {
        public AEmptyOptionsPage(string pid) { }
        public JetBrains.UI.CrossFramework.EitherControl Control { get; }
        public string Id { get; }
        public bool OnOk() { }
        public bool ValidatePage() { }
    }
    public class AOptionsPage : JetBrains.UI.Options.IOptionsPage, JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        public AOptionsPage([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.IUIApplication environment, [JetBrains.Annotations.NotNullAttribute()] string pid) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected JetBrains.UI.Wpf.IAutomation Automation { get; set; }
        protected JetBrains.UI.CrossFramework.EitherControl Control { get; set; }
        public JetBrains.UI.Application.IUIApplication Environment { get; }
        public JetBrains.DataFlow.Lifetime Lifetime { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
        protected void Bind(JetBrains.DataFlow.IPropertyBinding binding) { }
        protected void Bind<TValue>(JetBrains.DataFlow.IProperty<TValue> source, JetBrains.DataFlow.IProperty<TValue> target) { }
        protected void Bind<TValue>(JetBrains.DataFlow.IProperty<TValue> source, System.Windows.DependencyObject taregtobj, System.Windows.DependencyProperty targetprop) { }
        public virtual bool OnOk() { }
    }
    public abstract class AStackPanelOptionsPage : JetBrains.UI.CommonControls.SafeFlowLayoutPanel, JetBrains.UI.Options.IOptionsPage
    {
        protected AStackPanelOptionsPage(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.IUIApplication environment, string pid) { }
        public JetBrains.UI.CrossFramework.EitherControl Control { get; }
        public string Id { get; }
        public void Bind<TValue>(JetBrains.DataFlow.IProperty<TValue> source, JetBrains.DataFlow.IProperty<TValue> target) { }
        public void Bind(JetBrains.DataFlow.IPropertyBinding binding) { }
        protected override void Dispose(bool disposing) { }
        public virtual bool OnOk() { }
        public virtual bool ValidatePage() { }
    }
    public abstract class AStackPanelOptionsPage3 : JetBrains.UI.Options.Helpers.AOptionsPage
    {
        protected AStackPanelOptionsPage3(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.IUIApplication environment, string pid) { }
        public System.Windows.Forms.Control.ControlCollection Controls { get; }
        public System.Windows.Forms.FlowLayoutPanel Stack { get; }
    }
    public class static Controls
    {
        public static readonly System.Windows.Thickness IndentA;
        public static readonly System.Windows.Forms.Padding IndentF;
        public static readonly int IndentLeft;
        public static void Add([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Forms.TableLayoutControlCollection controlCollection, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, int column, int row, int columnSpan, int rowSpan) { }
        public static void AddColumnChild([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Forms.TableLayoutPanel grid, int percent, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control child) { }
        public static void AddRowChild([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Forms.TableLayoutPanel grid, int percent, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control child) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Forms.TableLayoutPanel CreateGrid() { }
        [System.ObsoleteAttribute("Most of the pages now should work regardless of solution presence.")]
        public static JetBrains.UI.Controls.RichTextLabel CreateNoSolutionCueBanner(JetBrains.UI.Application.IUIApplication environment) { }
        public static System.Windows.Forms.TableLayoutPanel CreateRadioButtons<T>([JetBrains.Annotations.NotNullAttribute()] this JetBrains.DataFlow.IProperty<T> property, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IEnumerable<T> values, [JetBrains.Annotations.CanBeNullAttribute()] System.Func<T, string> presenter) { }
        public static T IndentControl<T>([JetBrains.Annotations.NotNullAttribute()] this T control)
            where T : System.Windows.Forms.Control { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.IDisposable PushOrigin([JetBrains.Annotations.NotNullAttribute()] this System.Drawing.Graphics graphics, System.Drawing.Point location) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.IDisposable PushState([JetBrains.Annotations.NotNullAttribute()] this System.Drawing.Graphics graphics) { }
        public static System.IDisposable PushSuspendLayout([JetBrains.Annotations.NotNullAttribute()] this System.Windows.Forms.Control control) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Windows.Forms.TableLayoutPanel SetupGrid([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.TableLayoutPanel grid) { }
        public class Button : System.Windows.Forms.Button
        {
            public readonly JetBrains.DataFlow.Property<bool> IsEnabled_WriteOnly;
            public readonly JetBrains.DataFlow.Property<bool> IsVisible;
            public Button([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.CanBeNullAttribute()] System.EventHandler FHandlerClick) { }
            public Button([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.CanBeNullAttribute()] System.Action FHandler) { }
            public Button(string text) { }
        }
        public class CheckBox : System.Windows.Forms.CheckBox
        {
            public readonly JetBrains.DataFlow.IProperty<bool> Checked;
            public readonly JetBrains.DataFlow.ObsoleteLifetimeAndDefinitionAtTheSameTime Disposables;
            public CheckBox() { }
            public void Disable(bool check) { }
            protected override void Dispose(bool disposing) { }
            public void Enable() { }
        }
        public class DropDownList<T> : System.Windows.Forms.ComboBox
        
        {
            public readonly JetBrains.DataFlow.IProperty<bool> AutoSizeOnContent;
            public readonly JetBrains.DataFlow.IProperty<T> Value;
            public readonly JetBrains.DataFlow.IProperty<System.Collections.Generic.IEnumerable<T>> Values;
            public DropDownList() { }
            public DropDownList([JetBrains.Annotations.CanBeNullAttribute()] System.Func<T, string> presenter) { }
            public DropDownList([JetBrains.Annotations.CanBeNullAttribute()] System.Func<T, string> presenter, System.Collections.Generic.IEnumerable<T> values) { }
            protected override void OnHandleCreated(System.EventArgs e) { }
        }
        public class EditBox : System.Windows.Forms.TextBox
        {
            public readonly JetBrains.DataFlow.Property<bool> IsEnabled;
            public readonly JetBrains.DataFlow.Property<string> Text;
            public EditBox() { }
            public EditBox(System.Windows.Forms.DockStyle dockstyle) { }
        }
        public class HorzStackPanel : JetBrains.UI.CommonControls.SafeFlowLayoutPanel
        {
            public readonly JetBrains.DataFlow.Property<bool> IsEnabled;
            public readonly JetBrains.DataFlow.Property<bool> IsVisible;
            public HorzStackPanel(JetBrains.UI.Application.IUIApplication environment) { }
        }
        public class Label : System.Windows.Forms.Label
        {
            public readonly JetBrains.DataFlow.Property<bool> IsEnabled;
            public readonly JetBrains.DataFlow.Property<string> Text;
            public Label() { }
            public Label([JetBrains.Annotations.NotNullAttribute()] string text, System.Windows.Forms.Padding marginPlus) { }
            public Label([JetBrains.Annotations.NotNullAttribute()] string text) { }
            public Label([JetBrains.Annotations.NotNullAttribute()] string text, System.Drawing.FontStyle fontstyle) { }
        }
        public class LabeledControl<T> : System.Windows.Forms.UserControl
            where T : System.Windows.Forms.Control
        {
            public readonly JetBrains.DataFlow.IProperty<string> Text;
            public LabeledControl([JetBrains.Annotations.NotNullAttribute()] T control) { }
            [JetBrains.Annotations.NotNullAttribute()]
            public T Control { get; }
            public static System.Windows.Forms.Padding GetPadding() { }
        }
        public class ListBox<T> : System.Windows.Forms.ListBox
        
        {
            public readonly JetBrains.DataFlow.IProperty<T> Value;
            public readonly JetBrains.DataFlow.IProperty<System.Collections.Generic.IEnumerable<T>> Values;
            public ListBox() { }
            public ListBox([JetBrains.Annotations.CanBeNullAttribute()] System.Func<T, string> presenter) { }
            public ListBox([JetBrains.Annotations.CanBeNullAttribute()] System.Func<T, string> presenter, System.Collections.Generic.IEnumerable<T> values) { }
        }
        public class RadioButton : System.Windows.Forms.RadioButton
        {
            public readonly JetBrains.DataFlow.IProperty<bool> Checked;
            public readonly JetBrains.DataFlow.ObsoleteLifetimeAndDefinitionAtTheSameTime Disposables;
            public RadioButton() { }
            protected override void Dispose(bool disposing) { }
        }
        public class SectionHeading : JetBrains.UI.Controls.RichTextLabel
        {
            public readonly JetBrains.DataFlow.Property<bool> IsVisible;
            public SectionHeading(string text, JetBrains.UI.Application.IUIApplication environment) { }
            public SectionHeading(JetBrains.UI.RichText.RichTextBlock text, JetBrains.UI.Application.IUIApplication environment) { }
        }
        public class Separator : System.Windows.Forms.Control
        {
            public Separator() { }
            public Separator(int height) { }
            public static JetBrains.UI.Options.Helpers.Controls.Separator DefaultHeight { get; }
            public override System.Drawing.Size GetPreferredSize(System.Drawing.Size proposedSize) { }
            protected override void OnPaint(System.Windows.Forms.PaintEventArgs e) { }
        }
        public class SingleSelectListView<T> : System.Windows.Forms.ListView
        
        {
            public readonly JetBrains.DataFlow.IProperty<T> Value;
            public readonly JetBrains.DataFlow.IProperty<System.Collections.Generic.IEnumerable<T>> Values;
            public SingleSelectListView() { }
            public SingleSelectListView([JetBrains.Annotations.CanBeNullAttribute()] System.Func<T, string> presenter) { }
            public SingleSelectListView([JetBrains.Annotations.CanBeNullAttribute()] System.Func<T, string> presenter, System.Collections.Generic.IEnumerable<T> values) { }
        }
        public class Spin : System.Windows.Forms.NumericUpDown
        {
            public readonly JetBrains.DataFlow.Property<int> IntegerValue;
            public readonly JetBrains.DataFlow.Property<bool> IsEnabled;
            public Spin() { }
        }
        public class Timer : System.Windows.Forms.Timer
        {
            public static readonly System.TimeSpan DefaultInterval;
            public readonly JetBrains.DataFlow.IProperty<bool> IsEnabled;
            public readonly JetBrains.DataFlow.Property<bool> IsFiredOnEnable;
            public readonly JetBrains.DataFlow.ISimpleSignal Tick;
            public Timer([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
            [System.ObsoleteAttribute("Use overload with lifetime.")]
            public Timer(System.TimeSpan interval) { }
            public Timer([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.TimeSpan interval) { }
            public Timer([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.TimeSpan interval, System.Action FOnTick) { }
            public Timer([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.TimeSpan interval, bool started, System.Action onTick) { }
        }
        public class VertStackPanel : JetBrains.UI.CommonControls.SafeFlowLayoutPanel
        {
            public readonly JetBrains.DataFlow.Property<bool> IsEnabled;
            public readonly JetBrains.DataFlow.Property<bool> IsVisible;
            public VertStackPanel(JetBrains.UI.Application.IUIApplication environment) { }
        }
    }
}
namespace JetBrains.UI.Options.OptionPages
{
    
    [JetBrains.UI.Options.OptionsPageAttribute("Environment", "Environment", null, HelpKeyword="Reference__Options__Environment", Sequence=0D)]
    public class EnvironmentPage : JetBrains.UI.Options.IOptionsPage
    {
        public const string Pid = "Environment";
        public JetBrains.UI.CrossFramework.EitherControl Control { get; }
        public string Id { get; }
        public bool OnOk() { }
        public bool ValidatePage() { }
    }
    [JetBrains.UI.Options.OptionsPageAttribute("Root", "Options", null)]
    public class RootOptionsPage : JetBrains.UI.Options.IOptionsPage
    {
        public const string PID = "Root";
        public JetBrains.UI.CrossFramework.EitherControl Control { get; }
        public string Id { get; }
        public bool OnOk() { }
        public bool ValidatePage() { }
    }
    [JetBrains.UI.Options.OptionsPageAttribute("WebProxySettings", "Web Proxy Settings", typeof(JetBrains.UI.Resources.OptionsThemedIcons.ConnectionSettings), HelpKeyword="Reference__Options__Environment__Web_Proxy_Settings", ParentId="Environment")]
    public class WebProxySettingsPage : JetBrains.UI.Options.Helpers.AOptionsPage
    {
        public const string Pid = "WebProxySettings";
        public WebProxySettingsPage([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.IUIApplication environment, JetBrains.UI.Options.OptionsSettingsSmartContext settings) { }
    }
}
namespace JetBrains.UI.Options.OptionsDialog2
{
    
    public class ChildrenOnlyOptionsAutomation : JetBrains.UI.Options.OptionsAutomationBase
    {
        public ChildrenOnlyOptionsAutomation(JetBrains.DataFlow.Lifetime lifetime) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.ICollectionEvents<JetBrains.UI.Options.IOptionsAutomation2> Children { get; }
    }
    public class CopySettingsDialog : System.Windows.Window, System.Windows.Markup.IComponentConnector
    {
        public CopySettingsDialog() { }
        public void InitializeComponent() { }
        protected override void OnSourceInitialized(System.EventArgs e) { }
    }
    public class CopySettingsDialogModel
    {
        public readonly JetBrains.DataFlow.IProperty<System.Exception> Error;
        public readonly JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeModel Tree;
        public CopySettingsDialogModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel source, bool isAllSelectedInitially, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader) { }
        public void WriteToFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.FileSystemPath fileTo) { }
        public void WriteToLayer([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer layerTo) { }
    }
    public class CopySettingsDialogUidata : System.ComponentModel.INotifyPropertyChanged
    {
        public readonly JetBrains.DataFlow.ISignal<bool> CloseRequested;
        public readonly JetBrains.DataFlow.ISignal<string> HelpRequested;
        public CopySettingsDialogUidata([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.OptionsDialog2.CopySettingsDialogModel model, [JetBrains.Annotations.NotNullAttribute()] string modeName, [JetBrains.Annotations.NotNullAttribute()] string modeDescription, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconId bannerIcon) { }
        public JetBrains.UI.Icons.IconId BannerIcon { get; }
        public System.Windows.Input.ICommand CommandCancel { get; }
        public System.Windows.Input.ICommand CommandHelp { get; }
        public System.Windows.Input.ICommand CommandOk { get; }
        public System.Windows.Input.ICommand CommandShowError { get; }
        public JetBrains.DataFlow.IProperty<System.Exception> Error { get; }
        public JetBrains.DataFlow.IProperty<string> ErrorFullText { get; }
        public string ModeDescription { get; }
        public string ModeName { get; }
        public JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeUidata Tree { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
        public void WriteToFile(JetBrains.Util.FileSystemPath fileTo) { }
        public void WriteToLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer layerTo) { }
    }
    public class OptionsDialogModel
    {
        public readonly JetBrains.UI.Options.OptionsDialog2.OptionsModel Options;
        public OptionsDialogModel(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.UI.Options.IOptionPagesList optionpages, JetBrains.Application.Components.IComponentContainer containerForPageViews, JetBrains.UI.Application.HelpSystem helpSystem, JetBrains.Util.ILogger logger, JetBrains.ActionManagement.IActionManager actionman, JetBrains.Threading.IThreading threading) { }
        public void ShowSettingsLayers() { }
    }
    public class OptionsDialogUidata : System.ComponentModel.INotifyPropertyChanged
    {
        public OptionsDialogUidata(JetBrains.UI.Application.IUIApplication environment, JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Options.OptionsDialog2.OptionsDialogModel model, JetBrains.Application.IShellLocks locks, JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers injector, JetBrains.UI.Application.HelpSystem helpSystem, JetBrains.Application.IApplicationDescriptor product, JetBrains.UI.Wpf.IPlatformResourceDictionary platformResources, JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations, JetBrains.UI.Icons.IThemedIconManager iconman) { }
        public JetBrains.DataFlow.ISimpleSignal CloseRequested { get; }
        public System.Windows.Input.ICommand CommandApply { get; }
        public System.Windows.Input.ICommand CommandCancel { get; }
        public System.Windows.Input.ICommand CommandClose { get; }
        public System.Windows.Input.ICommand CommandHelp { get; }
        public System.Windows.Input.ICommand CommandManage { get; }
        public System.Windows.Input.ICommand CommandSave { get; }
        public System.Windows.Input.ICommand CommandSaveTo { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Options.OptionsDialog2.UserFriendlySettingsLayerUidata> EditedSettingsLayer { get; }
        public JetBrains.UI.Application.IUIApplication Environment { get; set; }
        public JetBrains.DataFlow.IProperty<bool> HasPendingChanges { get; }
        public System.Windows.Media.ImageSource Icon { get; }
        public JetBrains.DataFlow.IProperty<bool> IsEditingNonDefaultLayer { get; }
        public JetBrains.DataFlow.IProperty<bool> IsManageButtonIncluded { get; }
        public JetBrains.DataFlow.IProperty<bool> IsSaveToButtonIncluded { get; }
        public JetBrains.DataFlow.Lifetime Lifetime { get; }
        public JetBrains.UI.Options.OptionsDialog2.OptionsDialogModel Model { get; }
        public JetBrains.UI.Options.OptionsDialog2.OptionsUidata OptionsUidata { get; }
        public JetBrains.DataFlow.IProperty<int> PendingChangesCount { get; }
        public JetBrains.DataFlow.IProperty<string> PendingChangesMessage { get; }
        public JetBrains.UI.Wpf.IPlatformResourceDictionary PlatformResources { get; }
        public JetBrains.DataFlow.IProperty<string> SaveButtonTitle { get; }
        public JetBrains.DataFlow.IProperty<string> WindowTitle { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
        public System.Nullable<bool> Close(string title = null) { }
        public void RefreshPendingChanges() { }
    }
    public class OptionsDialogView : System.Windows.Window, System.Windows.Markup.IComponentConnector
    {
        [System.ObsoleteAttribute()]
        public OptionsDialogView(JetBrains.UI.Application.IUIApplication environment) { }
        public OptionsDialogView(JetBrains.UI.CommonControls.Fonts.IFontsManager fontsManager) { }
        public new System.Nullable<bool> DialogResult { get; set; }
        public void InitializeComponent() { }
        protected override void OnClosing(System.ComponentModel.CancelEventArgs e) { }
        protected override void OnSourceInitialized(System.EventArgs e) { }
    }
    public class OptionsModel
    {
        public readonly JetBrains.DataFlow.ISignal<JetBrains.UI.Options.OptionsDialog2.OptionsModel.BeforeCommitEventArgs> BeforeCommit;
        public readonly JetBrains.Application.Components.IComponentContainer ContainerForPageViews;
        public readonly JetBrains.DataFlow.ISimpleSignal EverythingWasReset;
        public readonly JetBrains.UI.Options.OptionPagesTree OptionPagesTree;
        public readonly JetBrains.DataFlow.ISignal<JetBrains.UI.Options.OptionsPageDescriptor> PageSelected;
        public readonly JetBrains.DataFlow.IProperty<int> PendingChangesCount;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer> SelectLayerRequested;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.Options.OptionsPageDescriptor> SelectPageRequested;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers SettingsLayers;
        public readonly JetBrains.Application.Settings.ISettingsStore SettingsStore;
        public OptionsModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStore settingsStore, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.IOptionPagesList optionpages, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Components.IComponentContainer containerForPageViews, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
        public bool Commit() { }
        public bool CommitToContext([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer ctx, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Progress.IProgressIndicator progress) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.Application.Settings.IContextBoundSettingsStoreLive GetCleanTransactionForLayer([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer layer) { }
        public void RecalculatePendingChangesCount() { }
        public void Revert() { }
        public class BeforeCommitEventArgs
        {
            public readonly System.Collections.Generic.List<JetBrains.UI.Options.OptionsPageDescriptor> PagesFailedToCommit;
            public BeforeCommitEventArgs() { }
        }
    }
    public class static OptionsPageFactory
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Options.IOptionsPage CreateOptionsPage([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.OptionsPageDescriptor pagedescriptor, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Components.IComponentContainer containerParent, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.OptionsSettingsSmartContext injectSettingsStoreSmartContext, JetBrains.Application.IShellLocks locks) { }
    }
    public class OptionsPageInOptionsContextUidata : System.ComponentModel.INotifyPropertyChanged
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Options.IOptionsPage> CreatedOptionsPage;
        public readonly System.Windows.Controls.ControlTemplate PageViewTemplate;
        public readonly string Title;
        public OptionsPageInOptionsContextUidata(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Options.OptionsPageDescriptor modelPage, JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer modelContext, JetBrains.Application.Settings.IContextBoundSettingsStoreLive storeCleanTransactionForLayer, JetBrains.Application.Components.IComponentContainer containerForPageViews, JetBrains.Application.IShellLocks locks) { }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Options.IOptionsPage TryGetOptionsPage() { }
    }
    public class OptionsPageInOptionsContextUidataFactory : System.ComponentModel.INotifyPropertyChanged
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.CollectionEvents<JetBrains.UI.Options.OptionsDialog2.OptionsPageInOptionsContextUidata> CreatedPageInContextAutomationObjects;
        public OptionsPageInOptionsContextUidataFactory([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Components.IComponentContainer containerForPageViews, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IShellLocks locks) { }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<JetBrains.Util.Pair<JetBrains.UI.Options.OptionsPageDescriptor, JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer>, JetBrains.UI.Options.OptionsDialog2.OptionsPageInOptionsContextUidata>> EnumCreatedPages() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Options.OptionsDialog2.OptionsPageInOptionsContextUidata GetOrCreate([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.OptionsPageDescriptor page, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer opcontext, JetBrains.Application.Settings.IContextBoundSettingsStoreLive storeCleanTransactionForLayer) { }
    }
    public class OptionsPageList : System.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector
    {
        public static readonly System.Windows.DependencyProperty PagesProperty;
        public OptionsPageList() { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Options.OptionsDialog2.OptionsPageWithoutContextUidata> Pages { get; set; }
        public event System.EventHandler<JetBrains.DataFlow.EventArgs<JetBrains.UI.Options.OptionsDialog2.OptionsPageWithoutContextUidata>> PageRequested;
        public void InitializeComponent() { }
    }
    public class OptionsPageWithoutContextUidata : System.ComponentModel.INotifyPropertyChanged
    {
        public OptionsPageWithoutContextUidata(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Options.OptionsPageDescriptor descriptor, JetBrains.UI.Options.OptionsDialog2.OptionsPageWithoutContextUidataFactory factory, JetBrains.Application.Env.ProductConfigurationsEx.InternalMode internalmode) { }
        public System.Collections.Generic.List<JetBrains.UI.Options.OptionsDialog2.OptionsPageWithoutContextUidata> Children { get; }
        public JetBrains.UI.Icons.IconId Icon { get; }
        public string Name { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Options.OptionsDialog2.ChildrenOnlyOptionsAutomation OptionsAutomation { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
        public override string ToString() { }
    }
    public class OptionsPageWithoutContextUidataFactory : System.ComponentModel.INotifyPropertyChanged
    {
        public readonly JetBrains.UI.Options.OptionsPageDescriptor RootModel;
        public readonly JetBrains.UI.Options.OptionsDialog2.OptionsPageWithoutContextUidata RootUidata;
        public readonly System.Collections.Generic.IList<JetBrains.UI.Options.OptionsDialog2.OptionsPageWithoutContextUidata> TopLevelViewModels;
        public OptionsPageWithoutContextUidataFactory(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Options.OptionPagesTree tree, JetBrains.Application.Env.ProductConfigurationsEx.InternalMode internalMode) { }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
        public JetBrains.UI.Options.OptionsDialog2.OptionsPageWithoutContextUidata ModelToViewModel(JetBrains.UI.Options.OptionsPageDescriptor model) { }
        public JetBrains.UI.Options.OptionsPageDescriptor ViewModelToModel(JetBrains.UI.Options.OptionsDialog2.OptionsPageWithoutContextUidata viewmodel) { }
    }
    public class OptionsUidata : System.ComponentModel.INotifyPropertyChanged
    {
        public readonly JetBrains.DataFlow.ISignal<JetBrains.DataFlow.CancelEventArgs<JetBrains.UI.Options.OptionsDialog2.UserFriendlySettingsLayerUidata>> ApplyRequested;
        public readonly JetBrains.UI.Extensions.Commands.SignalCommand CommandImportExport;
        public readonly JetBrains.UI.Extensions.Commands.SignalCommand CommandManageSettingsFiles;
        public readonly JetBrains.UI.Extensions.Commands.SignalCommand CommandTroubleshoot;
        public readonly JetBrains.UI.Options.OptionsDialog2.UserFriendlySettingsLayerUidata DefaultSelectedSettingsLayer;
        public readonly JetBrains.DataFlow.ISimpleSignal ResetRequested;
        public readonly JetBrains.DataFlow.Property<JetBrains.UI.Options.OptionsPageDescriptor> SelectedPage_Model;
        public readonly JetBrains.DataFlow.Property<JetBrains.UI.Options.OptionsDialog2.OptionsPageWithoutContextUidata> SelectedPageForTree;
        public readonly JetBrains.DataFlow.Property<JetBrains.UI.Options.OptionsDialog2.OptionsPageInOptionsContextUidata> SelectedPageInContextForPreview;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.Options.OptionsDialog2.UserFriendlySettingsLayerUidata> SelectedSettingsLayer;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer> SelectedSettingsLayer_Model;
        public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.Options.OptionsDialog2.UserFriendlySettingsLayerUidata> SettingsLayersAllAvailable;
        public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.Options.OptionsDialog2.UserFriendlySettingsLayerUidata> SettingsLayersForAddTabMenu;
        public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.Options.OptionsDialog2.UserFriendlySettingsLayerUidata> SettingsLayersForTabs;
        public readonly System.Collections.Generic.IList<JetBrains.UI.Options.OptionsDialog2.OptionsPageWithoutContextUidata> TopLevelPagesInTree;
        public OptionsUidata([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.OptionsDialog2.OptionsModel model, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.IShellLocks locks, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers injector, JetBrains.Application.Env.ProductConfigurationsEx.InternalMode internalmode, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager iconman) { }
        public JetBrains.UI.Options.OptionsDialog2.ChildrenOnlyOptionsAutomation OptionsAutomation { get; }
        public JetBrains.DataFlow.IListEvents<JetBrains.UI.Options.OptionsDialog2.UserFriendlySettingsLayerUidata> SaveToLayers { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
    }
    public class OptionsView : System.Windows.Controls.Control
    {
        public OptionsView() { }
        public System.Windows.FrameworkElement ListenKeyboardOn { get; set; }
    }
    public class ResetSettingsDialogModel
    {
        public readonly JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers AllLayers;
        public readonly System.Collections.Generic.IList<JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity> LayersToReset;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeModel Tree;
        public ResetSettingsDialogModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.IList<JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity> layersToReset, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.UserInterface.ResetSettings resetSettings, JetBrains.Application.Settings.Logging.ISettingsLogger logging, JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers alllayers) { }
        public void ResetSettings() { }
    }
    public class ResetSettingsDialogUidata2 : System.ComponentModel.INotifyPropertyChanged
    {
        public readonly JetBrains.DataFlow.ISimpleSignal CloseRequested;
        public readonly JetBrains.DataFlow.Lifetime Lifetime;
        public ResetSettingsDialogUidata2(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Options.OptionsDialog2.ResetSettingsDialogModel model, JetBrains.Application.IApplicationDescriptor product) { }
        public System.Windows.Input.ICommand CommandCancel { get; }
        public System.Windows.Input.ICommand CommandReset { get; }
        public JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeUidata SettingsTree { get; }
        public string Title { get; }
        public string WhatToResetDescription { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
    }
    public class ResetSettingsDialogView2 : System.Windows.Window, System.Windows.Markup.IComponentConnector
    {
        public ResetSettingsDialogView2() { }
        public void InitializeComponent() { }
        protected override void OnSourceInitialized(System.EventArgs e) { }
    }
    public class SettingsLayersDialog : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector
    {
        public SettingsLayersDialog() { }
        public void InitializeComponent() { }
        protected override void OnSourceInitialized(System.EventArgs e) { }
        public class ActionBarViewFlat : System.Windows.Controls.Control { }
        public class FlatColorTable : System.Windows.Forms.ProfessionalColorTable
        {
            public FlatColorTable() { }
            public override System.Drawing.Color ButtonCheckedGradientEnd { get; }
            public override System.Drawing.Color ButtonCheckedGradientMiddle { get; }
            public override System.Drawing.Color ButtonPressedGradientEnd { get; }
            public override System.Drawing.Color ButtonPressedGradientMiddle { get; }
            public override System.Drawing.Color ButtonSelectedGradientEnd { get; }
            public override System.Drawing.Color ButtonSelectedGradientMiddle { get; }
            public override System.Drawing.Color ImageMarginGradientEnd { get; }
            public override System.Drawing.Color ImageMarginGradientMiddle { get; }
            public override System.Drawing.Color ImageMarginRevealedGradientEnd { get; }
            public override System.Drawing.Color ImageMarginRevealedGradientMiddle { get; }
            public override System.Drawing.Color MenuItemPressedGradientEnd { get; }
            public override System.Drawing.Color MenuItemPressedGradientMiddle { get; }
            public override System.Drawing.Color MenuItemSelectedGradientEnd { get; }
            public override System.Drawing.Color MenuStripGradientBegin { get; }
            public override System.Drawing.Color MenuStripGradientEnd { get; }
            public override System.Drawing.Color OverflowButtonGradientEnd { get; }
            public override System.Drawing.Color OverflowButtonGradientMiddle { get; }
            public override System.Drawing.Color RaftingContainerGradientEnd { get; }
            public override System.Drawing.Color StatusStripGradientBegin { get; }
            public override System.Drawing.Color StatusStripGradientEnd { get; }
            public override System.Drawing.Color ToolStripContentPanelGradientBegin { get; }
            public override System.Drawing.Color ToolStripContentPanelGradientEnd { get; }
            public override System.Drawing.Color ToolStripGradientBegin { get; }
            public override System.Drawing.Color ToolStripGradientEnd { get; }
            public override System.Drawing.Color ToolStripGradientMiddle { get; }
            public override System.Drawing.Color ToolStripPanelGradientBegin { get; }
            public override System.Drawing.Color ToolStripPanelGradientEnd { get; }
        }
    }
    public class SettingsLayersDialogModel
    {
        public readonly JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers UserLayers;
        public SettingsLayersDialogModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStore store, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.UserInterface.ResetSettings resetSettings, JetBrains.Application.Settings.Logging.ISettingsLogger settingsLogger) { }
        public JetBrains.UI.Options.OptionsDialog2.CopySettingsDialogModel CreateCopySettingsDialogModel_FromUri([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Uri uriFrom) { }
    }
    public class SettingsLayersDialogUidata : System.ComponentModel.INotifyPropertyChanged
    {
        public readonly JetBrains.DataFlow.ISimpleSignal CloseRequested;
        public readonly JetBrains.DataFlow.ISignal<string> HelpRequested;
        public SettingsLayersDialogUidata(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.IUIApplication environment, JetBrains.UI.Options.OptionsDialog2.SettingsLayersDialogModel model, JetBrains.Application.IApplicationDescriptor product, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.CommonControls.Validation.FormValidators formValidators, JetBrains.ActionManagement.IActionBarManager actionBarManager, JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers injector, JetBrains.ActionManagement.IActionManager actionManager, JetBrains.Threading.IThreading threading, JetBrains.ActionManagement.IShortcutManager shortcutman, JetBrains.UI.Icons.IThemedIconManager thicman, bool canBackToOptions = True) { }
        public JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindings ActionManagerCommandBindings { get; }
        public bool CanBackToOptions { get; }
        public System.Windows.Input.ICommand CommandBack { get; }
        public System.Windows.Input.ICommand CommandChangeIsActive { get; }
        public System.Windows.Input.ICommand CommandClose { get; }
        public System.Windows.Input.ICommand CommandEdit { get; }
        public System.Windows.Input.ICommand CommandHelp { get; }
        public System.Windows.Input.ICommand CommandMoveDown { get; }
        public System.Windows.Input.ICommand CommandMoveUp { get; }
        public System.Windows.Input.ICommand CommandRename { get; }
        public JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs.GetDataRulesEventHandler GetLayersListDataRules { get; }
        public System.ComponentModel.ICollectionView GroupedSettingsLayers { get; }
        public JetBrains.DataFlow.Lifetime Lifetime { get; }
        public JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerContextMenu ListBoxContextMenu { get; }
        public JetBrains.UI.Controls.ActionBarAutomation MainToolbar { get; }
        public JetBrains.UI.Controls.ActionBarAutomation RightHandToolbar { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Options.OptionsDialog2.UserFriendlySettingsLayerForLayersDialogUidata> SelectedSettingsLayer { get; }
        public JetBrains.DataFlow.ListEvents<JetBrains.UI.Options.OptionsDialog2.UserFriendlySettingsLayerForLayersDialogUidata> SettingsLayers { get; }
        public string Title { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
    }
    public class SettingsSnapshotTreeModel
    {
        public readonly JetBrains.DataFlow.IProperty<System.Collections.Generic.IList<JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeModel.ItemModel>> RootItems;
        public SettingsSnapshotTreeModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IEnumerable<JetBrains.Util.JetTuple<JetBrains.Application.Settings.SettingsKey, System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object>>> GetSelectedItems() { }
        public class ItemModel
        {
            public readonly System.Collections.Generic.IList<JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeModel.ItemModel> Children;
            public readonly JetBrains.DataFlow.IProperty<bool> IsSelected;
            public readonly JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance Key;
            public ItemModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance key, bool isAllSelectedInitially) { }
            public string Description { get; }
            public string DisplayName { get; }
            [JetBrains.Annotations.NotNullAttribute()]
            public static System.Collections.Generic.List<JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeModel.ItemModel> FetchItemsFromSchema([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsSchema schema, bool isAllSelectedInitially, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
            [JetBrains.Annotations.NotNullAttribute()]
            public static System.Collections.Generic.List<JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeModel.ItemModel> FetchItemsFromSnapshot([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.SettingsStoreChangeArgs snapshot, bool isAllSelectedInitially) { }
            public override string ToString() { }
        }
    }
    public class SettingsSnapshotTreeUidata : JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        public JetBrains.DataFlow.IProperty<bool> IsAnythingChecked;
        public SettingsSnapshotTreeUidata(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeModel model) { }
        public JetBrains.DataFlow.IProperty<string> CueBannerText { get; }
        public JetBrains.DataFlow.IProperty<System.Windows.Visibility> CueBannerVisibility { get; }
        public JetBrains.UI.Controls.Misc.SearchEventHandler HandleTreeSearch { get; }
        public JetBrains.DataFlow.IProperty<bool> IsItemsAssigned { get; }
        public JetBrains.DataFlow.IProperty<System.Collections.Generic.IList<JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeUidata.ItemUidata>> RootItems { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.TreeGrid.IFilterDescriptor> TreeGridFilter { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
        public class ItemUidata : System.ComponentModel.INotifyPropertyChanged
        {
            public ItemUidata(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeUidata.ItemUidata parent, JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeModel.ItemModel model) { }
            public ItemUidata[] Children { get; }
            public string Description { get; }
            public JetBrains.DataFlow.IProperty<System.Nullable<bool>> IsCheckedTriState { get; }
            public string Name { get; }
            public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
            public static System.Collections.Generic.List<JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeModel.ItemModel> GetSelectedSettings(JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeUidata.ItemUidata item) { }
            public static System.Collections.Generic.List<JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeModel.ItemModel> GetSelectedSettings(System.Collections.Generic.IEnumerable<JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeUidata.ItemUidata> items) { }
            public override string ToString() { }
        }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class SettingsSnapshotTreeView : System.Windows.Controls.Grid, JetBrains.UI.Wpf.IView, JetBrains.UI.Wpf.IView<JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeUidata>, System.Windows.Markup.IComponentConnector
    {
        public static readonly System.Windows.DependencyProperty ListenKeyboardOnProperty;
        public SettingsSnapshotTreeView() { }
        public System.Windows.FrameworkElement ListenKeyboardOn { get; set; }
        public void InitializeComponent() { }
    }
    public class UserFriendlySettingsLayerForLayersDialogUidata : JetBrains.UI.Options.OptionsDialog2.UserFriendlySettingsLayerUidata
    {
        public UserFriendlySettingsLayerForLayersDialogUidata([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer model, JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers injector, JetBrains.ActionManagement.IActionManager actionman, JetBrains.ActionManagement.IActionBarManager barman, JetBrains.UI.Icons.IThemedIconManager iconman) { }
        public JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerContextMenu AddLayerContextMenu { get; }
        public System.Windows.Input.ICommand CommandEditLayer { get; }
        public JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs.GetDataRulesEventHandler GetLayerDataRules { get; }
        public JetBrains.DataFlow.IProperty<bool> IsActive { get; }
        public JetBrains.DataFlow.IProperty<bool> IsPathAccessible { get; }
        public JetBrains.DataFlow.IProperty<bool> IsRenameModeActive { get; }
    }
    public class UserFriendlySettingsLayerUidata : System.ComponentModel.INotifyPropertyChanged
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer Model;
        public UserFriendlySettingsLayerUidata([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer model, JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers injector, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager iconman) { }
        public JetBrains.DataFlow.IProperty<bool> CanAddLayer { get; }
        public JetBrains.DataFlow.IProperty<bool> CanEditLayer { get; }
        public JetBrains.DataFlow.IProperty<string> DisplayName { get; }
        public JetBrains.DataFlow.IProperty<System.Windows.Media.ImageSource> Icon { get; }
        public bool IsDefault { get; }
        public JetBrains.DataFlow.IProperty<bool> IsLocked { get; }
        public JetBrains.DataFlow.IProperty<string> OriginText { get; }
        public double Priority { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
        public override string ToString() { }
    }
}
namespace JetBrains.UI.PersistableDocument
{
    
    public interface IPersistableView
    {
        JetBrains.UI.PersistableDocument.PersistableDocument Document { get; }
        string ViewCaption { get; set; }
        JetBrains.UI.WindowManagement.WindowFrame WindowFrame { get; }
        void Close();
        void Open();
    }
    public class PersistableDocument
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.Icons.IconId> Icon;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<bool> IsDirty;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly string Moniker;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ISimpleSignal SaveRequested;
        public PersistableDocument([JetBrains.Annotations.NotNullAttribute()] string moniker) { }
    }
}
namespace JetBrains.UI.PopupLayout
{
    
    public class PopupWindowContextWithAnotherLayouter : JetBrains.UI.PopupWindowManager.IPopupWindowContext
    {
        public PopupWindowContextWithAnotherLayouter([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.IPopupWindowContext original, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.IPopupLayouter> FCreateLayouter) { }
        public event System.EventHandler JetBrains.UI.PopupWindowManager.IPopupWindowContext.AnyOtherAction;
        public event System.EventHandler JetBrains.UI.PopupWindowManager.IPopupWindowContext.Deactivated;
        public event System.EventHandler JetBrains.UI.PopupWindowManager.IPopupWindowContext.EscapePressed;
        public event System.EventHandler JetBrains.UI.PopupWindowManager.IPopupWindowContext.Scroll;
        public event System.EventHandler JetBrains.UI.PopupWindowManager.IPopupWindowContext.SelectionChanged;
    }
}
namespace JetBrains.UI.PopupMenu
{
    
    public class ApproveItemEventArgs : JetBrains.UI.PopupMenu.ItemEventArgs
    {
        protected bool myApproved;
        public ApproveItemEventArgs(JetBrains.UI.PopupMenu.JetPopupMenu menu, object key) { }
        public bool Approved { get; set; }
    }
    public class DescribeItemEventArgs : JetBrains.UI.PopupMenu.ItemEventArgs
    {
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.UI.PopupMenu.IMenuItemDescriptor myDescriptor;
        public DescribeItemEventArgs([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.JetPopupMenu menu, object key, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.IMenuItemDescriptor descriptor) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.PopupMenu.IMenuItemDescriptor Descriptor { get; }
    }
    public interface IMenuItemDescriptor
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Icons.IconId Icon { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        string Mnemonic { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.RichText.RichText ShortcutText { get; set; }
        JetBrains.UI.PopupMenu.MenuItemStyle Style { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        object Tag { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Icons.IconId TailGlyph { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.RichText.RichText Text { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.RichText.RichText Tooltip { get; set; }
    }
    public class ItemEventArgs : System.EventArgs
    {
        protected readonly object myKey;
        protected readonly JetBrains.UI.PopupMenu.JetPopupMenu myMenu;
        public ItemEventArgs(JetBrains.UI.PopupMenu.JetPopupMenu menu, object key) { }
        public object Key { get; }
        public JetBrains.UI.PopupMenu.JetPopupMenu Menu { get; }
    }
    public class ItemExpandedEventArgs : JetBrains.UI.PopupMenu.ItemEventArgs
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.PopupMenu.JetPopupMenu Submenu;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.Lifetime SubmenuLifetime;
        public ItemExpandedEventArgs(JetBrains.DataFlow.Lifetime lifetimeSubmenu, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.JetPopupMenu menu, object key, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.JetPopupMenu submenu) { }
    }
    public interface IToolBarItemInfo
    {
        JetBrains.DataFlow.ISignal<JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc> Clicked { get; }
        JetBrains.DataFlow.IProperty<bool> IsChecked { get; }
        JetBrains.DataFlow.IProperty<JetBrains.CommonControls.IPresentableItem> Presentation { get; }
        System.Windows.Forms.Keys Shortcut { get; }
        JetBrains.UI.RichText.RichText TooltipText { get; }
    }
    public class JetPopupMenu
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.Signal<JetBrains.UI.PopupMenu.DescribeItemEventArgs> DescribeItem;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.Signal<object> ItemClicked;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.Signal<JetBrains.UI.PopupMenu.ApproveItemEventArgs> ItemDeleted;
        public readonly JetBrains.DataFlow.Property<JetBrains.UI.PopupMenu.KeyboardAccelerationFlags> KeyboardAcceleration;
        public readonly JetBrains.DataFlow.IProperty<bool> myCaptureMouseInitially;
        protected bool myCloseOnExecute;
        protected JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc myMenuDocument;
        protected JetBrains.UI.PopupMenu.Impl.JetPopupMenuView myMenuView;
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.CommonControls.IWindowlessControl myNoItemsBanner;
        protected JetBrains.UI.PopupWindowManager.IPopupWindow myPopupWindow;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.IToolBarItemInfo> myToolbarButtons;
        public readonly JetBrains.DataFlow.IProperty<object> SelectedItemKey;
        [JetBrains.Annotations.CanBeNullAttribute()]
        public readonly JetBrains.Application.Interop.NativeHook.IWindowsHookManager WindowsHookManager;
        public JetPopupMenu([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.IUIApplicationSimple uiapp, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IIsApplicationActiveState isApplicationActiveState, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Tooltips.ITooltipManager tooltipman, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window ownerwin, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowManager popupWindowManager, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Settings.ISettingsStore settstore) { }
        public JetBrains.DataFlow.IProperty<JetBrains.CommonControls.IWindowlessControl> Caption { get; }
        public static System.Drawing.Point CaptionLocation { get; }
        public JetBrains.DataFlow.IProperty<bool> CaptureMouseInitially { get; }
        public bool CloseOnExecute { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc Document { get; }
        public JetBrains.DataFlow.ISignal<JetBrains.UI.PopupMenu.ItemExpandedEventArgs> ItemExpanded { get; }
        public JetBrains.DataFlow.IListEvents<object> ItemKeys { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.CommonControls.IWindowlessControl NoItemsBanner { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.PopupWindowManager.IPopupWindowContext PopupWindowContext { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.PopupWindowManager.PopupWindowContextSource PopupWindowContextSource { get; set; }
        public JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.IToolBarItemInfo> ToolbarButtons { get; }
        public bool Visible { get; set; }
        public void CaptureIfMouseDown() { }
        protected void CheckThread() { }
        public void SetItems(params JetBrains.UI.PopupMenu.SimpleMenuItem[] menuitems) { }
        public void Show(JetBrains.DataFlow.LifetimeDefinition lifetimeDefitionOptional = null) { }
        public void Show(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen when, JetBrains.DataFlow.LifetimeDefinition lifetimeDefitionOptional = null) { }
        public void ShowIfMultiple(JetBrains.DataFlow.LifetimeDefinition lifetimeDefitionOptional = null) { }
        public void ShowModal(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen when, JetBrains.DataFlow.LifetimeDefinition lifetimeDefitionOptional = null) { }
        [System.FlagsAttribute()]
        public enum ShowWhen
        {
            NoItemsBannerIfNoItems = 1,
            NoItemsBannerIfNoEnabledItems = 2,
            AutoExecuteIfSingleItem = 4,
            AutoExecuteIfSingleEnabledItem = 8,
        }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class JetPopupMenus
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Func<JetBrains.UI.PopupMenu.JetPopupMenu> myCreate;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.PopupMenu.JetPopupMenu> myCreateWithLifetime;
        public JetPopupMenus([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IIsApplicationActiveState isApplicationActiveState, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IUIApplicationSimple uiapp, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Tooltips.ITooltipManager tooltipman, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow ownerwin, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowManager popupWindowManager, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Settings.ISettingsStore settstore) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.PopupMenu.JetPopupMenu Create() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.PopupMenu.JetPopupMenu CreateWithLifetime(JetBrains.DataFlow.Lifetime lifetime) { }
        public void Show([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [System.ComponentModel.DefaultValueAttribute(JetBrains.UI.PopupMenu.JetPopupMenu/ShowWhen.NoItemsBannerIfNoItems)] JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen when, [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.DataFlow.Lifetime, JetBrains.UI.PopupMenu.JetPopupMenu> FFillMenu) { }
        public void ShowModal([System.ComponentModel.DefaultValueAttribute(JetBrains.UI.PopupMenu.JetPopupMenu/ShowWhen.NoItemsBannerIfNoItems)] JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen when, [JetBrains.Annotations.NotNullAttribute()] System.Action<JetBrains.DataFlow.Lifetime, JetBrains.UI.PopupMenu.JetPopupMenu> FFillMenu) { }
    }
    public enum KeyboardAccelerationFlags
    {
        QuickSearch = 0,
        Mnemonics = 1,
    }
    public class MenuItemDescriptor : JetBrains.UI.PopupMenu.IMenuItemDescriptor
    {
        public MenuItemDescriptor([JetBrains.Annotations.NotNullAttribute()] object data) { }
        public JetBrains.UI.Icons.IconId Icon { get; set; }
        public string Mnemonic { get; set; }
        public JetBrains.UI.RichText.RichText ShortcutText { get; set; }
        public JetBrains.UI.PopupMenu.MenuItemStyle Style { get; set; }
        public object Tag { get; set; }
        public JetBrains.UI.Icons.IconId TailGlyph { get; set; }
        public JetBrains.UI.RichText.RichText Text { get; set; }
        public JetBrains.UI.RichText.RichText Tooltip { get; set; }
        public void DumpToXaml(System.Xml.XmlWriter writer) { }
        public override string ToString() { }
    }
    [System.FlagsAttribute()]
    public enum MenuItemStyle
    {
        None = 0,
        Enabled = 1,
        Separator = 2,
        GroupHeader = 4,
        CanExpand = 8,
    }
    public class static MenuItemStyleValidator
    {
        public static void AssertValid(JetBrains.UI.PopupMenu.MenuItemStyle style) { }
    }
    public class SimpleMenuItem : JetBrains.UI.PopupMenu.MenuItemDescriptor
    {
        public readonly JetBrains.DataFlow.ISimpleSignal Executed;
        public readonly JetBrains.DataFlow.ISignal<JetBrains.UI.PopupMenu.ItemExpandedEventArgs> Expanded;
        public SimpleMenuItem() { }
        public SimpleMenuItem([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText text, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Icons.IconId icon, [JetBrains.Annotations.CanBeNullAttribute()] System.Action FOnExecute) { }
        public static JetBrains.UI.PopupMenu.SimpleMenuItem CreateSeparator() { }
    }
    public class ToolbarItemInfo : JetBrains.UI.PopupMenu.IToolBarItemInfo
    {
        public ToolbarItemInfo([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.CommonControls.IPresentableItem presentation, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.RichText.RichText tooltiptext, System.Windows.Forms.Keys shortcut, bool @checked, [JetBrains.Annotations.CanBeNullAttribute()] System.Action<JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc> clickHandler) { }
        public ToolbarItemInfo([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.CommonControls.IPresentableItem presentation, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.RichText.RichText tooltiptext, System.Windows.Forms.Keys shortcut, bool @checked, [JetBrains.Annotations.CanBeNullAttribute()] System.Action clickHandler) { }
        public ToolbarItemInfo([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.CommonControls.IPresentableItem presentation, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.RichText.RichText tooltiptext, System.Windows.Forms.Keys shortcut, bool @checked) { }
        public JetBrains.DataFlow.ISignal<JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc> Clicked { get; }
        public JetBrains.DataFlow.IProperty<bool> IsChecked { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.CommonControls.IPresentableItem> Presentation { get; }
        public System.Windows.Forms.Keys Shortcut { get; }
        public JetBrains.UI.RichText.RichText TooltipText { get; }
    }
}
namespace JetBrains.UI.PopupMenu.Impl
{
    
    public interface IJetPopupMenuItemView
    {
        JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem Item { get; }
        System.Drawing.Point Location { get; set; }
        System.Drawing.Size GetSize(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags flags);
        JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult HitTest(System.Drawing.Point pt);
        System.Drawing.Size[] LayoutBottomUp(JetBrains.UI.IGraphicsContainer gc);
        System.Drawing.Size LayoutTopDown(System.Drawing.Size[] cells, JetBrains.UI.IGraphicsContainer gc);
        void Paint(System.Drawing.Graphics g, JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet colors, JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags flags);
    }
    public interface IMenuItemsContainer : JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter
    {
        JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter> Filters { get; }
    }
    public interface IMenuItemsFilter
    {
        JetBrains.DataFlow.ISignal<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> IncomingDelete { get; }
        JetBrains.DataFlow.ISignal<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> IncomingExecute { get; }
        JetBrains.DataFlow.Signal<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> IncomingExpand { get; }
        JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> InputItems { get; }
        JetBrains.DataFlow.IProperty<bool> IsBusy { get; }
        JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> OutputItems { get; }
    }
    public enum JetPopupMenuColumnId
    {
        Icon = 0,
        Label = 1,
        MAX = 2,
    }
    public class JetPopupMenuDoc
    {
        public readonly JetBrains.DataFlow.IProperty<bool> ArrowKeysWrapAroundEnds;
        public readonly JetBrains.DataFlow.IProperty<bool> AutoselectFirstItem;
        public readonly JetBrains.DataFlow.ISimpleSignal BeforeExecuteAction;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> CurrentItems;
        public readonly JetBrains.DataFlow.ISignal<JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemIndexEventArgs> ItemChanged;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.PopupMenu.Impl.IMenuItemsContainer ItemsContainer;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.PopupMenu.KeyboardAccelerationFlags> KeyboardAcceleration;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> LastSelectedItem;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.PopupMenu.Impl.MnemonicStore Mnemonics;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.PopupMenu.Impl.SearchHost QuickSearch;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<int> SelectedIndex;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> SelectedItem;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.IToolBarItemInfo> ToolbarButtons;
        public JetPopupMenuDoc([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Settings.ISettingsStore settings) { }
        public System.Collections.Generic.List<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> ApplyCurrentPassFilter(System.Collections.Generic.ICollection<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> raw) { }
        public bool DeleteSelectedItem() { }
        public string DumpItemsToString() { }
        public void DumpItemsToXaml(System.Xml.XmlWriter writer) { }
        public bool ExecuteMnemonic(char ch, out bool bMnemonicWasAccepted) { }
        public bool ExecuteSelectedItem() { }
        public bool ExpandSelectedItem() { }
        public int GetNextIndex(int nOriginalIndex, JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir direction, JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior endbehavior, JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.AllowedItems alloweditems) { }
        public void SelectNextItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir direction) { }
        public enum AllowedItems
        {
            All = 0,
            ItemsWithActionsOnly = 1,
        }
        public enum EndBehavior
        {
            Stop = 0,
            WrapAround = 1,
            ReturnNothing = 2,
        }
        public class ItemIndexEventArgs : System.EventArgs
        {
            protected readonly int myIndex;
            protected readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem myItem;
            public ItemIndexEventArgs(int index, JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item) { }
            public int Index { get; }
            public JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem Item { get; }
        }
        public enum NextItemDir
        {
            Backward = 0,
            Forward = 1,
        }
    }
    public class JetPopupMenuItem
    {
        protected JetBrains.UI.RichText.RichText myDisplayName;
        protected JetBrains.UI.Icons.IconId myIcon;
        protected readonly object myKey;
        protected System.Nullable<char> myMnemonic;
        protected JetBrains.UI.RichText.RichText myShortcutText;
        protected JetBrains.UI.PopupMenu.MenuItemStyle myStyle;
        protected object myTag;
        protected JetBrains.UI.Icons.IconId myTailGlyph;
        protected JetBrains.UI.RichText.RichText myTooltipText;
        public JetPopupMenuItem([JetBrains.Annotations.NotNullAttribute()] object key, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.IMenuItemDescriptor descriptor) { }
        public JetBrains.UI.RichText.RichText DisplayName { get; }
        public JetBrains.UI.Icons.IconId Icon { get; }
        public bool IsEnabled { get; }
        public bool IsExpandable { get; }
        public bool IsGroupHeader { get; }
        public bool IsSeparator { get; }
        public bool IsWithActions { get; }
        public object Key { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public string ManualMnemonic { get; }
        public System.Nullable<char> Mnemonic { get; set; }
        public JetBrains.UI.RichText.RichText ShortcutText { get; }
        public static string StubText { get; }
        public JetBrains.UI.PopupMenu.MenuItemStyle Style { get; }
        public object Tag { get; }
        public JetBrains.UI.Icons.IconId TailGlyph { get; }
        public JetBrains.UI.RichText.RichText TooltipText { get; }
        public void DumpToXaml(System.Xml.XmlWriter writer) { }
        protected void Init(JetBrains.UI.PopupMenu.IMenuItemDescriptor descriptor) { }
        public override string ToString() { }
    }
    public abstract class JetPopupMenuItemView : JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView
    {
        protected readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem myItem;
        protected System.Drawing.Point myLocation;
        protected readonly JetBrains.UI.RenderParams mySharedRenderParams;
        protected System.Drawing.Rectangle RGradientPart;
        protected System.Drawing.Rectangle RMarginLeft;
        protected System.Drawing.Rectangle RMarginRight;
        protected System.Drawing.Rectangle RMarginUpper;
        protected System.Drawing.Rectangle RNonGradientPart;
        protected System.Drawing.Rectangle RTotal;
        protected System.Drawing.Rectangle RUpperMarginGradientPart;
        protected System.Drawing.Rectangle RUpperMarginNonGradientPart;
        protected JetPopupMenuItemView(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RenderParams renderparamsShared) { }
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem Item { get; }
        public System.Drawing.Point Location { get; set; }
        public System.Drawing.Size GetSize(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags flags) { }
        public virtual JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult HitTest(System.Drawing.Point pt) { }
        public abstract System.Drawing.Size[] LayoutBottomUp(JetBrains.UI.IGraphicsContainer gc);
        public virtual System.Drawing.Size LayoutTopDown(System.Drawing.Size[] cells, JetBrains.UI.IGraphicsContainer gc) { }
        public void Paint(System.Drawing.Graphics g, JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet colors, JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags flags) { }
        protected abstract void PaintWithUpperMargin(System.Drawing.Graphics g, JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet colors, JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags flags);
        public class static Dim
        {
            public static readonly System.Drawing.Size DisplayNameToShortcutTextGap;
            public static readonly System.Drawing.Size GroupHeaderGap;
            public static readonly System.Drawing.Size IconMargin;
            public static readonly System.Drawing.Size IconMinSize;
            public static readonly System.Drawing.Size LabelMargin;
            public static readonly System.Drawing.Size LabelMinDesiredSize;
            public static readonly System.Drawing.Size Margin;
            public static readonly System.Drawing.Size SelectionBorder;
            public static readonly System.Drawing.Size Separator;
            public static readonly System.Drawing.Size TailGlyphMargin;
            public static readonly System.Drawing.Size TailGlyphSeparatorWidth;
        }
    }
    public enum JetPopupMenuItemViewHitTestResult
    {
        Above = 0,
        Below = 1,
        Bulk = 2,
        ActiveTailGlyph = 3,
    }
    [System.FlagsAttribute()]
    public enum JetPopupMenuItemViewPresentationFlags
    {
        None = 0,
        IsSelected = 1,
        ExcludeUpperMargin = 2,
        IsExpanded = 4,
    }
    public class JetPopupMenuMainpartView : JetBrains.UI.CommonControls.SafePanel, JetBrains.CommonControls.IConstrainableControl, JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ISubpart, JetBrains.UI.Tooltips.ITooltipProvider
    {
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> ExpandedItem;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.Property<bool> IsKeyboardNavigating;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.Property<bool> IsMouseNavigating;
        protected readonly JetBrains.DataFlow.Property<int> LastVisibleItem;
        protected System.Drawing.Bitmap myBmpArrowDownDisabled;
        protected System.Drawing.Bitmap myBmpArrowDownEnabled;
        protected System.Drawing.Bitmap myBmpArrowUpDisabled;
        protected System.Drawing.Bitmap myBmpArrowUpEnabled;
        [JetBrains.Annotations.NotNullAttribute()]
        protected int[] myColumnWidths;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly System.Collections.Generic.JetHashSet<int> myDirtyItems;
        protected bool myDropShadowEnabled;
        protected System.Collections.Generic.IDictionary<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem, JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView> myItemToView;
        protected bool myLastKeyDownWasMnemonic;
        protected int myMenuClientHeight;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuView myMenuView;
        protected System.Drawing.Point myMouseLocation;
        protected readonly int myMouseWheelScrollDelta;
        protected readonly int myMouseWheelScrollLines;
        protected readonly JetBrains.DataFlow.StandardPreconditions.ReadonlyToken myReadonlyCookie;
        protected JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects myRects;
        protected bool myScrollNeeded;
        protected int myScrollPos;
        protected System.Windows.Forms.Timer myScrollTimer;
        protected readonly JetBrains.DataFlow.ISimpleSignal myWantsResize;
        public const int ScrollTimerIntervalWithMouse = 50;
        public const int ScrollTimerIntervalWithoutMouse = 150;
        public JetPopupMenuMainpartView([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuView menuview, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Tooltips.ITooltipManager tooltipman, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Settings.ISettingsStore settings, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager thicman, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplicationSimple uiapp) { }
        public bool AutoActivate { get; set; }
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc Document { get; }
        public int FirstVisibleItem { get; }
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuView MenuView { get; }
        public bool ScrollNeeded { get; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.IAnchoringRect CreateItemAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager hookman) { }
        protected void EnsureVisible(int index, JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt position) { }
        protected bool GetAutoscrolling(out JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir direction) { }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        protected int GetHitMenuItemIndex(System.Drawing.Point pt) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        protected void InitControls() { }
        protected void InitDataFlow(JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Tooltips.ITooltipManager tooltipman, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Settings.ISettingsStore settings, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager thicman) { }
        protected void InitDataFlow_Document(JetBrains.DataFlow.Lifetime lifetime) { }
        protected void InitDataFlow_EnableKeyboardTooltips(JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Tooltips.ITooltipManager tooltipman, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Settings.ISettingsStore settings) { }
        protected void InitDataFlow_ItemViews(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Icons.IThemedIconManager thicman) { }
        protected void InvalidateDirtyItems() { }
        protected void InvalidateItem(int index) { }
        protected static bool IsValidItemLocation(System.Drawing.Point pt) { }
        protected System.Drawing.Size LayoutBottomUp(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size sizeLimit) { }
        protected void LayoutBottomUp_MenuItems(out int nColumnWidths, out int nItemHeights, out System.Drawing.Size sizeTotal, JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size sizeLimit) { }
        protected void LayoutTopDown(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size sizeAvail) { }
        protected void LayoutTopDown_MenuItems(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size sizeAvail) { }
        protected void LayoutTopDown_PlaceMenuItems(bool bRepaint) { }
        public bool OnKeyDownHighPriority(System.Windows.Forms.KeyEventArgs args) { }
        public bool OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs args) { }
        public bool OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs args) { }
        protected override void OnLayout(System.Windows.Forms.LayoutEventArgs e) { }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseLeave(System.EventArgs e) { }
        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseWheel(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e) { }
        protected void OnScrollTimerTick(object sender, System.EventArgs e) { }
        protected override void OnVisibleChanged(System.EventArgs e) { }
        protected void Paint(System.Drawing.Graphics g) { }
        protected void PrerenderBitmapsStatic() { }
        protected void PrerenderBitmapsStatic_ScrollArrows() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Drawing.Bitmap RenderItem([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item) { }
        protected void ResetScrollRanges() { }
        protected bool ScrollByOneItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir dir) { }
        protected void ScrollMenu(int dy) { }
        protected void SelectItemAtPoint(System.Drawing.Point pt) { }
        protected void SetAutoscrolling() { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
        public class static Dim
        {
            public static readonly System.Drawing.Size ScrollArrow;
            public static readonly System.Drawing.Size ScrollArrowMargin;
            public static readonly System.Drawing.Size Scroller;
        }
        public class LayoutRects
        {
            public System.Drawing.Rectangle Bounds;
            public System.Drawing.Rectangle Menu;
            public System.Drawing.Rectangle MenuClient;
            public System.Drawing.Rectangle MenuLowerScroll;
            public System.Drawing.Rectangle MenuLowerScrollArrow;
            public System.Drawing.Rectangle MenuLowerScrollArrow2;
            public System.Drawing.Rectangle MenuLowerScrollGradient;
            public System.Drawing.Rectangle MenuLowerScrollNonGradient;
            public System.Drawing.Rectangle MenuSpareArea;
            public System.Drawing.Rectangle MenuSpareGradient;
            public System.Drawing.Rectangle MenuSpareNonGradient;
            public System.Drawing.Rectangle MenuUpperScroll;
            public System.Drawing.Rectangle MenuUpperScrollArrow;
            public System.Drawing.Rectangle MenuUpperScrollArrow2;
            public System.Drawing.Rectangle MenuUpperScrollGradient;
            public System.Drawing.Rectangle MenuUpperScrollNonGradient;
        }
        protected enum VisibleAt
        {
            DontCare = 0,
            Top = 1,
            Bottom = 2,
        }
    }
    public class JetPopupMenuNormalItemView : JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView
    {
        protected bool myIsIconFit;
        protected System.Drawing.Rectangle RDisplayName;
        protected System.Drawing.Rectangle RIcon;
        protected System.Drawing.Rectangle RIconPlace;
        protected System.Drawing.Rectangle RSelectionBody;
        protected System.Drawing.Rectangle RSelectionBorderLeft;
        protected System.Drawing.Rectangle RSelectionBorderLower;
        protected System.Drawing.Rectangle RSelectionBorderRight;
        protected System.Drawing.Rectangle RSelectionBorderUpper;
        protected System.Drawing.Rectangle RShortcutText;
        protected System.Drawing.Rectangle RTailGlyph;
        protected System.Drawing.Rectangle RTailGlyphSeparatedSelectionBody;
        protected System.Drawing.Rectangle RTailGlyphSeparatorCold;
        protected System.Drawing.Rectangle RTailGlyphSeparatorHot;
        public JetPopupMenuNormalItemView([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RenderParams renderparamsShared, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        protected static System.Windows.Forms.Padding IconCellPadding { get; }
        protected static System.Windows.Forms.Padding LabelCellPadding { get; }
        protected static System.Windows.Forms.Padding LabelCellPadding_AroundPartsToFullSell { get; }
        protected static System.Windows.Forms.Padding LabelCellPadding_TextPart { get; }
        protected System.Drawing.Size GetIconConstrainedSize() { }
        public override JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult HitTest(System.Drawing.Point pt) { }
        public override System.Drawing.Size[] LayoutBottomUp(JetBrains.UI.IGraphicsContainer gc) { }
        public override System.Drawing.Size LayoutTopDown(System.Drawing.Size[] cells, JetBrains.UI.IGraphicsContainer gc) { }
        protected override void PaintWithUpperMargin(System.Drawing.Graphics g, JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet colors, JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags flags) { }
    }
    public class JetPopupMenuSeparatorItemView : JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView
    {
        protected System.Drawing.Rectangle RNonGradientAboveSep;
        protected System.Drawing.Rectangle RNonGradientLefty;
        protected System.Drawing.Rectangle RSeparatorBody;
        public JetPopupMenuSeparatorItemView([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RenderParams renderparamsShared) { }
        public override System.Drawing.Size[] LayoutBottomUp(JetBrains.UI.IGraphicsContainer gc) { }
        public override System.Drawing.Size LayoutTopDown(System.Drawing.Size[] cells, JetBrains.UI.IGraphicsContainer gc) { }
        protected override void PaintWithUpperMargin(System.Drawing.Graphics g, JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet colors, JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags flags) { }
    }
    public class JetPopupMenuTitleView : JetBrains.UI.CommonControls.SafePanel, JetBrains.CommonControls.IConstrainableControl, JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ISubpart, JetBrains.UI.Tooltips.ITooltipProvider
    {
        public readonly JetBrains.DataFlow.Property<bool> IsEditboxChangingColor;
        protected System.Windows.Forms.Control myControlExtension;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly System.Windows.Forms.TextBox myEditboxQuickSearch;
        [JetBrains.Annotations.NotNullAttribute()]
        protected static readonly JetBrains.UI.Icons.IconId myIconQuickSearch;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuView myMenuView;
        protected System.Drawing.Point myMouseLocation;
        protected JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.LayoutRects myRects;
        protected JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditboxStates myStateQuickSearch;
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView myToolbar;
        public JetPopupMenuTitleView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.PopupMenu.Impl.JetPopupMenuView menuview, JetBrains.UI.Theming.ITheming theming, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplicationSimple uiapp) { }
        public bool AutoActivate { get; set; }
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc Document { get; }
        public System.Windows.Forms.Control ExtensionControl { get; set; }
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuView MenuView { get; }
        public System.Windows.Forms.TextBox QuickSearchEditbox { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView Toolbar { get; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        protected static double[] FitLength(int total, double[] items) { }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        protected void InitControls(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.IUIApplicationSimple uiapp) { }
        protected System.Drawing.Size LayoutBottomUp(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size sizeLimit) { }
        protected System.Drawing.Size LayoutBottomUp_FirstLine(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size sizeLimit) { }
        protected System.Drawing.Size LayoutBottomUp_SecondLine(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size sizeLimit) { }
        protected void LayoutTopDown(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size sizeAvail) { }
        protected void LayoutTopDown_FirstLine(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Rectangle rectAvail) { }
        protected void LayoutTopDown_SecondLine(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Rectangle rectAvail) { }
        protected void OnControlExtensionSizeChanged(object sender, System.EventArgs e) { }
        protected void OnControlExtensionVisibleChanged(object sender, System.EventArgs e) { }
        protected void OnEditboxQuickSearchTextChanged(object sender, System.EventArgs e) { }
        public bool OnKeyDownHighPriority(System.Windows.Forms.KeyEventArgs args) { }
        public bool OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs args) { }
        public bool OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs args) { }
        protected override void OnLayout(System.Windows.Forms.LayoutEventArgs e) { }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseLeave(System.EventArgs e) { }
        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e) { }
        protected void Paint(System.Drawing.Graphics g) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
        protected void UpdateEditboxColor() { }
        protected void UpdateQuickSearchState() { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
        public class static Dim
        {
            public static readonly System.Drawing.Size CaptionPadding;
            public static readonly System.Windows.Forms.Padding EditboxBorderThickness;
            public static readonly System.Drawing.Size EditboxTextPadding;
            public static readonly System.Drawing.Size InterlineGap;
            public static readonly System.Drawing.Size ItemsGap;
            public static readonly System.Drawing.Size Margin;
            public static readonly System.Drawing.Size QuickSearchEditBoxMin;
            public static readonly System.Drawing.Size QuickSearchIconPadding;
            public static readonly System.Drawing.Size QuickSearchIconPaddingLeftInSecondLine;
            public static readonly System.Drawing.Size QuickSearchIconPaddingRightInSecondLine;
        }
        public class LayoutRects
        {
            public System.Drawing.Rectangle Bounds;
            public System.Drawing.Rectangle Caption;
            public System.Drawing.Rectangle ExtensionControl;
            public System.Drawing.Rectangle QuickSearchEditboxNoBorder;
            public System.Drawing.Rectangle QuickSearchEditboxWithBorder;
            public System.Drawing.Rectangle QuickSearchIcon;
            public System.Drawing.Rectangle Toolbar;
        }
        protected enum QuickSearchEditboxStates
        {
            Hidden = 0,
            ShownInTitle = 1,
        }
    }
    public class JetPopupMenuToolbarItemView : JetBrains.CommonControls.IConstrainableControl, JetBrains.CommonControls.IWindowlessControl, JetBrains.UI.Tooltips.ITooltipProvider
    {
        public readonly JetBrains.DataFlow.Property<bool> IsSelected;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.UI.PopupMenu.IToolBarItemInfo myExternalInfo;
        protected readonly System.Windows.Forms.Keys myShortcut;
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.UI.RichText.RichText myShortcutText;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView myToolbar;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.UI.RichText.RichText myTooltipText;
        [JetBrains.Annotations.NotNullAttribute()]
        protected JetBrains.UI.RichText.RichText myTooltipTextWithShortcut;
        protected System.Drawing.Rectangle RPresentation;
        protected System.Drawing.Rectangle RPresentationPlace;
        protected System.Drawing.Rectangle[] RRSelectionBorder;
        protected System.Drawing.Rectangle RSelectionBody;
        protected System.Drawing.Rectangle RTotal;
        public JetPopupMenuToolbarItemView([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView toolbar, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.IToolBarItemInfo externalinfo, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Theming.ITheming theming) { }
        public bool AutoActivate { get; set; }
        public System.Drawing.Rectangle Bounds { get; }
        public JetBrains.UI.PopupMenu.IToolBarItemInfo ExternalInfo { get; }
        public JetBrains.DataFlow.ISimpleSignal GottenDirty { get; }
        public System.Windows.Forms.Keys Shortcut { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.RichText.RichText ShortcutText { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView Toolbar { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.RichText.RichText TooltipText { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.RichText.RichText TooltipTextWithShortcut { get; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        public bool Execute() { }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        public int HitTestHorizontal(int x) { }
        protected void InitShortcuts() { }
        public void Paint(System.Drawing.Graphics g) { }
        public void SetBounds(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Rectangle bounds) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
        public class static Dim
        {
            public static readonly System.Drawing.Size Padding;
        }
    }
    public class JetPopupMenuToolbarView : JetBrains.CommonControls.IConstrainableControl, JetBrains.CommonControls.IWindowlessControl, JetBrains.UI.Tooltips.ITooltipProvider
    {
        protected readonly System.Collections.Generic.Dictionary<System.Windows.Forms.Keys, JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView> myMapKeysToItems;
        protected readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuView myMenuView;
        protected readonly JetBrains.UI.RenderParams myToolbarRenderParams;
        public readonly JetBrains.DataFlow.Property<int> SelectedIndex;
        public readonly JetBrains.DataFlow.Property<JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView> SelectedItem;
        public JetPopupMenuToolbarView([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuView menuview, JetBrains.UI.Application.IUIApplicationSimple uiapp) { }
        public bool AutoActivate { get; set; }
        public System.Drawing.Rectangle Bounds { get; }
        public JetBrains.DataFlow.ISimpleSignal GottenDirty { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.IToolBarItemInfo> Items { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView> ItemViews { get; }
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuView MenuView { get; }
        public JetBrains.UI.RenderParams ToolbarRenderParams { get; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        public bool ExecuteSelectedItem() { }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        protected int GetHitItemIndex(System.Drawing.Point pt) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        public void OnKeyDown(System.Windows.Forms.KeyEventArgs e) { }
        public void OnMouseLeave(System.EventArgs e) { }
        public void OnMouseMove(System.Windows.Forms.MouseEventArgs e) { }
        public void Paint(System.Drawing.Graphics g) { }
        public void SetBounds(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Rectangle bounds) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
    }
    public class JetPopupMenuView : System.Windows.Forms.Form, JetBrains.CommonControls.IConstrainableControl
    {
        public readonly JetBrains.DataFlow.IProperty<JetBrains.CommonControls.IWindowlessControl> Caption;
        public readonly JetBrains.DataFlow.IProperty<bool> CaptureMouseInitially;
        protected bool myAutoActivate;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet myColors;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc myDocument;
        protected bool myDropShadowEnabled;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView myMainpart;
        static readonly bool myOptionEnableMovingArrows;
        static readonly bool myOptionHollowDisabledScrollArrows;
        protected JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects myRects;
        protected readonly JetBrains.UI.PopupMenu.Impl.Shadoof myShadows;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly System.Collections.Generic.List<System.Drawing.Rectangle> myShape;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView myTitle;
        protected JetBrains.UI.Anchoring2D myTitleDisposition;
        protected readonly bool myTransparency;
        protected JetBrains.UI.RenderParams myTransparentBackRenderParams;
        static readonly bool OptionTransparencyAlwaysOff;
        static readonly bool OptionTransparencyAlwaysOn;
        public JetPopupMenuView([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc document, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Tooltips.ITooltipManager tooltipman, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Settings.ISettingsStore settings, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window ownerwin, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Theming.ITheming theming, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplicationSimple uiapp) { }
        public bool AutoActivate { get; set; }
        protected override System.Windows.Forms.CreateParams CreateParams { get; }
        public JetBrains.UI.Anchoring2D Disposition { get; }
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc Document { get; }
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView Mainpart { get; }
        protected System.Drawing.Size ShadowSize { get; }
        protected override bool ShowWithoutActivation { get; }
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView Title { get; }
        public JetBrains.UI.RenderParams TransparentBackRenderParams { get; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.RenderParams FillRenderParamsDefaults([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RenderParams renderparams) { }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        protected void InitControls() { }
        protected System.Drawing.Size LayoutBottomUp(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size sizeLimit) { }
        protected void LayoutTopDown(JetBrains.UI.IGraphicsContainer gc) { }
        protected override void OnKeyDown(System.Windows.Forms.KeyEventArgs args) { }
        protected override void OnKeyPress(System.Windows.Forms.KeyPressEventArgs args) { }
        protected override void OnLayout(System.Windows.Forms.LayoutEventArgs e) { }
        protected override void OnLocationChanged(System.EventArgs e) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e) { }
        protected override void OnVisibleChanged(System.EventArgs e) { }
        protected void Paint(System.Drawing.Graphics g, JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet colors, System.Drawing.Region rgnDirty) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
        protected void UpdateShape() { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
        public class ColorSet
        {
            public System.Drawing.Color Background;
            public System.Drawing.Color Border;
            public System.Drawing.Color CheckedAndSelectedFillBottom;
            public System.Drawing.Color CheckedAndSelectedFillCenter;
            public System.Drawing.Color CheckedAndSelectedFillTop;
            public System.Drawing.Color DisabledText;
            public System.Drawing.Color EditboxBackground;
            public System.Drawing.Color EditboxBorder;
            public System.Drawing.Color EditboxErrorText;
            public System.Drawing.Color EditboxHighlightedText;
            public System.Drawing.Color EditboxText;
            public System.Drawing.Color IconColumnLeft;
            public System.Drawing.Color IconColumnMiddle;
            public System.Drawing.Color IconColumnRight;
            public System.Drawing.Color ScrollArrowDisabled;
            public System.Drawing.Color ScrollArrowEnabled;
            public System.Drawing.Color SelectedText;
            public System.Drawing.Color SelectionBorder;
            public System.Drawing.Color SelectionFillBottom;
            public System.Drawing.Color SelectionFillCenterBottom;
            public System.Drawing.Color SelectionFillCenterTop;
            public readonly bool SelectionFillHasAlpha;
            public System.Drawing.Color SelectionFillTop;
            public static readonly double SelectionToChecked;
            public System.Drawing.Color Separator;
            public System.Drawing.Color Text;
            public System.Drawing.Color TitleRowBottom;
            public System.Drawing.Color TitleRowCenter;
            public System.Drawing.Color TitleRowTop;
            public static readonly double WindowToGradientHigh;
            public static readonly double WindowToMenuBack;
            public static readonly double WindowToSelectionBody;
            public ColorSet([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Theming.ITheming thememan) { }
            public static System.Drawing.Color Blend(System.Drawing.Color a, System.Drawing.Color b, double factor, System.Drawing.Graphics g) { }
            public static void FillRectangles([JetBrains.Annotations.NotNullAttribute()] System.Drawing.Graphics g, System.Drawing.Color a, [JetBrains.Annotations.NotNullAttribute()] params System.Drawing.Rectangle[] rectangles) { }
            public static void FillRectangles([JetBrains.Annotations.NotNullAttribute()] System.Drawing.Graphics g, System.Drawing.Color a, System.Drawing.Color b, System.Windows.Forms.Orientation orientation, [JetBrains.Annotations.NotNullAttribute()] params System.Drawing.Rectangle[] rectangles) { }
            public static void FillRectangles([JetBrains.Annotations.NotNullAttribute()] System.Drawing.Graphics g, System.Drawing.Color a, System.Drawing.Color b, System.Drawing.Color c, System.Windows.Forms.Orientation orientation, [JetBrains.Annotations.NotNullAttribute()] params System.Drawing.Rectangle[] rectangles) { }
            public static void FillRectanglesThreeStopsFourColors([JetBrains.Annotations.NotNullAttribute()] System.Drawing.Graphics g, System.Drawing.Color a, System.Drawing.Color b, System.Drawing.Color c, System.Drawing.Color d, System.Windows.Forms.Orientation orientation, [JetBrains.Annotations.NotNullAttribute()] params System.Drawing.Rectangle[] rectangles) { }
        }
        public class static Dim
        {
            public static readonly System.Drawing.Size MainpartFarBorder;
            public static readonly System.Drawing.Size MainpartNearBorder;
            public static readonly System.Drawing.Size Shadow;
            public static readonly System.Drawing.Size SimpleBorder;
        }
        public interface ISubpart
        {
            bool OnKeyDownHighPriority(System.Windows.Forms.KeyEventArgs args);
            bool OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs args);
            bool OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs args);
        }
        public class LayoutRects
        {
            public readonly JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects.BorderLayoutRects Borders;
            public readonly System.Collections.Generic.List<System.Drawing.Rectangle> Opaque;
            public LayoutRects() { }
            public static void ClearRects(object container) { }
            public class BorderLayoutRects
            {
                public System.Drawing.Rectangle JointInner;
                public System.Drawing.Rectangle JointLeft;
                public System.Drawing.Rectangle JointRight;
                public System.Drawing.Rectangle MainpartFar;
                public System.Drawing.Rectangle MainpartInnerLower;
                public System.Drawing.Rectangle MainpartInnerUpper;
                public System.Drawing.Rectangle MainpartLeft;
                public System.Drawing.Rectangle MainpartNearNoTitle;
                public System.Drawing.Rectangle MainpartRight;
                public System.Drawing.Rectangle TitleFarNoMainpart;
                public System.Drawing.Rectangle TitleLeft;
                public System.Drawing.Rectangle TitleNear;
                public System.Drawing.Rectangle TitleRight;
                public System.Drawing.Rectangle[] GetBackgroundColorArea() { }
                public System.Drawing.Rectangle[] GetBorderColorArea() { }
            }
        }
    }
    public class JetPopupMenuViewHierarchy
    {
        public JetPopupMenuViewHierarchy([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuView menuviewRoot) { }
        public void AddChildMenu([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition defMenu, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuView menuview) { }
        public void CloseAll() { }
    }
    public class MenuItemsContainer : JetBrains.UI.PopupMenu.Impl.MenuItemsFilter, JetBrains.UI.PopupMenu.Impl.IMenuItemsContainer, JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter
    {
        public MenuItemsContainer([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
        public JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter> Filters { get; }
    }
    public class MenuItemsFilter : JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter
    {
        public MenuItemsFilter([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] string id) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.PropertyId<JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter> Id { get; }
        public JetBrains.DataFlow.ISignal<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> IncomingDelete { get; }
        public JetBrains.DataFlow.ISignal<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> IncomingExecute { get; }
        public JetBrains.DataFlow.Signal<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> IncomingExpand { get; }
        public JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> InputItems { get; }
        public JetBrains.DataFlow.IProperty<bool> IsBusy { get; }
        public JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> OutputItems { get; }
    }
    public class MnemonicStore
    {
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.Util.BidirectionalMap<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem, char> myMapMnemonicToItem;
        public MnemonicStore() { }
        protected void AssignMnemonic_Auto(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item) { }
        protected void AssignMnemonic_Manual([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item) { }
        protected void AssignMnemonic_Manual_Free([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item, [JetBrains.Annotations.NotNullAttribute()] string sManualMnemonic) { }
        protected void AssignMnemonic_Manual_Positioned([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item, [JetBrains.Annotations.NotNullAttribute()] ref string sManualMnemonic) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IList<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> GetItemsByMnemonic(char ch) { }
        public bool IsMnemonicUsed(char ch) { }
        public static char PreprocessMnemonic(char ch) { }
        public char RegisterMnemonic(char ch, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item) { }
        public char RegisterMnemonicAndHighlight(char ch, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item, int index) { }
        public static string RemoveMnemonicMark([JetBrains.Annotations.NotNullAttribute()] string text) { }
        public static void RemoveMnemonicMark([JetBrains.Annotations.NotNullAttribute()] string escaped, [JetBrains.Annotations.NotNullAttribute()] out string stripped, out int nEscapedMnemonicIndex, out int nStrippedMnemonicIndex) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem TryGetItemByMnemonic(char ch) { }
        public System.Nullable<char> TryGetMnemonicByItem([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item) { }
        public bool TryUnregister([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item) { }
        public void Watch([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IListEvents<JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem> items) { }
    }
    public class SearchHost
    {
        public readonly JetBrains.DataFlow.Property<string> InputString;
        public readonly JetBrains.DataFlow.Property<bool> IsActive;
        public readonly JetBrains.DataFlow.Property<bool> IsAlwaysActive;
        public readonly JetBrains.DataFlow.Property<bool> IsPending;
        public readonly JetBrains.DataFlow.Property<bool> IsValid;
        public readonly JetBrains.DataFlow.Property<System.Func<string, bool>> SearchPredicate;
        public readonly JetBrains.DataFlow.Property<string> SearchString;
        public SearchHost([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Settings.ISettingsStore settings) { }
        public void CommitPendingChanges() { }
        public JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter CreateFilter() { }
        public static bool IsMatch([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem item, [JetBrains.Annotations.NotNullAttribute()] System.Func<string, bool> predicate) { }
        public static System.Func<string, bool> MakeSearchPredicate(string searchstring) { }
    }
    public class Shadoof : System.Windows.Forms.NativeWindow
    {
        public readonly JetBrains.DataFlow.Property<bool> IsVisible;
        protected static System.Drawing.Bitmap myBmpShadowCornerLeftBottom;
        protected static System.Drawing.Bitmap myBmpShadowCornerRightBottom;
        protected static System.Drawing.Bitmap myBmpShadowCornerRightTop;
        protected static System.Drawing.Bitmap myBmpShadowHorizontal;
        protected static System.Drawing.Bitmap myBmpShadowVertical;
        protected static readonly int myColorsShadowCorner;
        protected static readonly int myColorsShadowLine;
        protected System.Drawing.Point myLocation;
        protected System.Collections.Generic.List<System.Drawing.Rectangle> myRects;
        public Shadoof([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
        public System.Drawing.Point Location { get; set; }
        public System.Collections.Generic.List<System.Drawing.Rectangle> Rectangles { get; set; }
        public static int ShadowThickness { get; }
        public void Adjust(System.Drawing.Point location, System.Collections.Generic.List<System.Drawing.Rectangle> rects) { }
        protected static void AttachShadowHorizontal(System.Drawing.Graphics g, System.Drawing.Rectangle bounds) { }
        protected static void AttachShadowVertical(System.Drawing.Graphics g, System.Drawing.Rectangle bounds) { }
        protected void CheckCreateWindow() { }
        protected static void CreateBitmaps() { }
        protected static void FillShadowHorizontal(System.Drawing.Graphics g, System.Drawing.Rectangle bounds) { }
        protected static void FillShadowVertical(System.Drawing.Graphics g, System.Drawing.Rectangle bounds) { }
        protected static void OptimizeRectangles(System.Collections.Generic.List<System.Drawing.Rectangle> rects) { }
        protected bool SetLocation(System.Drawing.Point value) { }
        protected bool SetRectangles(System.Collections.Generic.List<System.Drawing.Rectangle> value) { }
        protected void Update() { }
        protected System.Drawing.Size Update_GetSize() { }
        protected void Update_Multiple(System.Drawing.Graphics g) { }
        protected static void Update_Multiple_Junction(System.Drawing.Graphics g, System.Drawing.Rectangle rectUpper, System.Drawing.Rectangle rectLower) { }
        protected static void Update_Multiple_Junction_Left(System.Drawing.Graphics g, System.Drawing.Rectangle rectUpper, System.Drawing.Rectangle rectLower) { }
        protected static void Update_Multiple_Junction_Right(System.Drawing.Graphics g, System.Drawing.Rectangle rectUpper, System.Drawing.Rectangle rectLower) { }
        protected void Update_Single(System.Drawing.Graphics g) { }
    }
}
namespace JetBrains.UI.PopupWindowManager
{
    
    public class AvalonAnchoringRect : JetBrains.UI.AnchoringRect
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Windows.UIElement Element;
        public AvalonAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.UIElement element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager hookman) { }
    }
    public class EmptyPopupWindowContext : JetBrains.UI.PopupWindowManager.PopupWindowContext
    {
        public EmptyPopupWindowContext(JetBrains.DataFlow.Lifetime lifetime) { }
        public override JetBrains.UI.IPopupLayouter CreateLayouter(JetBrains.DataFlow.Lifetime lifetime) { }
    }
    public enum FormHideMethod
    {
        Visibility = 0,
        Closing = 1,
        FocusingAndClosing = 2,
    }
    [System.FlagsAttribute()]
    public enum HideFlags : uint
    {
        None = 0u,
        Scrolling = 1u,
        Escape = 2u,
        AnyOtherAction = 4u,
        SelectionChanged = 8u,
        FocusLoss = 16u,
        Deactivated = 32u,
        All = 4294967295u,
    }
    public interface IPopupWindow : System.IDisposable
    {
        JetBrains.UI.PopupWindowManager.IPopupWindowContext Context { get; }
        JetBrains.UI.PopupWindowManager.FormHideMethod HideMethod { get; set; }
        bool IsDisposed { get; }
        JetBrains.UI.PopupWindowManager.PopupWindowLayoutMode LayoutMode { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.PopupWindowManager.PopupWindowMutex Mutex { get; }
        bool Visible { get; }
        public event System.EventHandler Closed;
        void HideWindow();
        bool ShowWindow();
    }
    public interface IPopupWindowContext
    {
        public event System.EventHandler AnyOtherAction;
        public event System.EventHandler Deactivated;
        public event System.EventHandler EscapePressed;
        public event System.EventHandler Scroll;
        public event System.EventHandler SelectionChanged;
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.IPopupLayouter CreateLayouter([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime);
        void FireAnyOtherAction();
        void FireDeactivated();
        void FireScroll();
        void FireSelectionChanged();
    }
    public class static IPopupWindowContextEx
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindowContext OverrideLayouter([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.PopupWindowManager.IPopupWindowContext thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.IPopupLayouter> FCreateLayouter) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.PopupWindowContextSource OverrideLayouter([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.PopupWindowManager.PopupWindowContextSource thіs, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.IPopupLayouter> FCreateLayouter) { }
    }
    public class LazyPopupWindowContextUnused : JetBrains.UI.PopupWindowManager.IPopupWindowContext
    {
        public LazyPopupWindowContextUnused(System.Func<JetBrains.UI.PopupWindowManager.IPopupWindowContext> factory) { }
        public event System.EventHandler AnyOtherAction;
        public event System.EventHandler Deactivated;
        public event System.EventHandler EscapePressed;
        public event System.EventHandler Scroll;
        public event System.EventHandler SelectionChanged;
        public JetBrains.UI.IPopupLayouter CreateLayouter(JetBrains.DataFlow.Lifetime lifetime) { }
        public void Dispose() { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class MainWindowPopupWindowContext
    {
        public MainWindowPopupWindowContext([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow mainWindow, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ActionManagement.IActionManager actionManager) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.PopupWindowManager.PopupWindowContextSource Source { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.PopupWindowManager.IPopupWindowContext Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
        public class SingleInstance : JetBrains.UI.PopupWindowManager.PopupWindowContext
        {
            public SingleInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow mainWindow, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ActionManagement.IActionManager actionManager) { }
            public override JetBrains.UI.IPopupLayouter CreateLayouter(JetBrains.DataFlow.Lifetime lifetime) { }
        }
    }
    public class PopupFormController : JetBrains.UI.PopupWindowManager.IPopupWindow, System.IDisposable
    {
        public readonly JetBrains.DataFlow.Lifetime Lifetime;
        protected readonly JetBrains.CommonControls.IConstrainableControl myConstrainableControl;
        protected readonly System.Windows.Forms.Form myContentForm;
        protected readonly JetBrains.UI.PopupWindowManager.IPopupWindowContext myContext;
        protected bool myEventsAttached;
        protected readonly JetBrains.UI.PopupWindowManager.HideFlags myHideFlags;
        protected JetBrains.UI.PopupWindowManager.FormHideMethod myHideMethod;
        protected bool myIsChangingSize;
        protected bool myIsDisposed;
        protected JetBrains.UI.IPopupLayouter myLayouter;
        protected JetBrains.UI.PopupWindowManager.PopupWindowLayoutMode myLayoutMode;
        protected readonly JetBrains.UI.PopupWindowManager.PopupWindowMutex myMutex;
        protected bool myReshowOnActivation;
        protected readonly bool myWantsFocus;
        public PopupFormController([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Form form, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.IPopupWindowContext context, JetBrains.UI.PopupWindowManager.HideFlags hideflags, bool wantsfocus, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowMutex mutex, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IIsApplicationActiveState isApplicationActiveState, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager hookManager, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowManager popupWindowManager) { }
        public System.Drawing.Rectangle Bounds { get; }
        public bool CanShowPopups { get; }
        public JetBrains.UI.PopupWindowManager.IPopupWindowContext Context { get; }
        public System.IntPtr Handle { get; }
        public JetBrains.UI.PopupWindowManager.FormHideMethod HideMethod { get; set; }
        protected bool HideOnAnyOtherAction { get; }
        protected bool HideOnDeactivated { get; }
        protected bool HideOnEscapePressed { get; }
        protected bool HideOnFocusLoss { get; }
        protected bool HideOnScrolling { get; }
        protected bool HideOnSelectionChanged { get; }
        public bool IsDisposed { get; }
        public JetBrains.UI.PopupWindowManager.PopupWindowLayoutMode LayoutMode { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.PopupWindowManager.PopupWindowMutex Mutex { get; }
        public bool Visible { get; }
        public event System.EventHandler Closed;
        protected void AttachEvents([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager hookManager, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowManager popupWindowManager) { }
        protected void DetachEvents() { }
        public void Dispose() { }
        protected void FireClosed() { }
        protected System.Drawing.Size GetControlPreferredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size sizeConstraint) { }
        public void HideWindow() { }
        protected void HideWindowIfNotFocused() { }
        protected void HideWindowOnDeactivation() { }
        protected void OnActiveChanged() { }
        protected void OnContextOwnerAnyActionPerformed(object sender, System.EventArgs args) { }
        protected void OnContextOwnerDeactivated(object sender, System.EventArgs args) { }
        protected void OnContextOwnerEscapePressed(object sender, System.EventArgs args) { }
        protected void OnContextOwnerScroll(object sender, System.EventArgs args) { }
        protected void OnContextOwnerSelectionChanged(object sender, System.EventArgs args) { }
        protected void OnFormClosed(object sender, System.EventArgs e) { }
        protected void OnFormPossiblyDeactivated(object sender, System.EventArgs e) { }
        protected void OnFormResize(object sender, System.EventArgs e) { }
        public bool ShowWindow() { }
        protected void UpdatePopupLayout() { }
    }
    public abstract class PopupWindowContext : JetBrains.UI.PopupWindowManager.IPopupWindowContext
    {
        protected readonly JetBrains.DataFlow.Lifetime myLifetime;
        protected PopupWindowContext([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ActionManagement.IActionManager actionManager) { }
        public event System.EventHandler AnyOtherAction;
        public event System.EventHandler Deactivated;
        public event System.EventHandler EscapePressed;
        public event System.EventHandler Scroll;
        public event System.EventHandler SelectionChanged;
        public abstract JetBrains.UI.IPopupLayouter CreateLayouter(JetBrains.DataFlow.Lifetime lifetime);
        public void FireAnyOtherAction() { }
        public void FireDeactivated() { }
        public void FireScroll() { }
        public void FireSelectionChanged() { }
        public static JetBrains.UI.PopupWindowManager.IPopupWindowContext GetEmpty(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext) { }
        public static JetBrains.UI.PopupWindowManager.PopupWindowContextSource GetEmptySource(JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext) { }
    }
    public class PopupWindowContextSource
    {
        public PopupWindowContextSource([JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.PopupWindowManager.IPopupWindowContext> FCreate) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.PopupWindowManager.IPopupWindowContext Create([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
    }
    public enum PopupWindowLayoutMode
    {
        None = 0,
        Full = 1,
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class PopupWindowManager
    {
        public PopupWindowManager([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Application.IIsApplicationActiveState isApplicationActiveState) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.ICollectionEvents<JetBrains.UI.PopupWindowManager.IPopupWindow> PopupWindows { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.PopupWindowManager.IPopupWindow CreatePopupWindow([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Form form, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.IPopupWindowContext context, JetBrains.UI.PopupWindowManager.HideFlags hideflags = 4294967295, bool wantsfocus = True, JetBrains.UI.PopupWindowManager.PopupWindowMutex mutex = null) { }
    }
    public class static PopupWindowManagerEx
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow ShowPopupWindow([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.PopupWindowManager.PopupWindowManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Form form, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.PopupWindowManager.IPopupWindowContext> FCreateContext, JetBrains.UI.PopupWindowManager.HideFlags hideflags = 4294967295, JetBrains.UI.PopupWindowManager.FormHideMethod hidemethod = 1) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow ShowPopupWindow([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.PopupWindowManager.PopupWindowManager thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Form form, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowContextSource contextsource, JetBrains.UI.PopupWindowManager.HideFlags hideflags = 4294967295, JetBrains.UI.PopupWindowManager.FormHideMethod hidemethod = 1) { }
    }
    public class PopupWindowMutex
    {
        public virtual void WindowAdded(JetBrains.UI.PopupWindowManager.IPopupWindow window, System.Collections.Generic.IEnumerable<JetBrains.UI.PopupWindowManager.IPopupWindow> arSameMutexWindows, JetBrains.DataFlow.ICollectionEvents<JetBrains.UI.PopupWindowManager.IPopupWindow> arAllWindows) { }
        public virtual void WindowRemoved(JetBrains.UI.PopupWindowManager.IPopupWindow window, System.Collections.Generic.IEnumerable<JetBrains.UI.PopupWindowManager.IPopupWindow> arSameMutexWindows, JetBrains.DataFlow.ICollectionEvents<JetBrains.UI.PopupWindowManager.IPopupWindow> arAllWindows) { }
    }
    public class TrackedWindow : System.Windows.Window, JetBrains.UI.PopupWindowManager.IPopupWindow, System.IDisposable
    {
        public TrackedWindow([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.IPopupLayouter layouter, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.IPopupWindowContext popupWindowContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowMutex mutex, JetBrains.UI.PopupWindowManager.HideFlags hideflags, bool wantsfocus, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowManager popupWindowManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IProperty<bool> isApplicationActive) { }
        public JetBrains.UI.PopupWindowManager.IPopupWindowContext Context { get; }
        public JetBrains.DataFlow.IProperty<bool> Glassify { get; }
        protected System.IntPtr Handle { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.PopupWindowManager.HideFlags> HideFlags { get; }
        public JetBrains.UI.PopupWindowManager.FormHideMethod HideMethod { get; set; }
        protected System.Windows.Interop.HwndSource HwndSource { get; }
        public bool IsDisposed { get; }
        public JetBrains.DataFlow.IProperty<bool> IsGlassified { get; }
        public JetBrains.UI.IPopupLayouter Layouter { get; }
        public JetBrains.UI.PopupWindowManager.PopupWindowLayoutMode LayoutMode { get; set; }
        public JetBrains.UI.PopupWindowManager.PopupWindowMutex Mutex { get; }
        public bool Visible { get; }
        public bool WantsFocus { get; }
        public void HideWindow() { }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size availableSize) { }
        protected override void OnClosed(System.EventArgs e) { }
        protected override void OnDeactivated(System.EventArgs e) { }
        protected override void OnSourceInitialized(System.EventArgs e) { }
        public bool ShowWindow() { }
    }
}
namespace JetBrains.UI.PopupWindowManager.Util
{
    
    public class PopupWindowContextSpecificEscapeActionHandler : JetBrains.ActionManagement.EscapeActionHandlerBase
    {
        public PopupWindowContextSpecificEscapeActionHandler([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.IPopupWindowContext popupWindowContext, [JetBrains.Annotations.NotNullAttribute()] System.EventHandler escapeHandler, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ActionManagement.IActionManager actionManager) { }
        protected override void Execute(JetBrains.Application.DataContext.IDataContext dataContext) { }
        protected override bool IsAvailable(JetBrains.Application.DataContext.IDataContext dataContext) { }
    }
}
namespace JetBrains.UI.Resources
{
    
    public sealed class CommonThemedIcons
    {
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 13, "Appearance")]
        public sealed class Appearance : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 38, "Backward")]
        public sealed class Backward : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 20, "Behaivior")]
        public sealed class Behaivior : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 40, "Bulb")]
        public sealed class Bulb : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 35, "Close")]
        public sealed class Close : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 23, "CollapseAll")]
        public sealed class CollapseAll : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 28, "ColorSelection16x16")]
        public sealed class ColorSelection16x16 : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 8, "Components")]
        public sealed class Components : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 16, "Copy16x16")]
        public sealed class Copy16x16 : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 6, "Create")]
        public sealed class Create : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 37, "Delete")]
        public sealed class Delete : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 3, "Document")]
        public sealed class Document : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 1, "Down")]
        public sealed class Down : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 41, "DropDown")]
        public sealed class DropDown : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 34, "Duplicate")]
        public sealed class Duplicate : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 0, "Edit")]
        public sealed class Edit : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 29, "Edit0")]
        public sealed class Edit0 : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 21, "Error")]
        public sealed class Error : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 4, "ErrorLarge")]
        public sealed class ErrorLarge : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 15, "ErrorOff")]
        public sealed class ErrorOff : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 22, "ErrorOn")]
        public sealed class ErrorOn : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 30, "ErrorRead")]
        public sealed class ErrorRead : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 24, "Expand")]
        public sealed class Expand : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 11, "ExpandableMenuItemTailGlyph")]
        public sealed class ExpandableMenuItemTailGlyph : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 9, "ExpandAll")]
        public sealed class ExpandAll : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 5, "Filter")]
        public sealed class Filter : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 12, "Forward")]
        public sealed class Forward : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 25, "Hourglass")]
        public sealed class Hourglass : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 10, "Left")]
        public sealed class Left : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 26, "Lock")]
        public sealed class Lock : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 36, "MenuItemCheck")]
        public sealed class MenuItemCheck : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 18, "Paste16x16")]
        public sealed class Paste16x16 : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 7, "Pin")]
        public sealed class Pin : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 32, "Question")]
        public sealed class Question : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 39, "QuickSearch")]
        public sealed class QuickSearch : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 27, "Refresh")]
        public sealed class Refresh : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 19, "Remove")]
        public sealed class Remove : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 2, "Right")]
        public sealed class Right : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 33, "Success")]
        public sealed class Success : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 17, "Up")]
        public sealed class Up : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 14, "Warning")]
        public sealed class Warning : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/CommonThemedIcons/ThemedIcons" +
            ".Common.Generated.Xaml", 31, "Warning5")]
        public sealed class Warning5 : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
    }
    public sealed class OptionsThemedIcons
    {
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 0, "ConnectionSettings")]
        public sealed class ConnectionSettings : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 8, "CopyBetweenLayers")]
        public sealed class CopyBetweenLayers : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 21, "CopySettings")]
        public sealed class CopySettings : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 2, "CopySettingsLarge")]
        public sealed class CopySettingsLarge : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 20, "EditLayer")]
        public sealed class EditLayer : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 6, "EditLayer1")]
        public sealed class EditLayer1 : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 11, "ExportLayer")]
        public sealed class ExportLayer : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 18, "ExportLayer2")]
        public sealed class ExportLayer2 : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 12, "ExportLayerLarge")]
        public sealed class ExportLayerLarge : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 22, "ExtensionManager")]
        public sealed class ExtensionManager : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 4, "ImportExportLayer")]
        public sealed class ImportExportLayer : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 13, "ImportExportLayer3")]
        public sealed class ImportExportLayer3 : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 3, "ImportLayer")]
        public sealed class ImportLayer : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 19, "ImportLayer4")]
        public sealed class ImportLayer4 : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 17, "ImportLayerLarge")]
        public sealed class ImportLayerLarge : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 15, "LayerThisComputer")]
        public sealed class LayerThisComputer : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 14, "MountLayer")]
        public sealed class MountLayer : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 1, "Options")]
        public sealed class Options : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 16, "Plugins")]
        public sealed class Plugins : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 7, "ResetLayer")]
        public sealed class ResetLayer : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 5, "ResetLayerLarge")]
        public sealed class ResetLayerLarge : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 9, "SettingsLayersLarge")]
        public sealed class SettingsLayersLarge : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Options.ThemedIcons/ThemedIco" +
            "ns.Options.Generated.Xaml", 10, "Updates")]
        public sealed class Updates : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
    }
    public sealed class SpecialThemedIcons
    {
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Special.ThemedIcons/ThemedIco" +
            "ns.Special.Generated.Xaml", 1, "InvalidIcon")]
        public sealed class InvalidIcon : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.Platform.ReSharper.UI;component/resources/Special.ThemedIcons/ThemedIco" +
            "ns.Special.Generated.Xaml", 0, "Placeholder")]
        public sealed class Placeholder : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
    }
}
namespace JetBrains.UI.Services
{
    
    public class static UiUtil
    {
        public static void InitializeForm(System.Windows.Forms.Form form) { }
    }
}
namespace JetBrains.UI.Settings
{
    
    [JetBrains.ActionManagement.ActionHandlerAttribute(new string[] {
            "CopyLayerToLayer.Item.00",
            "CopyLayerToLayer.Item.01",
            "CopyLayerToLayer.Item.02",
            "CopyLayerToLayer.Item.03",
            "CopyLayerToLayer.Item.04",
            "CopyLayerToLayer.Item.05",
            "CopyLayerToLayer.Item.06",
            "CopyLayerToLayer.Item.07",
            "CopyLayerToLayer.Item.08",
            "CopyLayerToLayer.Item.09",
            "CopyLayerToLayer.Item.10",
            "CopyLayerToLayer.Item.11",
            "CopyLayerToLayer.Item.12",
            "CopyLayerToLayer.Item.13",
            "CopyLayerToLayer.Item.14",
            "CopyLayerToLayer.Item.15",
            "CopyLayerToLayer.Item.16",
            "CopyLayerToLayer.Item.17",
            "CopyLayerToLayer.Item.18",
            "CopyLayerToLayer.Item.19"})]
    public class CopyLayerToLayer_Item_XXAction : JetBrains.ActionManagement.IActionHandler
    {
        public CopyLayerToLayer_Item_XXAction([JetBrains.Annotations.NotNullAttribute()] string sActionId) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class CopyLayerToLayerAction : JetBrains.ActionManagement.IActionHandler
    {
        public CopyLayerToLayerAction([JetBrains.Annotations.NotNullAttribute()] string sActionId) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class CopySettingsLayerDiskFilePathAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.Application.ShellComponentAttribute()]
    public class DataConstants
    {
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.UI.Settings.DataConstants.UserInjectedLayersHostData> InjectedLayersHost_ExcludeHostItself;
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.UI.Settings.DataConstants.UserInjectedLayersHostData> InjectedLayersHost_IncludingHostItself;
        public static readonly JetBrains.Application.DataContext.DataConstant<System.Collections.Generic.IList<JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity>> SelectedUserFriendlySettingsLayers;
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity> SingleSelectedUserFriendlySettingsLayer;
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.UI.Settings.DataConstants.UserInjectedSettingsLayer> SingleSelectedUserInjectedSettingsLayer;
        public DataConstants(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.DataContext.DataContexts dcs, JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers injections) { }
        public class UserInjectedLayersHostData : JetBrains.Util.dataStructures.Boxed<JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity>
        {
            public UserInjectedLayersHostData(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity value) { }
        }
        public class UserInjectedSettingsLayer : JetBrains.Util.dataStructures.Boxed<JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity>
        {
            public UserInjectedSettingsLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity value) { }
        }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class DeleteInjectedLayerAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.UI.Settings.LayoutSettings), "MRU positions and sizes of application windows.")]
    public class DialogWindowsSettings { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class EditSettingsLayerOptionsAction : JetBrains.ActionManagement.IActionHandler
    {
        public static readonly JetBrains.Application.DataContext.DataConstant<string> ShowOptionsPage;
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class ExportSettingsToFileAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Sharing.Product, JetBrains.Application.Lifecycle.Deferred, JetBrains.Application.Creation.PrimaryThread, JetBrains.Application.Access.None)]
    public class IconsForDefaultSettingsStorages
    {
        public IconsForDefaultSettingsStorages(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalPerProductStorage globalPerProductStorage, JetBrains.Application.Extensions.ExtensionsSettingsMountPointProvider extensionsSettingsMountPointProvider, JetBrains.UI.Icons.IThemedIconManager iconman) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class ImportSettingsFromFileAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class ImportSettingsFromUrlAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class InjectExistingFileLayerIntoInjectedLayersHostAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class InjectNewFileLayerIntoInjectedLayersHostAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.Application.Settings.HousekeepingSettings), "Layout of the customized user interface.")]
    public class LayoutSettings { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class OpenSettingsLayerContainingFolderAction : JetBrains.ActionManagement.IActionHandler { }
    [System.ComponentModel.TypeConverterAttribute(typeof(JetBrains.UI.Settings.OwnedDialogPositionConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(JetBrains.UI.Settings.OwnedDialogPositionSerializer))]
    public struct OwnedDialogPosition
    {
        public JetBrains.UI.Settings.PointRelativeToMainWindow CenterLocation;
        public System.Windows.Size Size;
        public OwnedDialogPosition(JetBrains.UI.Settings.PointRelativeToMainWindow centerLocation, System.Windows.Size size) { }
        public void ApplyToWindow([JetBrains.Annotations.NotNullAttribute()] System.Windows.Window window, JetBrains.UI.Application.IMainWindow mainwin) { }
        public static void BindToSettings([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.IProperty<JetBrains.UI.Settings.OwnedDialogPosition> propSettings, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Window window, JetBrains.UI.Application.IMainWindow mainwin) { }
        public static JetBrains.UI.Settings.OwnedDialogPosition FromScreen(System.Windows.Rect rcScreen, JetBrains.UI.Application.IMainWindow mainwin) { }
        public static JetBrains.UI.Settings.OwnedDialogPosition FromWindow([JetBrains.Annotations.NotNullAttribute()] System.Windows.Window window, JetBrains.UI.Application.IMainWindow mainwin) { }
        [JetBrains.Annotations.PureAttribute()]
        public System.Windows.Rect ToScreen(JetBrains.UI.Application.IMainWindow mainwin) { }
        public override string ToString() { }
    }
    public class OwnedDialogPositionConverter : JetBrains.Util.Reflection.TypeConverterBase<JetBrains.UI.Settings.OwnedDialogPosition>
    {
        public OwnedDialogPositionConverter() { }
    }
    public class OwnedDialogPositionSerializer : JetBrains.Util.Reflection.ValueSerializerBase<JetBrains.UI.Settings.OwnedDialogPosition>
    {
        public OwnedDialogPositionSerializer() { }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(JetBrains.UI.Settings.PointRelativeToMainWindowConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(JetBrains.UI.Settings.PointRelativeToMainWindowSerializer))]
    public struct PointRelativeToMainWindow
    {
        public System.Windows.Vector Value;
        public static JetBrains.UI.Settings.PointRelativeToMainWindow FromScreen(System.Windows.Point ptScreen, System.Windows.Forms.IWin32Window owner) { }
        public System.Windows.Point ToScreen(System.Windows.Forms.IWin32Window owner) { }
        public override string ToString() { }
    }
    public class PointRelativeToMainWindowConverter : JetBrains.Util.Reflection.TypeConverterBase<JetBrains.UI.Settings.PointRelativeToMainWindow>
    {
        public PointRelativeToMainWindowConverter() { }
    }
    public class PointRelativeToMainWindowSerializer : JetBrains.Util.Reflection.ValueSerializerBase<JetBrains.UI.Settings.PointRelativeToMainWindow>
    {
        public PointRelativeToMainWindowSerializer() { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class RenameInjectedLayerAction : JetBrains.ActionManagement.IActionHandler
    {
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class ResetAllSettingsAction : JetBrains.ActionManagement.IActionHandler
    {
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class ResetSelectedSettingsLayersAction : JetBrains.ActionManagement.IActionHandler
    {
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class ResetSettingsDialogOwner
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly System.Action<JetBrains.UI.Application.WindowUtil.Modality, System.Collections.Generic.IList<JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity>> Show;
        public ResetSettingsDialogOwner(JetBrains.DataFlow.Lifetime lifetimeComponent, JetBrains.Application.IApplicationDescriptor product, JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers alllayers, JetBrains.Application.Settings.UserInterface.ResetSettings resetSettings, JetBrains.Application.Settings.Logging.ISettingsLogger logging, JetBrains.Threading.IThreading threading, JetBrains.UI.Application.IMainWindow mw) { }
    }
    public class SettingsBindingExtension : System.Windows.Markup.MarkupExtension
    {
        public SettingsBindingExtension(string id) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Avalon.IStringConverter Converter { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public object Default { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public string Id { get; set; }
        public override object ProvideValue(System.IServiceProvider serviceProvider) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsLayersDialogToolbar_AddLayerAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class SettingsLayersDialogToolbar_ImportFromAction : JetBrains.ActionManagement.IActionHandler { }
    public class static UISettings
    {
        public static readonly System.Windows.DependencyProperty SettingsTableProperty;
        public static JetBrains.Util.DataStructures.ISettingsTable GetSettingsTable(System.Windows.DependencyObject obj) { }
        public static void SetSettingsTable(System.Windows.DependencyObject obj, JetBrains.Util.DataStructures.ISettingsTable value) { }
    }
}
namespace JetBrains.UI.src.Controls
{
    
    public class ComboBoxWithImages : System.Windows.Forms.ComboBox
    {
        public ComboBoxWithImages() { }
        public int HorizontalPadding { get; set; }
        public int ImageTextMargin { get; set; }
        public int VerticalPadding { get; set; }
        public System.Drawing.Image GetItemImage(object item) { }
        public void SetItemImage(object item, System.Drawing.Image image) { }
    }
}
namespace JetBrains.UI.src.DataContext
{
    
    [JetBrains.Application.DataContext.ExportFindDataRulesAttribute(Priority=2D)]
    public class FindAvalonAndWinFormsDataRules : JetBrains.Application.DataContext.IFindDataRules { }
}
namespace JetBrains.UI.src.Settings
{
    
    public class AnchorSettingsLayerDataConstant
    {
        public static readonly JetBrains.Application.DataContext.DataConstant<JetBrains.UI.src.Settings.AnchorSettingsLayerDataConstant> DataConstant;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity Value;
        public AnchorSettingsLayerDataConstant([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity value) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class MoveInjectedLayerAfterAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class MoveInjectedLayerBeforeAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class MoveInjectedLayerDownAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class MoveInjectedLayerFirstAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class MoveInjectedLayerLastAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class MoveInjectedLayerUpAction : JetBrains.ActionManagement.IActionHandler { }
}
namespace JetBrains.UI.src.Settings.ImportExport.Model
{
    
    public class ImportExportRun
    {
        public static void Run([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel from, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel to, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger, System.Action<JetBrains.Application.Settings.ISettingsStorageMountPoint> FFilter = null) { }
    }
    public class ImportExportWizardModel
    {
        public readonly JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel ReadFrom;
        public readonly JetBrains.UI.src.Settings.ImportExport.Model.SourceDataFilterModel SourceDataFilter;
        public readonly JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel WriteTo;
        public readonly JetBrains.UI.src.Settings.ImportExport.Model.WriteToTargetModel WriteToTarget;
        public ImportExportWizardModel(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.ISettingsStore store, JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader, JetBrains.Threading.IThreading threading) { }
    }
    public class SettingsSourceModel
    {
        public readonly JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon Common;
        public readonly JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.FileStorageMode FileStorage;
        public readonly JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.MountingPointMode MountingPoint;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.SourceKind> SelectedSource;
        public readonly JetBrains.Application.Settings.ISettingsStore SettingsStore;
        public readonly JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.StoreMode Store;
        public SettingsSourceModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStore store, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader) { }
        public void ReadFromSelectedSource([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStorageMountPoint mountReadInto, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
        public void WriteToSelectedSource([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStorageMountPoint mountWriteFrom, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
        public class AllModesCommon
        {
            public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon.HowToWrite> HowToWriteToSource;
            [JetBrains.Annotations.CanBeNullAttribute()]
            public JetBrains.Application.Settings.SettingsKey PrefilterKey;
            public System.Collections.Generic.IDictionary<JetBrains.Application.Settings.SettingsKey, object> PrefilterKeyIndices;
            public AllModesCommon([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
            public enum HowToWrite
            {
                Append = 0,
                Replace = 1,
            }
        }
        public class FileStorageMode
        {
            public readonly JetBrains.DataFlow.IProperty<string> FileStorageFilename;
            public readonly JetBrains.DataFlow.IProperty<JetBrains.Application.Settings.Store.Implementation.SettingsStorageMountPoint.MountPath> FileStorageMountPath;
            public FileStorageMode([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext transaction, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon allModesCommon) { }
            public void Read([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStorageMountPoint mountReadInto, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
            public void Write([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStorageMountPoint mountWriteFrom, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
        }
        public class MountingPointMode
        {
            public readonly JetBrains.DataFlow.IListEvents<JetBrains.Application.Settings.ISettingsStorageMountPoint> AvailableMountPoints;
            public readonly JetBrains.DataFlow.ICollectionEvents<JetBrains.Application.Settings.ISettingsStorageMountPoint> SelectedMountPoints;
            public MountingPointMode([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStore store, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon allModesCommon) { }
            public void Read([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStorageMountPoint mountReadInto, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
            public void Write([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStorageMountPoint mountWriteFrom, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
        }
        public enum SourceKind
        {
            Store = 0,
            MountingPoint = 1,
            FileStorage = 2,
        }
        public class StoreMode
        {
            public readonly JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers AvailableStores;
            public readonly JetBrains.DataFlow.IProperty<bool> IsReadingDefaultsFromSource;
            public readonly JetBrains.DataFlow.IProperty<JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer> SelectedStore;
            public StoreMode([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStore store, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon allModesCommon) { }
            public void Read([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStorageMountPoint mountReadInto, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
            public void Write([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStorageMountPoint mountWriteFrom, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger) { }
        }
    }
    public class SourceDataFilterModel
    {
        public readonly JetBrains.DataFlow.IProperty<System.Exception> Error;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.src.Settings.ImportExport.Model.SourceDataFilterModel.LoadedFromSourceData> LoadedFromSource;
        public SourceDataFilterModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel sourceReadFrom, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading) { }
        public void BeginLoadSource() { }
        public class LoadedFromSourceData
        {
            public LoadedFromSourceData(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Settings.ISettingsStorageMountPoint mount, JetBrains.Threading.IThreading threading, JetBrains.Application.Settings.ISettingsStore store) { }
            public JetBrains.Application.Settings.ISettingsStorageMountPoint Mount { get; }
            public JetBrains.ReSharper.VSI.Misc.SettingsSchemaView.SchemaTreeNodeFactory SchemaTreeNodeFactory { get; }
            public JetBrains.Application.Settings.IContextBoundSettingsStore SettingsStoreContext { get; }
            public JetBrains.ReSharper.VSI.Misc.StorageView.StorageViewEntryFactory StorageViewEntryFactory { get; }
        }
    }
    public class WriteToTargetModel
    {
        public readonly JetBrains.DataFlow.Property<System.Exception> Error;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.src.Settings.ImportExport.Model.WriteToTargetModel.WriteSessionData> WriteSession;
        public WriteToTargetModel([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SourceDataFilterModel source, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel target, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading) { }
        public void BeginSaveTarget() { }
        public class WriteSessionData
        {
            public WriteSessionData(JetBrains.DataFlow.Lifetime lifetime) { }
        }
    }
}
namespace JetBrains.UI.src.Settings.ImportExport.Uidata
{
    
    public class ImportExportWizardUidata : JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        public readonly JetBrains.ReSharper.VSI.Misc.WizardUidata Wizard;
        public ImportExportWizardUidata(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.src.Settings.ImportExport.Model.ImportExportWizardModel model, JetBrains.ActionManagement.IActionBarManager actionBarManager) { }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
    }
    public class SourceDataFilterUidata : JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        public readonly JetBrains.DataFlow.ISimpleSignal Recalculate;
        public SourceDataFilterUidata([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SourceDataFilterModel model, JetBrains.ActionManagement.IActionBarManager actionBarManager) { }
        public JetBrains.ActionManagement.IActionBarManager ActionBarManager { get; }
        public JetBrains.DataFlow.IProperty<System.Exception> Error { get; }
        public JetBrains.DataFlow.IProperty<int> FilteringModeIndex { get; }
        public JetBrains.DataFlow.IProperty<bool> IsStateBusy { get; }
        public JetBrains.DataFlow.IProperty<bool> IsStateError { get; }
        public JetBrains.DataFlow.IProperty<bool> IsStateReady { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.src.Settings.ImportExport.Model.SourceDataFilterModel.LoadedFromSourceData> LoadedFromSource { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
        public enum FilteringModes
        {
            Storage = 0,
            Store = 1,
        }
    }
    public class SourceSelectionUidata : JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        public readonly JetBrains.UI.src.Settings.ImportExport.Uidata.SourceSelectionUidata.AllModesCommon Common;
        public readonly JetBrains.UI.src.Settings.ImportExport.Uidata.SourceSelectionUidata.FileStorageMode FileStorage;
        public readonly JetBrains.UI.src.Settings.ImportExport.Uidata.SourceSelectionUidata.MountingPointMode MountingPoint;
        public readonly JetBrains.DataFlow.IProperty<int> SelectedSourceIndex;
        public readonly JetBrains.UI.src.Settings.ImportExport.Uidata.SourceSelectionUidata.StoreMode Store;
        public SourceSelectionUidata([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel model, bool isForWriting) { }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
        public class AllModesCommon
        {
            public readonly bool IsForWriting;
            public readonly JetBrains.DataFlow.IProperty<System.Nullable<bool>> IsOverwritingEverythingInSource;
            public AllModesCommon([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon model, bool isForWriting) { }
        }
        public class FileStorageMode
        {
            public readonly JetBrains.DataFlow.IProperty<string> FileStorageMountPath;
            public readonly JetBrains.UI.Extensions.Commands.DelegateCommand ShowBrowseFileDialogCommand;
            public FileStorageMode([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.FileStorageMode model) { }
            public JetBrains.DataFlow.IProperty<string> FileStorageFilename { get; }
        }
        public class MountingPointMode
        {
            public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.src.Settings.ImportExport.Uidata.SourceSelectionUidata.MountingPointMode.AvailableMount> AvailableMountPoints;
            public readonly JetBrains.DataFlow.IProperty<System.Collections.Generic.IList<object>> SelectedMountPointsForList;
            public MountingPointMode([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.MountingPointMode model) { }
            public class AvailableMount
            {
                public AvailableMount([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.ISettingsStorageMountPoint mount) { }
                public string DisplayName { get; }
            }
        }
        public class StoreMode
        {
            public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.src.Settings.ImportExport.Uidata.SourceSelectionUidata.StoreMode.AvailableStore> AvailableStores;
            public readonly JetBrains.DataFlow.IProperty<System.Nullable<bool>> IsReadingDefaultsFromSource;
            public readonly JetBrains.DataFlow.IProperty<object> SelectedStore;
            public StoreMode([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.SettingsSourceModel.StoreMode model) { }
            public class AvailableStore
            {
                public AvailableStore([JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer model) { }
                public JetBrains.DataFlow.IProperty<string> DisplayName { get; }
            }
        }
    }
    public class WriteToTargetUidata : JetBrains.UI.Wpf.IAutomation, System.ComponentModel.INotifyPropertyChanged
    {
        public readonly JetBrains.DataFlow.ISimpleSignal WriteNow;
        public WriteToTargetUidata([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.src.Settings.ImportExport.Model.WriteToTargetModel model) { }
        public JetBrains.DataFlow.Property<System.Exception> Error { get; }
        public JetBrains.DataFlow.IProperty<bool> IsStateBusy { get; }
        public JetBrains.DataFlow.IProperty<bool> IsStateError { get; }
        public JetBrains.DataFlow.IProperty<bool> IsStateReady { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.src.Settings.ImportExport.Model.WriteToTargetModel.WriteSessionData> WriteSession { get; }
        public event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;
    }
}
namespace JetBrains.UI.src.Settings.ImportExport.View
{
    
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class ImportExportWizardView : System.Windows.Controls.Control, JetBrains.UI.Wpf.IView, JetBrains.UI.Wpf.IView<JetBrains.UI.src.Settings.ImportExport.Uidata.ImportExportWizardUidata>
    {
        public static System.Windows.UIElement CreateTemplate(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.src.Settings.ImportExport.Uidata.ImportExportWizardUidata uidata, JetBrains.UI.src.Settings.ImportExport.View.ImportExportWizardView view) { }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class SourceDataFilterView : System.Windows.Controls.Control, JetBrains.UI.Wpf.IView, JetBrains.UI.Wpf.IView<JetBrains.UI.src.Settings.ImportExport.Uidata.SourceDataFilterUidata>
    {
        public class ActionManagerToolBar11 : System.Windows.Controls.Control
        {
            public static readonly System.Windows.DependencyProperty ActionBarProperty;
            public static readonly System.Windows.DependencyProperty ToolbarControlProperty;
            public ActionManagerToolBar11() { }
            public JetBrains.UI.src.Settings.ImportExport.View.SourceDataFilterView.ActionManagerToolBar11.ActionBarData ActionBar { get; set; }
            public JetBrains.DataFlow.IProperty<JetBrains.UI.src.Settings.ImportExport.View.SourceDataFilterView.ActionManagerToolBar11.ActionBarData> ActionBarDataIProperty { get; }
            public System.Windows.UIElement ToolbarControl { get; set; }
            public class ActionBarData
            {
                public JetBrains.ActionManagement.IActionBarManager ActionBarManager { get; }
                public string ActionGroupId { get; }
                public System.Windows.UIElement ContextParent { get; }
            }
        }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class SourceSelectionView : System.Windows.Controls.Control, JetBrains.UI.Wpf.IView, JetBrains.UI.Wpf.IView<JetBrains.UI.src.Settings.ImportExport.Uidata.SourceSelectionUidata>
    {
        public static System.Windows.UIElement CreateTemplate(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.src.Settings.ImportExport.Uidata.SourceSelectionUidata uidata, JetBrains.UI.src.Settings.ImportExport.View.SourceSelectionView view) { }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class WriteToTargetView : System.Windows.Controls.Decorator, JetBrains.UI.Wpf.IView, JetBrains.UI.Wpf.IView<JetBrains.UI.src.Settings.ImportExport.Uidata.WriteToTargetUidata>
    {
        public WriteToTargetView() { }
    }
}
namespace JetBrains.UI.src.Shell.License
{
    
    public class ObtainPermanentLicenseControl : System.Windows.Forms.UserControl
    {
        public ObtainPermanentLicenseControl() { }
        public string TextBoxValue { get; set; }
        protected override void Dispose(bool disposing) { }
    }
    public class ObtainPermanentLicenseForm : JetBrains.UI.Application.License.ProductBaseForm
    {
        public ObtainPermanentLicenseForm(JetBrains.Application.IApplicationDescriptor descriptor, JetBrains.UI.Application.IUIApplication environment, JetBrains.UI.Application.License.ILicenseInformation licenseInformation, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Application.ProductEdition edition, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.Validation.FormValidators formValidators) { }
        public ObtainPermanentLicenseForm(JetBrains.Application.IApplicationDescriptor descriptor, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IUIApplication environment, JetBrains.UI.Application.License.ILicenseInformation licenseInformation, JetBrains.Application.ProductEdition edition, string titleText, string actionText, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.Validation.FormValidators formValidators) { }
        public string TextBoxValue { get; set; }
    }
}
namespace JetBrains.UI.src.Updates.Actions
{
    
    public class TestUpdatesXsltDialog : System.Windows.Forms.Form
    {
        public TestUpdatesXsltDialog(JetBrains.UI.Updates.UpdatesPopupAlerts updatesAlerts, JetBrains.UI.Updates.UpdatesManager updatesManager, JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.UI.Application.IMainWindow mainWindow, JetBrains.UI.Application.OpensUri opensUri, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader) { }
        protected override void Dispose(bool disposing) { }
    }
}
namespace JetBrains.UI.StatusBar.Indicators
{
    
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Sharing.Common, JetBrains.Application.Lifecycle.Deferred, JetBrains.Application.Creation.PrimaryThread, JetBrains.Application.Access.None)]
    public class MemoryUsageIndicator : JetBrains.UI.StatusBar.JetStatusBarIndicator, JetBrains.UI.Tooltips.ITooltipProvider
    {
        public MemoryUsageIndicator([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading invocator, JetBrains.UI.StatusBar.IStatusBar statusbar, JetBrains.UI.Application.IIsApplicationActiveState appactive, JetBrains.Util.Lazy.Lazy<JetBrains.UI.Tooltips.ITooltipManager> tooltips, JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow mainWindow, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Components.Theming.IStatusBarColorsManager thememan, JetBrains.UI.Application.IUIApplication environment) { }
        public JetBrains.CommonControls.RichTextTipPainter Presentation { get; }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.Application.Settings.EnvironmentSettings), "Memory usage indicator (in the status bar).")]
    public class MemoryUsageIndicatorSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Whether to show the Memory Usage Indicator in the status bar of the application m" +
            "ain window.")]
        public bool IsVisible;
    }
    public class TrefoilIndicator : JetBrains.UI.StatusBar.JetStatusBarIndicator, JetBrains.CommonControls.IConstrainableControl, JetBrains.CommonControls.IWindowlessControl, JetBrains.UI.Tooltips.ITooltipProvider
    {
        protected float myAngularSpeed;
        protected bool myAutoActivate;
        protected System.Drawing.Rectangle myBounds;
        protected System.Drawing.Brush myBrushBack;
        protected System.Drawing.Brush myBrushFore;
        protected const float myInnerRadius = 0.2F;
        protected const float myMiddleRadius = 0.33F;
        protected const float myOuterRadius = 0.9F;
        protected const uint mySpinPeriod = 5000u;
        protected readonly JetBrains.UI.Options.Helpers.Controls.Timer myTimer;
        public TrefoilIndicator(JetBrains.UI.StatusBar.IStatusBar statbar) { }
        public bool AutoActivate { get; set; }
        public System.Drawing.Rectangle Bounds { get; }
        public JetBrains.DataFlow.ISimpleSignal GottenDirty { get; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        public static JetBrains.UI.StatusBar.Indicators.TrefoilIndicator CreateIndicatorInStatusBar(JetBrains.UI.StatusBar.IStatusBar statbar) { }
        protected static void DrawFoil(System.Drawing.Graphics g, System.Drawing.Brush brush, System.Drawing.PointF ptCenter, float fStartAngle, float fSweepAngle, float fInnerRadius, float fThickness) { }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        public void Invert() { }
        public void OnClick(System.Windows.Forms.MouseEventArgs args) { }
        public void OnContextMenu(JetBrains.UI.StatusBar.JetStatusBarIndicator.ContextMenuEventArgs args) { }
        public void OnDoubleClick(System.Windows.Forms.MouseEventArgs args) { }
        public void Paint(System.Drawing.Graphics g) { }
        protected void PaintImpl(System.Drawing.Graphics g) { }
        public void Reverse() { }
        public void SetBounds(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Rectangle bounds) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
    }
}
namespace JetBrains.UI.StatusBar
{
    
    public interface IStatusBar
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IListEvents<JetBrains.UI.StatusBar.JetStatusBarIndicator> Indicators { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<bool> IsEmphasized { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<bool> IsVisible { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.IProperty<string> Text { get; }
    }
    public class static IStatusBarEx
    {
        public static void ClearText([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.StatusBar.IStatusBar thіs) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string GetCurrentText([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.StatusBar.IStatusBar thіs, JetBrains.UI.StatusBar.SubclassedStatusBar subclassedStatusBar) { }
        public static void SetText([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.StatusBar.IStatusBar thіs, [JetBrains.Annotations.NotNullAttribute()] string text, bool isEmphisized) { }
    }
    public class JetStatusBarIndicator
    {
        public JetStatusBarIndicator() { }
        public JetStatusBarIndicator(JetBrains.DataFlow.Lifetime lifetime) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.ISignal<System.Windows.Forms.MouseEventArgs> Click { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.ISignal<JetBrains.UI.StatusBar.JetStatusBarIndicator.ContextMenuEventArgs> ContextMenu { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<System.Windows.Forms.Cursor> Cursor { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.ISignal<System.Windows.Forms.MouseEventArgs> DoubleClick { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<bool> IsHot { get; }
        public JetBrains.DataFlow.IProperty<System.Windows.Forms.Padding> Margin { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Tooltips.ITooltipProvider TooltipProvider { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.DataFlow.IProperty<JetBrains.CommonControls.IWindowlessControl> WindowlessControl { get; }
        public class ContextMenuEventArgs : System.EventArgs
        {
            public ContextMenuEventArgs([JetBrains.Annotations.NotNullAttribute()] System.Action<System.Action<JetBrains.DataFlow.Lifetime, JetBrains.UI.PopupMenu.JetPopupMenu>> FShowMenu) { }
            public void ShowMenu(System.Action<JetBrains.DataFlow.Lifetime, JetBrains.UI.PopupMenu.JetPopupMenu> FBeforeShow) { }
        }
    }
    public class JetStatusBarIndicatorView : System.Windows.Forms.NativeWindow, JetBrains.CommonControls.IConstrainableControl, JetBrains.UI.Tooltips.ITooltipProvider, System.IDisposable
    {
        public readonly JetBrains.DataFlow.ISimpleSignal GottenDirty;
        protected readonly JetBrains.DataFlow.IProperty<JetBrains.UI.StatusBar.JetStatusBarIndicator> myData;
        public JetStatusBarIndicatorView([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.StatusBar.JetStatusBarIndicator data, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext) { }
        public bool AutoActivate { get; set; }
        public System.Drawing.Rectangle Bounds { get; set; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.StatusBar.JetStatusBarIndicator> Data { get; }
        public bool Visible { get; set; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        public void CreateControl(System.Windows.Forms.IWin32Window parent, System.Drawing.Rectangle bounds) { }
        public void CreateControl(System.Windows.Forms.IWin32Window parent) { }
        public void Dispose() { }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
        protected void OnButtonDblClk(ref System.Windows.Forms.Message m, System.Windows.Forms.MouseButtons button) { }
        protected void OnButtonUp(ref System.Windows.Forms.Message m, System.Windows.Forms.MouseButtons button) { }
        protected void OnContextMenu(ref System.Windows.Forms.Message m) { }
        protected override void OnHandleChange() { }
        protected void OnPaint() { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
    }
    public class JetStatusBarShim : System.Windows.Forms.NativeWindow
    {
        public static readonly int MinFirstPartWidth;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.StatusBar.JetStatusBarIndicatorView> myIndicatorViews;
        [JetBrains.Annotations.NotNullAttribute()]
        protected static readonly System.Collections.Generic.JetHashSet<JetBrains.Interop.WinApi.WindowsMessages> myStatusbarMessagesAll;
        [JetBrains.Annotations.NotNullAttribute()]
        protected static readonly System.Collections.Generic.IList<JetBrains.Interop.WinApi.WindowsMessages> myStatusbarMessagesExpected;
        [JetBrains.Annotations.NotNullAttribute()]
        protected static readonly System.Collections.Generic.JetHashSet<JetBrains.Interop.WinApi.WindowsMessages> myStatusbarMessagesUnexpected;
        public static readonly bool OptionTrace;
        [JetBrains.Annotations.NotNullAttribute()]
        public static readonly string StatusBarWindowClassName;
        public JetStatusBarShim([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Env.ProductConfigurationsEx.InternalMode internalMode, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext) { }
        public JetBrains.DataFlow.IListEvents<JetBrains.UI.StatusBar.JetStatusBarIndicator> IndicatorData { get; }
        protected JetBrains.DataFlow.IListEvents<JetBrains.UI.StatusBar.JetStatusBarIndicatorView> IndicatorViews { get; }
        public JetBrains.DataFlow.IProperty<bool> IsVisible { get; }
        public void Attach(System.IntPtr hwndStatusBar) { }
        public static System.IntPtr FindStatusBarInMainWindow(System.IntPtr hwndMain) { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected static System.Collections.Generic.JetHashSet<JetBrains.Interop.WinApi.WindowsMessages> GetUnexpectedStatusBarMessages() { }
        protected void InvalidateSize() { }
        protected override void OnHandleChange() { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
    }
    public class StripStatusBar
    {
        public StripStatusBar(JetBrains.DataFlow.Lifetime lifetime) { }
        public JetBrains.DataFlow.IListEvents<JetBrains.UI.StatusBar.JetStatusBarIndicator> Indicators { get; }
        public string Text { get; }
        public void ClearText() { }
        public bool Init(JetBrains.DataFlow.Lifetime disposables, JetBrains.UI.Application.IMainWindow mainwin) { }
        public void SetText(string text, bool emphisized) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class SubclassedStatusBar
    {
        public readonly JetBrains.DataFlow.ISimpleSignal UpdateStatusBarRequested;
        public SubclassedStatusBar([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime) { }
    }
}
namespace JetBrains.UI.TaskBar
{
    
    public interface ITaskBarManager
    {
        void AddProgress(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Progress.IProgressIndicatorModel indicatorModel);
        void SetProgressState(JetBrains.UI.TaskBar.TaskBarProgressState state);
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class TaskBarManager : JetBrains.UI.TaskBar.ITaskBarManager
    {
        public TaskBarManager(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading threading) { }
        public void AddProgress(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.Progress.IProgressIndicatorModel indicatorModel) { }
        public void SetProgressState(JetBrains.UI.TaskBar.TaskBarProgressState state) { }
    }
    public enum TaskBarProgressState
    {
        NoProgress = 0,
        Indeterminate = 1,
        Normal = 2,
        Error = 4,
        Paused = 8,
    }
    public class Win7TaskBarManager
    {
        public static void SetProgressState(JetBrains.UI.TaskBar.TaskBarProgressState state) { }
        public static void SetProgressValue(int current, int total) { }
    }
}
namespace JetBrains.UI.ThemedIconsToolWindow
{
    
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class ShowThemedIconsToolWindowAction : JetBrains.ActionManagement.IActionHandler { }
    [JetBrains.UI.ToolWindowManagement.ToolWindowDescriptorAttribute(Icon=typeof(JetBrains.UI.Resources.CommonThemedIcons.Success), ProductNeutralId="ThemedIcons", Text="ThemedIcons", Type=JetBrains.UI.ToolWindowManagement.ToolWindowType.SingleInstance, VisibilityPersistenceScope=JetBrains.UI.ToolWindowManagement.ToolWindowVisibilityPersistenceScope.Global)]
    public class ThemedIconsToolWindow : JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor
    {
        public ThemedIconsToolWindow(JetBrains.Application.IApplicationDescriptor applicationDescriptor) { }
        [JetBrains.Application.ShellComponentAttribute()]
        public class RegisterInstance
        {
            public RegisterInstance(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindow wnd, JetBrains.UI.ToolWindowManagement.ToolWindowManager toolman, JetBrains.Application.Components.IComponentContainer cont) { }
        }
    }
    public class ThemedIconsToolWindowAutomation : JetBrains.UI.Wpf.AAutomation
    {
        public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation> AllIcons;
        public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemeColumnHeaderAutomation> AvailableThemes;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.DetailsAutomation> CurrentDetails;
        public readonly JetBrains.UI.Controls.Misc.SearchEventHandler FilterEditBoxbehavior;
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.Avalon.TreeListView.Contracts.IFilterDescriptor> IconsListFilterDescriptor;
        public readonly JetBrains.DataFlow.IProperty<bool> IsTilesListVisible;
        public readonly JetBrains.DataFlow.IProperty<bool> IsTreeVisible;
        public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconTileAutomation> ItemsForTiles;
        public readonly JetBrains.DataFlow.IListEvents<object> ItemsForTree;
        public readonly JetBrains.DataFlow.Property<JetBrains.UI.Icons.CompiledIcons.CompiledIconId> SelectedIcon;
        public readonly JetBrains.DataFlow.IProperty<int> TotalIconsCount;
        public readonly JetBrains.UI.Controls.RadioGroupViewModel<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ViewMode> ViewModeRadio;
        public ThemedIconsToolWindowAutomation(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Icons.IThemedIconManager themedIconManager, JetBrains.Application.Parts.IPartsCatalogueSet catalogset, JetBrains.UI.Icons.CompiledIcons.CompiledIconIdOwner iconidowner, JetBrains.UI.Application.Progress.UITaskExecutor tasker) { }
        public void ExportAll() { }
        public class DetailsAutomation : JetBrains.UI.Wpf.AAutomation
        {
            public readonly string IconId;
            public readonly bool IsNoThemeListAvailable;
            public readonly System.Collections.Generic.IList<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.DetailsAutomation.DetailsIconLargePreviewAutomation> LargePreviews;
            public readonly JetBrains.UI.RichText.RichText OwnerNameIfAvail;
            public readonly System.Collections.Generic.IList<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.DetailsAutomation.DetailsThemeSectionAutomation> ThemeSections;
            public DetailsAutomation(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.Progress.UITaskExecutor taskExecutor, JetBrains.UI.Icons.CompiledIcons.CompiledIconId icon, JetBrains.UI.Icons.CompiledIcons.CompiledIconIdOwner iconidowner, [JetBrains.Annotations.CanBeNullAttribute()] string[] iconthemes) { }
            public class DetailsIconLargePreviewAutomation : JetBrains.UI.Wpf.AAutomation
            {
                public readonly System.Windows.Media.ImageSource ImageSource;
                public readonly JetBrains.UI.Icons.IconTheme Theme;
                public readonly JetBrains.UI.Icons.CompiledIcons.CompiledIconId ThemedIcon;
                public DetailsIconLargePreviewAutomation([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.CompiledIcons.CompiledIconId themedIcon, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IconTheme theme, JetBrains.UI.Icons.IIconIdOwner iconidowner, JetBrains.UI.Application.Progress.UITaskExecutor taskExecutor) { }
                public void ExportIcon() { }
            }
            public class DetailsThemeSectionAutomation : JetBrains.UI.Wpf.AAutomation
            {
                public readonly JetBrains.UI.RichText.RichText ImageSizeText;
                public readonly System.Windows.Media.ImageSource ImageSource;
                public readonly JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation.ImageSourceType ImageSourceType;
                public readonly string ThemeName;
                public DetailsThemeSectionAutomation(JetBrains.UI.Icons.CompiledIcons.CompiledIconId icon, JetBrains.UI.Icons.IconTheme theme, string name, JetBrains.UI.Icons.IIconIdOwner iconidowner) { }
            }
        }
        public class ThemeColumnHeaderAutomation : JetBrains.UI.Wpf.AAutomation
        {
            public readonly JetBrains.UI.Icons.IconTheme Theme;
            public readonly string ThemeName;
            public ThemeColumnHeaderAutomation([JetBrains.Annotations.NotNullAttribute()] string themename) { }
            public override string ToString() { }
        }
        public class ThemedIconGroupedByOwnerAutomation : JetBrains.UI.Wpf.AAutomation
        {
            public readonly JetBrains.UI.RichText.RichText GroupNameInUi;
            public readonly JetBrains.DataFlow.IListEvents<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation> IconsInGroup;
            public readonly JetBrains.DataFlow.LifetimeDefinition LifetimeDefinition;
            public readonly string OwnerName;
            public ThemedIconGroupedByOwnerAutomation(JetBrains.DataFlow.LifetimeDefinition def, string sOwnerName, System.Collections.Generic.IEnumerable<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation> initialitems) { }
        }
        public class ThemedIconRowAutomation : JetBrains.UI.Wpf.AAutomation
        {
            public readonly JetBrains.DataFlow.IProperty<System.Windows.Media.ImageSource> CurrentImage;
            public readonly string[] IconThemes;
            public readonly JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation.SizeCellAutomation Size;
            public readonly JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconTooltipAutomation Tooltip;
            public ThemedIconRowAutomation(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Icons.CompiledIcons.CompiledIconId icon, string[] iconthemes, JetBrains.UI.Icons.IThemedIconManager themedIconManager, JetBrains.UI.Icons.CompiledIcons.CompiledIconIdOwner iconidowner) { }
            public JetBrains.UI.Icons.CompiledIcons.CompiledIconId IconId { get; }
            public static JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation.ImageSourceType ImageSourceToType(System.Windows.Media.ImageSource source) { }
            public static JetBrains.UI.RichText.RichText SizeToText(System.Windows.Size size) { }
            [JetBrains.Annotations.CanBeNullAttribute()]
            public JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation.IconInThemeCellAutomation TryGetTheme(JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemeColumnHeaderAutomation theme) { }
            public class IconInThemeCellAutomation : JetBrains.UI.Wpf.AAutomation
            {
                public readonly JetBrains.UI.RichText.RichText IconId;
                public readonly System.Windows.Media.ImageSource ImageSource;
                public readonly JetBrains.UI.RichText.RichText ImageSourceSize;
                public readonly JetBrains.UI.RichText.RichText ThemeName;
                public IconInThemeCellAutomation(JetBrains.UI.Icons.IconTheme theme, string themename, JetBrains.UI.Icons.CompiledIcons.CompiledIconId themedIcon, JetBrains.UI.Icons.IIconIdOwner iconidowner) { }
            }
            public enum ImageSourceType
            {
                Vector = 0,
                RasterFromStream = 1,
                RasterOther = 2,
                Custom = 3,
            }
            public class SizeCellAutomation : JetBrains.UI.Wpf.AAutomation
            {
                public readonly JetBrains.DataFlow.IProperty<System.Windows.Size> CurrentSize;
                public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.RichText.RichText> CurrentSizeText;
                public SizeCellAutomation(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Icons.CompiledIcons.CompiledIconId icon, JetBrains.UI.Icons.IThemedIconManager themedIconManager, string[] iconthemes, JetBrains.UI.Icons.IIconIdOwner iconidowner) { }
                public JetBrains.UI.RichText.RichText CommonSizeText { get; }
            }
        }
        public class ThemedIconTileAutomation : JetBrains.UI.Wpf.AAutomation
        {
            public readonly JetBrains.DataFlow.IProperty<System.Windows.Media.ImageSource> CurrentImage;
            public readonly JetBrains.UI.Icons.CompiledIcons.CompiledIconId Icon;
            public readonly JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconTooltipAutomation Tooltip;
            public ThemedIconTileAutomation(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation iconrow, JetBrains.UI.Icons.IThemedIconManager iconman) { }
        }
        public class ThemedIconTooltipAutomation : JetBrains.UI.Wpf.AAutomation
        {
            public readonly JetBrains.DataFlow.IProperty<System.Windows.Media.ImageSource> CurrentImageSource;
            public readonly JetBrains.DataFlow.IProperty<System.Windows.Size> CurrentImageSourceSize;
            public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation.ImageSourceType> CurrentImageSourceType;
            public readonly string IconId;
            public readonly string OwnerNameIfAvail;
            public ThemedIconTooltipAutomation(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Icons.CompiledIcons.CompiledIconId icon, JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        }
        public enum ViewMode
        {
            Tiles = 0,
            FlatList = 1,
            GroupedByOwners = 2,
        }
    }
    [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
    public class ThemedIconsToolWindowView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation>
    {
        protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation automation) { }
        [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
        public class DetailsView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.DetailsAutomation>
        {
            protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.DetailsAutomation automation) { }
            [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
            public class DetailsIconLargePreviewView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.DetailsAutomation.DetailsIconLargePreviewAutomation>
            {
                protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.DetailsAutomation.DetailsIconLargePreviewAutomation automation) { }
            }
            [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
            public class DetailsThemeSectionView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.DetailsAutomation.DetailsThemeSectionAutomation>
            {
                protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.DetailsAutomation.DetailsThemeSectionAutomation automation) { }
            }
        }
        [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
        public class ThemedIconGroupedByOwnerView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconGroupedByOwnerAutomation>
        {
            protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconGroupedByOwnerAutomation automation) { }
        }
        [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
        public class ThemedIconTileView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconTileAutomation>
        {
            protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconTileAutomation automation) { }
        }
        [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
        public class ThemedIconTooltipView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconTooltipAutomation>
        {
            protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconTooltipAutomation automation) { }
        }
        [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
        public class ThemedIconView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation>
        {
            protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation automation) { }
            [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
            public class IconInThemeCellView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation.IconInThemeCellAutomation>
            {
                protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation.IconInThemeCellAutomation automation) { }
            }
            [JetBrains.UI.Wpf.ViewAttribute(JetBrains.UI.Wpf.ViewKind.Wpf)]
            public class SizeView : JetBrains.UI.Wpf.ViewControl<JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation.SizeCellAutomation>
            {
                protected override System.Windows.UIElement OnRenderView(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ThemedIconsToolWindow.ThemedIconsToolWindowAutomation.ThemedIconRowAutomation.SizeCellAutomation automation) { }
            }
        }
    }
}
namespace JetBrains.UI.Theming
{
    
    public class DummyThemingAggregator
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Theming.ITheming CreateDummyThemingInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Util.ILogger logger, [JetBrains.Annotations.NotNullAttribute()] System.Reflection.Assembly[] assembliesWithIcons) { }
    }
    public interface ITheming : JetBrains.UI.CommonControls.Fonts.IFontsManager, JetBrains.UI.Components.Theming.IScreenResolution, JetBrains.UI.Icons.IThemedIconManager
    {
        JetBrains.DataFlow.ISimpleSignal ColorThemeChanged { get; }
        JetBrains.UI.Components.Theming.IStatusBarColorsManager StatusBarColors { get; }
        JetBrains.DataFlow.IProperty<JetBrains.UI.Components.Theming.EitherColor> CreateLiveColor([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Components.Theming.ThemeColor themeColor);
        JetBrains.UI.Components.Theming.ColorTheme GetCurrentColorTheme();
        void PopulateResourceDictionary([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Windows.ResourceDictionary dictionary);
        void PrepareFrameworkElement(System.Windows.FrameworkElement element);
        void PrepareWinForm(JetBrains.DataFlow.Lifetime handleLifetime, System.IntPtr handle);
    }
}
namespace JetBrains.UI.Tooltips
{
    
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.UI.Tooltips.IFindTooltipElementsAtCursor))]
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=true)]
    public class ExportFindTooltipElementsAtCursorAttruibute : JetBrains.Application.ShellComponentAttribute
    {
        public double Priority;
    }
    public interface IFindTooltipElementsAtCursor
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Tooltips.ITooltipElement TryFindElementUnderCursor([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs args);
    }
    public interface ITooltipElement
    {
        System.Windows.Point OriginalPointClient { get; }
        System.Drawing.Point OriginalPointScreen { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.Tooltips.ITooltipInfo TooltipInfo { get; }
        void AddExceptionData(System.Exception ex);
        bool IsValid();
        System.Windows.Point ScreenToClient(System.Drawing.Point ptScreen);
    }
    public interface ITooltipInfo
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.IPopupLayouter Layouter { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.CommonControls.IWindowlessControl Painter { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.PopupWindowManager.IPopupWindowContext PopupWindowContext { get; }
        bool HitTestToolArea(System.Windows.Point pt);
    }
    public interface ITooltipManager
    {
        System.Drawing.Size ContentMargin { get; }
        [System.ObsoleteAttribute("why is this here?")]
        JetBrains.UI.Application.IUIApplication Environment { get; }
        System.TimeSpan HoverDelay { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.PopupWindowManager.PopupWindowMutex PopupWindowMutex { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.UI.RenderParams RenderParams { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IWindowlessControl painter, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.IPopupWindowContext context, JetBrains.UI.PopupWindowManager.HideFlags hideflags, System.TimeSpan timeout);
    }
    public class static ITooltipManagerEx
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Tooltips.ITooltipManager manager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.IPopupWindowContext context) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Tooltips.ITooltipManager manager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText text, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.IPopupWindowContext context) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Tooltips.ITooltipManager manager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichTextBlock text, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.IPopupWindowContext context, System.TimeSpan timeout) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Tooltips.ITooltipManager manager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IWindowlessControl painter, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.IPopupWindowContext context) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Tooltips.ITooltipManager manager, [JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.PopupWindowManager.IPopupWindowContext> FGetContext) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Tooltips.ITooltipManager manager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText text, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.PopupWindowManager.IPopupWindowContext> FGetContext) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Tooltips.ITooltipManager manager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichTextBlock text, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.PopupWindowManager.IPopupWindowContext> FGetContext) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Tooltips.ITooltipManager manager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IWindowlessControl painter, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.PopupWindowManager.IPopupWindowContext> FGetContext) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Tooltips.ITooltipManager manager, [JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowContextSource contextsource) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Tooltips.ITooltipManager manager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText text, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowContextSource contextsource) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Tooltips.ITooltipManager manager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichTextBlock text, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowContextSource contextsource) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.UI.PopupWindowManager.IPopupWindow Show([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Tooltips.ITooltipManager manager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IWindowlessControl painter, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.PopupWindowContextSource contextsource) { }
    }
    public interface ITooltipProvider
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.UI.Tooltips.ITooltipInfo GetTooltip([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point);
    }
    public class TipControlView : System.Windows.Forms.Form, JetBrains.CommonControls.IConstrainableControl
    {
        protected bool myAutoActivate;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.UI.Components.Theming.ColorTheme myColorTheme;
        protected static readonly System.TimeSpan myDefaultTimeout;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly JetBrains.CommonControls.IWindowlessControl myPainter;
        protected static JetBrains.UI.RenderParams myRenderParams;
        protected System.TimeSpan myTimeout;
        protected readonly System.Windows.Forms.Timer myTimerTimeout;
        public TipControlView([JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IWindowlessControl painter, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Theming.ITheming theming, [JetBrains.Annotations.CanBeNullAttribute()] System.Windows.Forms.IWin32Window parentwin) { }
        public bool AutoActivate { get; set; }
        protected override System.Windows.Forms.CreateParams CreateParams { get; }
        protected override System.Drawing.Size DefaultSize { get; }
        public static System.TimeSpan DefaultTimeout { get; }
        protected override bool ShowWithoutActivation { get; }
        public System.TimeSpan Timeout { get; set; }
        public JetBrains.DataFlow.ISimpleSignal WantsResize { get; }
        protected override void Dispose(bool disposing) { }
        public static bool GetCanShowTooltips([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IIsApplicationActiveState isApplicationActiveState) { }
        public System.Drawing.Size GetDesiredSize(JetBrains.UI.IGraphicsContainer gc, System.Drawing.Size limit) { }
        public static JetBrains.UI.RenderParams GetRenderParams(JetBrains.UI.CommonControls.Fonts.IFontsManager getComponent) { }
        protected override void OnLayout(System.Windows.Forms.LayoutEventArgs levent) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e) { }
        protected void OnTimerTimeoutTick(object sender, System.EventArgs e) { }
        protected override void OnVisibleChanged(System.EventArgs e) { }
        public void SetLayout(JetBrains.UI.LayoutResult layout) { }
        public override string ToString() { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
        public class static Dim
        {
            public static readonly System.Drawing.Size Border;
            public static readonly System.Drawing.Size Padding;
        }
    }
    public abstract class TooltipElement : JetBrains.UI.Tooltips.ITooltipElement
    {
        protected readonly JetBrains.DataFlow.Lifetime myLifetime;
        protected TooltipElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point ptScreen, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Tooltips.ITooltipInfo tooltipInfo) { }
        public System.Windows.Point OriginalPointClient { get; }
        public System.Drawing.Point OriginalPointScreen { get; }
        public JetBrains.UI.Tooltips.ITooltipInfo TooltipInfo { get; }
        public virtual void AddExceptionData(System.Exception ex) { }
        public abstract bool IsValid();
        public abstract System.Windows.Point ScreenToClient(System.Drawing.Point ptScreen);
    }
    public class TooltipInfo : JetBrains.UI.Tooltips.ITooltipInfo
    {
        protected JetBrains.UI.IPopupLayouter myLayouter;
        protected JetBrains.UI.PopupWindowManager.IPopupWindowContext myPopupWindowContext;
        protected readonly JetBrains.CommonControls.IWindowlessControl myTipPainter;
        protected System.Windows.Rect myToolArea;
        public TooltipInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IWindowlessControl painter, System.Windows.Rect toolarea) { }
        public TooltipInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IWindowlessControl painter, System.Drawing.Rectangle toolarea) { }
        public TooltipInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText text, System.Windows.Rect toolarea) { }
        public TooltipInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText text, System.Drawing.Rectangle toolarea) { }
        public TooltipInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText text, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control tool) { }
        public TooltipInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichTextBlock text, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control tool) { }
        public TooltipInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichTextBlock text, System.Windows.Rect toolarea) { }
        public TooltipInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichTextBlock text, System.Drawing.Rectangle toolarea) { }
        public JetBrains.UI.IPopupLayouter Layouter { get; set; }
        public JetBrains.CommonControls.IWindowlessControl Painter { get; }
        public JetBrains.UI.PopupWindowManager.IPopupWindowContext PopupWindowContext { get; set; }
        public System.Windows.Rect ToolArea { get; set; }
        public bool HitTestToolArea(System.Windows.Point pt) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class TooltipManagerComponent : JetBrains.UI.Tooltips.ITooltipManager
    {
        public static readonly JetBrains.UI.PopupWindowManager.HideFlags HideFlagsDefault;
        public static readonly double TooltipDismissedWithEscGraceRadius;
        public TooltipManagerComponent(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.IUIApplication environment, JetBrains.Threading.IThreading threading, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IIsApplicationActiveState isApplicationActiveState, JetBrains.UI.Application.IMainWindow mainwin, JetBrains.UI.PopupWindowManager.PopupWindowManager popupWindowManager, JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext mainWindowPopupWindowContext, JetBrains.DataFlow.IViewable<JetBrains.UI.Tooltips.IFindTooltipElementsAtCursor> finders, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Theming.ITheming theming, JetBrains.Application.Interop.NativeHook.IWindowsHookManager hookManager) { }
        public JetBrains.UI.Application.IUIApplication Environment { get; }
        protected virtual void Init() { }
        protected virtual JetBrains.UI.PopupWindowManager.IPopupWindow ShowCore([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.LifetimeDefinition lifetimeDefinition, [JetBrains.Annotations.NotNullAttribute()] JetBrains.CommonControls.IWindowlessControl painter, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.PopupWindowManager.IPopupWindowContext context, JetBrains.UI.PopupWindowManager.HideFlags hideflags, System.TimeSpan timeout) { }
    }
    public class TooltipProvider : JetBrains.UI.Tooltips.ITooltipProvider
    {
        public readonly JetBrains.DataFlow.ISignal<JetBrains.DataFlow.InOutEventArgs<System.Drawing.Point, JetBrains.UI.Tooltips.ITooltipInfo>> TooltipRequested;
        public TooltipProvider() { }
        public TooltipProvider(System.Action<JetBrains.DataFlow.InOutEventArgs<System.Drawing.Point, JetBrains.UI.Tooltips.ITooltipInfo>> provider) { }
        public JetBrains.UI.Tooltips.ITooltipInfo GetTooltip(JetBrains.DataFlow.Lifetime lifetime, System.Drawing.Point point) { }
    }
    public class WinFormsTooltipElement : JetBrains.UI.Tooltips.TooltipElement
    {
        public readonly System.Void* Hwnd;
        [JetBrains.Annotations.CanBeNullAttribute()]
        public readonly JetBrains.UI.Tooltips.ITooltipProvider TooltipProvider;
        public WinFormsTooltipElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Void* hwnd, System.Drawing.Point ptScreen, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Tooltips.ITooltipInfo tooltipinfo, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Tooltips.ITooltipProvider provider) { }
        public override void AddExceptionData(System.Exception ex) { }
        public override bool IsValid() { }
        public override System.Windows.Point ScreenToClient(System.Drawing.Point ptScreen) { }
    }
}
namespace JetBrains.UI.ToolWindowManagement
{
    
    public class ActivateToolWindowActionHandler<T> : JetBrains.ActionManagement.IActionHandler
        where T : JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor
    {
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute()]
    public class DumpToolWindowStateActionHandler : JetBrains.ActionManagement.IActionHandler
    {
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    public class QueryCloseInstancesArgs
    {
        public bool Cancel;
        public readonly System.Collections.Generic.List<JetBrains.UI.ToolWindowManagement.ToolWindowInstance> InstancesToClose;
        public QueryCloseInstancesArgs() { }
    }
    public class SingleInstanceToolWindowClass : JetBrains.UI.ToolWindowManagement.ToolWindowClass
    {
        public SingleInstanceToolWindowClass(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor descriptor, JetBrains.UI.ToolWindowManagement.TopLevelToolWindowFrameFactory toolWindowFrameFactory, JetBrains.UI.Application.IUIApplication environment) { }
        public override JetBrains.UI.ToolWindowManagement.ToolWindowInstance[] Instances { get; }
        protected override void AdjustToplevelFrameContent() { }
        public override void DumpState(System.CodeDom.Compiler.IndentedTextWriter tw) { }
        public override JetBrains.UI.ToolWindowManagement.ToolWindowInstance RegisterInstance(JetBrains.DataFlow.Lifetime lifetime, string title, JetBrains.DataFlow.IProperty<JetBrains.UI.Icons.IconId> icon, System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.ToolWindowManagement.ToolWindowInstance, JetBrains.UI.CrossFramework.EitherControl> contentFactory) { }
    }
    public class TabbedToolWindowClass : JetBrains.UI.ToolWindowManagement.ToolWindowClass
    {
        public TabbedToolWindowClass(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor descriptor, JetBrains.UI.ToolWindowManagement.TopLevelToolWindowFrameFactory toolWindowFrameFactory, JetBrains.UI.ToolWindowManagement.TabRenamePrompt tabRenamePrompt, JetBrains.ActionManagement.IActionBarManager actionBarManager, JetBrains.UI.Application.IUIApplication environment, JetBrains.UI.Wpf.IPlatformResourceDictionary platformResourceDictionary) { }
        public override JetBrains.UI.ToolWindowManagement.ToolWindowInstance[] Instances { get; }
        protected override void AdjustToplevelFrameContent() { }
        public override void DumpState(System.CodeDom.Compiler.IndentedTextWriter tw) { }
        public JetBrains.UI.ToolWindowManagement.TabStripPageFrame GetFrame(JetBrains.UI.ToolWindowManagement.ToolWindowInstance instance) { }
        public override JetBrains.UI.ToolWindowManagement.ToolWindowInstance RegisterInstance(JetBrains.DataFlow.Lifetime parentLifetime, string title, JetBrains.DataFlow.IProperty<JetBrains.UI.Icons.IconId> icon, System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.ToolWindowManagement.ToolWindowInstance, JetBrains.UI.CrossFramework.EitherControl> contentFactory) { }
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Components.ProgramConfigurations.NONE | JetBrains.Application.Components.ProgramConfigurations.STANDALONE | JetBrains.Application.Components.ProgramConfigurations.VS_ADDIN | JetBrains.Application.Components.ProgramConfigurations.ALL)]
    public class TabRenamePrompt
    {
        public TabRenamePrompt(JetBrains.UI.Application.UIApplication uiApplication, JetBrains.UI.Application.IUIApplication environment, JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.CommonControls.Validation.FormValidators formValidators) { }
        public string Prompt(string sourcename, string instanceName = "Tab", string[] otherInstancesNames = null) { }
    }
    public class TabStripPageFrame : JetBrains.UI.ToolWindowManagement.ToolWindowFrameBase
    {
        public TabStripPageFrame(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading locks, JetBrains.UI.ToolWindowManagement.ToolWindowFrameBase topLevelFrame, JetBrains.UI.ToolWindowManagement.ToolWindowContent tabStripContent, JetBrains.UI.Wpf.IPlatformResourceDictionary platformResources) { }
        public JetBrains.DataFlow.ISimpleSignal Closed { get; }
        public JetBrains.DataFlow.ISignal<JetBrains.DataFlow.CancelEventArgs<JetBrains.UI.ToolWindowManagement.TabStripPageFrame>> Closing { get; }
        public JetBrains.CommonControls.TabStripPage Page { get; }
        public override void Close() { }
        public override void DumpState(System.CodeDom.Compiler.IndentedTextWriter tw) { }
        public override void Show(bool activate = True) { }
    }
    public abstract class ToolWindowClass
    {
        protected readonly JetBrains.DataFlow.IProperty<bool> myActive;
        protected readonly JetBrains.DataFlow.IProperty<JetBrains.UI.ToolWindowManagement.ToolWindowInstance> myActiveInstance;
        protected readonly JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor myDescriptor;
        protected readonly JetBrains.DataFlow.IProperty<JetBrains.UI.ToolWindowManagement.ToolWindowContent> myEmptyContent;
        protected readonly JetBrains.DataFlow.Lifetime myLifetime;
        protected readonly JetBrains.DataFlow.ISignal<JetBrains.UI.ToolWindowManagement.QueryCloseInstancesArgs> myQueryCloseInstances;
        protected JetBrains.UI.ToolWindowManagement.TopLevelToolWindowFrameBase myToplevelFrame;
        protected readonly JetBrains.DataFlow.IProperty<bool> myVisible;
        protected readonly JetBrains.UI.ToolWindowManagement.TopLevelToolWindowFrameFactory ToolWindowFrameFactory;
        protected ToolWindowClass(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ToolWindowManagement.TopLevelToolWindowFrameFactory toolWindowFrameFactory, JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor descriptor, JetBrains.UI.Application.IUIApplication environment) { }
        public JetBrains.DataFlow.IProperty<bool> Active { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.ToolWindowManagement.ToolWindowInstance> ActiveInstance { get; }
        public JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor Descriptor { get; }
        public JetBrains.UI.Application.IUIApplication Environment { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.ToolWindowManagement.TopLevelToolWindowFrameBase Frame { get; }
        public abstract JetBrains.UI.ToolWindowManagement.ToolWindowInstance[] Instances { get; }
        public JetBrains.DataFlow.ISignal<JetBrains.UI.ToolWindowManagement.QueryCloseInstancesArgs> QueryCloseInstances { get; }
        public JetBrains.DataFlow.IProperty<bool> Visible { get; }
        protected abstract void AdjustToplevelFrameContent();
        public void Close() { }
        public virtual void DumpState(System.CodeDom.Compiler.IndentedTextWriter tw) { }
        public void EnsureFrame() { }
        protected void QueueAdjustToplevelFrameContent() { }
        public void RegisterEmptyContent(JetBrains.DataFlow.Lifetime lifetime, System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.CrossFramework.EitherControl> emptyContentFactory) { }
        public abstract JetBrains.UI.ToolWindowManagement.ToolWindowInstance RegisterInstance(JetBrains.DataFlow.Lifetime lifetime, string title, JetBrains.DataFlow.IProperty<JetBrains.UI.Icons.IconId> icon, System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.ToolWindowManagement.ToolWindowInstance, JetBrains.UI.CrossFramework.EitherControl> contentFactory);
        public void Show(bool activate = True) { }
        protected static JetBrains.UI.CrossFramework.EitherControl UsingThemedFont(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.CrossFramework.EitherControl eitherControl, JetBrains.UI.CommonControls.Fonts.IFontsManager fontsManager) { }
    }
    public class ToolWindowClasses
    {
        public ToolWindowClasses(JetBrains.DataFlow.Lifetime lifetime, JetBrains.DataFlow.IViewable<JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor> descriptors, JetBrains.UI.ToolWindowManagement.TopLevelToolWindowFrameFactory topLevelToolWindowFrameFactory, JetBrains.UI.ToolWindowManagement.TabRenamePrompt tabRenamePrompt, JetBrains.ActionManagement.IActionBarManager actionBarManager, JetBrains.UI.Application.IUIApplication environment, JetBrains.UI.Wpf.IPlatformResourceDictionary platformResourceDictionary) { }
        public JetBrains.UI.ToolWindowManagement.ToolWindowClass[] Classes { get; }
        public JetBrains.UI.ToolWindowManagement.ToolWindowClass this[JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor id] { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.ToolWindowManagement.ToolWindowInstance> LastActiveInstance { get; }
        public void DumpState(System.CodeDom.Compiler.IndentedTextWriter tw) { }
    }
    public class ToolWindowContent
    {
        public ToolWindowContent(JetBrains.DataFlow.Lifetime lifetime, System.Func<JetBrains.DataFlow.Lifetime, JetBrains.UI.ToolWindowManagement.ToolWindowFrameBase, JetBrains.UI.CrossFramework.EitherControl> controlFactory) { }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.CrossFramework.EitherControl> Control { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Icons.IconId> Icon { get; }
        public JetBrains.DataFlow.IProperty<string> Title { get; }
        public void CreateControl(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ToolWindowManagement.ToolWindowFrameBase frame) { }
        public void DumpState(System.CodeDom.Compiler.IndentedTextWriter tw) { }
    }
    public abstract class ToolWindowDescriptor
    {
        protected ToolWindowDescriptor(JetBrains.Application.IApplicationDescriptor applicationDescriptor) { }
        public string ContextMenuActionGroupId { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Icons.IconId Icon { get; }
        public JetBrains.UI.ToolWindowManagement.ToolWindowId Id { get; }
        public JetBrains.UI.ToolWindowManagement.ToolWindowInitialDocking InitialDocking { get; }
        public int InitialHeight { get; }
        public int InitialWidth { get; }
        public bool MultiInstanceStayAfterClosingLastTab { get; }
        public bool MultiInstanceTabRenameAllowed { get; }
        public bool MultiInstanceTabRenameDuplicateNamesNotAllowed { get; }
        public string MultiInstanceToolWindowSingleInstanceName { get; }
        public string Text { get; }
        public JetBrains.UI.ToolWindowManagement.ToolWindowType Type { get; }
        public JetBrains.UI.ToolWindowManagement.ToolWindowVisibilityPersistenceScope VisibilityPersistenceScope { get; }
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor))]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All)]
    public class ToolWindowDescriptorAttribute : JetBrains.Application.ShellComponentAttribute
    {
        public string ContextMenuActionGroupId { get; set; }
        public System.Type Icon { get; set; }
        public JetBrains.UI.ToolWindowManagement.ToolWindowInitialDocking InitialDocking { get; set; }
        public int InitialHeight { get; set; }
        public int InitialWidth { get; set; }
        public string InstancePresentableName { get; set; }
        public bool MultiInstanceStayAfterClosingLastTab { get; set; }
        public bool MultiInstanceTabRenameAllowed { get; set; }
        public bool MultiInstanceTabRenameDuplicateNamesNotAllowed { get; set; }
        public string ProductNeutralId { get; set; }
        public string Text { get; set; }
        public JetBrains.UI.ToolWindowManagement.ToolWindowType Type { get; set; }
        public JetBrains.UI.ToolWindowManagement.ToolWindowVisibilityPersistenceScope VisibilityPersistenceScope { get; set; }
    }
    public abstract class ToolWindowFrameBase
    {
        protected readonly JetBrains.DataFlow.IProperty<JetBrains.UI.ToolWindowManagement.ToolWindowContent> myContent;
        protected JetBrains.DataFlow.Lifetime myControlLifetime;
        protected readonly JetBrains.DataFlow.SequentialLifetimes myControlLifetimeSeq;
        protected readonly JetBrains.DataFlow.IProperty<JetBrains.UI.CrossFramework.EitherControl> myCurrentControl;
        protected readonly JetBrains.DataFlow.Property<JetBrains.UI.Icons.IconId> myIcon;
        protected readonly JetBrains.DataFlow.Lifetime myLifetime;
        protected readonly JetBrains.Threading.IThreading myLocks;
        protected readonly JetBrains.DataFlow.IProperty<string> myTitle;
        protected readonly JetBrains.UI.WindowManagement.WindowFrame myWindowFrame;
        protected ToolWindowFrameBase(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading locks) { }
        public JetBrains.DataFlow.IProperty<bool> Active { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.ToolWindowManagement.ToolWindowContent> Content { get; }
        public JetBrains.DataFlow.IProperty<bool> Visible { get; }
        public JetBrains.UI.WindowManagement.WindowFrame WindowFrame { get; }
        public abstract void Close();
        public virtual void DumpState(System.CodeDom.Compiler.IndentedTextWriter tw) { }
        public void EnsureControlCreated() { }
        public abstract void Show(bool activate = True);
    }
    public class static ToolWindowGuidGenerator
    {
        public static System.Guid GetToolWindowGuid(JetBrains.UI.ToolWindowManagement.ToolWindowId id) { }
    }
    public sealed class ToolWindowId
    {
        public ToolWindowId([JetBrains.Annotations.NotNullAttribute()] string productName, [JetBrains.Annotations.NotNullAttribute()] string productNeutralId) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public string ProductName { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string ProductNeutralId { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string StringId { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public enum ToolWindowInitialDocking
    {
        NotSpecified = 0,
        Left = 1,
        Right = 2,
        Bottom = 3,
        Top = 4,
        Floating = 5,
    }
    public class ToolWindowInstance
    {
        public ToolWindowInstance(JetBrains.DataFlow.Lifetime lifetime, string initialTitle, JetBrains.DataFlow.IProperty<JetBrains.UI.Icons.IconId> icon, JetBrains.UI.ToolWindowManagement.ToolWindowClass cls, JetBrains.Threading.IThreading threading) { }
        public JetBrains.DataFlow.IProperty<bool> Active { get; }
        public JetBrains.DataFlow.IProperty<bool> CanClose { get; }
        public JetBrains.UI.ToolWindowManagement.ToolWindowClass Class { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.Icons.IconId> Icon { get; }
        public JetBrains.DataFlow.Lifetime Lifetime { get; }
        public JetBrains.DataFlow.IProperty<bool> QueryClose { get; }
        public JetBrains.DataFlow.IProperty<string> Title { get; }
        public JetBrains.DataFlow.IProperty<bool> Visible { get; }
        public JetBrains.UI.WindowManagement.WindowFrame WindowFrame { get; }
        public void Close() { }
        public void DumpState(System.CodeDom.Compiler.IndentedTextWriter tw) { }
        public JetBrains.UI.ToolWindowManagement.ToolWindowInstance EnsureControlCreated() { }
        public void Show(bool activate = True) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class ToolWindowManager
    {
        public ToolWindowManager(JetBrains.DataFlow.Lifetime lifetime, JetBrains.DataFlow.IViewable<JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor> descriptors, JetBrains.UI.ToolWindowManagement.TopLevelToolWindowFrameFactory topLevelToolWindowFrameFactory, JetBrains.ActionManagement.IActionBarManager actionBarManager, JetBrains.UI.ToolWindowManagement.TabRenamePrompt tabRenamePrompt, JetBrains.UI.Application.IUIApplication environment, JetBrains.UI.Wpf.IPlatformResourceDictionary platformResourceDictionary) { }
        public JetBrains.UI.ToolWindowManagement.ToolWindowClasses Classes { get; }
        public JetBrains.DataFlow.IProperty<JetBrains.UI.ToolWindowManagement.ToolWindowInstance> LastActiveInstance { get; }
        protected virtual JetBrains.UI.ToolWindowManagement.ToolWindowClasses CreateToolWindows(JetBrains.DataFlow.Lifetime lifetime, JetBrains.DataFlow.IViewable<JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor> descriptors, JetBrains.UI.ToolWindowManagement.TopLevelToolWindowFrameFactory topLevelToolWindowFrameFactory, JetBrains.ActionManagement.IActionBarManager actionBarManager, JetBrains.UI.ToolWindowManagement.TabRenamePrompt tabRenamePrompt, JetBrains.UI.Application.IUIApplication environment, JetBrains.UI.Wpf.IPlatformResourceDictionary platformResourceDictionary) { }
        public void DumpState(System.CodeDom.Compiler.IndentedTextWriter textWriter) { }
    }
    public enum ToolWindowType
    {
        Undefined = 0,
        SingleInstance = 1,
        MultiInstance = 2,
    }
    public enum ToolWindowVisibilityPersistenceScope
    {
        None = 0,
        Solution = 1,
        Global = 2,
    }
    public abstract class TopLevelToolWindowFrameBase : JetBrains.UI.ToolWindowManagement.ToolWindowFrameBase
    {
        protected TopLevelToolWindowFrameBase(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.IShellLocks locks) { }
    }
    public abstract class TopLevelToolWindowFrameFactory
    {
        protected TopLevelToolWindowFrameFactory(JetBrains.DataFlow.Lifetime lifetime) { }
        public JetBrains.DataFlow.ISignal<JetBrains.UI.ToolWindowManagement.ToolWindowId> FrameRequired { get; }
        public abstract JetBrains.UI.ToolWindowManagement.TopLevelToolWindowFrameBase CreateTopLevelFrame(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor toolWindowDescriptor);
        public abstract bool IsFrameRequired(JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor toolWindowDescriptor);
    }
}
namespace JetBrains.UI.TreeControl
{
    
    public class TreeControlNodeAnchoringRect : JetBrains.UI.AnchoringRect
    {
        public TreeControlNodeAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] DevExpress.XtraTreeList.TreeList treeControl, [JetBrains.Annotations.NotNullAttribute()] DevExpress.XtraTreeList.Nodes.TreeListNode node, [JetBrains.Annotations.CanBeNullAttribute()] DevExpress.XtraTreeList.Columns.TreeListColumn column) { }
        public TreeControlNodeAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] DevExpress.XtraTreeList.TreeList treeControl, [JetBrains.Annotations.NotNullAttribute()] DevExpress.XtraTreeList.Nodes.TreeListNode node) { }
        protected TreeControlNodeAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] DevExpress.XtraTreeList.TreeList treeControl, DevExpress.XtraTreeList.Nodes.TreeListNode node, DevExpress.XtraTreeList.Columns.TreeListColumn column, bool isNodeNullable) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Anchoring2D[] DefaultAnchoringDispositions { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.NestedAnchoringRect ClientToScreen([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager hookman) { }
        public static JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect CreateFromNodeStatic(JetBrains.DataFlow.Lifetime lifetime, DevExpress.XtraTreeList.TreeList treeControl, DevExpress.XtraTreeList.Nodes.TreeListNode node) { }
        public static JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect CreateFromSelectionDynamic(JetBrains.DataFlow.Lifetime lifetime, DevExpress.XtraTreeList.TreeList treeControl) { }
    }
    public class TreeControlPopupWindowContext : JetBrains.UI.PopupWindowManager.PopupWindowContext
    {
        public TreeControlPopupWindowContext(JetBrains.DataFlow.Lifetime lifetime, DevExpress.XtraTreeList.TreeList treeControl, DevExpress.XtraTreeList.Nodes.TreeListNode treeListNode, JetBrains.ActionManagement.IActionManager actionManager, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager) { }
        public TreeControlPopupWindowContext(JetBrains.DataFlow.Lifetime lifetime, DevExpress.XtraTreeList.TreeList treeControl, JetBrains.ActionManagement.IActionManager actionManager, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager) { }
        public override JetBrains.UI.IPopupLayouter CreateLayouter(JetBrains.DataFlow.Lifetime lifetime) { }
    }
}
namespace JetBrains.UI.TreeGrid.Automation
{
    
    public class TreeGridRowAutomationPeer : System.Windows.Automation.Peers.AutomationPeer, System.Windows.Automation.Provider.IExpandCollapseProvider, System.Windows.Automation.Provider.IScrollItemProvider, System.Windows.Automation.Provider.ISelectionItemProvider
    {
        public System.Windows.Automation.ExpandCollapseState ExpandCollapseState { get; }
        public bool IsSelected { get; }
        public void AddToSelection() { }
        public void Collapse() { }
        protected bool Equals(JetBrains.UI.TreeGrid.Automation.TreeGridRowAutomationPeer other) { }
        public override bool Equals(object obj) { }
        public void Expand() { }
        protected override string GetAcceleratorKeyCore() { }
        protected override string GetAccessKeyCore() { }
        protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { }
        protected override string GetAutomationIdCore() { }
        protected override System.Windows.Rect GetBoundingRectangleCore() { }
        protected override System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildrenCore() { }
        protected override string GetClassNameCore() { }
        protected override System.Windows.Point GetClickablePointCore() { }
        public override int GetHashCode() { }
        protected override string GetHelpTextCore() { }
        protected override string GetItemStatusCore() { }
        protected override string GetItemTypeCore() { }
        protected override System.Windows.Automation.Peers.AutomationPeer GetLabeledByCore() { }
        protected override string GetNameCore() { }
        protected override System.Windows.Automation.Peers.AutomationOrientation GetOrientationCore() { }
        public override object GetPattern(System.Windows.Automation.Peers.PatternInterface patternInterface) { }
        protected override bool HasKeyboardFocusCore() { }
        protected override bool IsContentElementCore() { }
        protected override bool IsControlElementCore() { }
        protected override bool IsEnabledCore() { }
        protected override bool IsKeyboardFocusableCore() { }
        protected override bool IsOffscreenCore() { }
        protected override bool IsPasswordCore() { }
        protected override bool IsRequiredForFormCore() { }
        public void RemoveFromSelection() { }
        public void ScrollIntoView() { }
        public void Select() { }
        protected override void SetFocusCore() { }
    }
    public class TreeGridViewAutomationPeer : System.Windows.Automation.Peers.FrameworkElementAutomationPeer
    {
        public TreeGridViewAutomationPeer(JetBrains.UI.TreeGrid.TreeGridView treeGridView) { }
        protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { }
        protected override System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildrenCore() { }
    }
}
namespace JetBrains.UI.TreeGrid
{
    
    public class BindedNodeModel : JetBrains.UI.TreeGrid.ITreeGridNodeModel
    {
        public BindedNodeModel(object data, System.Windows.Data.Binding binding, JetBrains.UI.TreeGrid.ITreeGridNodeModel parent, System.Func<object, JetBrains.UI.TreeGrid.ITreeGridNodeModel, JetBrains.UI.TreeGrid.ITreeGridNodeModel> getChildNodeModel = null) { }
        public int Count { get; }
        public object Data { get; }
        public bool HasChildren { get; }
        public JetBrains.UI.TreeGrid.ITreeGridNodeModel Parent { get; }
        public event System.Collections.Specialized.NotifyCollectionChangedEventHandler ChildrenChanged;
        public event System.EventHandler CountChanged;
        public event System.EventHandler HasChildrenChanged;
        protected virtual JetBrains.UI.TreeGrid.ITreeGridNodeModel CreateModel(object data) { }
        public JetBrains.UI.TreeGrid.ITreeGridNodeModel GetChild(int index) { }
        public override string ToString() { }
    }
    public class BindedNodeModelProvider : JetBrains.UI.TreeGrid.ITreeGridNodeModelProvider
    {
        public BindedNodeModelProvider(System.Windows.Data.Binding binding) { }
        public System.Windows.Data.Binding Binding { get; set; }
        public JetBrains.UI.TreeGrid.ITreeGridNodeModel GetNodeModel(object data, JetBrains.UI.TreeGrid.ITreeGridNodeModel parent) { }
    }
    public class DelegateItemParentProvider : JetBrains.UI.TreeGrid.IItemParentProvider
    {
        public DelegateItemParentProvider(System.Func<object, object> getParentDataItem) { }
        public object GetParentDataItem(object dataItem) { }
    }
    public class EventBasedItemFilter
    {
        public event System.EventHandler<JetBrains.UI.TreeGrid.FilterEventArgs> Filter;
        public bool IsAccepted(object item) { }
    }
    public class ExpandAction : JetBrains.UI.TreeGrid.ITreeGridAction
    {
        public void Do() { }
    }
    public class FilterEventArgs : System.EventArgs
    {
        public FilterEventArgs(object item) { }
        public bool IsAccepted { get; set; }
        public object Item { get; }
    }
    public interface IFilterDescriptor
    {
        bool IsAccepted(object item);
    }
    public interface IItemParentProvider
    {
        object GetParentDataItem(object dataItem);
    }
    public interface ISelectionValidator
    {
        bool IsValidSelection(System.Collections.IEnumerable selectedItems);
    }
    public interface ISortDescription : System.Collections.Generic.IComparer<object> { }
    public interface ITreeGridAction
    {
        void Do();
    }
    public interface ITreeGridActionQueue
    {
        bool IsBusy { get; }
        public event System.EventHandler IsBusyChanged;
        void Commit();
        void Enqueue(JetBrains.UI.TreeGrid.ITreeGridAction action);
        void Shutdown();
    }
    public interface ITreeGridHierarchyResolver { }
    public interface ITreeGridNodeModel
    {
        int Count { get; }
        object Data { get; }
        bool HasChildren { get; }
        JetBrains.UI.TreeGrid.ITreeGridNodeModel Parent { get; }
        public event System.Collections.Specialized.NotifyCollectionChangedEventHandler ChildrenChanged;
        public event System.EventHandler CountChanged;
        public event System.EventHandler HasChildrenChanged;
        JetBrains.UI.TreeGrid.ITreeGridNodeModel GetChild(int index);
    }
    public interface ITreeGridNodeModelProvider
    {
        JetBrains.UI.TreeGrid.ITreeGridNodeModel GetNodeModel(object data, JetBrains.UI.TreeGrid.ITreeGridNodeModel parent);
    }
    public class LeafNodeModel : System.Windows.DependencyObject, JetBrains.UI.TreeGrid.ITreeGridNodeModel
    {
        public LeafNodeModel(object data, JetBrains.UI.TreeGrid.ITreeGridNodeModel parent) { }
        public int Count { get; }
        public object Data { get; }
        public JetBrains.UI.TreeGrid.IFilterDescriptor Filter { get; set; }
        public bool HasChildren { get; }
        public JetBrains.UI.TreeGrid.ITreeGridNodeModel Parent { get; }
        public JetBrains.UI.TreeGrid.ISortDescription SortDescription { get; set; }
        public System.ComponentModel.ListSortDirection SortDirection { get; set; }
        public event System.Collections.Specialized.NotifyCollectionChangedEventHandler ChildrenChanged;
        public event System.EventHandler CountChanged;
        public event System.EventHandler HasChildrenChanged;
        public JetBrains.UI.TreeGrid.ITreeGridNodeModel GetChild(int i) { }
        public override string ToString() { }
    }
    public class LeafNodeModelProvider : JetBrains.UI.TreeGrid.ITreeGridNodeModelProvider
    {
        public JetBrains.UI.TreeGrid.ITreeGridNodeModel GetNodeModel(object data, JetBrains.UI.TreeGrid.ITreeGridNodeModel parent) { }
    }
    public class ObjectIndexPair<T>
        where T :  class
    {
        public readonly int Index;
        public readonly T Object;
        public ObjectIndexPair(T @object, int index) { }
    }
    public class ObjectIndexPath<T> : System.Collections.Generic.List<JetBrains.UI.TreeGrid.ObjectIndexPair<T>>
        where T :  class
    {
        public ObjectIndexPath(int capacity) { }
        public JetBrains.UI.TreeGrid.ObjectIndexPair<T> Target { get; }
    }
    public class ObjectPath<T> : System.Collections.Generic.List<T>
        where T :  class
    {
        public ObjectPath(int capacity) { }
        public ObjectPath(System.Collections.Generic.IEnumerable<T> enumerable) { }
        public T Target { get; }
    }
    public class PredicateItemFilter<T> : JetBrains.UI.TreeGrid.IFilterDescriptor
        where T :  class
    {
        public PredicateItemFilter(System.Predicate<T> predicate) { }
        public System.Predicate<T> Predicate { get; }
        public bool IsAccepted(object item) { }
    }
    public class static SelectionBehaviors
    {
        public static JetBrains.UI.TreeGrid.ISelectionValidator Any { get; }
        public static JetBrains.UI.TreeGrid.ISelectionValidator Single { get; }
    }
    public class SelectionValidator : JetBrains.UI.TreeGrid.ISelectionValidator
    {
        public SelectionValidator(System.Func<System.Collections.IEnumerable, bool> validator) { }
        public bool IsValidSelection(System.Collections.IEnumerable selectedItems) { }
    }
    public class SelfreferenceNodeModelProvider : JetBrains.UI.TreeGrid.ITreeGridNodeModelProvider
    {
        public SelfreferenceNodeModelProvider() { }
        public JetBrains.UI.TreeGrid.ITreeGridNodeModel GetNodeModel(object data, JetBrains.UI.TreeGrid.ITreeGridNodeModel parent) { }
    }
    public class SortDescription : JetBrains.UI.TreeGrid.ISortDescription, System.Collections.Generic.IComparer<object>
    {
        public SortDescription([JetBrains.Annotations.CanBeNullAttribute()] string propertyPath) { }
        public SortDescription([JetBrains.Annotations.CanBeNullAttribute()] string propertyPath, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.IComparer comparer) { }
        public SortDescription([JetBrains.Annotations.CanBeNullAttribute()] System.Collections.IComparer comparer) { }
        public int Compare(object x, object y) { }
    }
    public enum TreeGridActionExecutionMode
    {
        Asynchronous = 0,
        Immediate = 1,
        Queued = 2,
        ImmediateOrQueued = 3,
    }
    public class TreeGridCell : System.Windows.Controls.ContentControl
    {
        public static readonly System.Windows.DependencyProperty HasChildrenProperty;
        public static readonly System.Windows.DependencyProperty HasExpanderProperty;
        public static readonly System.Windows.DependencyProperty IsActiveProperty;
        public static readonly System.Windows.DependencyProperty IsExpandedProperty;
        public static readonly System.Windows.DependencyProperty IsSelectedProperty;
        public static readonly System.Windows.DependencyProperty LevelProperty;
        public TreeGridCell(JetBrains.UI.TreeGrid.TreeGridView treeGridView) { }
        public bool HasChildren { get; set; }
        public bool HasExpander { get; set; }
        public bool IsActive { get; set; }
        public bool IsExpanded { get; set; }
        public bool IsSelected { get; set; }
        public int Level { get; set; }
        public override void OnApplyTemplate() { }
    }
    [System.Windows.TemplatePartAttribute(Name="PART_Thumb", Type=typeof(System.Windows.Controls.Primitives.Thumb))]
    public class TreeGridColumn : System.Windows.Controls.Control
    {
        public static readonly System.Windows.DependencyProperty ColumnDefinitionProperty;
        public static readonly System.Windows.DependencyProperty IsDragOverProperty;
        public static readonly System.Windows.DependencyProperty IsSortColumnProperty;
        public static readonly System.Windows.DependencyProperty ResizableProperty;
        public TreeGridColumn() { }
        public JetBrains.UI.TreeGrid.TreeGridColumnDefinition ColumnDefinition { get; set; }
        public bool IsDragOver { get; set; }
        public bool IsSortColumn { get; set; }
        public bool Resizable { get; set; }
        public event System.EventHandler ResizeCanceled;
        public event System.EventHandler ResizeCompleted;
        public event System.EventHandler<JetBrains.UI.TreeGrid.TreeGridColumnResizeEventArgs> ResizeDelta;
        public event System.EventHandler ResizeStarted;
        public double GetHeaderHeight() { }
        public override void OnApplyTemplate() { }
        protected override void OnDragEnter(System.Windows.DragEventArgs args) { }
        protected override void OnDragLeave(System.Windows.DragEventArgs args) { }
        protected override void OnDragOver(System.Windows.DragEventArgs args) { }
        protected override void OnDrop(System.Windows.DragEventArgs args) { }
        protected override void OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected override void OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected override void OnMouseMove(System.Windows.Input.MouseEventArgs e) { }
    }
    public class TreeGridColumnDefinition : System.Windows.DependencyObject
    {
        public static readonly System.Windows.DependencyProperty CellMemberPathProperty;
        public static readonly System.Windows.DependencyProperty CellStyleProperty;
        public static readonly System.Windows.DependencyProperty CellStyleSelectorProperty;
        public static readonly System.Windows.DependencyProperty CellTemplateProperty;
        public static readonly System.Windows.DependencyProperty CellTemplateSelectorProperty;
        public static readonly System.Windows.DependencyProperty HasExpanderProperty;
        public static readonly System.Windows.DependencyProperty HeaderProperty;
        public static readonly System.Windows.DependencyProperty MaxWidthProperty;
        public static readonly System.Windows.DependencyProperty MinWidthProperty;
        public static readonly System.Windows.DependencyProperty SortMemberPathProperty;
        public static readonly System.Windows.DependencyProperty WidthProperty;
        public TreeGridColumnDefinition() { }
        public string CellMemberPath { get; set; }
        public System.Windows.Style CellStyle { get; set; }
        public System.Windows.Controls.StyleSelector CellStyleSelector { get; set; }
        public System.Windows.DataTemplate CellTemplate { get; set; }
        public System.Windows.Controls.DataTemplateSelector CellTemplateSelector { get; set; }
        public bool HasExpander { get; set; }
        public object Header { get; set; }
        public bool IsSortable { get; }
        public System.Windows.GridLength MaxWidth { get; set; }
        public System.Windows.GridLength MinWidth { get; set; }
        public bool Resizable { get; set; }
        public JetBrains.UI.TreeGrid.ISortDescription SortDescription { get; set; }
        public string SortMemberPath { get; set; }
        public System.Windows.GridLength Width { get; set; }
        public event System.EventHandler ActualWidthChanged;
        public event System.EventHandler HasExpanderChanged;
        public event System.Windows.DependencyPropertyChangedEventHandler MaxWidthChanged;
        public event System.Windows.DependencyPropertyChangedEventHandler MinWidthChanged;
        public event System.Windows.DependencyPropertyChangedEventHandler WidthChanged;
    }
    public class TreeGridColumnDefinitionCollection : System.Collections.ObjectModel.ObservableCollection<JetBrains.UI.TreeGrid.TreeGridColumnDefinition>
    {
        public event System.EventHandler LayoutChanged;
        protected override void ClearItems() { }
        protected override void InsertItem(int index, JetBrains.UI.TreeGrid.TreeGridColumnDefinition item) { }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, JetBrains.UI.TreeGrid.TreeGridColumnDefinition item) { }
    }
    public class TreeGridColumnResizeEventArgs : System.EventArgs
    {
        public TreeGridColumnResizeEventArgs(double offset) { }
        public double Offset { get; }
    }
    public class TreeGridColumnsPanel : System.Windows.Controls.Panel
    {
        public static readonly System.Windows.DependencyProperty AllowResizeOverflowProperty;
        public static readonly System.Windows.DependencyProperty AllowResizeProperty;
        public TreeGridColumnsPanel() { }
        public bool AllowResize { get; set; }
        public bool AllowResizeOverflow { get; set; }
        protected override System.Windows.Size ArrangeOverride(System.Windows.Size finalSize) { }
        public double GetHeaderHeight() { }
        public void InvalidateLayout() { }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size availableSize) { }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Content")]
    public class TreeGridRow : System.Windows.Controls.Control
    {
        public static readonly System.Windows.DependencyProperty HasChildrenProperty;
        public static readonly System.Windows.DependencyProperty IsActiveProperty;
        public static readonly System.Windows.DependencyProperty IsDragOverProperty;
        public static readonly System.Windows.DependencyProperty IsExpandedProperty;
        public static readonly System.Windows.DependencyProperty IsSelectedProperty;
        public static readonly System.Windows.DependencyProperty LevelProperty;
        public TreeGridRow(JetBrains.UI.TreeGrid.TreeGridView treeGridView) { }
        public bool HasChildren { get; set; }
        public bool IsActive { get; set; }
        public bool IsDragOver { get; set; }
        public bool IsExpanded { get; set; }
        public bool IsSelected { get; set; }
        public int Level { get; set; }
        public event System.Windows.DependencyPropertyChangedEventHandler HasChildrenChanged;
        public event System.Windows.DependencyPropertyChangedEventHandler IsActiveChanged;
        public event System.Windows.DependencyPropertyChangedEventHandler IsExpandedChanged;
        public event System.Windows.DependencyPropertyChangedEventHandler IsSelectedChanged;
        public event System.Windows.DependencyPropertyChangedEventHandler LevelChanged;
        public override void OnApplyTemplate() { }
        protected override void OnDragEnter(System.Windows.DragEventArgs args) { }
        protected override void OnDragLeave(System.Windows.DragEventArgs args) { }
        protected override void OnDragOver(System.Windows.DragEventArgs args) { }
        protected override void OnDrop(System.Windows.DragEventArgs args) { }
        protected override void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected override void OnMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected override void OnMouseMove(System.Windows.Input.MouseEventArgs e) { }
        public override string ToString() { }
    }
    public class TreeGridSelectedItemCollection : System.Collections.ObjectModel.ObservableCollection<object>
    {
        protected override void ClearItems() { }
        protected override void InsertItem(int index, object item) { }
    }
    [System.Windows.TemplatePartAttribute(Name="PART_ViewportPlaceholder", Type=typeof(System.Windows.Markup.IAddChild))]
    public class TreeGridView : System.Windows.Controls.Control
    {
        public static readonly System.Windows.DependencyProperty AllowColumnRearrangeProperty;
        public static readonly System.Windows.DependencyProperty AllowColumnResizeOverflowProperty;
        public static readonly System.Windows.DependencyProperty AllowColumnResizeProperty;
        public static readonly System.Windows.DependencyProperty AllowColumnSortingProperty;
        public static readonly System.Windows.DependencyProperty AllowRowDragProperty;
        public static readonly System.Windows.DependencyProperty AllowRowDropProperty;
        public static readonly System.Windows.DependencyProperty CellStyleProperty;
        public static readonly System.Windows.DependencyProperty CellStyleSelectorProperty;
        public static readonly System.Windows.DependencyProperty CellTemplateProperty;
        public static readonly System.Windows.DependencyProperty CellTemplateSelectorProperty;
        public static readonly System.Windows.DependencyProperty ColumnDefinitionsProperty;
        public static readonly System.Windows.DependencyProperty FilterProperty;
        public static readonly System.Windows.DependencyProperty FocusedItemProperty;
        public static readonly System.Windows.DependencyProperty FocusedRowProperty;
        public static readonly System.Windows.DependencyProperty ItemEqualityComparerProperty;
        public static readonly System.Windows.DependencyProperty ItemModelProviderProperty;
        public static readonly System.Windows.DependencyProperty ItemsSourceProperty;
        public static readonly System.Windows.DependencyProperty MaxExpandLevelsProperty;
        public static readonly System.Windows.DependencyProperty MaxTraverseDepthProperty;
        public static readonly System.Windows.DependencyProperty RowStyleProperty;
        public static readonly System.Windows.DependencyProperty RowStyleSelectorProperty;
        public static readonly System.Windows.DependencyProperty SelectedItemProperty;
        public static readonly System.Windows.DependencyProperty SelectionModeProperty;
        public static readonly System.Windows.DependencyProperty ShowColumnHeadersProperty;
        public static readonly System.Windows.DependencyProperty SortColumnProperty;
        public static readonly System.Windows.DependencyProperty SortDescriptionProperty;
        public static readonly System.Windows.DependencyProperty SortDirectionProperty;
        public TreeGridView() { }
        public bool AllowColumnRearrange { get; set; }
        public bool AllowColumnResize { get; set; }
        public bool AllowColumnResizeOverflow { get; set; }
        public bool AllowColumnSorting { get; set; }
        public bool AllowRowDrag { get; set; }
        public bool AllowRowDrop { get; set; }
        public System.Windows.Style CellStyle { get; set; }
        public System.Windows.Controls.StyleSelector CellStyleSelector { get; set; }
        public System.Windows.DataTemplate CellTemplate { get; set; }
        public System.Windows.Controls.DataTemplateSelector CellTemplateSelector { get; set; }
        public JetBrains.UI.TreeGrid.TreeGridColumnDefinitionCollection ColumnDefinitions { get; set; }
        public JetBrains.UI.TreeGrid.IFilterDescriptor Filter { get; set; }
        public object FocusedItem { get; set; }
        public JetBrains.UI.TreeGrid.TreeGridRow FocusedRow { get; set; }
        public System.Collections.IEqualityComparer ItemEqualityComparer { get; set; }
        public JetBrains.UI.TreeGrid.IItemParentProvider ItemParentProvider { get; set; }
        [System.ComponentModel.BindableAttribute(true)]
        public System.Collections.IEnumerable ItemsSource { get; set; }
        protected override System.Collections.IEnumerator LogicalChildren { get; }
        public int MaxLevelsExpansion { get; set; }
        public int MaxTraverseDepth { get; set; }
        public JetBrains.UI.TreeGrid.ITreeGridNodeModelProvider NodeModelProvider { get; set; }
        public System.Windows.Style RowStyle { get; set; }
        public System.Windows.Controls.StyleSelector RowStyleSelector { get; set; }
        public object SelectedItem { get; set; }
        public JetBrains.UI.TreeGrid.TreeGridSelectedItemCollection SelectedItems { get; }
        public System.Windows.Controls.SelectionMode SelectionMode { get; set; }
        public bool ShowColumnHeaders { get; set; }
        public JetBrains.UI.TreeGrid.TreeGridColumnDefinition SortColumn { get; set; }
        public JetBrains.UI.TreeGrid.ISortDescription SortDescription { get; set; }
        public System.ComponentModel.ListSortDirection SortDirection { get; set; }
        public event JetBrains.UI.ValueChangedEventHandler<JetBrains.UI.TreeGrid.TreeGridRow> FocusedRowChanged;
        public event System.Windows.DragEventHandler RowDragBegin;
        public event System.Windows.DragEventHandler RowDragEnter;
        public event System.Windows.DragEventHandler RowDragLeave;
        public event System.Windows.DragEventHandler RowDragOver;
        public event System.Windows.DragEventHandler RowDrop;
        public event System.Windows.DependencyPropertyChangedEventHandler SelectedItemChanged;
        public event System.Windows.DependencyPropertyChangedEventHandler SortColumnChanged;
        public void BringIntoView(object item) { }
        public void Collapse(object data) { }
        public void CollapseAll() { }
        public void Expand(object data) { }
        public void ExpandAll() { }
        public void ExpandAll(int level) { }
        public void ExpandAll(object item, int levels, bool allowTraverse = True) { }
        public void ExpandAll(object item, bool allowTraverse = True) { }
        public void ExpandPath<T>(JetBrains.UI.TreeGrid.ObjectPath<T> path)
            where T :  class { }
        public void ExpandPath<T>(JetBrains.UI.TreeGrid.ObjectIndexPath<T> path)
            where T :  class { }
        public void ExpandPathTo<T>(JetBrains.UI.TreeGrid.ObjectIndexPath<T> path)
            where T :  class { }
        public void ExpandPathTo<T>(JetBrains.UI.TreeGrid.ObjectPath<T> path)
            where T :  class { }
        public void ExpandTo(object data, bool allowTraverse = True) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.TreeGrid.ObjectIndexPath<T> FindObjectIndexPathTo<T>([JetBrains.Annotations.NotNullAttribute()] T data, bool allowTraverse, int maxTraverseDepth)
            where T :  class { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.TreeGrid.ObjectIndexPath<T> FindObjectIndexPathTo<T>([JetBrains.Annotations.NotNullAttribute()] T data, bool allowTraverse = True)
            where T :  class { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.TreeGrid.ObjectPath<T> FindObjectPathTo<T>([JetBrains.Annotations.NotNullAttribute()] T data, bool allowTraverse, int maxTraverseDepth)
            where T :  class { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.TreeGrid.ObjectPath<T> FindObjectPathTo<T>([JetBrains.Annotations.NotNullAttribute()] T data, bool allowTraverse = True)
            where T :  class { }
        public bool Focus(object item, bool bringIntoView = True, bool transferKeyboardFocus = True, bool allowTraverse = True) { }
        public System.Collections.Generic.IEnumerable<object> GetExpandedItems() { }
        public JetBrains.UI.TreeGrid.TreeGridRow[] GetRecycledRows() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.TreeGrid.TreeGridRow GetRowIfVisible(object item) { }
        public JetBrains.UI.TreeGrid.TreeGridRow[] GetVisibleRows() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.TreeGrid.TreeGridCell HitCell(System.Windows.Point coordinates) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public object HitItem(System.Windows.Point coordinates) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.TreeGrid.TreeGridRow HitRow(System.Windows.Point coordinates) { }
        public bool IsInViewport(object item) { }
        public override void OnApplyTemplate() { }
        protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { }
        protected override void OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected override void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected override void OnMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected override void OnMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
        public void SelectAll() { }
        [System.ObsoleteAttribute("Dont use manual update, it will be removed")]
        public void Update() { }
    }
    public class static TreeGridViewHelper
    {
        public static string Dump(JetBrains.UI.TreeGrid.TreeGridView view) { }
        public static string DumpFormatted(JetBrains.UI.TreeGrid.TreeGridView view) { }
    }
    public class TreeGridViewport : System.Windows.FrameworkElement, System.Windows.Controls.Primitives.IScrollInfo
    {
        public TreeGridViewport(JetBrains.UI.TreeGrid.TreeGridView treeGridView) { }
        public bool CanHorizontallyScroll { get; set; }
        public bool CanVerticallyScroll { get; set; }
        public double ExtentHeight { get; }
        public double ExtentWidth { get; }
        public double HorizontalOffset { get; }
        public System.Windows.Controls.ScrollViewer ScrollOwner { get; set; }
        public double VerticalOffset { get; }
        public double ViewportHeight { get; }
        public double ViewportWidth { get; }
        protected override int VisualChildrenCount { get; }
        protected override System.Windows.Size ArrangeOverride(System.Windows.Size finalSize) { }
        public void BringIntoView(object item) { }
        public JetBrains.UI.TreeGrid.TreeGridRow[] GetRecycledRows() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.TreeGrid.TreeGridRow GetRowIfVisible(object item) { }
        public JetBrains.UI.TreeGrid.TreeGridRow[] GetScreenedRows() { }
        protected override System.Windows.Media.Visual GetVisualChild(int index) { }
        public static System.IntPtr GetWin32Focus() { }
        public bool HasItem(object item) { }
        public void LineDown() { }
        public void LineLeft() { }
        public void LineRight() { }
        public void LineUp() { }
        public System.Windows.Rect MakeVisible(System.Windows.Media.Visual visual, System.Windows.Rect rectangle) { }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size availableSize) { }
        public void MouseWheelDown() { }
        public void MouseWheelLeft() { }
        public void MouseWheelRight() { }
        public void MouseWheelUp() { }
        protected override void OnDragOver(System.Windows.DragEventArgs e) { }
        protected override void OnRenderSizeChanged(System.Windows.SizeChangedInfo sizeInfo) { }
        public void PageDown() { }
        public void PageDown(bool moveFocus) { }
        public void PageLeft() { }
        public void PageRight() { }
        public void PageUp() { }
        public void PageUp(bool moveFocus) { }
        public void SetHorizontalOffset(double offset) { }
        public void SetVerticalOffset(double offset) { }
        public static System.IntPtr SetWin32Focus(System.IntPtr hWnd) { }
    }
}
namespace JetBrains.UI.TreeGrid.Primitives
{
    
    public class ExpanderTrianglePresentaion : System.Windows.FrameworkElement
    {
        public static readonly System.Windows.DependencyProperty AutoExpandDragOverMillisecondsProperty;
        public static readonly System.Windows.DependencyProperty GlyphBrushProperty;
        public static readonly System.Windows.DependencyProperty GlyphHoverBrushProperty;
        public static readonly System.Windows.DependencyProperty HasChildrenProperty;
        public static readonly System.Windows.DependencyProperty IndentProperty;
        public static readonly System.Windows.DependencyProperty IsExpandedProperty;
        public static readonly System.Windows.DependencyProperty LevelProperty;
        public ExpanderTrianglePresentaion() { }
        public int AutoExpandDragOverMilliseconds { get; set; }
        public System.Windows.Media.Brush GlyphBrush { get; set; }
        public System.Windows.Media.Brush GlyphHoverBrush { get; set; }
        public bool HasChildren { get; set; }
        public double Indent { get; set; }
        public bool IsExpanded { get; set; }
        public int Level { get; set; }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size availableSize) { }
        protected override void OnDragEnter(System.Windows.DragEventArgs e) { }
        protected override void OnDragOver(System.Windows.DragEventArgs e) { }
        protected override void OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected override void OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected override void OnRender(System.Windows.Media.DrawingContext drawingContext) { }
    }
    public class MetroBusyIndicatorPresentation : System.Windows.FrameworkElement
    {
        public static readonly System.Windows.DependencyProperty BackgroundProperty;
        public static readonly System.Windows.DependencyProperty IndicatorBrushProperty;
        public static readonly System.Windows.DependencyProperty IndicatorLengthProperty;
        public static readonly System.Windows.DependencyProperty IsBusyProperty;
        public static readonly System.Windows.DependencyProperty VelocityProperty;
        public System.Windows.Media.Brush Background { get; set; }
        public System.Windows.Media.Brush IndicatorBrush { get; set; }
        public double IndicatorLength { get; set; }
        public bool IsBusy { get; set; }
        public double Velocity { get; set; }
        protected override void OnRender(System.Windows.Media.DrawingContext drawingContext) { }
    }
    public class SortDirectionPresentation : System.Windows.FrameworkElement
    {
        public static readonly System.Windows.DependencyProperty GlyphBrushProperty;
        public static readonly System.Windows.DependencyProperty GlyphHoverBrushProperty;
        public static readonly System.Windows.DependencyProperty SortDirectionProperty;
        public SortDirectionPresentation() { }
        public System.Windows.Media.Brush GlyphBrush { get; set; }
        public System.Windows.Media.Brush GlyphHoverBrush { get; set; }
        public System.ComponentModel.ListSortDirection SortDirection { get; set; }
        protected override System.Windows.Size MeasureOverride(System.Windows.Size availableSize) { }
        protected override void OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected override void OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected override void OnRender(System.Windows.Media.DrawingContext drawingContext) { }
    }
}
namespace JetBrains.UI.TreeView
{
    
    public class CellRendererPresentableItem : JetBrains.UI.TreeView.ICellRenderer
    {
        public CellRendererPresentableItem(JetBrains.UI.Application.IUIApplication environment) { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Icons.IconId> GetImages(object data) { }
        public string GetText(object data) { }
        public System.Drawing.Rectangle GetTextBounds(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams) { }
        public JetBrains.CommonControls.IWindowlessControl GetToolTipPainter(object data, JetBrains.UI.RenderParams renderParams) { }
        public System.Drawing.Rectangle GetToolTipRectangle(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams) { }
        public object HitTest(System.Drawing.Graphics graphics, System.Drawing.Point point, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams, out System.Drawing.Rectangle hitRect) { }
        public System.Drawing.Size Measure(System.Drawing.Graphics graphics, object data, JetBrains.UI.RenderParams renderParams) { }
        public void Render(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams, bool isAnimationSupported) { }
    }
    public class CellRendererPresentableItemBlock : JetBrains.UI.TreeView.ICellRenderer
    {
        public CellRendererPresentableItemBlock(JetBrains.UI.Application.IUIApplication environment) { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Icons.IconId> GetImages(object data) { }
        public string GetText(object data) { }
        public System.Drawing.Rectangle GetTextBounds(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams) { }
        public JetBrains.CommonControls.IWindowlessControl GetToolTipPainter(object data, JetBrains.UI.RenderParams renderParams) { }
        public System.Drawing.Rectangle GetToolTipRectangle(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams) { }
        public object HitTest(System.Drawing.Graphics graphics, System.Drawing.Point point, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams, out System.Drawing.Rectangle hitRect) { }
        public System.Drawing.Size Measure(System.Drawing.Graphics graphics, object data, JetBrains.UI.RenderParams renderParams) { }
        public void Render(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams, bool isAnimationSupported) { }
    }
    public class CellRendererRichText : JetBrains.UI.TreeView.ICellRenderer
    {
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Icons.IconId> GetImages(object data) { }
        public string GetText(object data) { }
        public System.Drawing.Rectangle GetTextBounds(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams) { }
        public JetBrains.CommonControls.IWindowlessControl GetToolTipPainter(object data, JetBrains.UI.RenderParams renderParams) { }
        public System.Drawing.Rectangle GetToolTipRectangle(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams) { }
        public object HitTest(System.Drawing.Graphics graphics, System.Drawing.Point point, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams, out System.Drawing.Rectangle hitRect) { }
        public System.Drawing.Size Measure(System.Drawing.Graphics graphics, object data, JetBrains.UI.RenderParams renderParams) { }
        public void Render(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams, bool isAnimationSupported) { }
    }
    public class CellRendererRichTextBlock : JetBrains.UI.TreeView.ICellRenderer
    {
        public System.Collections.Generic.IEnumerable<JetBrains.UI.Icons.IconId> GetImages(object data) { }
        public string GetText(object data) { }
        public System.Drawing.Rectangle GetTextBounds(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams) { }
        public JetBrains.CommonControls.IWindowlessControl GetToolTipPainter(object data, JetBrains.UI.RenderParams renderParams) { }
        public System.Drawing.Rectangle GetToolTipRectangle(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams) { }
        public object HitTest(System.Drawing.Graphics graphics, System.Drawing.Point point, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams, out System.Drawing.Rectangle hitRect) { }
        public System.Drawing.Size Measure(System.Drawing.Graphics graphics, object data, JetBrains.UI.RenderParams renderParams) { }
        public void Render(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams, bool isAnimationSupported) { }
    }
    public class DragResponse
    {
        public static readonly JetBrains.UI.TreeView.DragResponse Empty;
        public System.Windows.Forms.DragDropEffects AfterEffects { get; set; }
        public System.Windows.Forms.DragDropEffects BeforeEffects { get; set; }
        public System.Windows.Forms.DragDropEffects IntoEffects { get; set; }
    }
    public class FocusedNodeWatcher
    {
        public FocusedNodeWatcher(JetBrains.UI.TreeView.TreeModelView view, System.Action onFocusedNodeChanged) { }
        public void Dispose() { }
    }
    public interface ICellRenderer
    {
        System.Collections.Generic.IEnumerable<JetBrains.UI.Icons.IconId> GetImages(object data);
        string GetText(object data);
        System.Drawing.Rectangle GetTextBounds(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams);
        JetBrains.CommonControls.IWindowlessControl GetToolTipPainter(object data, JetBrains.UI.RenderParams renderParams);
        System.Drawing.Rectangle GetToolTipRectangle(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams);
        object HitTest(System.Drawing.Graphics graphics, System.Drawing.Point point, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams, out System.Drawing.Rectangle hitRect);
        System.Drawing.Size Measure(System.Drawing.Graphics graphics, object data, JetBrains.UI.RenderParams renderParams);
        void Render(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, object data, JetBrains.UI.RenderParams renderParams, bool isAnimationSupported = False);
    }
    public interface ICustomModelNodePresenter
    {
        void Draw(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.UI.RenderParams renderParams);
        void DrawSelection(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.UI.TreeView.TreeModelViewNode viewNode, System.Drawing.Color selectionColor, JetBrains.UI.RenderParams renderParams);
        System.Drawing.Size Measure(System.Drawing.Graphics g, JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.UI.RenderParams renderParams);
    }
    public interface ITreeModelViewHighlighter
    {
        bool IsValid { get; }
        JetBrains.UI.TreeView.TreeModelViewNode ViewNode { get; }
    }
    public interface ITreeModelViewVisitor : JetBrains.UI.Controls.TreeView.ITreeModelVisitor
    {
        void VisitTreeModelView(JetBrains.UI.TreeView.TreeModelView modelView, JetBrains.Application.Progress.IProgressIndicator progress);
        void VisitTreeModelViewNode(JetBrains.UI.TreeView.TreeModelViewNode modelViewNode, JetBrains.Application.Progress.IProgressIndicator progress);
        void VisitTreeModelViewNodeCell(JetBrains.UI.TreeView.TreeModelViewNode modelViewNode, JetBrains.UI.TreeView.TreeModelViewColumn modelViewColumn, JetBrains.Application.Progress.IProgressIndicator progress);
    }
    public interface ITreeViewColumnHeaderRenderer
    {
        void ApplyColorScheme(JetBrains.UI.TreeView.TreeModelViewColorScheme colorScheme);
        void DrawBackground(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, bool mouseOver, bool pressed, int columnIndex);
        void DrawCaption(string caption, System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, System.Drawing.Font font, bool mouseOver, bool pressed);
        void DrawSortShape(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, bool mouseOver, bool pressed, bool ascending);
    }
    public interface ITreeViewController
    {
        bool AutoExpandSingleChild { get; }
        bool DragDropSupported { get; }
        bool GuardActions { get; }
        bool QuickSearchSupported { get; }
        bool RootNodesCollapsable { get; }
        bool SupportMultiSelection { get; }
        bool VisibilitySupported { get; }
        void DragDrop(JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.UI.TreeView.RelativeLocation location, System.Windows.Forms.DragEventArgs data);
        JetBrains.UI.TreeView.DragResponse Dragging(JetBrains.UI.TreeView.TreeModelViewNode viewNode, System.Windows.Forms.DragEventArgs data);
        System.Windows.Forms.DragDropEffects DragStarting(System.Collections.Generic.IList<JetBrains.UI.TreeView.TreeModelViewNode> selectedNodes, System.Windows.Forms.IDataObject dataObject);
        bool ExpandNodeInitially(JetBrains.TreeModels.TreeModelNode modelNode);
        System.Collections.Generic.IEnumerable<JetBrains.TreeModels.TreeModelNode> GetDefaultNodes(JetBrains.TreeModels.TreeModel model);
        bool QuickSearchMatches(JetBrains.TreeModels.TreeModelNode modelNode, string filter);
        bool VisibilityState(JetBrains.TreeModels.TreeModelNode modelNode);
    }
    public class LargeSectionNodePresenter : JetBrains.UI.TreeView.ICustomModelNodePresenter
    {
        public LargeSectionNodePresenter(JetBrains.UI.Application.IUIApplication environment) { }
        public LargeSectionNodePresenter(double ratio, JetBrains.UI.Application.IUIApplication environment) { }
        public void Draw(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.UI.RenderParams renderParams) { }
        public void DrawSelection(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.UI.TreeView.TreeModelViewNode viewNode, System.Drawing.Color selectionColor, JetBrains.UI.RenderParams renderParams) { }
        public System.Drawing.Size Measure(System.Drawing.Graphics g, JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.UI.RenderParams renderParams) { }
    }
    public class NodeStateChangedEventArgs : System.EventArgs
    {
        public NodeStateChangedEventArgs(JetBrains.TreeModels.TreeModelNode node, System.Windows.Forms.CheckState state) { }
        public JetBrains.TreeModels.TreeModelNode Node { get; }
        public System.Windows.Forms.CheckState State { get; }
    }
    public class NodeStateChangingEventArgs : System.ComponentModel.CancelEventArgs
    {
        public NodeStateChangingEventArgs(JetBrains.TreeModels.TreeModelNode node, System.Windows.Forms.CheckState state) { }
        public NodeStateChangingEventArgs(JetBrains.TreeModels.TreeModelNode node, System.Windows.Forms.CheckState state, bool cancel) { }
        public JetBrains.TreeModels.TreeModelNode Node { get; }
        public System.Windows.Forms.CheckState State { get; }
    }
    public delegate void PresentationCallback<TStructureElement, TPresentableItem>(object value, TPresentableItem item, TStructureElement structureElement, JetBrains.UI.TreeView.PresentationState state);
    public delegate void PresentationCallback<TStructureElement, TPresentableItem, T>(T value, TPresentableItem item, TStructureElement structureElement, JetBrains.UI.TreeView.PresentationState state);
    public class PresentationState
    {
        public PresentationState(JetBrains.UI.TreeView.PresentationState state) { }
        public bool Expanded { get; set; }
        public bool Focused { get; set; }
        public bool Selected { get; set; }
        protected bool Equals(JetBrains.UI.TreeView.PresentationState other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class QuickSearchBox : JetBrains.UI.CommonControls.SafeUserControl
    {
        public QuickSearchBox(JetBrains.UI.Application.IUIApplication environment) { }
        public bool FilterChecked { get; set; }
        public System.Drawing.Color SearchForeColor { get; set; }
        public string SearchText { get; set; }
        public event System.EventHandler FilterStateChanged;
        public event System.EventHandler SearchTextChanged;
        public void Clear() { }
        public void Process(char c) { }
        public void ProcessBackspace() { }
        public void ProcessPaste(string data) { }
    }
    public enum RelativeLocation
    {
        None = 0,
        Into = 1,
        Before = 2,
        After = 3,
    }
    public class SeparatorNodePresenter : JetBrains.UI.TreeView.ICustomModelNodePresenter
    {
        public SeparatorNodePresenter(JetBrains.UI.Application.IUIApplication environment) { }
        public void Draw(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.UI.RenderParams renderParams) { }
        public void DrawSelection(System.Drawing.Graphics g, System.Drawing.Rectangle bounds, JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.UI.TreeView.TreeModelViewNode viewNode, System.Drawing.Color selectionColor, JetBrains.UI.RenderParams renderParams) { }
        public System.Drawing.Size Measure(System.Drawing.Graphics g, JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.UI.RenderParams renderParams) { }
    }
    public class StructuredPresenter<TStructureElement, TPresentableItem>
        where TStructureElement : JetBrains.Util.IPresentableStructureElement
    
    {
        public StructuredPresenter() { }
        public static JetBrains.UI.TreeView.StructuredPresenter<TStructureElement, JetBrains.CommonControls.IPresentableItem> Default { get; }
        public event JetBrains.UI.TreeView.PresentationCallback<TStructureElement, TPresentableItem> PresentAdorements;
        public System.Type GetRegisteredType([JetBrains.Annotations.NotNullAttribute()] object value) { }
        public void Present<T>(JetBrains.UI.TreeView.PresentationCallback<TStructureElement, TPresentableItem, T> callback) { }
        public void UpdateItem(TStructureElement structureElement, TPresentableItem item, JetBrains.UI.TreeView.PresentationState state) { }
        public virtual void UpdateItem(object value, TStructureElement structureElement, TPresentableItem item, JetBrains.UI.TreeView.PresentationState state) { }
    }
    public class TreeModelPresentableView : JetBrains.UI.TreeView.TreeModelView
    {
        public TreeModelPresentableView(JetBrains.TreeModels.TreeModel model, JetBrains.UI.TreeView.ITreeViewController controller, JetBrains.UI.Application.IUIApplication environment) { }
        public TreeModelPresentableView(JetBrains.UI.TreeView.ITreeViewController controller, JetBrains.UI.Application.IUIApplication environment) { }
        public virtual JetBrains.UI.TreeView.TreeModelViewColumn ModelColumn { get; }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public virtual JetBrains.UI.TreeView.StructuredPresenter<JetBrains.TreeModels.TreeModelNode, JetBrains.CommonControls.IPresentableItem> Presenter { get; set; }
        public System.Nullable<System.Drawing.Rectangle> GetNodeBounds(JetBrains.UI.TreeView.TreeModelViewNode node) { }
        protected override void Initialize() { }
        protected override void InitializeCells(JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.TreeModels.TreeModelNode modelNode) { }
        protected override void SetupColumnWidth() { }
        protected override void UpdateNodeCells(JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.UI.TreeView.PresentationState state) { }
    }
    [System.ComponentModel.DesignTimeVisibleAttribute(false)]
    [System.ComponentModel.ToolboxItemAttribute(false)]
    public abstract class TreeModelView : JetBrains.UI.CommonControls.SafeTreeList, JetBrains.Application.DataContext.IDataRuleProvider, JetBrains.UI.Tooltips.ITooltipProvider
    {
        public const DevExpress.XtraEditors.Controls.BorderStyles NoBorder = 0;
        protected TreeModelView(JetBrains.UI.TreeView.ITreeViewController controller, JetBrains.UI.Application.IUIApplication environment) { }
        protected TreeModelView(JetBrains.TreeModels.TreeModel model, JetBrains.UI.TreeView.ITreeViewController controller, JetBrains.UI.Application.IUIApplication environment) { }
        public JetBrains.UI.TreeView.TreeModelViewColorScheme ColorScheme { get; set; }
        public JetBrains.UI.TreeView.ITreeViewColumnHeaderRenderer ColumnHeaderRenderer { get; set; }
        public JetBrains.UI.TreeView.ITreeViewController Controller { get; set; }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public JetBrains.Util.TypeHierarchyMap<JetBrains.UI.TreeView.ICustomModelNodePresenter> CustomPresenters { get; }
        public int DefaultExpandLevels { get; set; }
        public string FilterText { get; }
        public JetBrains.UI.TreeView.TreeModelViewNode FirstNode { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public JetBrains.UI.TreeView.TreeModelViewNode FocusedNode { get; set; }
        public bool FullRowSelect { get; set; }
        protected int IndicatorMargin { get; set; }
        [System.ComponentModel.DefaultValueAttribute(0)]
        public int MinimumRowHeight { get; set; }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public JetBrains.TreeModels.TreeModel Model { get; set; }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public JetBrains.TreeModels.TreeModelNode ModelFocusedNode { get; set; }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public System.Collections.Generic.ICollection<JetBrains.TreeModels.TreeModelNode> ModelSelection { get; }
        public bool MultiSelect { get; set; }
        public bool NavigateOnClick { get; set; }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool RemoveOnCollapse { get; set; }
        public bool ShowRootLines { get; set; }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public DevExpress.Utils.ViewStyleHashtable Styles { get; }
        public bool Updating { get; }
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public System.Collections.Generic.ICollection<JetBrains.UI.TreeView.TreeModelViewNode> ViewSelection { get; }
        public event System.EventHandler<JetBrains.UI.ContextMenuEventArgs> ContextMenuRequested;
        public event System.EventHandler FocusedNodeClicked;
        public event System.EventHandler FocusedNodeDoubleClicked;
        public event System.EventHandler<System.EventArgs> ModelUpdated;
        public event System.EventHandler<System.EventArgs> ModelUpdating;
        public event JetBrains.UI.TreeView.TreeModelView.TreeViewNavigateEventHandler Navigate;
        public event System.EventHandler<System.EventArgs> UpdateFinished;
        public event System.EventHandler<System.EventArgs> UpdateStarted;
        public JetBrains.UI.TreeView.TreeModelViewColumn AddColumn() { }
        public JetBrains.UI.TreeView.ITreeModelViewHighlighter AddHighlighter(JetBrains.UI.TreeView.TreeModelViewNode viewNode, System.Drawing.Color foreColor, JetBrains.UI.RichText.TextStyle.EffectStyle effect, System.Drawing.Color effectColor) { }
        protected void CalculateColumnsWidths(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
        protected internal int CalculateNodeHeight(System.Drawing.Graphics g, JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
        public void CollapseAll(JetBrains.UI.TreeView.TreeModelViewNode node) { }
        protected override DevExpress.XtraTreeList.Columns.TreeListColumnCollection CreateColumns() { }
        protected override DevExpress.XtraTreeList.Handler.TreeListHandler CreateHandler() { }
        protected virtual JetBrains.UI.TreeView.TreeModelViewNodeIterator CreateIterator(System.Predicate<JetBrains.UI.TreeView.TreeModelViewNode> predicate, JetBrains.UI.TreeView.TreeModelViewNodeIterator.IterationDirection direction, JetBrains.UI.TreeView.TreeModelViewNode startNode) { }
        protected override DevExpress.XtraTreeList.Nodes.TreeListNode CreateNode(int nodeID, DevExpress.XtraTreeList.Nodes.TreeListNodes owner) { }
        protected override DevExpress.XtraTreeList.ViewInfo.TreeListViewInfo CreateViewInfo() { }
        public virtual JetBrains.UI.TreeView.TreeModelViewState CreateViewState() { }
        protected virtual System.Drawing.Rectangle CustomCellBounds(DevExpress.XtraTreeList.ViewInfo.CellInfo cellInfo) { }
        protected override void Dispose(bool disposing) { }
        public void EnsureChildren(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
        public void EnsureDescendants(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
        public JetBrains.UI.TreeView.TreeModelViewNode EnsureModelToView(JetBrains.TreeModels.TreeModelNode modelNode) { }
        public void ExecuteWithGuard([System.ComponentModel.LocalizableAttribute(false)] string id, System.Action action) { }
        public override void ExpandAll() { }
        public void ExpandAll(JetBrains.UI.TreeView.TreeModelViewNode node) { }
        public void ExpandAll(JetBrains.UI.TreeView.TreeModelViewNode node, int levels) { }
        protected virtual void ExpandRecursive(JetBrains.UI.TreeView.TreeModelViewNode node, int levels) { }
        protected virtual int GetCellWidth(JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.UI.TreeView.TreeModelViewColumn column) { }
        public virtual System.Drawing.Rectangle GetNodeTextBounds(JetBrains.UI.TreeView.TreeModelViewNode node, JetBrains.UI.TreeView.TreeModelViewColumn column) { }
        public virtual JetBrains.UI.TreeView.PresentationState GetPresentationState(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
        public JetBrains.UI.TreeView.ICellRenderer GetRenderer(object data) { }
        protected virtual JetBrains.UI.RenderParams GetRenderParams(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
        protected virtual int GetStateImageWidth(JetBrains.UI.TreeView.TreeModelViewNode node) { }
        public JetBrains.UI.PopupWindowManager.PopupWindowContextSource GetWindowContext(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
        public JetBrains.UI.PopupWindowManager.PopupWindowContextSource GetWindowContext() { }
        protected virtual bool HandleClick(System.Windows.Forms.Keys modifiers) { }
        protected virtual bool HandleCopy() { }
        protected virtual bool HandleCut() { }
        protected virtual bool HandleDelete(System.Windows.Forms.Keys modifiers) { }
        protected virtual bool HandleDoubleClick(System.Windows.Forms.Keys modifiers) { }
        protected virtual bool HandleEnter(System.Windows.Forms.Keys modifiers) { }
        protected virtual bool HandleExpandSubtree(System.Windows.Forms.Keys modifiers) { }
        protected virtual bool HandleInsert(System.Windows.Forms.Keys modifiers) { }
        protected virtual void HandleModelUpdated(object sender, System.EventArgs e) { }
        protected virtual void HandleModelUpdating(object sender, System.EventArgs e) { }
        protected virtual bool HandlePaste() { }
        protected virtual void Initialize() { }
        protected abstract void InitializeCells(JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.TreeModels.TreeModelNode modelNode);
        protected override bool IsInputKey(System.Windows.Forms.Keys key) { }
        protected virtual bool IsModelNodeVisible(JetBrains.TreeModels.TreeModelNode modelNode) { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.TreeView.TreeModelViewNode> IterateBackwards() { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.TreeView.TreeModelViewNode> IterateBackwards(System.Predicate<JetBrains.UI.TreeView.TreeModelViewNode> predicate) { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.TreeView.TreeModelViewNode> IterateBackwards(System.Predicate<JetBrains.UI.TreeView.TreeModelViewNode> predicate, JetBrains.UI.TreeView.TreeModelViewNode startNode) { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.TreeView.TreeModelViewNode> IterateBackwards(JetBrains.UI.TreeView.TreeModelViewNode startNode) { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.TreeView.TreeModelViewNode> IterateForward() { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.TreeView.TreeModelViewNode> IterateForward(JetBrains.UI.TreeView.TreeModelViewNode startNode) { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.TreeView.TreeModelViewNode> IterateForward(System.Predicate<JetBrains.UI.TreeView.TreeModelViewNode> predicate) { }
        public System.Collections.Generic.IEnumerable<JetBrains.UI.TreeView.TreeModelViewNode> IterateForward(System.Predicate<JetBrains.UI.TreeView.TreeModelViewNode> predicate, JetBrains.UI.TreeView.TreeModelViewNode startNode) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.TreeView.TreeModelViewNode ModelToView([JetBrains.Annotations.NotNullAttribute()] JetBrains.TreeModels.TreeModelNode modelNode) { }
        public override DevExpress.XtraTreeList.Nodes.TreeListNode MoveFirst() { }
        public override DevExpress.XtraTreeList.Nodes.TreeListNode MoveLastVisible() { }
        protected override void OnClick(System.EventArgs e) { }
        protected override void OnDragDrop(System.Windows.Forms.DragEventArgs drgevent) { }
        protected override void OnDragLeave(System.EventArgs e) { }
        protected override void OnDragOver(System.Windows.Forms.DragEventArgs drgevent) { }
        protected override void OnHandleCreated(System.EventArgs e) { }
        protected override void OnKeyDown(System.Windows.Forms.KeyEventArgs e) { }
        protected override void OnKeyPress(System.Windows.Forms.KeyPressEventArgs e) { }
        protected virtual void OnModelUpdated(object sender, System.EventArgs e) { }
        protected virtual void OnModelUpdating(object sender, System.EventArgs e) { }
        protected override void OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs args) { }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e) { }
        protected virtual void OnNavigate(JetBrains.UI.TreeView.TreeModelView.TreeModelViewNavigateEventArgs e) { }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs args) { }
        protected virtual void OnPaintDragDrop(System.Windows.Forms.PaintEventArgs args) { }
        protected virtual void OnPaintFocusRectangle(System.Windows.Forms.PaintEventArgs args) { }
        protected override void OnSelectionChanged() { }
        protected override void OnSetValue(DevExpress.XtraTreeList.Nodes.TreeListNode node, object columnID, object val) { }
        protected virtual void OnUpdateFinished(System.EventArgs e) { }
        protected virtual void OnUpdateStarted(System.EventArgs e) { }
        public JetBrains.UI.TreeView.TreeModelViewNode PointToNode(System.Drawing.Point point) { }
        protected override bool ProcessDialogKey(System.Windows.Forms.Keys keyData) { }
        protected override void RaiseAfterCollapse(DevExpress.XtraTreeList.Nodes.TreeListNode node) { }
        protected override void RaiseAfterExpand(DevExpress.XtraTreeList.Nodes.TreeListNode node) { }
        protected override void RaiseBeforeCollapse(DevExpress.XtraTreeList.Nodes.TreeListNode node, ref bool canCollapse) { }
        protected override void RaiseBeforeExpand(DevExpress.XtraTreeList.Nodes.TreeListNode node, ref bool canExpand) { }
        protected override void RaiseCalcNodeHeight(DevExpress.XtraTreeList.Nodes.TreeListNode node, ref int nodeHeight) { }
        protected override void RaiseCustomDrawColumnHeader(DevExpress.XtraTreeList.CustomDrawColumnHeaderEventArgs e) { }
        protected override void RaiseCustomDrawNodeCell(DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e) { }
        protected override void RaiseFocusedNodeChanged(DevExpress.XtraTreeList.Nodes.TreeListNode oldNode, DevExpress.XtraTreeList.Nodes.TreeListNode newNode) { }
        public void RegisterRenderer(System.Type type, JetBrains.UI.TreeView.ICellRenderer renderer) { }
        public void RemoveHighlighter(JetBrains.UI.TreeView.ITreeModelViewHighlighter highlighter) { }
        protected void RemoveNodeChildren(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
        protected virtual void RestoreState() { }
        protected virtual void SaveState() { }
        public void SelectDefaultNodes() { }
        protected virtual void SetupColumnWidth() { }
        protected virtual void SweepDeadNode(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
        public void UpdateAllNodesPresentation() { }
        protected abstract void UpdateNodeCells(JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.UI.TreeView.PresentationState state);
        protected void UpdateNodePresentation(JetBrains.TreeModels.TreeModelNode modelNode) { }
        protected void UpdateNodePresentation(object dataValue) { }
        protected void UpdateNodePresentation(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
        protected void UpdateNodePresentation(JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.TreeModels.TreeModelNode modelNode) { }
        public void UpdateNodesPresentation(System.Collections.Generic.IEnumerable<JetBrains.TreeModels.TreeModelNode> nodes) { }
        protected override void WndProc(ref System.Windows.Forms.Message m) { }
        protected class TreeModelViewInfo : DevExpress.XtraTreeList.ViewInfo.TreeListViewInfo
        {
            public TreeModelViewInfo(DevExpress.XtraTreeList.TreeList treeList) { }
            protected override void CalcViewRects() { }
            public override void UpdateRowPaintAppearance(DevExpress.XtraTreeList.ViewInfo.RowInfo ri) { }
        }
        public class TreeModelViewNavigateEventArgs : JetBrains.UI.TreeView.TreeModelView.TreeModelViewNodeEventArgs
        {
            public TreeModelViewNavigateEventArgs(JetBrains.UI.TreeView.TreeModelViewNode viewNode, bool transferFocus) { }
            public bool Handled { get; set; }
            public bool TransferFocus { get; }
        }
        public class TreeModelViewNodeEventArgs : System.EventArgs
        {
            public TreeModelViewNodeEventArgs(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
            public JetBrains.UI.TreeView.TreeModelViewNode ViewNode { get; }
        }
        public delegate void TreeViewNavigateEventHandler(object sender, JetBrains.UI.TreeView.TreeModelView.TreeModelViewNavigateEventArgs e);
        public delegate void TreeViewNodeEventHandler(object sender, JetBrains.UI.TreeView.TreeModelView.TreeModelViewNodeEventArgs e);
    }
    public class TreeModelViewAnchoringRect : JetBrains.UI.AnchoringRect
    {
        public TreeModelViewAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.TreeView.TreeModelView treeModelView, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.TreeView.TreeModelViewNode node, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.TreeView.TreeModelViewColumn column, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        public TreeModelViewAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.TreeView.TreeModelView treeModelView, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.TreeView.TreeModelViewNode node, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        protected TreeModelViewAnchoringRect([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.TreeView.TreeModelView treeModelView, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.TreeView.TreeModelViewNode viewNode, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.TreeView.TreeModelViewColumn viewColumn, bool isNodeNullable, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.Anchoring2D[] DefaultAnchoringDispositions { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.NestedAnchoringRect ClientToScreen([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager hookman) { }
        public static JetBrains.UI.TreeView.TreeModelViewAnchoringRect CreateFromNodeStatic(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.TreeView.TreeModelView treeModelView, JetBrains.UI.TreeView.TreeModelViewNode viewNode, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        public static JetBrains.UI.TreeView.TreeModelViewAnchoringRect CreateFromSelectionDynamic([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.TreeView.TreeModelView treeModelView, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
    }
    [System.ComponentModel.ToolboxItemAttribute(true)]
    public class TreeModelViewChecked : JetBrains.UI.TreeView.TreeModelPresentableView
    {
        public TreeModelViewChecked(JetBrains.UI.TreeView.ITreeViewController controller, JetBrains.UI.Application.IUIApplication environment) { }
        public TreeModelViewChecked(JetBrains.TreeModels.TreeModel model, JetBrains.UI.TreeView.ITreeViewController controller, JetBrains.UI.Application.IUIApplication environment) { }
        public event System.EventHandler<JetBrains.UI.TreeView.NodeStateChangedEventArgs> NodeStateChanged;
        public event System.EventHandler<JetBrains.UI.TreeView.NodeStateChangingEventArgs> NodeStateChanging;
        public override JetBrains.UI.TreeView.TreeModelViewState CreateViewState() { }
        public virtual System.Windows.Forms.CheckState GetNodeState(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
        public virtual System.Windows.Forms.CheckState GetNodeState(JetBrains.TreeModels.TreeModelNode modelNode) { }
        protected override void Initialize() { }
        protected override void InitializeCells(JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.TreeModels.TreeModelNode modelNode) { }
        protected override void OnKeyDown(System.Windows.Forms.KeyEventArgs e) { }
        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseLeave(System.EventArgs e) { }
        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e) { }
        protected override void OnMouseUp(System.Windows.Forms.MouseEventArgs e) { }
        protected virtual void OnNodeStateChanged(JetBrains.UI.TreeView.NodeStateChangedEventArgs e) { }
        protected virtual void OnNodeStateChanging(JetBrains.UI.TreeView.NodeStateChangingEventArgs e) { }
        protected override void RaiseCustomDrawNodeImages(DevExpress.XtraTreeList.CustomDrawNodeImagesEventArgs e) { }
        public void SetNodeState(JetBrains.TreeModels.TreeModelNode modelNode, System.Windows.Forms.CheckState state) { }
        public void SetNodeState(JetBrains.UI.TreeView.TreeModelViewNode viewNode, System.Windows.Forms.CheckState state) { }
        protected virtual void SetNodeStateCore(JetBrains.TreeModels.TreeModelNode modelNode, System.Windows.Forms.CheckState state) { }
        public void ToggleNodeState(JetBrains.TreeModels.TreeModelNode modelNode) { }
        public void ToggleNodeState(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
    }
    public class TreeModelViewColorScheme
    {
        public virtual System.Drawing.Color Background { get; }
        public virtual System.Drawing.Color ColumnHeaderBackground { get; }
        public virtual System.Drawing.Color ColumnHeaderBorder { get; }
        public virtual System.Drawing.Color ColumnHeaderForeground { get; }
        public virtual System.Drawing.Color ColumnHeaderGlyph { get; }
        public virtual System.Drawing.Color ColumnHeaderHoverBackground { get; }
        public virtual System.Drawing.Color ColumnHeaderHoverForeground { get; }
        public virtual System.Drawing.Color ColumnHeaderHoverGlyph { get; }
        public virtual System.Drawing.Color ColumnHeaderPressedBackground { get; }
        public virtual System.Drawing.Color ColumnHeaderPressedForeground { get; }
        public virtual System.Drawing.Color ColumnHeaderPressedGlyph { get; }
        public virtual System.Drawing.Color Foreground { get; }
        public virtual System.Drawing.Color SelectedActiveItemBackground { get; }
        public virtual System.Drawing.Color SelectedActiveItemBorder { get; }
        public virtual System.Drawing.Color SelectedActiveItemForeground { get; }
        public virtual System.Drawing.Color SelectedInactiveItemBackground { get; }
        public virtual System.Drawing.Color SelectedInactiveItemBorder { get; }
        public virtual System.Drawing.Color SelectedInactiveItemForeground { get; }
        public virtual System.Drawing.Color TooltipBackground { get; }
        public virtual System.Drawing.Color TooltipForeground { get; }
        public event System.EventHandler Changed;
        protected void RaiseChanged() { }
    }
    public class TreeModelViewColumn : DevExpress.XtraTreeList.Columns.TreeListColumn { }
    public class TreeModelViewColumnCollection : DevExpress.XtraTreeList.Columns.TreeListColumnCollection
    {
        public TreeModelViewColumnCollection(DevExpress.XtraTreeList.TreeList owner) { }
        protected override DevExpress.XtraTreeList.Columns.TreeListColumn CreateColumn() { }
    }
    public class static TreeModelViewDumper
    {
        public static string NodeToString(JetBrains.UI.TreeView.TreeModelViewNode viewNode) { }
        public static string ViewToString(JetBrains.UI.TreeView.TreeModelView modelView) { }
    }
    public class TreeModelViewNode : DevExpress.XtraTreeList.Nodes.TreeListNode
    {
        public TreeModelViewNode(int id, DevExpress.XtraTreeList.Nodes.TreeListNodes owner) { }
        public bool AlwaysExpanded { get; set; }
        public JetBrains.UI.TreeView.TreeModelView TreeModelView { get; }
        public bool Valid { get; }
        public object GetCellValue(JetBrains.UI.TreeView.TreeModelViewColumn column) { }
        public System.Collections.Generic.IList<JetBrains.UI.TreeView.TreeModelViewNode> GetDescendants(System.Func<JetBrains.UI.TreeView.TreeModelViewNode, bool> predicate) { }
        public void Invalidate() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.TreeModels.TreeModelNode ToModel() { }
        public override string ToString() { }
    }
    public class TreeModelViewNodeIterator : System.Collections.Generic.IEnumerable<JetBrains.UI.TreeView.TreeModelViewNode>, System.Collections.IEnumerable
    {
        public TreeModelViewNodeIterator(JetBrains.UI.TreeView.TreeModelView modelView, System.Predicate<JetBrains.UI.TreeView.TreeModelViewNode> predicate, JetBrains.UI.TreeView.TreeModelViewNodeIterator.IterationDirection direction, JetBrains.UI.TreeView.TreeModelViewNode startNode) { }
        public JetBrains.UI.TreeView.TreeModelView ModelView { get; }
        protected virtual void EnsureChildren(JetBrains.UI.TreeView.TreeModelViewNode node) { }
        public System.Collections.Generic.IEnumerator<JetBrains.UI.TreeView.TreeModelViewNode> GetEnumerator() { }
        protected virtual JetBrains.UI.TreeView.TreeModelViewNode GetLastChild(JetBrains.UI.TreeView.TreeModelViewNode node) { }
        protected virtual bool HasChildren(JetBrains.UI.TreeView.TreeModelViewNode node) { }
        public enum IterationDirection
        {
            Backwards = 0,
            Forward = 1,
        }
    }
    public class TreeModelViewState
    {
        public TreeModelViewState(JetBrains.UI.TreeView.TreeModelView view) { }
        public JetBrains.UI.TreeView.TreeModelView View { get; }
        public virtual void Restore() { }
        public virtual void Save() { }
    }
    public class TreeModelViewStateChecked : JetBrains.UI.TreeView.TreeModelViewState
    {
        public TreeModelViewStateChecked(JetBrains.UI.TreeView.TreeModelView view) { }
        public override void Restore() { }
        public override void Save() { }
    }
    public class TreeModelViewToolWindowColorScheme : JetBrains.UI.TreeView.TreeModelViewColorScheme
    {
        public TreeModelViewToolWindowColorScheme(JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Theming.ITheming themeManager) { }
        public override System.Drawing.Color Background { get; }
        public override System.Drawing.Color ColumnHeaderBackground { get; }
        public override System.Drawing.Color ColumnHeaderBorder { get; }
        public override System.Drawing.Color ColumnHeaderForeground { get; }
        public override System.Drawing.Color ColumnHeaderGlyph { get; }
        public override System.Drawing.Color ColumnHeaderHoverBackground { get; }
        public override System.Drawing.Color ColumnHeaderHoverForeground { get; }
        public override System.Drawing.Color ColumnHeaderHoverGlyph { get; }
        public override System.Drawing.Color ColumnHeaderPressedBackground { get; }
        public override System.Drawing.Color ColumnHeaderPressedForeground { get; }
        public override System.Drawing.Color ColumnHeaderPressedGlyph { get; }
        public override System.Drawing.Color Foreground { get; }
        public override System.Drawing.Color SelectedActiveItemBackground { get; }
        public override System.Drawing.Color SelectedActiveItemBorder { get; }
        public override System.Drawing.Color SelectedActiveItemForeground { get; }
        public override System.Drawing.Color SelectedInactiveItemBackground { get; }
        public override System.Drawing.Color SelectedInactiveItemBorder { get; }
        public override System.Drawing.Color SelectedInactiveItemForeground { get; }
        public override System.Drawing.Color TooltipBackground { get; }
        public override System.Drawing.Color TooltipForeground { get; }
    }
    public abstract class TreeModelViewVisitor : JetBrains.UI.Controls.TreeView.ITreeModelVisitor, JetBrains.UI.TreeView.ITreeModelViewVisitor
    {
        protected TreeModelViewVisitor(JetBrains.UI.TreeView.TreeModelView modelView) { }
        public void Process(JetBrains.Application.Progress.IProgressIndicator progress) { }
        public void Process(System.Collections.Generic.ICollection<JetBrains.UI.TreeView.TreeModelViewNode> modelViewNodes, JetBrains.Application.Progress.IProgressIndicator progress) { }
        public virtual void VisitPresentableItem(JetBrains.CommonControls.IPresentableItem presentableItem, JetBrains.Application.Progress.IProgressIndicator progress) { }
        public virtual void VisitPresentableItemBlock(JetBrains.CommonControls.PresentableItemBlock presentableItemBlock, JetBrains.Application.Progress.IProgressIndicator progress) { }
        public virtual void VisitPresentableItemImage(JetBrains.CommonControls.PresentableItemImage presentableItemImage, JetBrains.Application.Progress.IProgressIndicator progress) { }
        public virtual void VisitRichString(JetBrains.UI.RichText.RichString richString, JetBrains.Application.Progress.IProgressIndicator progress) { }
        public virtual void VisitRichText(JetBrains.UI.RichText.RichText richText, JetBrains.Application.Progress.IProgressIndicator progress) { }
        public virtual void VisitRichTextBlock(JetBrains.UI.RichText.RichTextBlock richTextBlock, JetBrains.Application.Progress.IProgressIndicator progress) { }
        public virtual void VisitTreeModel(JetBrains.TreeModels.TreeModel modelNode, JetBrains.Application.Progress.IProgressIndicator progress) { }
        public virtual void VisitTreeModelNode(JetBrains.TreeModels.TreeModelNode modelNode, JetBrains.Application.Progress.IProgressIndicator progress) { }
        public void VisitTreeModelView(JetBrains.UI.TreeView.TreeModelView modelView, JetBrains.Application.Progress.IProgressIndicator progress) { }
        public virtual void VisitTreeModelViewNode(JetBrains.UI.TreeView.TreeModelViewNode modelViewNode, JetBrains.Application.Progress.IProgressIndicator progress) { }
        public virtual void VisitTreeModelViewNodeCell(JetBrains.UI.TreeView.TreeModelViewNode modelViewNode, JetBrains.UI.TreeView.TreeModelViewColumn modelViewColumn, JetBrains.Application.Progress.IProgressIndicator progress) { }
    }
    public class TreeModelViewWindowContext : JetBrains.UI.PopupWindowManager.PopupWindowContext
    {
        public TreeModelViewWindowContext(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.TreeView.TreeModelView treeControl, JetBrains.UI.TreeView.TreeModelViewNode treeListNode, JetBrains.ActionManagement.IActionManager actionManager, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        public TreeModelViewWindowContext(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.TreeView.TreeModelView treeControl, JetBrains.ActionManagement.IActionManager actionManager, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Icons.IThemedIconManager themedIconManager) { }
        public override JetBrains.UI.IPopupLayouter CreateLayouter(JetBrains.DataFlow.Lifetime lifetime) { }
    }
    public class TreeViewColumnHeaderRenderer : JetBrains.UI.TreeView.ITreeViewColumnHeaderRenderer
    {
        public TreeViewColumnHeaderRenderer() { }
        public void ApplyColorScheme(JetBrains.UI.TreeView.TreeModelViewColorScheme colorScheme) { }
        public void DrawBackground(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, bool mouseOver, bool pressed, int columnIndex) { }
        public void DrawCaption(string caption, System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, System.Drawing.Font font, bool mouseOver, bool pressed) { }
        public void DrawSortShape(System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, bool mouseOver, bool pressed, bool ascending) { }
    }
    public class TreeViewController : JetBrains.UI.TreeView.ITreeViewController
    {
        public TreeViewController(JetBrains.UI.Application.IUIApplication environment) { }
        public bool AutoExpandSingleChild { get; set; }
        public virtual bool DragDropSupported { get; }
        public virtual bool GuardActions { get; }
        public virtual bool QuickSearchSupported { get; }
        public bool RootNodesCollapsable { get; set; }
        public bool SupportMultiSelection { get; set; }
        public virtual bool VisibilitySupported { get; }
        public virtual void DragDrop(JetBrains.UI.TreeView.TreeModelViewNode viewNode, JetBrains.UI.TreeView.RelativeLocation location, System.Windows.Forms.DragEventArgs data) { }
        public virtual JetBrains.UI.TreeView.DragResponse Dragging(JetBrains.UI.TreeView.TreeModelViewNode viewNode, System.Windows.Forms.DragEventArgs data) { }
        public virtual System.Windows.Forms.DragDropEffects DragStarting(System.Collections.Generic.IList<JetBrains.UI.TreeView.TreeModelViewNode> selectedNodes, System.Windows.Forms.IDataObject dataObject) { }
        public virtual bool ExpandNodeInitially(JetBrains.TreeModels.TreeModelNode modelNode) { }
        public static JetBrains.UI.TreeView.TreeViewController GetDefault(JetBrains.UI.Application.IUIApplication environment) { }
        public virtual System.Collections.Generic.IEnumerable<JetBrains.TreeModels.TreeModelNode> GetDefaultNodes(JetBrains.TreeModels.TreeModel model) { }
        public virtual bool QuickSearchMatches(JetBrains.TreeModels.TreeModelNode modelNode, string quickSearchText) { }
        public virtual bool VisibilityState(JetBrains.TreeModels.TreeModelNode modelNode) { }
    }
}
namespace JetBrains.UI.Updates.Actions
{
    
    [JetBrains.ActionManagement.ActionHandlerAttribute(new string[] {
            "TestUpdatesXslt"})]
    public class TestUpdatesXsltActionHandler : JetBrains.ActionManagement.IActionHandler
    {
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    [JetBrains.Application.ShellComponentAttribute(JetBrains.Application.Components.ProgramConfigurations.NONE | JetBrains.Application.Components.ProgramConfigurations.STANDALONE | JetBrains.Application.Components.ProgramConfigurations.VS_ADDIN | JetBrains.Application.Components.ProgramConfigurations.ALL)]
    public class TestUpdatesXsltService
    {
        public TestUpdatesXsltService(JetBrains.UI.Updates.UpdatesPopupAlerts updatesAlerts, JetBrains.UI.Updates.UpdatesManager updatesManager, JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.UI.Application.IMainWindow mainWindow, JetBrains.UI.Application.OpensUri opensUri, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader) { }
        public void ShowTestDialog() { }
    }
}
namespace JetBrains.UI.Updates
{
    
    public class static UpdateFilterRunner
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IList<JetBrains.UI.Updates.UpdateInfo> RunFilter([JetBrains.Annotations.NotNullAttribute()] System.IO.Stream streamFilter, [JetBrains.Annotations.NotNullAttribute()] System.Action<System.Xml.XmlWriter> FWriteLocalEnvironmentData, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Updates.Utils.UpdateXsltTestResult testResult) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Xml.Xsl.XslCompiledTransform StreamToXslt(System.IO.Stream stream) { }
    }
    [System.Xml.Serialization.XmlRootAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute()]
    public class UpdateInfo
    {
        [System.Xml.Serialization.XmlElementAttribute()]
        public string CompanyName;
        [System.Xml.Serialization.XmlElementAttribute()]
        public string Description;
        [System.Xml.Serialization.XmlElementAttribute()]
        public string DownloadUri;
        [System.Xml.Serialization.XmlElementAttribute()]
        public string IconData;
        [System.Xml.Serialization.XmlElementAttribute()]
        public string InformationUri;
        [System.Xml.Serialization.XmlElementAttribute()]
        public bool IsFree;
        [System.Xml.Serialization.XmlElementAttribute()]
        public string PriceTag;
        [System.Xml.Serialization.XmlElementAttribute()]
        public string ProductFullName;
        [System.Xml.Serialization.XmlElementAttribute()]
        public string ProductName;
        [System.Xml.Serialization.XmlElementAttribute()]
        public string ProductVersion;
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] ReservedA;
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] ReservedE;
        public static readonly string RootElementName;
        [System.Xml.Serialization.XmlElementAttribute()]
        public string Title;
        [System.Xml.Serialization.XmlElementAttribute()]
        public string UpdateKind;
        [JetBrains.Annotations.NotNullAttribute()]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string Identity { get; }
        public void AssertVaild() { }
        public enum PredefinedUpdateKinds
        {
            Service = 0,
            Features = 1,
            Preview = 2,
        }
    }
    public class UpdateInfoContainer : System.IEquatable<JetBrains.UI.Updates.UpdateInfoContainer>
    {
        [JetBrains.Application.Configuration.XmlExternalizableAttribute("")]
        public readonly JetBrains.DataFlow.IProperty<System.DateTime> AdvertiseAfter;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Updates.UpdatesCategory Category;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(null, UseXmlSerializer=true)]
        public readonly JetBrains.DataFlow.IProperty<JetBrains.UI.Updates.UpdateInfo> DataProperty;
        public static readonly System.TimeSpan InitialSnoozeInterval;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute("00:00:00")]
        public readonly JetBrains.DataFlow.IProperty<System.TimeSpan> SnoozeInterval;
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Updates.UpdateInfo Data { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string Identity { get; }
        public void AssertValid() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Windows.Forms.Control CreateViewWinForms(JetBrains.UI.Application.OpensUri opensUri, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, JetBrains.UI.Application.IUIApplication environment) { }
        public override bool Equals(object obj) { }
        public bool Equals(JetBrains.UI.Updates.UpdateInfoContainer other) { }
        public override int GetHashCode() { }
        public void Snooze() { }
        public void Snooze(System.TimeSpan interval) { }
        public override string ToString() { }
        public void WriteToStream([JetBrains.Annotations.NotNullAttribute()] System.Xml.XmlWriter writer) { }
    }
    [System.Xml.Serialization.XmlRootAttribute("LocalInfo")]
    [System.Xml.Serialization.XmlTypeAttribute()]
    public class UpdateLocalEnvironmentInfo
    {
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringContainerAttribute()]
        [System.Xml.Serialization.XmlElementAttribute()]
        public JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.ColorsInfo Colors;
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringContainerAttribute()]
        [System.Xml.Serialization.XmlElementAttribute()]
        public JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DisplayInfo Display;
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringContainerAttribute()]
        [System.Xml.Serialization.XmlElementAttribute()]
        public JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.LicenseSubInfo License;
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringContainerAttribute()]
        [System.Xml.Serialization.XmlElementAttribute()]
        public JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.OsSubInfo Os;
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringContainerAttribute()]
        [System.Xml.Serialization.XmlElementAttribute()]
        public JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.ProductSubInfo Product;
        public const string RootElementName = "LocalInfo";
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringContainerAttribute()]
        [System.Xml.Serialization.XmlElementAttribute()]
        public JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.RuntimeSubInfo Runtime;
        [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
        [System.Xml.Serialization.XmlElementAttribute()]
        public System.Guid SessionId;
        public UpdateLocalEnvironmentInfo() { }
        public class ColorsInfo
        {
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string TextColor;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string WindowColor;
            public ColorsInfo() { }
            public ColorsInfo(string windowColor, string textColor) { }
        }
        public class DateTimeSubInfo
        {
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string Date;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string DateTime;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int Day;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int Days2000;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int Hour;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int Miniute;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int Month;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int Second;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string Time;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int Year;
            public DateTimeSubInfo(System.DateTime value) { }
        }
        public class DisplayInfo
        {
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public float DpiX;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public float DpiY;
            public DisplayInfo() { }
            public DisplayInfo(float dpiX, float dpiY) { }
        }
        public class LicenseSubInfo
        {
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string CompanyName;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int CustomerId;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string Edition;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int EditionCode;
            [System.Xml.Serialization.XmlElementAttribute()]
            public JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo ExpiresOn;
            [System.Xml.Serialization.XmlElementAttribute()]
            public JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo GeneratedOn;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public bool IsEndless;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public JetBrains.Application.License.LicenseType LicenseType;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public JetBrains.Application.License.LicenseMode Mode;
            [System.Xml.Serialization.XmlElementAttribute()]
            public JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo ProductVersion;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string UserName;
            public LicenseSubInfo() { }
        }
        public class OsSubInfo
        {
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string FullName;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string Platform;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlElementAttribute()]
            public string ProcessorArchitecture;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string ServicePack;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringContainerAttribute()]
            [System.Xml.Serialization.XmlElementAttribute()]
            public JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo Version;
        }
        public class ProductSubInfo
        {
            [System.Xml.Serialization.XmlElementAttribute()]
            public JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo BuiltOn;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string CompanyName;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string DisplayName;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string Edition;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string FullName;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string Name;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string Plugins;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringContainerAttribute()]
            [System.Xml.Serialization.XmlElementAttribute()]
            public JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo Version;
        }
        public class RuntimeSubInfo
        {
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string AllAssembliesResourceName;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string ApplicationDescriptorTypeFullName;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string AssemblyConfiguration;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string InstallDir;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public bool IsInInternalMode;
        }
        public class VersionSubInfo
        {
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int Build;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string Dot2;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string Dot3;
            [JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute()]
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public string Dot4;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int Major;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int Minor;
            [System.Xml.Serialization.XmlAttributeAttribute()]
            public int Revision;
            public VersionSubInfo(System.Version version) { }
            public VersionSubInfo() { }
        }
    }
    public class UpdatesCategory
    {
        [JetBrains.Application.Configuration.XmlExternalizableAttribute("23:00:00")]
        public System.TimeSpan CheckForUpdatesInterval;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ISignal<JetBrains.DataFlow.OutEventArgs<object>> CustomizeLocalEnvironmentInfo;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ISignal<JetBrains.DataFlow.OutEventArgs<System.Collections.Generic.IDictionary<string, string>>> CustomizeQueryStringParams;
        public static readonly System.TimeSpan DownloadedDataExpirationPeriod;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<bool> IsActive;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute("")]
        public System.DateTime LastActivationDate;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute("")]
        public System.DateTime LastDownloadAttemptDate;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute("Never downloaded.")]
        public string LastDownloadSummary;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute("")]
        public System.DateTime LastSuccessfulDownloadDate;
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Application.Configuration.XmlExternalizableAttribute("«ERROR»")]
        public string Name;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ListEvents<JetBrains.UI.Updates.UpdateInfoContainer> UpdateInfos;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(null)]
        public System.Uri UpdatesFilterUri;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Updates.UpdatesManager UpdatesManager;
        public static readonly string XmlElementName;
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Application.Configuration.XmlExternalizableAttribute("0.0.0.0")]
        public string LastSuccessfulDownloadVersion { get; set; }
        public JetBrains.UI.Updates.UpdatesCategory.LocalEnvironmentInfo CollectLocalEnvironmentInfo() { }
        public bool IsEligibleForNotifications() { }
        public void RegisterDownloadResult(bool success, string summary, JetBrains.UI.Updates.UpdateInfo[] infos) { }
        public override string ToString() { }
        public class LocalEnvironmentInfo
        {
            public readonly object FilterableData;
            public readonly string QueryString;
            public LocalEnvironmentInfo([JetBrains.Annotations.NotNullAttribute()] object filterableData, [JetBrains.Annotations.NotNullAttribute()] string queryString) { }
            public void WriteFilterableData([JetBrains.Annotations.NotNullAttribute()] System.Xml.XmlWriter writer) { }
        }
    }
    public class UpdatesDownloaderSession
    {
        public readonly JetBrains.Threading.JetDispatcher Dispatcher;
        public readonly JetBrains.DataFlow.Lifetime Lifetime;
        public UpdatesDownloaderSession(JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Updates.UpdatesCategory category, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader) { }
        public void BeginRun() { }
        public JetBrains.UI.Updates.Utils.UpdateXsltTestResult TestRun() { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class UpdatesLocalInfoManager
    {
        public UpdatesLocalInfoManager(JetBrains.Application.IApplicationDescriptor product, JetBrains.Application.Env.RunsProducts.ProductConfigurations productConfigurations, JetBrains.Application.Env.Components.ProductSettingsLocation productSettingsLocation, JetBrains.Application.ActivityTrackingNew.PermanentUserId permanentUserId, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow mainWindow, JetBrains.UI.Application.ILicenseCheckerComponent licenseCheckerComponent, JetBrains.UI.Components.Theming.IColorThemeManager themeManager, JetBrains.Application.PluginSupport.PluginsDirectory pluginsDirectory) { }
        protected void CollectCore([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Updates.UpdateLocalEnvironmentInfo info) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public virtual JetBrains.UI.Updates.UpdateLocalEnvironmentInfo CollectLocalEnvironmentInfo() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.Dictionary<string, string> CollectQueryStringParams() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.Dictionary<string, string> CollectQueryStringParams(object localinfo) { }
        [System.AttributeUsageAttribute(System.AttributeTargets.Field | System.AttributeTargets.All, AllowMultiple=false)]
        public class QueryStringContainerAttribute : System.Attribute { }
        [System.AttributeUsageAttribute(System.AttributeTargets.Field | System.AttributeTargets.All, AllowMultiple=false)]
        public class QueryStringParamAttribute : System.Attribute { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class UpdatesManager
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Updates.UpdatesManagerCategories Categories;
        public JetBrains.DataFlow.IProperty<bool> IsDownloadUpdateDataAllowed;
        readonly JetBrains.Application.IApplicationDescriptor myApplicationDescriptor;
        readonly JetBrains.Threading.IThreading myThreading;
        public static readonly bool OptionTrace;
        public UpdatesManager(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Threading.IThreading threading, JetBrains.UI.Updates.UpdatesLocalInfoManager updatesLocalInfoManager, JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.Application.Env.Components.ProductSettingsLocation productSettingsLocation, JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Updates.UpdatesLocalInfoManager LocalEnvironmentInfo { get; }
        protected virtual void Init(JetBrains.DataFlow.Lifetime lifetime, JetBrains.Application.IApplicationDescriptor applicationDescriptor, JetBrains.Application.Env.Components.ProductSettingsLocation settingsLocation, JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IList<JetBrains.UI.Updates.UpdateInfo> RunUpdatesFilter([JetBrains.Annotations.NotNullAttribute()] System.IO.Stream streamFilter, [JetBrains.Annotations.NotNullAttribute()] System.Action<System.Xml.XmlWriter> FWriteLocalEnvironmentData, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Updates.Utils.UpdateXsltTestResult result) { }
        public JetBrains.UI.Updates.Utils.UpdateXsltTestResult TestUpdatesXstl([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Updates.UpdatesCategory category, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Communication.WebProxySettingsReader webProxySettingsReader) { }
    }
    public class UpdatesManagerCategories : JetBrains.DataFlow.DictionaryEvents<string, JetBrains.UI.Updates.UpdatesCategory>
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Updates.UpdatesManager UpdatesManager;
        public UpdatesManagerCategories([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Updates.UpdatesManager upman) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Updates.UpdatesCategory ShellProductCategory { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Updates.UpdatesCategory Add([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] System.Uri uriUpdatesFilter) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.UI.Updates.UpdatesCategory AddOrActivate([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] System.Uri uriUpdatesFilter) { }
        public void ReadFromXml([JetBrains.Annotations.NotNullAttribute()] System.Xml.XmlReader reader) { }
        public void WriteToXml([JetBrains.Annotations.NotNullAttribute()] System.Xml.XmlWriter writer) { }
    }
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    public class UpdatesManagerSettingsUpgrader : JetBrains.Application.Configuration.IXmlReadable, JetBrains.Application.Configuration.Upgrade.IGlobalSettingsUpgrader, JetBrains.Application.Configuration.Upgrade.ISettingsUpgrader
    {
        public void Upgrade(JetBrains.Application.Configuration.IComponentSettingsProvider legacySettingsProvider, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore, JetBrains.DataFlow.Lifetime upgradeLifetime) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.Application.Settings.EnvironmentSettings), "UpdatesManager settings")]
    public class UpdatesMangerSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute("00:00:30", "DeferInitDownloadTime")]
        public System.TimeSpan DeferInitDownloadTime;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Whether to download the data for new updates.")]
        public bool IsDownloadUpdateDataAllowed;
    }
    public class UpdatesPage : JetBrains.UI.Options.Helpers.AOptionsPage
    {
        public static readonly JetBrains.UI.Options.OptionsPageAttribute OptionsPageAttribute;
        public const string Pid = "Updates";
        public UpdatesPage(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Application.IUIApplication environment, JetBrains.UI.Updates.UpdatesManager updatesman, JetBrains.UI.CommonControls.Fonts.FontsManager fontsman, JetBrains.Application.IApplicationDescriptor product, JetBrains.UI.Application.OpensUri opensUri, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, JetBrains.UI.Options.OptionsSettingsSmartContext context) { }
        public override bool OnOk() { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class UpdatesPageComponent
    {
        public readonly JetBrains.DataFlow.IProperty<bool> IsEnabled;
        public UpdatesPageComponent([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Options.IOptionPagesList optionPagesList, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Updates.UpdatesManager updatesManager) { }
        protected virtual System.Type GetOptionsPage() { }
        protected virtual JetBrains.UI.Options.OptionsPageAttribute GetOptionsPageAttribute() { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class UpdatesPopupAlerts
    {
        public UpdatesPopupAlerts(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Components.UserActivityMonitor userActivityMonitor, JetBrains.UI.Updates.UpdatesManager updatesManager, JetBrains.Application.IApplicationDescriptor product, JetBrains.UI.Application.IMainWindow mainWindow, JetBrains.UI.Application.OpensUri opensUri, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus, JetBrains.UI.Application.IUIApplication environment) { }
        public void ShowUnreadUpdates(JetBrains.UI.Updates.UpdatesManager updatesManager, JetBrains.Application.IApplicationDescriptor product, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow mainwin, JetBrains.UI.Application.OpensUri opensUri, JetBrains.UI.PopupMenu.JetPopupMenus jetPopupMenus) { }
    }
    public class UpdatesShellProductCategoryOwner
    {
        public static readonly string CategoryName;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.UI.Updates.UpdatesManager UpdatesManager;
        public UpdatesShellProductCategoryOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Updates.UpdatesManager upman) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.UI.Updates.UpdatesCategory Category { get; }
    }
}
namespace JetBrains.UI.Updates.Utils
{
    
    public class UpdateXsltTestResult
    {
        public System.Exception Exception { get; set; }
        public string FilterableData { get; set; }
        public string Xml { get; set; }
        public string Xslt { get; set; }
    }
}
namespace JetBrains.UI.Utils
{
    
    public class static ExceptionViewer
    {
        public static void Show(System.Exception exception, string title, bool expanded = False) { }
    }
    public class static FlowDocumentUtil
    {
        public static System.Windows.Documents.Span ConvertDescriptionToSpan(string description) { }
    }
    public class WaitCursorCookie : System.IDisposable
    {
        public WaitCursorCookie() { }
        public void Dispose() { }
    }
}
namespace JetBrains.UI.Validation
{
    
    public class PredicateValidator : JetBrains.CommonControls.Validation.ControlValidator
    {
        public PredicateValidator([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, JetBrains.CommonControls.Validation.ValidatorSeverity severity, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText message, [JetBrains.Annotations.NotNullAttribute()] System.Func<bool> predicate, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public PredicateValidator([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, JetBrains.CommonControls.Validation.ValidatorSeverity severity, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.UI.RichText.RichText> messageEvaluator, [JetBrains.Annotations.NotNullAttribute()] System.Func<bool> predicate, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public System.Func<bool> Predicate { get; }
        public override void Update() { }
    }
    public class PredicateValidatorReentrantSafe : JetBrains.CommonControls.Validation.ControlValidator
    {
        public PredicateValidatorReentrantSafe([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, JetBrains.CommonControls.Validation.ValidatorSeverity severity, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.RichText.RichText message, [JetBrains.Annotations.NotNullAttribute()] System.Func<bool> predicate, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public PredicateValidatorReentrantSafe([JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.Control control, JetBrains.CommonControls.Validation.ValidatorSeverity severity, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.UI.RichText.RichText> messageEvaluator, [JetBrains.Annotations.NotNullAttribute()] System.Func<bool> predicate, JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager, JetBrains.UI.Application.IUIApplication environment) { }
        public System.Func<bool> Predicate { get; }
        public override void Update() { }
    }
    public class static ValidatorUtil
    {
        public static JetBrains.Application.DataContext.IDataContext GetDataContext(object host) { }
    }
}
namespace JetBrains.UI.WindowManagement
{
    
    public class static FrameFocusHelperEx
    {
        public static T KeepCurrentFrame<T>(this JetBrains.UI.WindowManagement.IFrameFocusHelper frameFocusHelper, [JetBrains.Annotations.NotNullAttribute()] System.Func<T> nested) { }
    }
    public interface IFrameFocusHelper
    {
        void KeepCurrentFrame([JetBrains.Annotations.InstantHandleAttribute()] [JetBrains.Annotations.NotNullAttribute()] System.Action nested);
    }
    public class WindowFrame : System.IDisposable
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IPropertyBag Bag;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ISimpleSignal Closed;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ObsoleteLifetimeAndDefinitionAtTheSameTime Disposables;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.IProperty<bool> IsVisibleOnScreen;
        public static readonly bool OptionTrace;
        public readonly JetBrains.DataFlow.IProperty<System.IntPtr> RootParentHwnd;
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly JetBrains.DataFlow.ISimpleSignal SwitchToFrameRequested;
        public readonly JetBrains.DataFlow.IProperty<object> UiElement;
        public WindowFrame([JetBrains.Annotations.NotNullAttribute()] JetBrains.Threading.IThreading threading) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.Threading.IThreading Threading { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.WindowManagement.WindowFrame CreateDummyFrame(JetBrains.Threading.IThreading threading) { }
        public void Dispose() { }
    }
    public class static WindowFrameEx
    {
        public static JetBrains.UI.WindowManagement.WindowFrame AttachToHwndStatic([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.WindowManagement.WindowFrame frame, [JetBrains.Annotations.NotNullAttribute()] System.Windows.Forms.IWin32Window hwnd) { }
        public static void AttachToRootParentLive([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.WindowManagement.WindowFrame frame, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Void* hwndSampleWithinFrame, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager hookman) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.WindowManagement.WindowFrame CreateChildFrame([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.WindowManagement.WindowFrame thіs) { }
    }
}
namespace JetBrains.UI.Wpf
{
    
    [JetBrains.Application.ShellComponentAttribute()]
    public class AutomationViewsRegistry : JetBrains.UI.Wpf.IAutomationViewsRegistry
    {
        public AutomationViewsRegistry([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Env.RunsProducts.ProductPartsCatalogSet catalogset, JetBrains.Util.ILogger logger) { }
    }
    public class EitherControlView : System.Windows.Controls.Decorator
    {
        public EitherControlView() { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class EitherControlViewRegistrar
    {
        public EitherControlViewRegistrar(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Wpf.IAutomationViewsRegistry registry) { }
    }
    public interface IAutomationViewsRegistry
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Windows.ResourceDictionary DataTemplatesResourceDictionary { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.DataFlow.DictionaryEvents<JetBrains.UI.Wpf.ViewKey, System.Type> RegisteredViews { get; }
        void RegisterManually([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] System.Type typeAutomation, [JetBrains.Annotations.NotNullAttribute()] System.Type typeView, JetBrains.UI.Wpf.ViewKind viewkind = 0);
        void RegisterManually<TAutomation, TView>([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Wpf.ViewKind viewkind = 0);
    }
    public class static IAutomationViewsRegistryEx
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.CommonControls.IWindowlessControl TryCreateWindowlessControlView([JetBrains.Annotations.NotNullAttribute()] this JetBrains.UI.Wpf.IAutomationViewsRegistry thіs, [JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Wpf.IAutomation oAutomation, JetBrains.Application.Components.IComponentContainer containerForFactoring = null) { }
    }
    public interface IPlatformResourceDictionary
    {
        [JetBrains.Annotations.NotNullAttribute()]
        System.Windows.ResourceDictionary PlatformResources { get; }
    }
    public interface IView { }
    public interface IView<TAutomation> : JetBrains.UI.Wpf.IView
        where TAutomation : JetBrains.UI.Wpf.IAutomation { }
    [JetBrains.Application.ShellComponentAttribute()]
    public class PlatformResourceDictionary : JetBrains.UI.Wpf.IPlatformResourceDictionary
    {
        public PlatformResourceDictionary() { }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Windows.ResourceDictionary PlatformResources { get; }
    }
    public class static PlatformResourcesBehavior
    {
        public static readonly System.Windows.DependencyProperty DefineProperty;
        public static JetBrains.UI.Wpf.IPlatformResourceDictionary GetDefine(System.Windows.UIElement element) { }
        public static void SetDefine(System.Windows.UIElement element, JetBrains.UI.Wpf.IPlatformResourceDictionary value) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class PublishAutomationViewsRegistryToPlatformResources
    {
        public PublishAutomationViewsRegistryToPlatformResources([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Wpf.IAutomationViewsRegistry automationViewsRegistry, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Wpf.IPlatformResourceDictionary platformResourceDictionary) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class PublishDefaultControlStyles
    {
        public PublishDefaultControlStyles([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Wpf.IPlatformResourceDictionary platformResourceDictionary) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class PublishPlatformResourceDictionaryToAvalonApplicationV3
    {
        public PublishPlatformResourceDictionaryToAvalonApplicationV3([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Wpf.IPlatformResourceDictionary platformResourceDictionary) { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class PublishThemeColorsToPlatformResources
    {
        public PublishThemeColorsToPlatformResources([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Components.Theming.IColorThemeManager themeManager, [JetBrains.Annotations.NotNullAttribute()] JetBrains.UI.Wpf.IPlatformResourceDictionary platformResourceDictionary) { }
    }
    [JetBrains.Annotations.BaseTypeRequiredAttribute(typeof(JetBrains.UI.Wpf.IView<>))]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All)]
    public class ViewAttribute : JetBrains.Application.Parts.PartAttribute
    {
        public readonly JetBrains.UI.Wpf.ViewKind Kind;
        public ViewAttribute(JetBrains.UI.Wpf.ViewKind kind = 0) { }
    }
    public abstract class ViewControl<TAutomation> : System.Windows.Controls.Decorator, JetBrains.UI.Wpf.IView, JetBrains.UI.Wpf.IView<TAutomation>
        where TAutomation :  class, JetBrains.UI.Wpf.IAutomation
    {
        protected ViewControl() { }
        protected ViewControl([JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.DataFlow.Lifetime, TAutomation, System.Windows.UIElement> FRenderView) { }
        protected virtual System.Windows.UIElement OnRenderView([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.NotNullAttribute()] TAutomation automation) { }
    }
    public struct ViewKey : System.IEquatable<JetBrains.UI.Wpf.ViewKey>
    {
        public ViewKey([JetBrains.Annotations.NotNullAttribute()] System.Type automationType, JetBrains.UI.Wpf.ViewKind viewKind) { }
        public System.Type AutomationType { get; }
        public JetBrains.UI.Wpf.ViewKind ViewKind { get; }
        public bool Equals(JetBrains.UI.Wpf.ViewKey other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public enum ViewKind
    {
        Wpf = 0,
        WindowlessControl = 1,
        WinForms = 2,
        Unattended = 3,
    }
    public class WinFormsControlView : System.Windows.Controls.Decorator
    {
        public WinFormsControlView() { }
    }
    [JetBrains.Application.ShellComponentAttribute()]
    public class WinFormsControlViewRegistrar
    {
        public WinFormsControlViewRegistrar(JetBrains.DataFlow.Lifetime lifetime, JetBrains.UI.Wpf.IAutomationViewsRegistry registry) { }
    }
}
namespace JetBrains.UI.Wpf.Converters
{
    
    public class BitmapToImageSourceConverter : System.Windows.Data.IValueConverter
    {
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class BooleanToVisibilityConverter : System.Windows.Data.IValueConverter
    {
        public BooleanToVisibilityConverter() { }
        public bool Inverted { get; set; }
        public System.Windows.Visibility NonVisibleValue { get; set; }
        public bool NullableSubstitution { get; set; }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class EnumBooleanConverter : System.Windows.Data.IValueConverter
    {
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class EnumDescriptionConverter : System.Windows.Data.IValueConverter
    {
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class EnumToVisibilityConverter : System.Windows.Data.IValueConverter
    {
        public EnumToVisibilityConverter() { }
        public bool Inverted { get; set; }
        public System.Windows.Visibility NonVisibleValue { get; set; }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class FakeGridViewColumnCollectionConverter : System.Windows.Data.IValueConverter
    {
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class InversionConverter : System.Windows.Data.IValueConverter
    {
        public bool NullableSubstitution { get; set; }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class NullableConverter : System.Windows.Data.IValueConverter
    {
        public bool NullableSubstitution { get; set; }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
    public class NullToVisibilityConverter : System.Windows.Data.IValueConverter
    {
        public NullToVisibilityConverter() { }
        public bool Inverted { get; set; }
        public System.Windows.Visibility NonVisibleValue { get; set; }
        public object Convert(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
        public object ConvertBack(object value, System.Type targetType, object parameter, System.Globalization.CultureInfo culture) { }
    }
}
namespace JetBrains.UI.Wpf.DragDrop
{
    
    public class DefaultDragHandler : JetBrains.UI.Wpf.DragDrop.IDragSource
    {
        public virtual void Dropped(JetBrains.UI.Wpf.DragDrop.IDropInfo dropInfo) { }
        public virtual void StartDrag(JetBrains.UI.Wpf.DragDrop.IDragInfo dragInfo) { }
    }
    public class DefaultDropHandler : JetBrains.UI.Wpf.DragDrop.IDropTarget
    {
        protected static bool CanAcceptData(JetBrains.UI.Wpf.DragDrop.IDropInfo dropInfo) { }
        public virtual int CoerceInsertIndex(JetBrains.UI.Wpf.DragDrop.IDropInfo dropInfo) { }
        public virtual void DragOver(JetBrains.UI.Wpf.DragDrop.IDropInfo dropInfo) { }
        public virtual void Drop(JetBrains.UI.Wpf.DragDrop.IDropInfo dropInfo) { }
        protected static System.Collections.IEnumerable ExtractData(object data) { }
        protected static System.Collections.IList GetList(System.Collections.IEnumerable enumerable) { }
        protected static bool IsChildOf(System.Windows.UIElement targetItem, System.Windows.UIElement sourceItem) { }
        protected static bool TestCompatibleTypes(System.Collections.IEnumerable target, object data) { }
    }
    [JetBrains.Annotations.UsedImplicitlyAttribute()]
    public class static DragDrop
    {
        public static readonly System.Windows.DataFormat DataFormat;
        public static readonly System.Windows.DependencyProperty DragAdornerTemplateProperty;
        public static readonly System.Windows.DependencyProperty DragHandlerProperty;
        public static readonly System.Windows.DependencyProperty DropHandlerProperty;
        public static readonly System.Windows.DependencyProperty IsDragSourceProperty;
        public static readonly System.Windows.DependencyProperty IsDropTargetProperty;
        public static JetBrains.UI.Wpf.DragDrop.IDragSource DefaultDragHandler { get; set; }
        public static JetBrains.UI.Wpf.DragDrop.IDropTarget DefaultDropHandler { get; set; }
        public static System.Windows.DataTemplate GetDragAdornerTemplate(System.Windows.UIElement target) { }
        public static JetBrains.UI.Wpf.DragDrop.IDragSource GetDragHandler(System.Windows.UIElement target) { }
        public static JetBrains.UI.Wpf.DragDrop.IDropTarget GetDropHandler(System.Windows.UIElement target) { }
        public static bool GetIsDragSource(System.Windows.UIElement target) { }
        public static bool GetIsDropTarget(System.Windows.UIElement target) { }
        public static void SetDragAdornerTemplate(System.Windows.UIElement target, System.Windows.DataTemplate value) { }
        public static void SetDragHandler(System.Windows.UIElement target, JetBrains.UI.Wpf.DragDrop.IDragSource value) { }
        public static void SetDropHandler(System.Windows.UIElement target, JetBrains.UI.Wpf.DragDrop.IDropTarget value) { }
        public static void SetIsDragSource(System.Windows.UIElement target, bool value) { }
        public static void SetIsDropTarget(System.Windows.UIElement target, bool value) { }
    }
    public class DragInfo : JetBrains.UI.Wpf.DragDrop.IDragInfo
    {
        public DragInfo(object sender, System.Windows.Input.MouseButtonEventArgs e) { }
        public object Data { get; set; }
        public System.Windows.Point DragStartPosition { get; }
        public System.Windows.DragDropEffects Effects { get; set; }
        public System.Windows.Input.MouseButton MouseButton { get; }
        public System.Collections.IEnumerable SourceCollection { get; }
        public object SourceItem { get; }
        public System.Collections.IEnumerable SourceItems { get; }
        public System.Windows.UIElement VisualSource { get; }
        public System.Windows.UIElement VisualSourceItem { get; }
    }
    public class DropInfo : JetBrains.UI.Wpf.DragDrop.IDropInfo
    {
        public DropInfo(object sender, System.Windows.DragEventArgs e, JetBrains.UI.Wpf.DragDrop.DragInfo dragInfo) { }
        public object Data { get; }
        public JetBrains.UI.Wpf.DragDrop.IDragInfo DragInfo { get; }
        public System.Windows.Point DropPosition { get; }
        public System.Type DropTargetAdorner { get; set; }
        public System.Windows.DragDropEffects Effects { get; set; }
        public int InsertIndex { get; }
        public System.Collections.IEnumerable TargetCollection { get; }
        public System.Windows.Data.CollectionViewGroup TargetGroup { get; }
        public object TargetItem { get; }
        public System.Windows.UIElement VisualTarget { get; }
        public System.Windows.UIElement VisualTargetItem { get; }
        public System.Windows.Controls.Orientation VisualTargetOrientation { get; }
    }
    public abstract class DropTargetAdorner : System.Windows.Documents.Adorner
    {
        protected DropTargetAdorner(System.Windows.UIElement adornedElement) { }
        public JetBrains.UI.Wpf.DragDrop.DropInfo DropInfo { get; set; }
        public void Detatch() { }
    }
    public class DropTargetAdorners
    {
        public static System.Type Highlight { get; }
        public static System.Type Insert { get; }
    }
    public class DropTargetHighlightAdorner : JetBrains.UI.Wpf.DragDrop.DropTargetAdorner
    {
        public DropTargetHighlightAdorner(System.Windows.UIElement adornedElement) { }
        protected override void OnRender(System.Windows.Media.DrawingContext drawingContext) { }
    }
    public class DropTargetInsertionAdorner : JetBrains.UI.Wpf.DragDrop.DropTargetAdorner
    {
        public DropTargetInsertionAdorner(System.Windows.UIElement adornedElement) { }
        protected override void OnRender(System.Windows.Media.DrawingContext drawingContext) { }
    }
    public interface IDragInfo
    {
        object Data { get; set; }
        System.Windows.Point DragStartPosition { get; }
        System.Windows.DragDropEffects Effects { get; set; }
        System.Windows.Input.MouseButton MouseButton { get; }
        System.Collections.IEnumerable SourceCollection { get; }
        object SourceItem { get; }
        System.Collections.IEnumerable SourceItems { get; }
        System.Windows.UIElement VisualSource { get; }
        System.Windows.UIElement VisualSourceItem { get; }
    }
    public interface IDragSource
    {
        void Dropped(JetBrains.UI.Wpf.DragDrop.IDropInfo dropInfo);
        void StartDrag(JetBrains.UI.Wpf.DragDrop.IDragInfo dragInfo);
    }
    public interface IDropInfo
    {
        object Data { get; }
        JetBrains.UI.Wpf.DragDrop.IDragInfo DragInfo { get; }
        System.Windows.Point DropPosition { get; }
        System.Type DropTargetAdorner { get; set; }
        System.Windows.DragDropEffects Effects { get; set; }
        int InsertIndex { get; }
        System.Collections.IEnumerable TargetCollection { get; }
        System.Windows.Data.CollectionViewGroup TargetGroup { get; }
        object TargetItem { get; }
        System.Windows.UIElement VisualTarget { get; }
        System.Windows.UIElement VisualTargetItem { get; }
        System.Windows.Controls.Orientation VisualTargetOrientation { get; }
    }
    public interface IDropTarget
    {
        int CoerceInsertIndex(JetBrains.UI.Wpf.DragDrop.IDropInfo dropInfo);
        void DragOver(JetBrains.UI.Wpf.DragDrop.IDropInfo dropInfo);
        void Drop(JetBrains.UI.Wpf.DragDrop.IDropInfo dropInfo);
    }
}
namespace JetBrains.UI.Wpf.DragDrop.Utilities
{
    
    public class static ItemsControlExtensions
    {
        public static bool CanSelectMultipleItems(this System.Windows.Controls.ItemsControl itemsControl) { }
        public static System.Windows.UIElement GetItemContainer(this System.Windows.Controls.ItemsControl itemsControl, System.Windows.UIElement child) { }
        public static System.Windows.UIElement GetItemContainerAt(this System.Windows.Controls.ItemsControl itemsControl, System.Windows.Point position) { }
        public static System.Windows.UIElement GetItemContainerAt(this System.Windows.Controls.ItemsControl itemsControl, System.Windows.Point position, System.Windows.Controls.Orientation searchDirection) { }
        public static System.Type GetItemContainerType(this System.Windows.Controls.ItemsControl itemsControl) { }
        public static bool GetItemSelected(this System.Windows.Controls.ItemsControl itemsControl, object item) { }
        public static System.Windows.Controls.Orientation GetItemsPanelOrientation(this System.Windows.Controls.ItemsControl itemsControl) { }
        public static System.Collections.IEnumerable GetSelectedItems(this System.Windows.Controls.ItemsControl itemsControl) { }
        public static void SetItemSelected(this System.Windows.Controls.ItemsControl itemsControl, object item, bool value) { }
        public static void SetSelectedItem(this System.Windows.Controls.ItemsControl itemsControl, object item) { }
    }
    public class TypeUtilities
    {
        public static System.Collections.IEnumerable CreateDynamicallyTypedList(System.Collections.IEnumerable source) { }
        public static System.Type GetCommonBaseClass(System.Collections.IEnumerable e) { }
        public static System.Type GetCommonBaseClass(System.Type[] types) { }
    }
    public class static VisualTreeExtensions
    {
        public static T GetVisualAncestor<T>(this System.Windows.DependencyObject d)
            where T :  class { }
        public static System.Windows.DependencyObject GetVisualAncestor(this System.Windows.DependencyObject d, System.Type type) { }
        public static T GetVisualDescendent<T>(this System.Windows.DependencyObject d)
            where T : System.Windows.DependencyObject { }
        public static System.Collections.Generic.IEnumerable<T> GetVisualDescendents<T>(this System.Windows.DependencyObject d)
            where T : System.Windows.DependencyObject { }
    }
}
namespace JetBrains.WindowManagement.Actions
{
    
    [JetBrains.ActionManagement.ActionHandlerAttribute(new string[] {
            "WindowManager.ActivateRecentTool"})]
    public class ActivateToolContentActionHandler : JetBrains.ActionManagement.IActionHandler
    {
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
    [JetBrains.ActionManagement.ActionHandlerAttribute(new string[] {
            "WindowManager.CloseRecentTool"})]
    public class CloseToolContentActionHandler : JetBrains.ActionManagement.IActionHandler
    {
        public void Execute(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.DelegateExecute nextExecute) { }
        public bool Update(JetBrains.Application.DataContext.IDataContext context, JetBrains.ActionManagement.ActionPresentation presentation, JetBrains.ActionManagement.DelegateUpdate nextUpdate) { }
    }
}
namespace JetBrains.WindowManagement
{
    
    public class static MainWindowLayouter
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.IPopupLayouter CreateCenteredCorner([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow mainWindow, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.UI.IPopupLayouter CreateCenteredMiddle([JetBrains.Annotations.NotNullAttribute()] JetBrains.DataFlow.Lifetime lifetime, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.UI.Application.IMainWindow mainWindow, [JetBrains.Annotations.NotNullAttribute()] JetBrains.Application.Interop.NativeHook.IWindowsHookManager windowsHookManager) { }
    }
}
namespace XamlGeneratedNamespace
{
    
    public sealed class GeneratedInternalTypeHelper : System.Windows.Markup.InternalTypeHelper
    {
        protected override void AddEventHandler(System.Reflection.EventInfo eventInfo, object target, System.Delegate handler) { }
        protected override System.Delegate CreateDelegate(System.Type delegateType, object target, string handler) { }
        protected override object CreateInstance(System.Type type, System.Globalization.CultureInfo culture) { }
        protected override object GetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, System.Globalization.CultureInfo culture) { }
        protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) { }
    }
}