[assembly: JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute(IconNames=new string[] {
        "VbModule",
        "VbExtensionFunction",
        "Vbasic",
        "VbPropertyWithParams",
        "VbDelegateFunction",
        "VbSub",
        "VbAnonymousMethod",
        "VbExtensionSub",
        "VbDelegateSub",
        "VbFunction"}, IconPackResourceIdentification="JetBrains.ReSharper.Psi.VB;component/resources/PsiVBThemedIcons/ThemedIcons.PsiVB" +
    ".Generated.Xaml")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute(@"JetBrains.ReSharper.PsiTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010087f63ba6a789c30e210e7ec987234ad9fe33baf7367993bab1b312d6f72ca296b91ed5c658964ffb9e7570eb184a527c68c6bdba41cfe67d8cfd3f888234206bf39205a3652d3af3445bb6f715fdac532e289fea41229bac37762b67eb16f58fee717d2465fca9ee17f08ed16772a1fc52c1c17022e1f0d9bdd004524a663aca")]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:shemas-jetbrains-com:ui-application-icons-psi-vb", "JetBrains.ReSharper.Psi.VB.Resources")]

namespace JetBrains.ReSharper.Psi.VB
{
    
    public class static ArgumentInfoExtension
    {
        public static JetBrains.ReSharper.Psi.IType GetImplicitlyConvertedTo(this JetBrains.ReSharper.Psi.VB.IVBArgumentInfo vbArgumentInfo) { }
        public static bool IsClassifiedAsVariable(this JetBrains.ReSharper.Psi.VB.IVBArgumentInfo vbArgumentInfo) { }
    }
    public enum ArgumentKind
    {
        Positional = 0,
        Empty = 1,
        Named = 2,
    }
    public interface IAnonymousMethod : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParametersOwner { }
    public interface ILambdaParameter : JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParameter, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable
    {
        bool IsExplicitlyTyped { get; }
        bool IsImplicitlyTyped { get; }
    }
    public class static InvocationInfoExtension
    {
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> AllArguments(this JetBrains.ReSharper.Psi.VB.IVBInvocationInfo invocation, bool isCandidateExtension) { }
    }
    public class static InvocationReferenceExtension
    {
        public static bool IsMeaningLess(this JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
    }
    public interface IVBArgumentInfo : JetBrains.ReSharper.Psi.IArgumentInfo
    {
        string ArgumentName { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.IVBInvocationInfo Invocation { get; }
        JetBrains.ReSharper.Psi.VB.ArgumentKind Kind { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible ManagedConvertible { get; }
        JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        bool IsClassifiedAsVariable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
    }
    public interface IVBInvocationInfo : JetBrains.ReSharper.Psi.IInvocationInfo
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> Arguments { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.IVBArgumentInfo ExtensionQualifier { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode Node { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.IVBInvocationReference Reference { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> TypeArguments { get; }
    }
    public interface IVBInvocationReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.VB.IVBInvocationInfo Invocation { get; }
        string InvocationName();
    }
    public interface IVBLocalVariable : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ILocalVariable, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable
    {
        bool IsImplicitlyTyped { get; }
    }
    public interface IVBModule : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClass, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner { }
    public interface IVBPsiSourceFileProperties : JetBrains.ReSharper.Psi.ICustomPsiSourceFileProperties
    {
        [JetBrains.Annotations.NotNullAttribute()]
        string[] SuppressWarnings { get; }
        bool TreatWarningsAsErrors { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string[] WarningsAsErrors { get; }
        bool ProjectExplicitOff();
        bool ProjectInferOff();
        bool ProjectStrictOff();
    }
    public class OperatorInstance : JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.ISignOperator>
    {
        public OperatorInstance(JetBrains.ReSharper.Psi.ISignOperator element) { }
        public OperatorInstance(JetBrains.ReSharper.Psi.ISignOperator element, JetBrains.ReSharper.Psi.Resolve.ISubstitution baseSubstitution) { }
        public JetBrains.ReSharper.Psi.ISignOperator Operator { get; }
    }
    public class static ReSharperControlConstructIDs
    {
        public const string UnusedImportClause = "UnusedImportClause";
    }
    public class StatementsRange : JetBrains.ReSharper.Psi.Tree.IStatementsRange, JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange
    {
        public StatementsRange(JetBrains.ReSharper.Psi.ITreeRange treeRange) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IStatement> Statements { get; }
        public JetBrains.ReSharper.Psi.ITreeRange TreeRange { get; }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange FromSingleStatement(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement statement) { }
    }
    public abstract class VBElementFactory
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration CreateAccessorDeclaration(JetBrains.ReSharper.Psi.AccessorKind kind);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration CreateAccessorDeclaration(JetBrains.ReSharper.Psi.AccessorKind kind, JetBrains.ReSharper.Psi.IType type);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IVBArgument CreateArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression arg);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IAttribute CreateAttribute(JetBrains.ReSharper.Psi.ITypeElement attributeClass, JetBrains.ReSharper.Psi.AttributeValue[] fixedArguments, JetBrains.Util.Pair<, >[] namedArguments);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.VB.Tree.IAttribute CreateAttribute(JetBrains.ReSharper.Psi.ITypeElement attributeClass) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IBlock CreateBlock(string format, params object[] objects);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration CreateConstructorDeclaration();
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage CreateDeclaredTypeUsageNode(JetBrains.ReSharper.Psi.IDeclaredType type);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration CreateDelegateDeclaration();
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IDocComment CreateDocComment(string text);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode CreateDocCommentBlock(string xmlText);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IBlock CreateEmptyBlock();
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList CreateEmptyParameterList();
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration CreateEnumMemberDeclaration(string enumMemberName);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration CreateEventDeclaration(JetBrains.ReSharper.Psi.IDeclaredType type, string name);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CreateExpression([System.ComponentModel.LocalizableAttribute(false)] string expr, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IExpressionArgument CreateExpressionArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CreateExpressionAsIs([System.ComponentModel.LocalizableAttribute(false)] string format);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CreateExpressionByConstantValue(JetBrains.ReSharper.Psi.ConstantValue value);
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CreateExpressionByConstantValue(JetBrains.ReSharper.Psi.ConstantValue value, bool safeConstantValueExactType);
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CreateExpressionByDefaultValue(JetBrains.ReSharper.Psi.DefaultValue value);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IVBFile CreateFile(string text, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Tree.IIdentifier CreateIdentifier([JetBrains.Annotations.NotNullAttribute()] string name);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IImportDirective CreateImportAliasDirective(string alias, JetBrains.ReSharper.Psi.ITypeElement typeElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IImportDirective CreateImportDirective(string qualifiedName);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IImportDirective CreateImportDirective(JetBrains.ReSharper.Psi.INamespace @namespace);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration CreateLoopControlVariableDeclaration(string name, JetBrains.ReSharper.Psi.IType type);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration CreateModuleDeclaration(string name);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.INamedArgument CreateNamedArgument(string name, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration CreateNamespaceDeclaration(string name);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration CreateParameterDeclaration(JetBrains.ReSharper.Psi.IType type, string name, JetBrains.ReSharper.Psi.ParameterKind kind, bool isParamArray);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration CreatePropertyDeclaration(JetBrains.ReSharper.Psi.IType type, string name, bool inInterface);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression CreateReferenceExpression(string expr, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IReferenceName CreateReferenceName(string name, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.VB.Tree.IRegionPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IEndRegionPreprocessorDirective> CreateRegionDirective(string name);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IVBStatement CreateStatement(string format, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration CreateTypeMemberDeclaration(string format, bool inInterface, params object[] args);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList CreateTypeParameterConstraintsList(JetBrains.ReSharper.Psi.ITypeParameter typeParameter, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, string parameterName);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration CreateTypeParameterOfMethodDeclaration(JetBrains.ReSharper.Psi.ITypeParameter typeParameter);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration CreateTypeParameterOfMethodDeclaration(string typeParameter);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration CreateTypeParameterOfTypeDeclaration(JetBrains.ReSharper.Psi.ITypeParameter typeParameter);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration CreateTypeParameterOfTypeDeclaration(string typeParameter);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage CreateTypeUsageNode(string typeText, params object[] args);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage CreateTypeUsageNode(JetBrains.ReSharper.Psi.IType type);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement CreateVBXmlElement(string xmlString);
        public static JetBrains.ReSharper.Psi.VB.VBElementFactory GetInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static JetBrains.ReSharper.Psi.VB.VBElementFactory GetInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool applyCodeFormatter = True) { }
    }
    public class static VBExtensionMethods
    {
        public static System.Version GetVBVersion([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static System.Version GetVBVersion([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static bool IsVB10Supported([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static bool IsVB11Supported([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static bool IsVB9Supported([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.LanguageDefinitionAttribute("VBASIC", Edition="Vbnet")]
    public class VBLanguage : JetBrains.ReSharper.Psi.KnownLanguage
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.VB.VBLanguage Instance;
        public const string Name = "VBASIC";
        protected VBLanguage([JetBrains.Annotations.NotNullAttribute()] string name) { }
        protected VBLanguage([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] string presentableName) { }
    }
    public abstract class VBPredefinedOperators
    {
        public const string BINARY_ANDALSO = "op_AndAlso";
        public const string BINARY_ORELSE = "op_OrElse";
        public const string CONCATENATE = "op_Concatenate";
        public const string EXPONENT = "op_Exponent";
        public const string INTEGER_DIVISION = "op_IntegerDivision";
        public const string LIKE = "op_Like";
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.ISignOperator GetBinaryOperator(string name, JetBrains.ReSharper.Psi.IType leftType, JetBrains.ReSharper.Psi.IType rightType);
        public abstract string GetBinaryOperatorName(JetBrains.ReSharper.Psi.Parsing.TokenNodeType sign);
        public abstract JetBrains.ReSharper.Psi.ISignOperator[] GetBinaryOperators();
        public static JetBrains.ReSharper.Psi.VB.VBPredefinedOperators GetInstance(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.OperatorInstance> GetOperatorsByName(string name);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.ISignOperator GetUnaryOperator(string name, JetBrains.ReSharper.Psi.IType type);
        public abstract string GetUnaryOperatorName(JetBrains.ReSharper.Psi.Parsing.TokenNodeType sign);
        public abstract JetBrains.ReSharper.Psi.ISignOperator[] GetUnaryOperators();
        public abstract bool IsOperatorName(string name, int parameterCount);
    }
    public class static VBPsiSourceFilePropertiesExtension
    {
        public static string[] ParseCompilerIdList(string value) { }
    }
    public class static VBTypeFactory
    {
        public static JetBrains.ReSharper.Psi.IType CreateArrayType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList list) { }
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateDeclaredType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReferenceName referenceName) { }
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateDeclaredType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage typeUsage) { }
        public static JetBrains.ReSharper.Psi.IDeclaredType CreatePredefinedTypeByKeyword(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.IDeclaredType CreatePredefinedTypeByTypeChar([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITokenNode typeCharNode, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.IType CreateType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITokenNode typeCharNode, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.Tree.ITokenNode nullableMark, JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList arrayModifiersListNode) { }
        public static JetBrains.ReSharper.Psi.IType CreateType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage typeUsage, JetBrains.ReSharper.Psi.Tree.ITokenNode nullableMark, JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList arrayModifiersListNode) { }
        public static JetBrains.ReSharper.Psi.IType CreateType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage typeUsage) { }
        public static JetBrains.ReSharper.Psi.IType CreateType(string typeName, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        public static string GetFullyQualifiedNameByKeyword(string keyword) { }
        public static string GetShortNameByTypeKeyword(JetBrains.ReSharper.Psi.Parsing.TokenNodeType token) { }
        public static string GetTypeChar(JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public static string GetTypeKeyword(JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
        public class KeywordsService : JetBrains.ReSharper.Psi.ITypeKeywordsService
        {
            public System.Collections.Generic.IEnumerable<string> TypeKeywords { get; }
            public string GetFullQualifiedTypeName(string keyword) { }
            public string GetTypeKeyword(JetBrains.ReSharper.Psi.IClrTypeName qualifiedTypeName) { }
            public bool IsDynamicKeyword(string keyword) { }
            public bool IsTypeKeywordReference(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        }
    }
    public class static XLinqUtil
    {
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName XAttribute;
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName XCData;
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName XComment;
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName XContainer;
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName XDocument;
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName XElement;
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName XElementExtensions;
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName XName;
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName XNamespace;
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName XProcessingInstruction;
        public static readonly JetBrains.ReSharper.Psi.IClrTypeName XStreamingElement;
        public static JetBrains.ReSharper.Psi.IProperty GetValuePropertyFromInternalXmlHelper(JetBrains.ReSharper.Psi.IPsiSourceFile psiFile) { }
        public static bool IsXElement(JetBrains.ReSharper.Psi.IType type) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Caches
{
    
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBAnnotatedMembersCacheProcessor : JetBrains.ReSharper.Psi.VB.Tree.TreeNodeVisitor<JetBrains.Util.Pair<System.Collections.Generic.ICollection<string>, JetBrains.Util.OneToListMap<string, string>>>, JetBrains.ReSharper.Psi.Caches.IAnnotatedMembersCacheProcessor
    {
        public void Process(JetBrains.ReSharper.Psi.Tree.IFile file, System.Collections.Generic.ICollection<string> attributeNames, JetBrains.Util.OneToListMap<string, string> context) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.CodeStyle
{
    
    public interface ICustomIndentHandler
    {
        string Indent(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.CodeStyle.CustomIndentType indentType, JetBrains.ReSharper.Psi.VB.CodeStyle.VBCodeFormattingSettings settings);
    }
    public interface IVBCodeFormatter : JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter
    {
        void FormatDocComment(JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode docCommentBlockNode);
    }
    public class VBCodeFormattingSettings
    {
        public readonly JetBrains.ReSharper.Psi.CodeStyle.CommonFormatterSettingsKey CommonSettings;
        public readonly JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings GlobalSettings;
        public readonly JetBrains.ReSharper.Psi.VB.CodeStyle.VBFormatSettingsKey Settings;
        public VBCodeFormattingSettings(JetBrains.ReSharper.Psi.VB.CodeStyle.VBFormatSettingsKey settings, JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings globalSettings, JetBrains.ReSharper.Psi.CodeStyle.CommonFormatterSettingsKey commonSettings) { }
    }
    public class VBFormatProfile
    {
        public VBFormatProfile(JetBrains.ReSharper.Psi.VB.CodeStyle.VBFormatProfile.ProfileOptions mask) { }
        public bool DecorateModifiers { get; }
        public bool DontKeepLinebreaks { get; }
        public bool DontWrap { get; }
        public bool Format { get; }
        [System.FlagsAttribute()]
        public enum ProfileOptions : uint
        {
            NONE = 0u,
            FORMAT = 1u,
            DECORATE_MODIFIERS = 2u,
            DONT_KEEP_LINEBREAKS = 4u,
            DONT_WRAP = 8u,
        }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Psi.CodeStyle.CodeFormattingSettingsKey), "Code formatting in VB.NET")]
    public class VBFormatSettingsKey
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Invocation arguments")]
        public bool ALIGN_MULTILINE_ARGUMENT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Array initializer")]
        public bool ALIGN_MULTILINE_ARRAY_INITIALIZER;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Expression")]
        public bool ALIGN_MULTILINE_EXPRESSION;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Implements/handles list")]
        public bool ALIGN_MULTILINE_IMPLEMENTS_LIST;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Method parameters")]
        public bool ALIGN_MULTILINE_PARAMETER;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Multiple declaration list")]
        public bool ALIGN_MULTIPLE_DECLARATION;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "After imports section")]
        public int BLANK_LINES_AFTER_IMPORTS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "After file options section")]
        public int BLANK_LINES_AFTER_OPTIONS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Around multiline field")]
        public int BLANK_LINES_AROUND_FIELD;
        [JetBrains.Application.Settings.SettingsEntryAttribute(0, "After global attribute")]
        public int BLANK_LINES_AROUND_GLOBAL_ATTRIBUTE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Around multiline method")]
        public int BLANK_LINES_AROUND_INVOCABLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Around namespace")]
        public int BLANK_LINES_AROUND_NAMESPACE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Around region")]
        public int BLANK_LINES_AROUND_REGION;
        [JetBrains.Application.Settings.SettingsEntryAttribute(0, "Around single line field")]
        public int BLANK_LINES_AROUND_SINGLE_LINE_FIELD;
        [JetBrains.Application.Settings.SettingsEntryAttribute(0, "Around single line method")]
        public int BLANK_LINES_AROUND_SINGLE_LINE_INVOCABLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Around type")]
        public int BLANK_LINES_AROUND_TYPE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Inside region")]
        public int BLANK_LINES_INSIDE_REGION;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Indent \"case\" from \"select\"")]
        public bool INDENT_CASE_FROM_SELECT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(2, "Keep max blank lines in code")]
        public int KEEP_BLANK_LINES_IN_CODE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(2, "Keep max blank lines in declarations")]
        public int KEEP_BLANK_LINES_IN_DECLARATIONS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Keep existing line breaks")]
        public bool KEEP_USER_LINEBREAKS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Place event attribute on same line")]
        public bool PLACE_EVENT_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place field attribute on same line")]
        public bool PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Place method attribute on same line")]
        public bool PLACE_METHOD_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Place property attribute on same line")]
        public bool PLACE_PROPERTY_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Place type attribute on same line")]
        public bool PLACE_TYPE_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "After attribute target colon")]
        public bool SPACE_AFTER_ATTRIBUTE_TARGET_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "After \',\'")]
        public bool SPACE_AFTER_COMMA;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Additive operators (+,-)")]
        public bool SPACE_AROUND_ADDITIVE_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Assignment operators (=,+=,...)")]
        public bool SPACE_AROUND_ASSIGNMENT_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Around \'.\'")]
        public bool SPACE_AROUND_DOT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Multiplicative operators (*,/,...)")]
        public bool SPACE_AROUND_MULTIPLICATIVE_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Relational operators (<,>,<=,>=)")]
        public bool SPACE_AROUND_RELATIONAL_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Shift operators (<<,>>)")]
        public bool SPACE_AROUND_SHIFT_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Around statement \':\'")]
        public bool SPACE_AROUND_STMT_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before array rank parentheses")]
        public bool SPACE_BEFORE_ARRAY_RANK_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before attribute target colon")]
        public bool SPACE_BEFORE_ATTRIBUTE_TARGET_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before \',\'")]
        public bool SPACE_BEFORE_COMMA;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before empty invocation parentheses")]
        public bool SPACE_BEFORE_EMPTY_INVOCATION_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before empty method declaration parentheses")]
        public bool SPACE_BEFORE_EMPTY_METHOD_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before invocation parentheses")]
        public bool SPACE_BEFORE_INVOCATION_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before \':\' in label")]
        public bool SPACE_BEFORE_LABEL_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before method declaration parentheses")]
        public bool SPACE_BEFORE_METHOD_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Before type parameter parentheses")]
        public bool SPACE_BEFORE_TYPE_PARAMETER_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within array initialization braces")]
        public bool SPACE_WITHIN_ARRAY_INITIALIZATION_BRACES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within empty array rank parentheses")]
        public bool SPACE_WITHIN_ARRAY_RANK_EMPTY_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within array rank parentheses")]
        public bool SPACE_WITHIN_ARRAY_RANK_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within attribute angles")]
        public bool SPACE_WITHIN_ATTRIBUTE_ANGLES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within empty invocation parentheses")]
        public bool SPACE_WITHIN_EMPTY_INVOCATION_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within empty method declaration parentheses")]
        public bool SPACE_WITHIN_EMPTY_METHOD_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within expression parentheses")]
        public bool SPACE_WITHIN_EXPRESSION_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within invocation parentheses")]
        public bool SPACE_WITHIN_INVOCATION_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within method declaration parentheses")]
        public bool SPACE_WITHIN_METHOD_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within type parameter parentheses")]
        public bool SPACE_WITHIN_TYPE_PARAMETER_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Don\'t indent comments started at first column")]
        public bool STICK_COMMENT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle.WRAP_IF_LONG, "Wrap invocation arguments")]
        public JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle WRAP_ARGUMENTS_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer wrap before operator in binary expression")]
        public bool WRAP_BEFORE_BINARY_OPSIGN;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer wrap before \"(\" in method declaration")]
        public bool WRAP_BEFORE_DECLARATION_LPAR;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer wrap before \"(\" in invocation")]
        public bool WRAP_BEFORE_INVOCATION_LPAR;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle.WRAP_IF_LONG, "Wrap extends/implements/handles list")]
        public JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle WRAP_EXTENDS_LIST_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(120, "Right margin (columns)")]
        public int WRAP_LIMIT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Wrap long lines")]
        public bool WRAP_LINES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle.CHOP_IF_LONG, "Wrap multiple declarations list")]
        public JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle WRAP_MULTIPLE_DECLARATION_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle.WRAP_IF_LONG, "Wrap formal parameters")]
        public JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle WRAP_PARAMETERS_STYLE;
    }
    public class static VBFormatterHelper
    {
        public static void OptimizeImportsAndRefs(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IRangeMarker rangeMarker, bool optimizeUsings, bool shortenReferences, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Settings.CodeStyleSettings), "VB.NET namespace import")]
    public class VBImportSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Allow \'Imports\' alias directive")]
        public bool AllowAlias;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Keep \'Imports\' directives on optimization")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, string> KeepImports;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Do not remove non-trivial alias directives")]
        public bool KeepNontrivialAlias;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Add \'Imports\' directives on optimization")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, string> MandatoryImports;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer fully qualified references")]
        public bool PreferQualifiedReference;
    }
    public class static VBImportSettingsAccessor
    {
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.VB.CodeStyle.VBImportSettings, bool>> AllowAlias;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.VB.CodeStyle.VBImportSettings, JetBrains.Application.Settings.Store.IIndexedEntry<string, string>>> KeepImports;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.VB.CodeStyle.VBImportSettings, bool>> KeepNontrivialAlias;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.VB.CodeStyle.VBImportSettings, JetBrains.Application.Settings.Store.IIndexedEntry<string, string>>> MandatoryImports;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.VB.CodeStyle.VBImportSettings, bool>> PreferQualifiedReference;
    }
    public enum WrapStyle
    {
        [System.ComponentModel.DescriptionAttribute("Simple wrap")]
        WRAP_IF_LONG = 0,
        [System.ComponentModel.DescriptionAttribute("Chop if long")]
        CHOP_IF_LONG = 1,
        [System.ComponentModel.DescriptionAttribute("Chop always")]
        CHOP_ALWAYS = 2,
    }
}
namespace JetBrains.ReSharper.Psi.VB.CodeStyle.SettingsUpgrade
{
    
    [JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsAttribute("VB")]
    public class VBCodeStyleSettings : JetBrains.Application.Configuration.IXmlReadable, System.ICloneable
    {
        public VBCodeStyleSettings(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete owner) { }
        public JetBrains.ReSharper.Psi.VB.CodeStyle.SettingsUpgrade.VBFormatSettingsObsolete FormatSettings { get; set; }
        public JetBrains.ReSharper.Psi.VB.CodeStyle.SettingsUpgrade.VBImportsSettingsObsolete ImportsSettings { get; set; }
        public object Clone() { }
        public JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.NamingSettings60 GetNamingSettings2() { }
        public void ReadFromXml(System.Xml.XmlElement element) { }
    }
    public class VBFormatSettingsObsolete : JetBrains.Application.Configuration.IXmlReadable
    {
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool ALIGN_MULTILINE_ARGUMENT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool ALIGN_MULTILINE_ARRAY_INITIALIZER;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool ALIGN_MULTILINE_EXPRESSION;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool ALIGN_MULTILINE_IMPLEMENTS_LIST;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool ALIGN_MULTILINE_PARAMETER;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool ALIGN_MULTIPLE_DECLARATION;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AFTER_IMPORTS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AFTER_OPTIONS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AROUND_FIELD;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(0)]
        public int BLANK_LINES_AROUND_GLOBAL_ATTRIBUTE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AROUND_INVOCABLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AROUND_NAMESPACE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AROUND_REGION;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(0)]
        public int BLANK_LINES_AROUND_SINGLE_LINE_FIELD;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(0)]
        public int BLANK_LINES_AROUND_SINGLE_LINE_INVOCABLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AROUND_TYPE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_INSIDE_REGION;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool INDENT_CASE_FROM_SELECT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(2)]
        public int KEEP_BLANK_LINES_IN_CODE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(2)]
        public int KEEP_BLANK_LINES_IN_DECLARATIONS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool KEEP_USER_LINEBREAKS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PLACE_EVENT_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PLACE_METHOD_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PLACE_PROPERTY_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PLACE_TYPE_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AFTER_ATTRIBUTE_TARGET_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AFTER_COMMA;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_ADDITIVE_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_ASSIGNMENT_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_AROUND_DOT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_AROUND_MULTIPLICATIVE_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_RELATIONAL_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_SHIFT_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_STMT_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_ARRAY_RANK_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_ATTRIBUTE_TARGET_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_COMMA;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_EMPTY_INVOCATION_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_EMPTY_METHOD_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_INVOCATION_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_LABEL_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_METHOD_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_TYPE_PARAMETER_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_ARRAY_INITIALIZATION_BRACES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_ARRAY_RANK_EMPTY_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_ARRAY_RANK_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_ATTRIBUTE_ANGLES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_EMPTY_INVOCATION_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_EMPTY_METHOD_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_EXPRESSION_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_INVOCATION_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_METHOD_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_TYPE_PARAMETER_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool STICK_COMMENT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle.WRAP_IF_LONG)]
        public JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle WRAP_ARGUMENTS_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool WRAP_BEFORE_BINARY_OPSIGN;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool WRAP_BEFORE_DECLARATION_LPAR;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool WRAP_BEFORE_INVOCATION_LPAR;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle.WRAP_IF_LONG)]
        public JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle WRAP_EXTENDS_LIST_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(120)]
        public int WRAP_LIMIT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool WRAP_LINES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle.CHOP_IF_LONG)]
        public JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle WRAP_MULTIPLE_DECLARATION_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle.WRAP_IF_LONG)]
        public JetBrains.ReSharper.Psi.VB.CodeStyle.WrapStyle WRAP_PARAMETERS_STYLE;
        public JetBrains.ReSharper.Psi.VB.CodeStyle.SettingsUpgrade.VBFormatSettingsObsolete Clone() { }
        public void ReadFromXml(System.Xml.XmlElement element) { }
    }
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    [JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgraderAttribute()]
    public class VBFormatSettingsUpgrade : JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.CodeStyleSettingsUpgrade
    {
        public VBFormatSettingsUpgrade(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected override void DoUpgrade(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore) { }
    }
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    [JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgraderAttribute()]
    public class VBImportSettingsUpgrade : JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.CodeStyleSettingsUpgrade
    {
        public VBImportSettingsUpgrade(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected override void DoUpgrade(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore) { }
    }
    public class VBImportsSettingsObsolete : JetBrains.Application.Configuration.IXmlReadable
    {
        public VBImportsSettingsObsolete() { }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool AllowAlias { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(new string[0])]
        public string[] KeepImports { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool KeepNontrivialAlias { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(new string[0])]
        public string[] MandatoryImports { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PreferQualifiedReference { get; set; }
        public void ReadFromXml(System.Xml.XmlElement element) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.ConstantValue
{
    
    public abstract class VBConstantCalculator
    {
        public static JetBrains.ReSharper.Psi.VB.ConstantValue.VBConstantCalculator Instance { get; }
        public abstract JetBrains.ReSharper.Psi.ConstantValue AscChar(JetBrains.ReSharper.Psi.ConstantValue constantValue, JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool strictOff);
        public abstract JetBrains.ReSharper.Psi.ConstantValue AscString(JetBrains.ReSharper.Psi.ConstantValue constantValue, JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool strictOff);
        public abstract JetBrains.ReSharper.Psi.ConstantValue AscWChar(JetBrains.ReSharper.Psi.ConstantValue constantValue, JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool strictOff);
        public abstract JetBrains.ReSharper.Psi.ConstantValue AscWString(JetBrains.ReSharper.Psi.ConstantValue constantValue, JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool strictOff);
        public abstract JetBrains.ReSharper.Psi.ConstantValue CalculateBinaryEnumOperator(string operatorName, JetBrains.ReSharper.Psi.IEnum @enum, JetBrains.ReSharper.Psi.ConstantValue leftValue, JetBrains.ReSharper.Psi.ConstantValue rightValue);
        public abstract JetBrains.ReSharper.Psi.ConstantValue CalculateBinaryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ISignOperator binaryOperator, JetBrains.ReSharper.Psi.ConstantValue leftValue, JetBrains.ReSharper.Psi.ConstantValue rightValue);
        public abstract JetBrains.ReSharper.Psi.ConstantValue CalculateUnaryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ISignOperator unaryOperator, JetBrains.ReSharper.Psi.ConstantValue value);
        public abstract JetBrains.ReSharper.Psi.ConstantValue Chr(JetBrains.ReSharper.Psi.ConstantValue constantValue, JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool strictOff);
        public abstract JetBrains.ReSharper.Psi.ConstantValue ChrW(JetBrains.ReSharper.Psi.ConstantValue constantValue, JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool strictOff);
        public abstract JetBrains.ReSharper.Psi.ConstantValue ToTypeExplicit(JetBrains.ReSharper.Psi.ConstantValue value, JetBrains.ReSharper.Psi.IType type);
        public abstract JetBrains.ReSharper.Psi.ConstantValue ToTypeImplicit(JetBrains.ReSharper.Psi.ConstantValue value, JetBrains.ReSharper.Psi.IType type, bool strictOff, out bool strictnessFailed);
    }
    public class static VBConstantCalculatorExt
    {
        public static JetBrains.ReSharper.Psi.ConstantValue ToTypeExplicit(this JetBrains.ReSharper.Psi.ConstantValue value, JetBrains.ReSharper.Psi.IType type) { }
        public static JetBrains.ReSharper.Psi.ConstantValue ToTypeImplicit(this JetBrains.ReSharper.Psi.ConstantValue value, JetBrains.ReSharper.Psi.IType type, bool strictOff) { }
    }
    public class static VBConstantValueFactory
    {
        public static JetBrains.ReSharper.Psi.ConstantValue CreateBoolValue(bool x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateByteValue(byte x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateCharValue(char x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateDateValue(System.DateTime x, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateDecimalValue(decimal x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateDefaultValue(JetBrains.ReSharper.Psi.IType type) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateDoubleValue(double x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateEnumValue(JetBrains.ReSharper.Psi.IEnum @enum, object value) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateFloatValue(float x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateIntValue(int x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateLongValue(long x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateNothingValue(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateSbyteValue(sbyte x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateShortValue(short x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateStringValue(string x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateUintValue(uint x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateUlongValue(ulong x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateUshortValue(ushort x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBConstantValuePresenter : JetBrains.ReSharper.Psi.IConstantValuePresenter
    {
        public string Present(JetBrains.ReSharper.Psi.ConstantValue constantValue) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBConstantValueService : JetBrains.ReSharper.Psi.ClrConstantValueService
    {
        public VBConstantValueService() { }
        public override JetBrains.ReSharper.Psi.IConstantValuePresenter Presenter { get; }
        public override JetBrains.ReSharper.Psi.ConstantValue GetDefaultValue(JetBrains.ReSharper.Psi.IType type) { }
        public override bool IsLegalConstantType(JetBrains.ReSharper.Psi.IType type) { }
        public override bool IsPureNull(JetBrains.ReSharper.Psi.ConstantValue value) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.ControlFlow
{
    
    public interface IVBControlFlowAnalysisResult : JetBrains.ReSharper.Psi.ControlFlow.Impl.IControlFlowAnalysisResult
    {
        bool IsFunctionValueInitializeOnImplicitReturn { get; }
        JetBrains.Util.OneToSetMap<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.Tree.ITreeNode>, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> PossibleMultipleEnumeration { get; }
    }
    public interface IVBControlFlowElement : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement { }
    public interface IVBControlFlowError
    {
        JetBrains.ReSharper.Psi.VB.ControlFlow.VBControlFlowErrorType ErrorType { get; }
    }
    public interface IVBControlFlowGraf : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowGraf
    {
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.ControlFlow.VBControlFlowErrorType> ControlFlowErrors { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowElement ImplicitReturn { get; }
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowRib> ReachableExits { get; }
    }
    public interface IVBControlFlowRib : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib
    {
        System.Nullable<bool> BooleanValue { get; set; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IUsingStatement> ExitFromUsings { get; }
        System.Nullable<bool> NullCoalescingCondition { get; set; }
        bool PassThroughFinally { get; }
        JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowElement Source { get; }
        JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowElement Target { get; set; }
    }
    public class static VBControlFlowBuilder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowGraf Build([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IBlock body) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowGraf BuildByNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode node) { }
    }
    public enum VBControlFlowErrorType
    {
        UNRESOLVED_JUMP = 0,
        JUMP_FROM_FINALLY = 1,
    }
    public class static VBControlFlowGrafExtensions
    {
        public static JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowAnalysisResult Inspect(this JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowGraf graf) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.DeclaredElements.Query
{
    
    public interface IQueryAnonymousTypeProperty : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryDeclaredElement { }
    public interface IQueryDeclaredElement : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable { }
    public interface IQueryRangeVariable : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryDeclaredElement { }
}
namespace JetBrains.ReSharper.Psi.VB.ExpectedTypes
{
    
    public abstract class ArgumentsMatchingPolicyFactory
    {
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy AllMatcher;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy AllPartialMatcher;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy UnaryOperatorMatcher;
        public static JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy ExceptMatcher(int index) { }
        public static JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy OperatorMatcher(int argumentNumber) { }
        public static JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy PrefixMatcher(int prefixLength) { }
    }
    public class CandidatesEngine
    {
        public CandidatesEngine(JetBrains.ReSharper.Psi.VB.IVBInvocationInfo invocation, JetBrains.ReSharper.Psi.VB.ExpectedTypes.CandidatesEngineStrategy strategy, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBInvocationCandidate> ApplicableCandidates { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBInvocationCandidate> Candidates { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBInvocationCandidate> NotApplicableCandidates { get; }
    }
    public struct CandidatesEngineStrategy
    {
        public CandidatesEngineStrategy(JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy typeInference, JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy applicability) { }
        public JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy Applicability { get; }
        public JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy TypeInference { get; }
    }
    public interface IMatchingPolicy
    {
        bool IsPartial { get; }
        System.Collections.Generic.ICollection<int> GetSubstantialIndices(int count);
    }
    public interface IVBExpectedTypesProvider : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypesProvider
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeMode mode = 1);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage usage);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage usage);
    }
    public class VBConvertibleToWithTypeInference : JetBrains.ReSharper.Psi.ExpectedTypes.ConvertibleToWithTypeInference
    {
        public VBConvertibleToWithTypeInference(JetBrains.ReSharper.Psi.IType targetType, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule, bool isExactType, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, JetBrains.ReSharper.Psi.Resolve.ISubstitution ownerSubstitution) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConstraintForArrayElementType(JetBrains.ReSharper.Psi.IType elementType) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConstraintForDelegateReturnType(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType type) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleToConstraint(JetBrains.ReSharper.Psi.IType type) { }
        public bool Equals(JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBConvertibleToWithTypeInference other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        protected override bool IsImplicitlyConvertible(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.IType inferredType) { }
        public override string ToString() { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBExpectedTypesProvider : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypesProvider, JetBrains.ReSharper.Psi.VB.ExpectedTypes.IVBExpectedTypesProvider
    {
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.Tree.IExpression expression, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeMode mode = 1) { }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeMode mode = 1) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage usage) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage usage) { }
    }
    public class VBExplicitlyConvertibleToConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.ConvertibleToConstraint
    {
        public VBExplicitlyConvertibleToConstraint(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public override bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType fromType) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleToConstraint(JetBrains.ReSharper.Psi.IType toType) { }
        protected override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> SolveSubtypingForFrom(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
    public class VBHeadType : JetBrains.ReSharper.Psi.ExpectedTypes.HeadType
    {
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.HeadType Await;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.HeadType LBrace;
        protected VBHeadType([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] string text) { }
    }
    public class VBImplicitlyConvertibleFromConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.ConvertibleFromConstraint
    {
        public VBImplicitlyConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public override bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType fromType) { }
        public override string ToString() { }
    }
    public class VBImplicitlyConvertibleToConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.ConvertibleToConstraint
    {
        public VBImplicitlyConvertibleToConstraint(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public override bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType fromType) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleToConstraint(JetBrains.ReSharper.Psi.IType toType) { }
        protected override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> SolveSubtypingForFrom(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
    public class VBInvocationCandidate : JetBrains.ReSharper.Psi.ExpectedTypes.InvocationCandidate
    {
        public VBInvocationCandidate([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IParametersOwner element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, bool isExtensionMethod, JetBrains.ReSharper.Psi.VB.Impl.Resolve.IArgumentsMatcher matcher) { }
        public JetBrains.ReSharper.Psi.VB.Impl.Resolve.IArgumentsMatcher Matcher { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> GetParameterMatchingArgument(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> elementInstance) { }
    }
    public class VBSuperTypeConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.SuperTypeConstraint
    {
        public VBSuperTypeConstraint(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertieblFrom(JetBrains.ReSharper.Psi.IType type) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertieblTo(JetBrains.ReSharper.Psi.IType type) { }
        public override string ToString() { }
    }
    public sealed class VBTailType : JetBrains.ReSharper.Psi.ExpectedTypes.TailType
    {
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType Braces;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType ColonEq;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType Comma;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType Dot;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType ParenthesesAndBracesAndLeaveCaretWithin;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType ParenthesesAndLeaveCaretAfter;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType ParenthesesAndLeaveCaretAfterAndComma;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType ParenthesesAndLeaveCaretAfterAndRParenth;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType ParenthesesAndLeaveCaretWithin;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType ParenthesesAndLeaveCaretWithinAndComma;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType ParenthesesAndLeaveCaretWithinAndRParenth;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType RBrace;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType RParenth;
        public static readonly JetBrains.ReSharper.Psi.VB.ExpectedTypes.VBTailType TypeArgumentListAndLeaveCaretWithin;
        public override JetBrains.ReSharper.Psi.Parsing.TokenNodeType[] EvaluateTail(JetBrains.ProjectModel.ISolution solution, JetBrains.DocumentModel.IDocument document) { }
    }
    public class VBTypeArgumentAnalyzer : JetBrains.ReSharper.Psi.ExtensionsAPI.ExpectedTypes.TypeArgumentAnalyzer<JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage, JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList>
    {
        public VBTypeArgumentAnalyzer(JetBrains.ReSharper.Psi.VB.ExpectedTypes.IVBExpectedTypesProvider expectedTypesProvider, JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage node) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConstraint(JetBrains.ReSharper.Psi.IType type) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint[] GetAdditionalTypes(JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter>> type) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.TailType GetTailType(int index, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> typeParameters) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList GetTypeArgumentList(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage typeUsage, out int index) { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetTypeArgumentListContext(JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList typeArgumentList, out System.Collections.Generic.List<> types) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.ExtensionMethods
{
    
    public class static VBExtensionMethodsHelper
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetQualifierType([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.VB.IVBArgumentInfo qualifier) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ExtensionMethodAccessibility IsExtensionMethodAccessible(JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ResolveErrorType IsExtensionMethodApplicable(JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo extensionArgument, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> typeArguments, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
        public static bool SomeExtensionMethodIsAccessible(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo qualifier, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context, string name) { }
    }
    public abstract class VBExtensionMethodsRegistry : JetBrains.ReSharper.Psi.ExtensionMethods.IExtensionMethodRegistry
    {
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery GetAllExtensionMethods(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext);
        public static JetBrains.ReSharper.Psi.VB.ExtensionMethods.VBExtensionMethodsRegistry GetInstance(JetBrains.ProjectModel.ISolution solution) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Gen
{
    
    public sealed class ErrorMessages
    {
        public static string GetErrorMessage0() { }
        public static string GetErrorMessage1() { }
        public static string GetErrorMessage10() { }
        public static string GetErrorMessage100() { }
        public static string GetErrorMessage101() { }
        public static string GetErrorMessage102() { }
        public static string GetErrorMessage103() { }
        public static string GetErrorMessage104() { }
        public static string GetErrorMessage105() { }
        public static string GetErrorMessage106() { }
        public static string GetErrorMessage107() { }
        public static string GetErrorMessage108() { }
        public static string GetErrorMessage109() { }
        public static string GetErrorMessage11() { }
        public static string GetErrorMessage110() { }
        public static string GetErrorMessage111() { }
        public static string GetErrorMessage112() { }
        public static string GetErrorMessage113() { }
        public static string GetErrorMessage114() { }
        public static string GetErrorMessage115() { }
        public static string GetErrorMessage116() { }
        public static string GetErrorMessage117() { }
        public static string GetErrorMessage118() { }
        public static string GetErrorMessage119() { }
        public static string GetErrorMessage12() { }
        public static string GetErrorMessage120() { }
        public static string GetErrorMessage121() { }
        public static string GetErrorMessage122() { }
        public static string GetErrorMessage123() { }
        public static string GetErrorMessage124() { }
        public static string GetErrorMessage125() { }
        public static string GetErrorMessage126() { }
        public static string GetErrorMessage127() { }
        public static string GetErrorMessage128() { }
        public static string GetErrorMessage129() { }
        public static string GetErrorMessage13() { }
        public static string GetErrorMessage130() { }
        public static string GetErrorMessage131() { }
        public static string GetErrorMessage132() { }
        public static string GetErrorMessage133() { }
        public static string GetErrorMessage134() { }
        public static string GetErrorMessage135() { }
        public static string GetErrorMessage136() { }
        public static string GetErrorMessage137() { }
        public static string GetErrorMessage138() { }
        public static string GetErrorMessage139() { }
        public static string GetErrorMessage14() { }
        public static string GetErrorMessage140() { }
        public static string GetErrorMessage141() { }
        public static string GetErrorMessage142() { }
        public static string GetErrorMessage143() { }
        public static string GetErrorMessage144() { }
        public static string GetErrorMessage145() { }
        public static string GetErrorMessage146() { }
        public static string GetErrorMessage147() { }
        public static string GetErrorMessage148() { }
        public static string GetErrorMessage149() { }
        public static string GetErrorMessage15() { }
        public static string GetErrorMessage150() { }
        public static string GetErrorMessage151() { }
        public static string GetErrorMessage152() { }
        public static string GetErrorMessage153() { }
        public static string GetErrorMessage154() { }
        public static string GetErrorMessage155() { }
        public static string GetErrorMessage156() { }
        public static string GetErrorMessage157() { }
        public static string GetErrorMessage158() { }
        public static string GetErrorMessage159() { }
        public static string GetErrorMessage16() { }
        public static string GetErrorMessage160() { }
        public static string GetErrorMessage161() { }
        public static string GetErrorMessage162() { }
        public static string GetErrorMessage163() { }
        public static string GetErrorMessage164() { }
        public static string GetErrorMessage165() { }
        public static string GetErrorMessage166() { }
        public static string GetErrorMessage167() { }
        public static string GetErrorMessage168() { }
        public static string GetErrorMessage169() { }
        public static string GetErrorMessage17() { }
        public static string GetErrorMessage170() { }
        public static string GetErrorMessage171() { }
        public static string GetErrorMessage172() { }
        public static string GetErrorMessage173() { }
        public static string GetErrorMessage174() { }
        public static string GetErrorMessage175() { }
        public static string GetErrorMessage176() { }
        public static string GetErrorMessage177() { }
        public static string GetErrorMessage178() { }
        public static string GetErrorMessage179() { }
        public static string GetErrorMessage18() { }
        public static string GetErrorMessage180() { }
        public static string GetErrorMessage181() { }
        public static string GetErrorMessage182() { }
        public static string GetErrorMessage183() { }
        public static string GetErrorMessage184() { }
        public static string GetErrorMessage185() { }
        public static string GetErrorMessage186() { }
        public static string GetErrorMessage187() { }
        public static string GetErrorMessage188() { }
        public static string GetErrorMessage189() { }
        public static string GetErrorMessage19() { }
        public static string GetErrorMessage190() { }
        public static string GetErrorMessage191() { }
        public static string GetErrorMessage192() { }
        public static string GetErrorMessage193() { }
        public static string GetErrorMessage194() { }
        public static string GetErrorMessage195() { }
        public static string GetErrorMessage196() { }
        public static string GetErrorMessage197() { }
        public static string GetErrorMessage198() { }
        public static string GetErrorMessage199() { }
        public static string GetErrorMessage2() { }
        public static string GetErrorMessage20() { }
        public static string GetErrorMessage200() { }
        public static string GetErrorMessage201() { }
        public static string GetErrorMessage202() { }
        public static string GetErrorMessage203() { }
        public static string GetErrorMessage204() { }
        public static string GetErrorMessage205() { }
        public static string GetErrorMessage206() { }
        public static string GetErrorMessage207() { }
        public static string GetErrorMessage208() { }
        public static string GetErrorMessage209() { }
        public static string GetErrorMessage21() { }
        public static string GetErrorMessage210() { }
        public static string GetErrorMessage211() { }
        public static string GetErrorMessage212() { }
        public static string GetErrorMessage213() { }
        public static string GetErrorMessage214() { }
        public static string GetErrorMessage215() { }
        public static string GetErrorMessage216() { }
        public static string GetErrorMessage217() { }
        public static string GetErrorMessage218() { }
        public static string GetErrorMessage219() { }
        public static string GetErrorMessage22() { }
        public static string GetErrorMessage220() { }
        public static string GetErrorMessage221() { }
        public static string GetErrorMessage222() { }
        public static string GetErrorMessage223() { }
        public static string GetErrorMessage224() { }
        public static string GetErrorMessage225() { }
        public static string GetErrorMessage226() { }
        public static string GetErrorMessage227() { }
        public static string GetErrorMessage228() { }
        public static string GetErrorMessage229() { }
        public static string GetErrorMessage23() { }
        public static string GetErrorMessage230() { }
        public static string GetErrorMessage231() { }
        public static string GetErrorMessage232() { }
        public static string GetErrorMessage233() { }
        public static string GetErrorMessage234() { }
        public static string GetErrorMessage235() { }
        public static string GetErrorMessage236() { }
        public static string GetErrorMessage237() { }
        public static string GetErrorMessage238() { }
        public static string GetErrorMessage239() { }
        public static string GetErrorMessage24() { }
        public static string GetErrorMessage240() { }
        public static string GetErrorMessage241() { }
        public static string GetErrorMessage242() { }
        public static string GetErrorMessage243() { }
        public static string GetErrorMessage244() { }
        public static string GetErrorMessage245() { }
        public static string GetErrorMessage246() { }
        public static string GetErrorMessage25() { }
        public static string GetErrorMessage26() { }
        public static string GetErrorMessage27() { }
        public static string GetErrorMessage28() { }
        public static string GetErrorMessage29() { }
        public static string GetErrorMessage3() { }
        public static string GetErrorMessage30() { }
        public static string GetErrorMessage31() { }
        public static string GetErrorMessage32() { }
        public static string GetErrorMessage33() { }
        public static string GetErrorMessage34() { }
        public static string GetErrorMessage35() { }
        public static string GetErrorMessage36() { }
        public static string GetErrorMessage37() { }
        public static string GetErrorMessage38() { }
        public static string GetErrorMessage39() { }
        public static string GetErrorMessage4() { }
        public static string GetErrorMessage40() { }
        public static string GetErrorMessage41() { }
        public static string GetErrorMessage42() { }
        public static string GetErrorMessage43() { }
        public static string GetErrorMessage44() { }
        public static string GetErrorMessage45() { }
        public static string GetErrorMessage46() { }
        public static string GetErrorMessage47() { }
        public static string GetErrorMessage48() { }
        public static string GetErrorMessage49() { }
        public static string GetErrorMessage5() { }
        public static string GetErrorMessage50() { }
        public static string GetErrorMessage51() { }
        public static string GetErrorMessage52() { }
        public static string GetErrorMessage53() { }
        public static string GetErrorMessage54() { }
        public static string GetErrorMessage55() { }
        public static string GetErrorMessage56() { }
        public static string GetErrorMessage57() { }
        public static string GetErrorMessage58() { }
        public static string GetErrorMessage59() { }
        public static string GetErrorMessage6() { }
        public static string GetErrorMessage60() { }
        public static string GetErrorMessage61() { }
        public static string GetErrorMessage62() { }
        public static string GetErrorMessage63() { }
        public static string GetErrorMessage64() { }
        public static string GetErrorMessage65() { }
        public static string GetErrorMessage66() { }
        public static string GetErrorMessage67() { }
        public static string GetErrorMessage68() { }
        public static string GetErrorMessage69() { }
        public static string GetErrorMessage7() { }
        public static string GetErrorMessage70() { }
        public static string GetErrorMessage71() { }
        public static string GetErrorMessage72() { }
        public static string GetErrorMessage73() { }
        public static string GetErrorMessage74() { }
        public static string GetErrorMessage75() { }
        public static string GetErrorMessage76() { }
        public static string GetErrorMessage77() { }
        public static string GetErrorMessage78() { }
        public static string GetErrorMessage79() { }
        public static string GetErrorMessage8() { }
        public static string GetErrorMessage80() { }
        public static string GetErrorMessage81() { }
        public static string GetErrorMessage82() { }
        public static string GetErrorMessage83() { }
        public static string GetErrorMessage84() { }
        public static string GetErrorMessage85() { }
        public static string GetErrorMessage86() { }
        public static string GetErrorMessage87() { }
        public static string GetErrorMessage88() { }
        public static string GetErrorMessage89() { }
        public static string GetErrorMessage9() { }
        public static string GetErrorMessage90() { }
        public static string GetErrorMessage91() { }
        public static string GetErrorMessage92() { }
        public static string GetErrorMessage93() { }
        public static string GetErrorMessage94() { }
        public static string GetErrorMessage95() { }
        public static string GetErrorMessage96() { }
        public static string GetErrorMessage97() { }
        public static string GetErrorMessage98() { }
        public static string GetErrorMessage99() { }
    }
    public class static TokenBitsets
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_0;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_1;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_10;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_11;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_12;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_13;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_14;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_15;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_16;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_17;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_18;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_2;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_3;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_4;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_5;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_6;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_7;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_8;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_9;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_accessModifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_accessorDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_accessorKeyword;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_accessorOwnerDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_addHandlerStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_additiveExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_addressOfExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_aggregatedRangeVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_aggregatedRangeVariableDeclarationList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_aggregateQueryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_aliasClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_anonymousArrayCreationExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_anonymousMemberDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_anonymousObjectCreationExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_anonymousObjectInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_argumentList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_arrayBound;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_arrayCreationExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_arrayModifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_arrayModifiersList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_assignmentOpSign;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_assignmentStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_attribute;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_attributeList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_attributeListOwner;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_attributeSection;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_attributesOwnerDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_awaitExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_awaitStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_block;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_blockIfStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_body;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_builtInTypeName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_caseClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_caseStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_castExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_castTarget;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_catchStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_catchVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_catchVariableResource;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_charsetModifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_classBaseClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_classBody;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_classDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_classLikeDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_collectionElementInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_collectionRangeVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_collectionRangeVariableDeclarationList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_comma;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_comparisonOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_concatenationExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_conditionalExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_constantDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_constPreprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_constructorDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_continueKind;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_continueStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_conversionOperatorDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_customEventDeclarationHeaderAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_declarationTerminator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_declaredTypeUsage;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_delegateDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_dictionaryAccessExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_distinctQueryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_doLoopStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_elseIfPreprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_elseIfStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_elsePreprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_elseStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_emptyArgument;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_endExternalSourcePreprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_endIfPreprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_endRegionPreprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_endStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_enumDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_enumMemberDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_eraseStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_errorElement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_errorStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_eventDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_eventDeclarationBodyAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_eventDeclarationHeaderAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_eventSpecifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_exitKind;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_exitStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_exponentiationExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_expressionArgument;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_expressionRangeVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_expressionRangeVariableDeclarationList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_expressionStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_externalChecksumPreprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_externalMethodDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_externalMethodDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_externalSourcePreprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_fakePreprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_finallyStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_floatingPointTypeName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_forEachStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_forLoopBodyAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_forStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_fromQueryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_getTypeExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_getTypeExpressionTypeUsage;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_getXmlNamespaceExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_getXmlNamespaceExpressionNamespace;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_gotoStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_groupByQueryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_groupJoinQueryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_handlesClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_identifierModifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_identifierOrKeyword;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_ifPreprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_ifStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_implementsClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_implicitLineContinuation;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_importAliasClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_importClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_importDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_importDirectivesSection;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_importNamespaceClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_importXMLNamespaceClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_indexExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_instanceExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_integerDivisionExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_integralTypeName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_interfaceDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_interfaceInheritsClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_interfaceMemberSpecifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_intoOfAggregateQueryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_invocationStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_isExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_isNotExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_joinCollectionRangeVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_joinCondition;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_joinQueryConditionsListFake;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_joinQueryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_labelDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_labelName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_labelOrStatementAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_labelReferencingStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_labelStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lambdaBlock;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lambdaExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lambdaFunctionExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lambdaParameterDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lambdaSignature;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lambdaSubExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lambdaSubStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lBrace;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_letQueryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_libraryClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_likeExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lineIfStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lineIfStatementBody;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lineTerminators;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_localDeclarationList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_localDeclarationStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_localVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_logicalAndExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_logicalNotExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_logicalOrExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_logicalXorExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_loopControlVariable;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_loopControlVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_loopStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lParenth;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_memberAccessExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_memberAccessExpressionError;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_memberInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_memberInitializerList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_methodDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_methodDeclarationBase;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_methodDeclarationHeaderAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_midAssignmentStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_modifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_modifiersList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_modifiersListOwner;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_moduleDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_modulusExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multiArgumentCollectionElementInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multipleConstantDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multipleVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multiplicativeExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_namedArgument;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_namespaceMemberDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_namespaceMemberDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_namespaceMemberModifiersList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_namespaceOrTypeName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_namespaceOrTypeNameFull;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_namespacePrefixExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_nameWithTypeParameterAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_nameWithTypeParameterOfMethodAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_newExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_nextClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_numericTypeName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_objectCollectionInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_objectCollectionInitializerList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_objectCreationExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_objectCreationExpressionInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_objectCreationInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_OnErrorGotoLabelAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_onErrorSpecialLabel;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_onErrorStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_operatorDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_operatorDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_optionStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_optionStatementsSection;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_orderByQueryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_orderExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_overloadOperatorSign;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_parameterModifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_parenthesizedExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_partitionQueryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_positionalArgument;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_primaryExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_primitiveTypeName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_propertyDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_propertyDeclarationBodyAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_propertyDeclarationHeaderAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_propertyInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_qualifiedNamespaceName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryAggregatedParameterPlatform;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryConditionsList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryParameter;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryParameterPlatform;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_raiseEventStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_rBrace;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_redimClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_redimStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_referenceExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_referenceName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_regionPreprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_regularParameterDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_regularParameterList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_regularTypeMemberDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_regularTypeMemberDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_regularTypeMemberDeclarationAuxError;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_relationalExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_removeHandlerStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_resumeStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_returnAttributeList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_returnStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_rParenth;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_selectQueryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_selectStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_shiftExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_signOperatorDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_simpleReferenceExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_simpleReferenceName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_statementAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_statementTerminator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_stopStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_structureDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_syncLockStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_throwStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_tryStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeArgumentList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeChar;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeDeclarationError;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeImplementsClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeMemberOwnerDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeOfIsExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterConstraint;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterConstraintList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterOfMethodDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterOfMethodList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterOfTypeDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterOfTypeList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeUsage;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unaryNegationExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unknownPreprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_usingStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_usingStatementDeclarationList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_usingStatementResources;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_usingVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_variableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_variableDeclarationList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBArgument;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBArgumentsOwner;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBBinaryExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBExpressionList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBFile;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBFunctionDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBIdentifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBLiteralExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBLocalVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBModifiersOwnerDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBNamespaceDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBParameterDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBParametersOwnerDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBTypeAndNamespaceHolderDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBTypeDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBTypeMemberDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBUnaryExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlAttribute;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlAttributeAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlCDataSection;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlComment;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlDocument;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlElement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlElementContent;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlElementFooter;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlElementHeader;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlEmbeddedExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlLiteralExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlMemberAccessExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlMisc;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_vBXmlProcessingInstruction;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_whereQueryOperator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_whileStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_whileUntilCondition;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_withStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_xmlSpace;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_xmlText;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_yieldStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_0;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_1;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_10;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_11;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_12;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_13;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_14;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_15;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_16;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_17;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_18;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_19;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_2;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_20;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_21;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_22;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_23;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_24;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_25;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_26;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_27;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_28;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_29;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_3;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_30;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_31;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_32;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_33;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_34;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_35;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_36;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_37;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_38;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_39;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_4;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_40;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_41;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_42;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_43;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_44;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_45;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_46;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_47;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_48;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_49;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_5;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_50;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_51;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_52;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_53;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_54;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_55;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_6;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_7;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_8;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_9;
    }
}
namespace JetBrains.ReSharper.Psi.VB.GeneratedCode
{
    
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBGeneratedCodeRegionChecker : JetBrains.ReSharper.Psi.GeneratedCode.GeneratedCodeRegionChecker
    {
        protected override JetBrains.ReSharper.Psi.Impl.CodeStyle.IGeneratedCodeRegionDetector CreateDetector(JetBrains.Application.Settings.IContextBoundSettingsStore settingsStore) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.Cache2
{
    
    public interface IVBClassLikePart
    {
        string[] PartialMethodNames { get; }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.CodeStyle
{
    
    public class VBCodeRegionType : JetBrains.Util.EnumPattern, JetBrains.ReSharper.Psi.Util.ICodeRegionData
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.CodeStyle.VBCodeRegionType If;
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.CodeStyle.VBCodeRegionType Region;
        public VBCodeRegionType([JetBrains.Annotations.NotNullAttribute()] string name) { }
        public int GetSignificance() { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.CompilerGeneratedFiles.My
{
    
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class MyApplicationDataProvider
    {
        public MyApplicationDataProvider() { }
        public string GetMyFile([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IPsiAssembly assembly) { }
        public string GetMyFile([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.Util.FileSystemPath assemblyPath) { }
        public string GetMyXLinqFile() { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.CompilerGeneratedFiles
{
    
    public class VBCompilerGeneratedFilesMixin
    {
        public VBCompilerGeneratedFilesMixin(JetBrains.DocumentModel.IInMemoryDocumentFactory documentFactory, JetBrains.ReSharper.Psi.Modules.IPsiModule ownerModule, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IPsiSourceFile> Files { get; }
        public void OnProjectPropertiesChanged(JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder changeBuilder) { }
    }
    [JetBrains.ProjectModel.SolutionComponentAttribute()]
    public class VBCompilerGeneratedFilesProvider : JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleProviderFilter
    {
        public VBCompilerGeneratedFilesProvider(JetBrains.DocumentModel.IInMemoryDocumentFactory documentFactory) { }
        public JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleHandler, JetBrains.ReSharper.Psi.Modules.IPsiModuleDecorator> OverrideHandler(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.IProject project, JetBrains.ReSharper.Psi.Modules.IProjectPsiModuleHandler handler) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.ControlFlow
{
    
    public class VBClosureVariableInfo : JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo
    {
        public VBClosureVariableInfo(JetBrains.ReSharper.Psi.IClrDeclaredElement element) { }
    }
    public class VBControlFlowAnnotationCache
    {
        public VBControlFlowAnnotationCache(JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationsCache annotationsCache) { }
        public bool GetInstantHandle(JetBrains.ReSharper.Psi.IParameter element) { }
        public bool GetLinqTunnel(JetBrains.ReSharper.Psi.IMethod method) { }
    }
    public class VBControlFlowBody : JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowElement, JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement, JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowElement
    {
        public VBControlFlowBody(JetBrains.ReSharper.Psi.VB.Tree.IBlock body) { }
        public VBControlFlowBody(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression body) { }
        public VBControlFlowBody(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement body) { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> Children { get; }
        public JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowElement ImplicitReturn { get; }
        public override JetBrains.ReSharper.Psi.Tree.ITreeNode SourceElement { get; }
    }
    public class VBControlFlowContext : JetBrains.ReSharper.Psi.ControlFlow.Impl.ICommonLanguageControlFlowContext<JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext, JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo>
    {
        public VBControlFlowContext(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContextFactory contextFactory, JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableIndex variableIndex) { }
        public VBControlFlowContext(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext context) { }
        public VBControlFlowContext(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext context, JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext parent) { }
        public VBControlFlowContext(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext> contexts) { }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableAccessState this[JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo info] { get; set; }
        public JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext ParentContext { get; }
        public bool RecursiveAtAllPaths { get; set; }
        public JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableIndex VariableIndex { get; }
        public void AddRecentAccessInClosure(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo info, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void AddToRecentAssignmentsList(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo info, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void AddToRecentUsagesList(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo info, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ClearRecentAccessInClosure(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo info) { }
        public void ClearRecentAssignmentsList(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo info) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo> EnumerateVariables() { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetRecentAccessInClosure(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo info) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetRecentAssignmentsList(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo info) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetUsagesOfRecentAssignments(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo info, JetBrains.ReSharper.Psi.Tree.ITreeNode assignment) { }
        public JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo GetVariableInfo(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
    }
    public class VBControlFlowContextFactory : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowContextFactory<JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext>
    {
        public virtual JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext InitialContext { get; set; }
        public JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableIndex VariableIndex { get; }
        public JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext CloneContext(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext context) { }
        public JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext Merge(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext> contexts) { }
    }
    public class VBControlFlowGraf : JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowGraf, JetBrains.ReSharper.Psi.ControlFlow.IControlFlowGraf, JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowGraf
    {
        public VBControlFlowGraf(JetBrains.ReSharper.Psi.VB.Tree.IBlock block, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
        public VBControlFlowGraf(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
        public VBControlFlowGraf(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement statement, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
        public JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode Body { get; }
        public override JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement BodyElement { get; }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.ControlFlow.VBControlFlowErrorType> ControlFlowErrors { get; }
        public override JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement EntryElement { get; }
        public JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowElement ImplicitReturn { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowRib> ReachableExits { get; }
    }
    public class VBControlFlowGrafInspector : JetBrains.ReSharper.Psi.ControlFlow.Impl.CommonLanguageControlFlowGrafInspector<JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContextFactory, JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext, JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo>, JetBrains.ReSharper.Psi.ControlFlow.Impl.IControlFlowAnalysisResult, JetBrains.ReSharper.Psi.VB.ControlFlow.IVBControlFlowAnalysisResult
    {
        public VBControlFlowGrafInspector(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowGraf controlFlowGraf) { }
        public bool IsFunctionValueInitializeOnImplicitReturn { get; }
        public JetBrains.Util.OneToSetMap<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.Tree.ITreeNode>, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> PossibleMultipleEnumeration { get; }
        public override System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> UsedExternalVariables { get; }
        protected override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo> EnumerateVariables() { }
        public override void Inspect() { }
        protected override void InspectLeafElementAndSetContextToExits(JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement element, JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBControlFlowContext context) { }
        protected override bool IsForeachVariableDeclaration(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        protected override bool ShouldInspectSingleLeaf(JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowElement element) { }
    }
    public class VBVariableIndex : System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo>, System.Collections.IEnumerable
    {
        public VBVariableIndex() { }
        public int Count { get; }
        public JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo FunctionValue { get; set; }
        public JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo AddVariable(JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo info) { }
        public JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo Find(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo Find(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public System.Collections.Generic.IEnumerator<JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo> GetEnumerator() { }
    }
    public class VBVariableInfo : JetBrains.ReSharper.Psi.ControlFlow.Impl.IControlFlowVariableInfo<JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo>
    {
        public VBVariableInfo(JetBrains.ReSharper.Psi.IClrDeclaredElement element, JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableAccessState initialState, bool shouldBeAssignedUponExit = False) { }
        public JetBrains.ReSharper.Psi.IClrDeclaredElement DeclaredElement { get; }
        public int Index { get; set; }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableAccessState InitialAccessState { get; set; }
        public JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo Parent { get; }
        public bool ShouldBeAssignedUponExit { get; set; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Impl.ControlFlow.VBVariableInfo> StructFields { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.CustomHandlers
{
    
    public interface IVBCustomModificationHandler
    {
        bool CanRemoveUsing(JetBrains.DocumentModel.IDocument document, JetBrains.ReSharper.Psi.VB.Tree.IImportDirective usingDirective);
        bool CanUseAliases();
        JetBrains.ReSharper.Psi.VB.Tree.IImportDirective HandleAddImport(JetBrains.ReSharper.Psi.IPsiServices psiServices, System.Func<JetBrains.ReSharper.Psi.VB.Tree.IImportDirective> action, JetBrains.ReSharper.Psi.Tree.ITreeNode generatedAnchor, bool before, JetBrains.ReSharper.Psi.Tree.IFile generatedFile);
        JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange HandleAddStatementsRange(JetBrains.ReSharper.Psi.IPsiServices psiServices, System.Func<JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange> addAction, bool before);
        JetBrains.ReSharper.Psi.Tree.ITreeNode HandleAddTypeMember(JetBrains.ReSharper.Psi.IPsiServices psiServices, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode> action, JetBrains.ReSharper.Psi.Tree.IFile generatedFile);
        void HandleRemoveImport(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeAndNamespaceHolderDeclaration scope, JetBrains.ReSharper.Psi.VB.Tree.IImportDirective usingDirective, System.Action action);
        void HandleRemoveStatementsRange(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.ITreeRange treeRange, System.Action action);
    }
    public class VBCustomHandlersUtil
    {
        public static bool CanRemoveUsing(JetBrains.ReSharper.Psi.VB.Tree.IImportDirective usingDirective) { }
        public static bool CanUseAliases(JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        public static JetBrains.ReSharper.Psi.VB.Impl.CustomHandlers.IVBCustomModificationHandler CreateService(JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl
{
    
    public class DeclarationsRange : JetBrains.ReSharper.Psi.IDeclarationsRange
    {
        public DeclarationsRange(JetBrains.ReSharper.Psi.ITreeRange treeRange) { }
        public JetBrains.ReSharper.Psi.Tree.IDeclaration[] Declarations { get; }
        public JetBrains.ReSharper.Psi.ITreeRange TreeRange { get; }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class VBCodeAnnotationProvider : JetBrains.ReSharper.Psi.CodeAnnotations.ICustomCodeAnnotationProvider
    {
        public System.Nullable<JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationNullableValue> GetNullableAttribute(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
    }
    [JetBrains.ReSharper.Psi.PsiIconManagerExtensionAttribute()]
    public class VBDeclaredElementImageProvider : JetBrains.ReSharper.Psi.IPsiIconManagerExtension
    {
        public JetBrains.UI.Icons.IconId GetImageId(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.PsiLanguageType languageType, out bool canApplyExtensions) { }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class VBDeclaredElementPresenter : JetBrains.ReSharper.Psi.IDeclaredElementPresenter
    {
        public static JetBrains.ReSharper.Psi.VB.Impl.VBDeclaredElementPresenter Instance { get; }
        public string Format(JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle style, JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, out JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking marking) { }
        public string Format(JetBrains.ReSharper.Psi.ParameterKind parameterKind) { }
        public string Format(JetBrains.ReSharper.Psi.AccessRights accessRights) { }
    }
    public class VBDeclaredElementType : JetBrains.ReSharper.Psi.DeclaredElementTypeBase
    {
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType ANONYMOUS_METHOD;
        protected override JetBrains.ReSharper.Psi.IDeclaredElementPresenter DefaultPresenter { get; }
        public override bool IsPresentable(JetBrains.ReSharper.Psi.PsiLanguageType language) { }
    }
    public class VBElementFactoryImpl : JetBrains.ReSharper.Psi.VB.VBElementFactory
    {
        public VBElementFactoryImpl(JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool applyCodeFormatter) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration CreateAccessorDeclaration(JetBrains.ReSharper.Psi.AccessorKind kind, JetBrains.ReSharper.Psi.IType type) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration CreateAccessorDeclaration(JetBrains.ReSharper.Psi.AccessorKind kind) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBArgument CreateArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression arg) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IAttribute CreateAttribute(JetBrains.ReSharper.Psi.ITypeElement attributeClass, JetBrains.ReSharper.Psi.AttributeValue[] fixedArguments, JetBrains.Util.Pair<, >[] namedArguments) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IBlock CreateBlock(string format, params object[] args) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration CreateConstructorDeclaration() { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage CreateDeclaredTypeUsageNode(JetBrains.ReSharper.Psi.IDeclaredType type) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration CreateDelegateDeclaration() { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IDocComment CreateDocComment(string text) { }
        public override JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode CreateDocCommentBlock(string xmlText) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IBlock CreateEmptyBlock() { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList CreateEmptyParameterList() { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration CreateEnumMemberDeclaration(string enumMemberName) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration CreateEventDeclaration(JetBrains.ReSharper.Psi.IDeclaredType type, string name) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CreateExpression(string expr, params object[] args) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IExpressionArgument CreateExpressionArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CreateExpressionAsIs(string format) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CreateExpressionByConstantValue(JetBrains.ReSharper.Psi.ConstantValue value) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CreateExpressionByConstantValue(JetBrains.ReSharper.Psi.ConstantValue value, bool safeConstantValueExactType) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CreateExpressionByDefaultValue(JetBrains.ReSharper.Psi.DefaultValue value) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBFile CreateFile(string text, params object[] args) { }
        public override JetBrains.ReSharper.Psi.Tree.IIdentifier CreateIdentifier(string name) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IImportDirective CreateImportAliasDirective(string alias, JetBrains.ReSharper.Psi.ITypeElement typeElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IImportDirective CreateImportDirective(string qualifiedName) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IImportDirective CreateImportDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.INamespace @namespace) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration CreateLoopControlVariableDeclaration(string name, JetBrains.ReSharper.Psi.IType type) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration CreateModuleDeclaration(string name) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.INamedArgument CreateNamedArgument(string name, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration CreateNamespaceDeclaration(string name) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration CreateParameterDeclaration(JetBrains.ReSharper.Psi.IType type, string name, JetBrains.ReSharper.Psi.ParameterKind kind, bool isParamArray) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration CreatePropertyDeclaration(JetBrains.ReSharper.Psi.IType type, string name, bool inInterface) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression CreateReferenceExpression(string expr, params object[] args) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IReferenceName CreateReferenceName(string name, params object[] args) { }
        public override JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.VB.Tree.IRegionPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IEndRegionPreprocessorDirective> CreateRegionDirective(string name) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBStatement CreateStatement(string format, params object[] args) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration CreateTypeMemberDeclaration(string format, bool inInterface, params object[] args) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList CreateTypeParameterConstraintsList(JetBrains.ReSharper.Psi.ITypeParameter typeParameter, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, string parameterName) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration CreateTypeParameterOfMethodDeclaration(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration CreateTypeParameterOfMethodDeclaration(string typeParameter) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration CreateTypeParameterOfTypeDeclaration(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration CreateTypeParameterOfTypeDeclaration(string typeParameter) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage CreateTypeUsageNode(string typeText, params object[] args) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage CreateTypeUsageNode(JetBrains.ReSharper.Psi.IType type) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement CreateVBXmlElement(string xmlString) { }
        public static string ObfuscateVBIdentifier(string name) { }
    }
    public class static VBImplUtil
    {
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBArgument AddArgumentAfter(JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner expression, JetBrains.ReSharper.Psi.VB.Tree.IArgumentList argumentList, JetBrains.ReSharper.Psi.VB.Tree.IVBArgument argument, JetBrains.ReSharper.Psi.VB.Tree.IVBArgument anchor) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBArgument AddArgumentBefore(JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner argumentsOwner, JetBrains.ReSharper.Psi.VB.Tree.IArgumentList argumentList, JetBrains.ReSharper.Psi.VB.Tree.IVBArgument argument, JetBrains.ReSharper.Psi.VB.Tree.IVBArgument anchor) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IAttribute AddAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner attributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttribute attribute) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration AddParameterAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList parameterList, JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration parameter, JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration anchor) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration AddParameterBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList parameterList, JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration parameter, JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration anchor) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration AddTypeParameterAfter(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeOwnerDeclaration typeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration param, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration anchor) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration AddTypeParameterBefore(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeOwnerDeclaration typeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration param, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration anchor) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration AddTypeParameterBefore(JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration methodDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration param, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration anchor) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExplicitImplementation> BuildExplicitImplementations(JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause implementsClause) { }
        public static bool CaseInsensitiveEquals(string name1, string name2) { }
        public static JetBrains.ReSharper.Psi.IAttributeInstance GetAttributeInstance(this JetBrains.ReSharper.Psi.VB.Tree.IAttribute attributeNode) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner attributeListOwnerNode) { }
        public static JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode GetDocCommentBlock(JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration declaration) { }
        public static string GetName(this JetBrains.ReSharper.Psi.Tree.IIdentifier identifier) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange GetNameRange(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier identifier) { }
        public static JetBrains.ReSharper.Psi.IParameter[] GetParameters(JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration declaration) { }
        public static JetBrains.ReSharper.Psi.IParameter[] GetParameters(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList parameterList) { }
        public static string GetProjectedIdentifierName(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode GetProjectedIdentifierNode(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration> GetTypeMemberDeclarations(JetBrains.ReSharper.Psi.Tree.ITreeNode body) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypeParameterConstraintFlags GetTypeParameterConstraintFlags(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterDeclaration declaration) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetTypeParameterDeclaredTypeConstraints(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterDeclaration declaration) { }
        public static bool HasAttributeInstances(JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner attributeListOwnerNode, JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public static string MakeClrName(JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration declaration) { }
        public static string MakeSafeName(string name) { }
        public static string NormalizeName(string name) { }
        public static void RemoveArgument(JetBrains.ReSharper.Psi.VB.Tree.IArgumentList argumentList, JetBrains.ReSharper.Psi.VB.Tree.IVBArgument argument) { }
        public static void RemoveAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute attribute) { }
        public static void RemoveParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList parameterList, JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration parameter) { }
        public static void RemoveTypeParameter(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeOwnerDeclaration typeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration param) { }
        public static void RemoveTypeParameter(JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration methodDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration param) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBArgument ReplaceArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBArgument argument, JetBrains.ReSharper.Psi.VB.Tree.IVBArgument newArgument) { }
        public static void ReplaceIdentifier(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier node, string name) { }
        public static void SetKeywordAtFirstPlace(bool value, JetBrains.ReSharper.Psi.Tree.ITreeNode root, JetBrains.ReSharper.Psi.Tree.ITokenNode keyword, JetBrains.ReSharper.Psi.Parsing.TokenNodeType keywordType) { }
    }
    public class static VBImportsUtil
    {
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportDirective AddImport(JetBrains.ReSharper.Psi.VB.Tree.IVBFile file, JetBrains.ReSharper.Psi.INamespace @namespace) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportDirective AddImport(JetBrains.ReSharper.Psi.VB.Tree.IVBFile file, JetBrains.ReSharper.Psi.VB.Tree.IImportDirective directive, bool saveUsingListPosition = False) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportDirective AddImportAfter(JetBrains.ReSharper.Psi.VB.Tree.IVBFile file, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, JetBrains.ReSharper.Psi.VB.Tree.IImportDirective directive) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportDirective AddImportBefore(JetBrains.ReSharper.Psi.VB.Tree.IVBFile file, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, JetBrains.ReSharper.Psi.VB.Tree.IImportDirective directive) { }
        public static bool AlreadyImported(JetBrains.ReSharper.Psi.VB.Tree.IVBFile file, JetBrains.ReSharper.Psi.INamespace @namespace) { }
        public static string FindAliasTo(JetBrains.ReSharper.Psi.VB.Tree.IVBFile file, JetBrains.ReSharper.Psi.INamespace @namespace) { }
        public static string FindAliasTo(JetBrains.ReSharper.Psi.VB.Tree.IVBFile file, JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.ITypeElement> target) { }
        public static System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.VB.Tree.IImportClause, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.IReference>> GetImportClausesUsages(JetBrains.ReSharper.Psi.VB.Tree.IVBFile file) { }
        public static System.Collections.Generic.List<JetBrains.ReSharper.Psi.VB.Impl.VBImportsUtil.Conflict> GetImportConflicts(JetBrains.ReSharper.Psi.VB.Tree.IVBFile scope, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.INamespace ns) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportClause GetImportOf(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference) { }
        public static bool IsAliasValid(JetBrains.ReSharper.Psi.VB.Tree.IVBFile file, string alias) { }
        public static bool IsTrivialAlias(this JetBrains.ReSharper.Psi.VB.Tree.IImportAliasClause clause) { }
        public static void RemoveImport(JetBrains.ReSharper.Psi.VB.Tree.IImportDirective directive) { }
        public static void RemoveImportClause(JetBrains.ReSharper.Psi.VB.Tree.IImportClause clause) { }
        public static void RemoveUnusedImports(JetBrains.DocumentModel.IDocument document, JetBrains.ReSharper.Psi.VB.Tree.IVBFile file) { }
        public class Conflict
        {
            public readonly JetBrains.ReSharper.Psi.Tree.ITreeNode Element;
            [JetBrains.Annotations.NotNullAttribute()]
            public readonly JetBrains.ReSharper.Psi.IDeclaredElement OriginalResolve;
            public readonly JetBrains.ReSharper.Psi.Resolve.IReference Reference;
            [JetBrains.Annotations.CanBeNullAttribute()]
            public JetBrains.ReSharper.Psi.IDeclaredElement ResolveOnConflict;
            public Conflict(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Resolve.IReference reference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement originalResolve) { }
        }
    }
    public class static VBInvocableSignatureComparer
    {
        public static readonly JetBrains.ReSharper.Psi.ISignatureComparer Override;
        public static JetBrains.ReSharper.Psi.ISignatureComparer Overload(System.Version vbVersion) { }
    }
    public enum VBLanguageLevel
    {
        Default = 0,
        Vb8 = 8,
        Vb9 = 9,
        Vb10 = 10,
        Vb11 = 11,
        Latest = 11,
    }
    [JetBrains.ProjectModel.ProjectComponentAttribute(ProjectKinds=JetBrains.ProjectModel.ProjectKind.UNSUPPORTED | JetBrains.ProjectModel.ProjectKind.REGULAR_PROJECT | JetBrains.ProjectModel.ProjectKind.WEB_SITE)]
    public class VBLanguageLevelProjectProperty : JetBrains.ReSharper.Psi.Impl.SimpleLanguageLevelPropertyBase<JetBrains.ReSharper.Psi.VB.Impl.VBLanguageProjectSettings, JetBrains.ReSharper.Psi.VB.Impl.VBLanguageLevel>
    {
        public VBLanguageLevelProjectProperty(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.IProject project, JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.ProjectModel.Transaction.IProjectModelBatchChangeManager projectModelBatchChangeManager, JetBrains.Application.IShellLocks locks, JetBrains.ProjectModel.Settings.Store.ProjectSettings projectSettings) { }
        protected override System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.VB.Impl.VBLanguageProjectSettings, JetBrains.ReSharper.Psi.VB.Impl.VBLanguageLevel>> Expression { get; }
        protected override string PropertyName { get; }
        protected override JetBrains.ReSharper.Psi.VB.Impl.VBLanguageLevel GetDefaultLanguageLevel() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Impl.VBLanguageLevelProjectProperty TryGetInstance(JetBrains.ProjectModel.IProject project) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Impl.VBLanguageLevelProjectProperty TryGetInstance(JetBrains.ProjectModel.IProjectFile projectFile) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Settings.CodeInspectionSettings), "VB.NET language settings")]
    public class VBLanguageProjectSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.VB.Impl.VBLanguageLevel.Default, "VB.NET language level")]
        public JetBrains.ReSharper.Psi.VB.Impl.VBLanguageLevel LanguageLevel;
    }
    [JetBrains.ProjectModel.Settings.Upgrade.ProjectSettingsUpgraderAttribute()]
    public class VBLanguageProjectSettingsUpgrader : JetBrains.Application.Configuration.IXmlReadable, JetBrains.Application.Configuration.Upgrade.ISettingsUpgrader, JetBrains.ProjectModel.Settings.Upgrade.IProjectSettingsUpgrader
    {
        public void Upgrade(JetBrains.Application.Configuration.IComponentSettingsProvider legacySettingsProvider, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore, JetBrains.DataFlow.Lifetime upgradeLifetime) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBLanguageServiceImpl : JetBrains.ReSharper.Psi.LanguageService
    {
        public VBLanguageServiceImpl(JetBrains.ReSharper.Psi.VB.VBLanguage vbLanguage, JetBrains.ReSharper.Psi.IConstantValueService constantValueService, JetBrains.ReSharper.Psi.VB.CodeStyle.IVBCodeFormatter codeFormatter, JetBrains.ReSharper.Psi.Util.CommonIdentifierIntern commonIdentifierIntern) { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ILanguageCacheProvider CacheProvider { get; }
        public override JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter CodeFormatter { get; }
        public override JetBrains.ReSharper.Psi.IDeclaredElementPresenter DeclaredElementPresenter { get; }
        public override bool IsCaseSensitive { get; }
        public override bool SupportTypeMemberCache { get; }
        [System.ObsoleteAttribute("Context information is necessary for correct conversions. Usa language dependent " +
            "extension method \'GetTypeConversionRule\' from corresponding tree node.")]
        public override JetBrains.ReSharper.Psi.ITypeConversionRule TypeConversionRule { get; }
        public override JetBrains.ReSharper.Psi.ITypePresenter TypePresenter { get; }
        public override bool CanContainCachableDeclarations(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public override JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T> CreateElementPointer<T>(T declaredElement)
            where T : JetBrains.ReSharper.Psi.IDeclaredElement { }
        public override JetBrains.ReSharper.Psi.Parsing.ILexer CreateFilteringLexer(JetBrains.ReSharper.Psi.Parsing.ILexer lexer) { }
        public override JetBrains.ReSharper.Psi.Parsing.IParser CreateParser(JetBrains.ReSharper.Psi.Parsing.ILexer lexer, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.IReferenceContextCodec CreateReferenceContextCodec() { }
        public override System.Collections.Generic.IEnumerable<string> EnumerateParserCapabilities() { }
        public override JetBrains.ReSharper.Psi.Parsing.ILexerFactory GetPrimaryLexerFactory() { }
        public override JetBrains.ReSharper.Psi.ReferenceAccessType GetReferenceAccessType(JetBrains.ReSharper.Psi.IDeclaredElement target, JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        public override JetBrains.ReSharper.Psi.PreProcessingDirectivesInFile GetUsedConditionalSymbols(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public override bool IsTypeMemberVisible(JetBrains.ReSharper.Psi.ITypeMember member) { }
        public override bool IsValidName(JetBrains.ReSharper.Psi.DeclaredElementType elementType, string name) { }
        public override void OptimizeImportsAndRefs(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IRangeMarker rangeMarker, bool optimizeUsings, bool shortenReferences, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public override JetBrains.ReSharper.Psi.Tree.ITreeNode ParseUsingCapability(string text, string capability, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    public class static VBModifiersUtil
    {
        public static readonly string[] DefaultModifiersOrder;
        public static int CompareModifierOrder(JetBrains.ReSharper.Psi.Tree.ITokenNode mod1, JetBrains.ReSharper.Psi.Tree.ITokenNode mod2) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetAbstract(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.AccessRights GetAccessRightsModifiers(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList node) { }
        public static JetBrains.ReSharper.Psi.AccessRights GetAccessRightsModifiers(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetAsync(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.MemberDecoration GetDecoration(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.MemberHidePolicy GetHidePolicy(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetIterator(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetOverload(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetOverloads(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetOverride(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetPartial(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetReadonly(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetSealed(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetShadows(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetSourceModifier(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList modifiersList, JetBrains.ReSharper.Psi.Parsing.TokenNodeType modifier) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetStatic(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetVirtual(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetWithEvents(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITokenNode GetWriteonly(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasAbstract(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasAsync(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasIterator(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasOverload(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasOverloads(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasOverride(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasPartial(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasReadonly(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasSealed(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasShadows(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasSourceModifier(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList modifiersList, JetBrains.ReSharper.Psi.Parsing.TokenNodeType modifier) { }
        public static bool HasStatic(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasVirtual(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasWithEvents(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static bool HasWriteonly(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node) { }
        public static void SetAbstract(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetAccessRightsModifiers(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, JetBrains.ReSharper.Psi.AccessRights rights) { }
        public static void SetAsync(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetDefault(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetIterator(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetOverload(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetOverride(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetPartial(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetReadonly(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetSealed(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetShadows(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetSourceModifiers(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Parsing.TokenNodeType> modsToAdd, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Parsing.TokenNodeType> modsToRemove) { }
        public static void SetStatic(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetVirtual(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetWithEvents(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
        public static void SetWriteonly(JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner node, bool value) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class VBModuleCache : JetBrains.ReSharper.Psi.Caches.InvalidatingPsiCache
    {
        public VBModuleCache() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeElement> GetModulesInNamespace(JetBrains.ReSharper.Psi.INamespace ns, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        protected override void InvalidateOnPhysicalChange() { }
    }
    [JetBrains.ProjectModel.ProjectFileTypeAttribute(typeof(JetBrains.ProjectModel.VBProjectFileType))]
    public class VBProjectFileCustomPsiPropertiesProvider : JetBrains.ReSharper.Psi.IProjectFileCustomPsiPropertiesProvider
    {
        public virtual T GetCustomProperties<T>(JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
    [JetBrains.ProjectModel.ProjectFileTypeAttribute(typeof(JetBrains.ProjectModel.VBProjectFileType))]
    public class VBProjectFileLanguageService : JetBrains.ReSharper.Psi.IProjectFileLanguageService
    {
        public const string DEFINE_MYTYPE = "_MYTYPE";
        public VBProjectFileLanguageService(JetBrains.ProjectModel.VBProjectFileType vbProjectFileType) { }
        public JetBrains.UI.Icons.IconId Icon { get; }
        public JetBrains.ProjectModel.ProjectFileType LanguageType { get; }
        public JetBrains.ReSharper.Psi.Parsing.ILexerFactory GetMixedLexerFactory(JetBrains.ProjectModel.ISolution solution, JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile = null) { }
        public JetBrains.ReSharper.Psi.PreProcessingDirective[] GetPreprocessorDefines(JetBrains.ProjectModel.IProject project) { }
        public JetBrains.ReSharper.Psi.PsiLanguageType GetPsiLanguageType(JetBrains.ProjectModel.IProjectFile projectFile) { }
        public JetBrains.ReSharper.Psi.PsiLanguageType GetPsiLanguageType(JetBrains.ProjectModel.ProjectFileType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiSourceFileProperties GetPsiProperties(JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements
{
    
    public class ForeachImplicitlyTypedVariable : JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.LoopControlImplicitlyTypedVariable
    {
        public ForeachImplicitlyTypedVariable([JetBrains.Annotations.NotNullAttribute()] string shortName, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression loopControlVariableExpression) { }
        public override JetBrains.ReSharper.Psi.IType CalculateType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.IImplicitLocalVariable SetName(string newName) { }
    }
    public class ForImplicitlyTypedVariable : JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.LoopControlImplicitlyTypedVariable
    {
        public ForImplicitlyTypedVariable([JetBrains.Annotations.NotNullAttribute()] string shortName, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression loopControlVariableExpression) { }
        public override JetBrains.ReSharper.Psi.IType CalculateType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.IImplicitLocalVariable SetName(string newName) { }
    }
    public interface IImplicitLocalVariable : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ILocalVariable, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.VB.IVBLocalVariable
    {
        JetBrains.ReSharper.Psi.Tree.ITreeNode DeclaringElement { get; }
        JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.IImplicitLocalVariable SetName([JetBrains.Annotations.NotNullAttribute()] string newName);
    }
    public interface ILoopControlImplicitlyTypedVariable : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ILocalVariable, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.IImplicitLocalVariable, JetBrains.ReSharper.Psi.VB.IVBLocalVariable { }
    public class ImplicitLocalVariable : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedVariableImpl, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ILocalVariable, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.IImplicitLocalVariable, JetBrains.ReSharper.Psi.VB.IVBLocalVariable
    {
        public ImplicitLocalVariable([JetBrains.Annotations.NotNullAttribute()] string shortName, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression firstDeclaration) { }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.ConstantValue ConstantValue { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode DeclaringElement { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsConstant { get; }
        public bool IsImplicitlyTyped { get; }
        public bool IsStatic { get; }
        public bool IsWritable { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public JetBrains.ReSharper.Psi.IType CalculateType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public bool Equals(JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.ImplicitLocalVariable obj) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.IImplicitLocalVariable SetName(string newName) { }
    }
    public class ImplicitLocalVariablePointer<T> : JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T>
        where T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public ImplicitLocalVariablePointer(T variable) { }
        public JetBrains.ReSharper.Psi.IPsiServices PsiServices { get; }
        public T FindDeclaredElement() { }
    }
    public interface IVBAnonymousTypeProperty : JetBrains.ReSharper.Psi.IAnonymousTypeProperty, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner
    {
        JetBrains.ReSharper.Psi.VB.Types.IVBAnonymousType ContainingType { get; }
        bool IsKey { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IAnonymousMemberDeclaration PropertyDeclaration { get; }
    }
    public interface IVBEvent : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IEvent, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        JetBrains.ReSharper.Psi.IField EventField { get; }
        JetBrains.ReSharper.Psi.IDelegate EventHandlerDelegate { get; }
    }
    public interface IVBField : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IField, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IField WithEventsField { get; }
    }
    public interface IVBMethod : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IMethod, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        bool IsPartial { get; }
    }
    public interface IVBProperty : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.IProperty, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IField AutoField { get; }
        bool IsAuto { get; }
    }
    public abstract class LoopControlImplicitlyTypedVariable : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedVariableImpl, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ILocalVariable, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.IImplicitLocalVariable, JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.ILoopControlImplicitlyTypedVariable, JetBrains.ReSharper.Psi.VB.IVBLocalVariable
    {
        protected readonly JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression myLoopControlVariableExpression;
        [JetBrains.Annotations.NotNullAttribute()]
        protected readonly string myShortName;
        protected LoopControlImplicitlyTypedVariable([JetBrains.Annotations.NotNullAttribute()] string shortName, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression loopControlVariableExpression) { }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.ConstantValue ConstantValue { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode DeclaringElement { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsConstant { get; }
        public bool IsImplicitlyTyped { get; }
        public bool IsStatic { get; }
        public bool IsWritable { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public abstract JetBrains.ReSharper.Psi.IType CalculateType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        public virtual bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public virtual int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public abstract JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.IImplicitLocalVariable SetName([JetBrains.Annotations.NotNullAttribute()] string newName);
    }
    public class VBEventHandlerPointer<T> : JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T>
        where T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public VBEventHandlerPointer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IEvent constitutiveEvent, bool isDelegate) { }
        public JetBrains.ReSharper.Psi.IPsiServices PsiServices { get; }
        public T FindDeclaredElement() { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.DocComments
{
    
    public class VBDocCommentElementFactory : JetBrains.ReSharper.Psi.Xml.XmlDocComments.ClrDocCommentElementFactoryImpl
    {
        public VBDocCommentElementFactory(JetBrains.ReSharper.Psi.Xml.XmlDocComments.IDocCommentXmlPsi xmlPsi) { }
        protected override JetBrains.Util.Key<object> XmlResolveKey { get; }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.Operators
{
    
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class VBOperatorTable
    {
        public VBOperatorTable() { }
        public static JetBrains.ReSharper.Psi.VB.Impl.Operators.VBOperatorTable Instance { get; }
        public JetBrains.ReSharper.Psi.Resolve.IResolveResult this[JetBrains.ReSharper.Psi.Modules.IPsiModule module, string name, bool strictOff, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> argumentTypes, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context] { get; }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.Query
{
    
    public abstract class PositionalArgumentInfoBase : JetBrains.ReSharper.Psi.VB.Impl.Resolve.VBArgumentInfoBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedConvertibleImpl, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible
    {
        protected PositionalArgumentInfoBase([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.VB.IVBInvocationInfo invocation, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode element) { }
        public override JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible ManagedConvertible { get; }
        public JetBrains.ReSharper.Psi.IType CalculateImplicitlyConvertedTo(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public bool Equals(JetBrains.ReSharper.Psi.VB.Impl.Query.PositionalArgumentInfoBase other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class QueryEqualsSideSelector : JetBrains.ReSharper.Psi.IRecursiveElementProcessor
    {
        public bool ProcessingIsFinished { get; }
        public static bool HasReferenceTo(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression, string name) { }
        public bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessAfterInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessBeforeInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public class static QueryIndexerUtil
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo TryResolveQueryIndexer(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo invocation, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expressionOfCollectionType, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.Resolve
{
    
    public struct ArgumentMatch
    {
        public JetBrains.ReSharper.Psi.VB.IVBArgumentInfo Argument { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.IParameter Parameter { get; }
    }
    public class ArgumentsMatcher
    {
        public ArgumentsMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments) { }
        public bool CheckParametersCount(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
        public static JetBrains.ReSharper.Psi.VB.Impl.Resolve.IArgumentsMatcher CreateResolveMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments, bool isExtension) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter>> GetAllParametersMatchingArgument(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter>> GetAllParametersMatchingArgument(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> GetArgumentMatchingParameter(JetBrains.ReSharper.Psi.IParameter parameter, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo invocation, out bool isExpanded) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterInstanceType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> parameterInstance, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterInstanceType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> parameterInstance, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, out bool isExpanded) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterInstanceType(JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> instance, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, out bool expanded) { }
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> GetParameterMatchingArgument(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> GetParameterMatchingArgument(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> elementInstance) { }
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> GetParameterMatchingArgument(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterMultitype(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterMultitype(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterType(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static bool IsExpanded(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static bool IsExpanded(JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> parameterInstance, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static bool IsInvocationExpanded(JetBrains.ReSharper.Psi.VB.IVBInvocationInfo invocation) { }
        public System.Nullable<JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentsMatchResult> Match(JetBrains.ReSharper.Psi.IParametersOwner owner) { }
    }
    public class static ArgumentsMatcherExtensions
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter>> GetAllMatchingParameters(this JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter>> GetAllMatchingParameters(this JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> GetMatchingParameter(this JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> elementInstance) { }
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> GetMatchingParameter(this JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> GetMatchingParameter(this JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static int GetParameterIndexByName(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters, string name, int startIndex) { }
        public static int GetParameterIndexByName(JetBrains.ReSharper.Psi.IParametersOwner owner, string name) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterMultitype(this JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterMultitype(this JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterType(this JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterType(this JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterType(JetBrains.ReSharper.Psi.IParameter parameter, bool isExpanded) { }
        public static bool IsExpanded(this JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> parameterInstance) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.ArgumentMatchWithType> MatchResultWithTypes(this JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentsMatchResult matchResult, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo, JetBrains.ReSharper.Psi.IParameter, JetBrains.ReSharper.Psi.IType, bool>> Processor(this JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentsMatchResult matchResult) { }
    }
    public struct ArgumentsMatchResult
    {
        [JetBrains.Annotations.PureAttribute()]
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentMatch> GetMatched() { }
        [JetBrains.Annotations.PureAttribute()]
        public System.Nullable<JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentMatch> GetMatchedByArgument(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo) { }
        [JetBrains.Annotations.PureAttribute()]
        public JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentMatch GetMatchedByArgumentIndex(int argumentIndex) { }
    }
    public class BadArgumentInfo : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedConvertibleImpl, JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo
    {
        public BadArgumentInfo(JetBrains.ReSharper.Psi.VB.IVBInvocationInfo invocation) { }
        public string ArgumentName { get; }
        public JetBrains.ReSharper.Psi.VB.IVBInvocationInfo Invocation { get; }
        public bool IsExtension { get; }
        public JetBrains.ReSharper.Psi.VB.ArgumentKind Kind { get; }
        public JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible ManagedConvertible { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> MatchingParameter { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        public JetBrains.ReSharper.Psi.IType CalculateImplicitlyConvertedTo(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public bool Equals(JetBrains.ReSharper.Psi.VB.Impl.Resolve.BadArgumentInfo obj) { }
        public override bool Equals(object obj) { }
        public JetBrains.DocumentModel.DocumentRange GetDocumentRange() { }
        public JetBrains.ReSharper.Psi.IExpressionType GetExpressionType() { }
        public JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool IsClassifiedAsVariable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public bool IsValid() { }
    }
    public class ConstructorQualifier : JetBrains.ReSharper.Psi.Resolve.IQualifier, JetBrains.ReSharper.Psi.Resolve.IQualifierWithTypeElement
    {
        public ConstructorQualifier(JetBrains.ReSharper.Psi.VB.Tree.IInstanceExpression qualifier) { }
        public bool Resolved { get; }
        public JetBrains.ReSharper.Psi.Resolve.QualifierKind GetKind() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetQualifierTypeElement() { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTable(JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
    }
    public enum ExpandedKind
    {
        NoneExpanded = 0,
        IsExpanded = 1,
        CanBeExpanded = 2,
    }
    public class ExpressionArgumentInfo : JetBrains.ReSharper.Psi.VB.Impl.Query.PositionalArgumentInfoBase
    {
        public ExpressionArgumentInfo(JetBrains.ReSharper.Psi.VB.IVBInvocationInfo invocation, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        public bool Equals(JetBrains.ReSharper.Psi.VB.Impl.Resolve.ExpressionArgumentInfo other) { }
        public override bool Equals(object obj) { }
        public override JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override int GetHashCode() { }
        public override bool IsClassifiedAsVariable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
    }
    public abstract class ExtensionArgumentInfoBase : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedConvertibleImpl, JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo
    {
        protected ExtensionArgumentInfoBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.IVBInvocationInfo invocation) { }
        public string ArgumentName { get; }
        public JetBrains.ReSharper.Psi.VB.IVBInvocationInfo Invocation { get; }
        public bool IsExtension { get; }
        public JetBrains.ReSharper.Psi.VB.ArgumentKind Kind { get; }
        public JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible ManagedConvertible { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> MatchingParameter { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        public JetBrains.ReSharper.Psi.IType CalculateImplicitlyConvertedTo(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public bool Equals(JetBrains.ReSharper.Psi.VB.Impl.Resolve.ExtensionArgumentInfoBase other) { }
        public override bool Equals(object obj) { }
        public virtual JetBrains.DocumentModel.DocumentRange GetDocumentRange() { }
        public JetBrains.ReSharper.Psi.IExpressionType GetExpressionType() { }
        public abstract JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public virtual bool IsClassifiedAsVariable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public virtual bool IsValid() { }
    }
    public class ExtensionArgumentInfoWithQualifier : JetBrains.ReSharper.Psi.VB.Impl.Resolve.ExtensionArgumentInfoBase
    {
        public ExtensionArgumentInfoWithQualifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo invocation) { }
        public bool Equals(JetBrains.ReSharper.Psi.VB.Impl.Resolve.ExtensionArgumentInfoWithQualifier other) { }
        public override bool Equals(object obj) { }
        public override JetBrains.DocumentModel.DocumentRange GetDocumentRange() { }
        public override JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override int GetHashCode() { }
        public override bool IsClassifiedAsVariable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override bool IsValid() { }
    }
    public class ExtensionArgumentInfoWithType : JetBrains.ReSharper.Psi.VB.Impl.Resolve.ExtensionArgumentInfoBase
    {
        public ExtensionArgumentInfoWithType(JetBrains.ReSharper.Psi.IType qualifierType, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo invocation) { }
        public bool Equals(JetBrains.ReSharper.Psi.VB.Impl.Resolve.ExtensionArgumentInfoWithType other) { }
        public override bool Equals(object obj) { }
        public override JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override int GetHashCode() { }
        public override bool IsValid() { }
    }
    public class ExtensionMethodArgumentsMatcher : JetBrains.ReSharper.Psi.VB.Impl.Resolve.IArgumentsMatcher
    {
        public ExtensionMethodArgumentsMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments) { }
        public bool CheckParametersCount(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> GetParameterMatchingArgument(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> elementInstance) { }
        public System.Nullable<JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentsMatchResult> Match(JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> parametersOwner, JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy matchingPolicy) { }
    }
    public interface IArgumentsMatcher
    {
        bool CheckParametersCount(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> GetParameterMatchingArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> elementInstance);
        System.Nullable<JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentsMatchResult> Match([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> parametersOwner, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy matchingPolicy);
    }
    public struct Invocation
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolFilter> filters, string name, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo qualifier, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> typeArguments, bool resolveToExtensionMethods) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveExtensionMethod(JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> method, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo qualifier, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> typeArguments, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveMethodGroup(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolFilter> filters, string name, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo qualifier, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> typeArguments, JetBrains.ReSharper.Psi.IType delegateReturnType) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveWithoutExtensions([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolFilter> filters, string name, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
    }
    public class static LambdaUtil
    {
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.ILambdaParameter> GetImplicitLambdaParameters(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public static bool HasImplicitLambdaParameters(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
    }
    public class OperatorArgumentsMatcher : JetBrains.ReSharper.Psi.VB.Impl.Resolve.IArgumentsMatcher
    {
        public OperatorArgumentsMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments) { }
        public bool CheckParametersCount(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> GetParameterMatchingArgument(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> elementInstance) { }
        public System.Nullable<JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentsMatchResult> Match(JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> parametersOwner, JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy matchingPolicy) { }
    }
    public class ResolveArgumentsMatcher : JetBrains.ReSharper.Psi.VB.Impl.Resolve.IArgumentsMatcher
    {
        public ResolveArgumentsMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments) { }
        public bool CheckParametersCount(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> GetParameterMatchingArgument(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> elementInstance) { }
        public System.Nullable<JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentsMatchResult> Match(JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> parametersOwner, JetBrains.ReSharper.Psi.VB.ExpectedTypes.IMatchingPolicy matchingPolicy) { }
    }
    public abstract class VBArgumentInfoBase : JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo
    {
        protected VBArgumentInfoBase(JetBrains.ReSharper.Psi.VB.IVBInvocationInfo invocation, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode node) { }
        public virtual string ArgumentName { get; }
        public JetBrains.ReSharper.Psi.VB.IVBInvocationInfo Invocation { get; }
        public virtual bool IsExtension { get; }
        public virtual JetBrains.ReSharper.Psi.VB.ArgumentKind Kind { get; }
        public virtual JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible ManagedConvertible { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> MatchingParameter { get; }
        protected JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode Node { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        public override bool Equals(object obj) { }
        public bool Equals(JetBrains.ReSharper.Psi.VB.Impl.Resolve.VBArgumentInfoBase other) { }
        public virtual JetBrains.DocumentModel.DocumentRange GetDocumentRange() { }
        public abstract JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        public JetBrains.ReSharper.Psi.IExpressionType GetExpressionType() { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public virtual bool IsClassifiedAsVariable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public virtual bool IsValid() { }
    }
    public class static VBResolveUtil
    {
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable AddDeclarationsForNamespace(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.INamespace @namespace, JetBrains.ReSharper.Psi.VB.Tree.IImportClause importClause, int currentLevel, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo ChangeResolveErrorType(this JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo originalInfo, JetBrains.ReSharper.Psi.Resolve.ResolveErrorType errorType) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.DeclaredElements.ArrayIndexer CreateArrayIndexer(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.IArrayType arrayType, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Tree.IVBArgument> arguments) { }
        public static JetBrains.ReSharper.Psi.ITypeMember GetAccessContainingTypeMember(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IDelegate> GetDelegateType(JetBrains.ReSharper.Psi.IType type, bool forLambda) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBExpression GetEnclosingWithExpression(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static JetBrains.ReSharper.Psi.Resolve.IQualifier GetEnclosingWithQualifier(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportClause GetImport(this JetBrains.ReSharper.Psi.Resolve.ISymbolInfo symbolInfo) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportClause GetImportClause(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo info) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IParametersOwner>> GetParametersOwnersWithLifted(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        public static JetBrains.ReSharper.Psi.Resolve.Staticness GetQualifierStaticness(JetBrains.ReSharper.Psi.Resolve.IQualifier qualifier) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IClrDeclaredElement declaredElement, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo GetVBResolveResult(this JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable, string name) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> InferableTypeParameters(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo symbolInfo) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveConstructor([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable table, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveOperator(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Modules.IPsiModule module, string name, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
        public class VBImportAliasesSymbolTable : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.SymbolTableBase
        {
            public VBImportAliasesSymbolTable(JetBrains.ReSharper.Psi.Modules.IPsiModule module, System.Collections.Generic.IEnumerable<JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.VB.Tree.IImportClause, string, System.Func<JetBrains.ReSharper.Psi.DeclaredElementInstance>>> aliases, int level) { }
            public override void ForAllSymbolInfos(System.Action<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> processor) { }
            public override JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet GetDependencySet() { }
            public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfos(string name) { }
            public override System.Collections.Generic.IEnumerable<string> Names() { }
        }
        public class VBImportedTypeElementSymbolTable : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.SymbolTableBase
        {
            public VBImportedTypeElementSymbolTable(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.VB.Tree.IImportClause importClause, JetBrains.ReSharper.Psi.IDeclaredType type, int level, JetBrains.ReSharper.Psi.Resolve.SymbolTableMode mode) { }
            public override void ForAllSymbolInfos(System.Action<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> processor) { }
            public override JetBrains.ReSharper.Psi.Dependencies.ISymbolTableDependencySet GetDependencySet() { }
            public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetSymbolInfos(string name) { }
            public override System.Collections.Generic.IEnumerable<string> Names() { }
        }
    }
    public class static VBSymbolInfoExt
    {
        public static bool IsExtensionMethod(this JetBrains.ReSharper.Psi.Resolve.ISymbolInfo info) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.Resolve.ExtensionMethods
{
    
    public class ExtensionMethodsSymbolTableBuilder
    {
        public ExtensionMethodsSymbolTableBuilder([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type) { }
        public static bool CheckExtensionMethodConsistency(JetBrains.ReSharper.Psi.IMethod method) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod>> GetExtensionMethods(string shortName) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTable() { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTable(string shortName) { }
        public bool HasExtensionMethod(string shortName) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution InferSubstitution(JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.IType type) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ExtensionMethodAccessibility IsExtensionMethodAccessible(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.IMethod method) { }
    }
    public class static VBBaseTypesIteratorUtil
    {
        public static System.Collections.Generic.List<JetBrains.ReSharper.Psi.IType> GetBaseTypes([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> GetBaseTypes([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, bool includeThisType) { }
        public static bool IterateBaseTypes([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, System.Func<JetBrains.ReSharper.Psi.IType, bool> consumer, bool includeThisType) { }
    }
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class VBExtensionMethodsRegistryImpl : JetBrains.ReSharper.Psi.VB.ExtensionMethods.VBExtensionMethodsRegistry
    {
        public VBExtensionMethodsRegistryImpl(JetBrains.ReSharper.Psi.Caches.ISymbolCache symbolCache) { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery GetAllExtensionMethods(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
    }
    public class static VBExtensionMethodUtil
    {
        public static JetBrains.Util.Pair<System.Collections.Generic.IList<JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.INamespace, JetBrains.ReSharper.Psi.VB.Tree.IImportNamespaceClause, int>>, System.Collections.Generic.IList<JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.VB.Tree.IImportNamespaceClause, int>>> AllExtensionMethodsProviders(JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode element) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> EnumerateModuleExtensionMethods(JetBrains.ReSharper.Psi.ITypeElement module, string shortName) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetQualifierType([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.VB.IVBArgumentInfo qualifier, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> InferableTypeParametersOfExtensionMethod(JetBrains.ReSharper.Psi.IMethod method) { }
        public static bool SomeExtensionMethodIsAccessible(JetBrains.ReSharper.Psi.VB.IVBArgumentInfo qualifier, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context, string name) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters
{
    
    public class AllEventsFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.AllEventsFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class AllFieldsFilter : JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.AllFilter<JetBrains.ReSharper.Psi.IField>
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.AllFieldsFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
    }
    public abstract class AllFilter<T> : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
        where T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public abstract JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public virtual JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class AllMethodsFilter : JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.AllFilter<JetBrains.ReSharper.Psi.IMethod>
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.AllMethodsFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
    }
    public class AllNotOperatorsFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.AllNotOperatorsFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class AllTypesFilter : JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.AllFilter<JetBrains.ReSharper.Psi.ITypeElement>
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.AllTypesFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
    }
    public class ApplicableToDelegateFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public ApplicableToDelegateFilter(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class ClassTypeParameterNumberFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public ClassTypeParameterNumberFilter(int typeParameterCount) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class CoClassEventFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public CoClassEventFilter(JetBrains.ReSharper.Psi.IInterface qualifierInterface) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class DefaultPropertyFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.DefaultPropertyFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class ExtensionBetterThanNonInstanceFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public ExtensionBetterThanNonInstanceFilter(JetBrains.ReSharper.Psi.ITypeElement containingTypeElement) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolFilter GetInstance(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression qualifier, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
    }
    public class ExtensionMethodsLevelFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.Resolve.ISymbolFilter INSTANCE;
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class FieldThanEventFieldFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.FieldThanEventFieldFilter INSTANCE;
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class GeneratedInstancesFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.Resolve.ISymbolFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class InterfaceMemberSpecifierSignatureFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public InterfaceMemberSpecifierSignatureFilter(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class MemberInitializerFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public MemberInitializerFilter(JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class MethodTypeParameterNumberFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolInfoFilter
    {
        public MethodTypeParameterNumberFilter(int typeParameterCount) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo symbolInfo) { }
    }
    public class SkipAccessorsFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.SkipAccessorsFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class TypeThanNamespaceFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.TypeThanNamespaceFilter INSTANCE;
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class UseLocalVariableBeforeDeclarationFilter : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.UseLocalVariableBeforeDeclarationFilterBase
    {
        public UseLocalVariableBeforeDeclarationFilter(JetBrains.ReSharper.Psi.Tree.ITreeNode usage) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        protected override bool IsCaseSensitive { get; }
        protected override JetBrains.ReSharper.Psi.Tree.ITreeNode GetDeclarationNode(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        protected override bool UsedBeforeDeclaration(JetBrains.ReSharper.Psi.Tree.ITreeNode declaration) { }
    }
    public class VBAccessRightsFilter : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.AccessRightsFilter
    {
        public VBAccessRightsFilter(JetBrains.ReSharper.Psi.Resolve.IAccessContext context) { }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class VBAttributeFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.VBAttributeFilter INSTANCE;
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class VBInitializerReferenceFilter : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.InitializerReferenceFilter
    {
        public VBInitializerReferenceFilter(JetBrains.ReSharper.Psi.Resolve.IAccessContext context, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        protected override JetBrains.ReSharper.Psi.IDeclaredElement GetInitializerOwner(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public class VBLastCandidateIsLocalFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.VBLastCandidateIsLocalFilter INSTANCE;
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class VBMemberFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.VBMemberFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class VBMethodGroupConvertibleFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public VBMethodGroupConvertibleFilter(JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IDelegate> expectedType, System.Version languageVersion, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class VBStaticCompletionFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolInfoFilter
    {
        public VBStaticCompletionFilter(JetBrains.ReSharper.Psi.Resolve.IAccessContext context) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo symbolInfo) { }
    }
    public class VBValidNamesFilter : JetBrains.ReSharper.Psi.Resolve.ValidNamesFilter
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.Filters.VBValidNamesFilter INSTANCE;
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution
{
    
    public class ApplicableCandidate : JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.ICandidate
    {
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> InferableTypeParameters { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution InferedSubstitution { get; }
        public JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentsMatchResult MatchResult { get; }
        public JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> SignatureOwner { get; }
        public JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRuleWithPolicy StrictPolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo SymbolInfo { get; }
        public bool ToDelegate { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.ArgumentMatchWithType> MatchResultWithTypes() { }
    }
    public struct ArgumentMatchWithType
    {
        public ArgumentMatchWithType(JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentMatch argumentMatch, JetBrains.ReSharper.Psi.IExpressionType argumentType, JetBrains.ReSharper.Psi.IType parameterType, bool checkParamArray) { }
        public JetBrains.ReSharper.Psi.VB.IVBArgumentInfo Argument { get; }
        public JetBrains.ReSharper.Psi.IExpressionType ArgumentType { get; }
        public bool CheckParamArray { get; }
        public JetBrains.ReSharper.Psi.VB.Impl.Resolve.ExpandedKind Expanded { get; }
        public JetBrains.ReSharper.Psi.IParameter Parameter { get; }
        public JetBrains.ReSharper.Psi.IType ParameterType { get; }
    }
    public interface IMoreSpecificSelector
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.ApplicableCandidate> SelectCandidate(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.ApplicableCandidate> candidates);
    }
    public interface ITypeInferenceRule
    {
        JetBrains.ReSharper.Psi.Resolve.ISubstitution Inference(ref JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Resolve.ISubstitution qualifierSubstitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters, JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentsMatchResult matchResult, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule, System.Version vbVersion);
    }
    public class MoreSpecificSelector : JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.IMoreSpecificSelector
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.MoreSpecificSelector Instance;
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.ApplicableCandidate> SelectCandidate(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.ApplicableCandidate> candidates) { }
    }
    public class MoreSpecificSelectorForExtensionMethods : JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.IMoreSpecificSelector
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.IMoreSpecificSelector INSTANCE;
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.ApplicableCandidate> SelectCandidate(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.ApplicableCandidate> candidates) { }
    }
    public struct OverloadResolutionData : JetBrains.ReSharper.Psi.VB.Resolve.IOverloadResolutionData
    {
        public JetBrains.ReSharper.Psi.VB.Impl.Resolve.IArgumentsMatcher ArgumentsMatcher { get; set; }
        public JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.IMoreSpecificSelector MoreSpecificSelector { get; set; }
        public JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext ResolveContext { get; set; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> TypeArguments { get; set; }
        public JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule TypeConversionRule { get; set; }
        public JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.ITypeInferenceRule TypeInferenceRule { get; set; }
        public bool TypesAreAlreadyInfered { get; set; }
        public System.Version VBVersion { get; set; }
    }
    public class OverloadResolutionEngine
    {
        public OverloadResolutionEngine(JetBrains.ReSharper.Psi.VB.Resolve.IOverloadResolutionData data) { }
        public static bool IsApplicable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentsMatchResult matchResult, JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public static bool IsApplicableWithoutLambdas(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentsMatchResult matchResult, JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public JetBrains.ReSharper.Psi.VB.Resolve.IOverloadResolutionResult ResolveOverloads(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> infos) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.Resolve.ResolveResults
{
    
    public class InvocationResolveResult : JetBrains.ReSharper.Psi.Resolve.ResolveResult, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IExtensionMethodResolveResult, JetBrains.ReSharper.Psi.Resolve.IResolveResult
    {
        protected InvocationResolveResult(JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement>> CandidateExtensionInstances { get; }
        public JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IDeclaredElement> ElementExtensionInstance { get; }
        public static JetBrains.ReSharper.Psi.VB.Impl.Resolve.ResolveResults.InvocationResolveResult Create(JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        public JetBrains.ReSharper.Psi.Resolve.IResolveResult GetResolveResult() { }
        public static JetBrains.ReSharper.Psi.Resolve.IResolveResult GetSimpleResolveResult(JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution candidateSubstitution) { }
    }
    public class MethodGroupResolveResult : JetBrains.ReSharper.Psi.VB.Impl.Resolve.ResolveResults.InvocationResolveResult
    {
        public MethodGroupResolveResult(JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult, string name, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo extensionArgument, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> typeArguments) { }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> ResolveToMethodWithDelegate(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveWithDelegate(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class ReturnValueResolveResult : JetBrains.ReSharper.Psi.Resolve.ResolveResult
    {
        public ReturnValueResolveResult(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> candidates, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> candidateSubstitutions) { }
        public ReturnValueResolveResult(JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public ReturnValueResolveResult(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public ReturnValueResolveResult(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> candidates, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> candidateSubstitutions) { }
        public ReturnValueResolveResult(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> candidates) { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution candidateSubstitution) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.Resolve.Verification
{
    
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class AccessorAvailabilityVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public static readonly object GETTER;
        public static readonly object SETTER;
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class AnonymousTypePropertyVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public static readonly object CIRCULAR_USAGE;
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class AssignmentTypeCompatibilityVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class DictionaryAccessExpressionResolveVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class InvocationResolveVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class ReferenceExpressionResolveVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class VariableDeclarationTypeCompatibilityVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class XmlMemberAccessResolveVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.Tree
{
    
    public class static AnonymousArrayCreationExpressionUtil
    {
        public static JetBrains.ReSharper.Psi.IType TryGetExplicitType(JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression expression) { }
    }
    public class static ElementBitsets
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ACCESSOR_OWNER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ATTRIBUTE_LIST_OWNER_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ATTRIBUTES_OWNER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet CLASS_LIKE_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet EXPRESSION_ARGUMENT_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet IMPORT_CLAUSE_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet LABEL_REFERENCING_STATEMENT_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet LAMBDA_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet LOOP_STATEMENT_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet MEMBER_ACCESS_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet METHOD_DECLARATION_BASE_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet MODIFIERS_LIST_OWNER_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet NAMESPACE_MEMBER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet NEW_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet OPERATOR_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet PREPROCESSOR_DIRECTIVE_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet PRIMARY_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet QUERY_OPERATOR_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TYPE_MEMBER_OWNER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TYPE_PARAMETER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_ARGUMENT_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_ARGUMENTS_OWNER_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_BINARY_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_FUNCTION_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_LOCAL_VARIABLE_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_MODIFIERS_OWNER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_PARAMETER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_PARAMETERS_OWNER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_STATEMENT_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_TYPE_AND_NAMESPACE_HOLDER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_TYPE_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_TYPE_MEMBER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet V_B_UNARY_EXPRESSION_BIT_SET;
    }
    public abstract class ElementType
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType _ERROR_ELEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType _TYPE_DECLARATION_ERROR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ACCESSOR_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ADD_HANDLER_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ADDITIVE_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ADDRESS_OF_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType AGGREGATE_QUERY_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType AGGREGATED_RANGE_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType AGGREGATED_RANGE_VARIABLE_DECLARATION_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ALIAS_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ANONYMOUS_ARRAY_CREATION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ANONYMOUS_MEMBER_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ANONYMOUS_OBJECT_CREATION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ANONYMOUS_OBJECT_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ARGUMENT_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ARRAY_BOUND;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ARRAY_CREATION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ARRAY_MODIFIER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ARRAY_MODIFIERS_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ASSIGNMENT_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ATTRIBUTE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ATTRIBUTE_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType AWAIT_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType AWAIT_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BLOCK;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BLOCK_IF_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CASE_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CASE_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CAST_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CATCH_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CATCH_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CHARSET_MODIFIER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CLASS_BASE_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CLASS_BODY;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CLASS_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType COLLECTION_ELEMENT_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType COLLECTION_RANGE_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType COLLECTION_RANGE_VARIABLE_DECLARATION_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONCATENATION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONDITIONAL_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONST_PREPROCESSOR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONSTANT_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONSTRUCTOR_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONTINUE_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONVERSION_OPERATOR_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DECLARED_TYPE_USAGE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DELEGATE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DICTIONARY_ACCESS_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DISTINCT_QUERY_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DO_LOOP_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ELSE_IF_PREPROCESSOR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ELSE_IF_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ELSE_PREPROCESSOR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ELSE_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EMPTY_ARGUMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType END_EXTERNAL_SOURCE_PREPROCESSOR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType END_IF_PREPROCESSOR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType END_REGION_PREPROCESSOR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType END_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ENUM_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ENUM_MEMBER_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ERASE_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ERROR_ELEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ERROR_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EVENT_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EVENT_SPECIFIER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXIT_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXPONENTIATION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXPRESSION_RANGE_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXPRESSION_RANGE_VARIABLE_DECLARATION_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXPRESSION_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXTERNAL_CHECKSUM_PREPROCESSOR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXTERNAL_METHOD_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXTERNAL_SOURCE_PREPROCESSOR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FINALLY_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FOR_EACH_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FOR_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FROM_QUERY_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType GET_TYPE_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType GET_XML_NAMESPACE_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType GOTO_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType GROUP_BY_QUERY_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType GROUP_JOIN_QUERY_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType HANDLES_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IF_PREPROCESSOR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IMPLEMENTS_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IMPORT_ALIAS_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IMPORT_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IMPORT_DIRECTIVES_SECTION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IMPORT_NAMESPACE_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IMPORT_X_M_L_NAMESPACE_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INDEX_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INSTANCE_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INTEGER_DIVISION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INTERFACE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INTERFACE_INHERITS_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INTERFACE_MEMBER_SPECIFIER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INTO_OF_AGGREGATE_QUERY_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INVOCATION_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IS_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IS_NOT_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType JOIN_COLLECTION_RANGE_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType JOIN_CONDITION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType JOIN_QUERY_CONDITIONS_LIST_FAKE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType JOIN_QUERY_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LABEL_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LABEL_NAME;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LABEL_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LAMBDA_FUNCTION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LAMBDA_PARAMETER_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LAMBDA_SIGNATURE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LAMBDA_SUB_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LET_QUERY_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LIBRARY_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LIKE_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LINE_IF_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LINE_IF_STATEMENT_BODY;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LOCAL_DECLARATION_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LOCAL_DECLARATION_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LOCAL_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LOGICAL_AND_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LOGICAL_NOT_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LOGICAL_OR_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LOGICAL_XOR_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LOOP_CONTROL_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MEMBER_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType METHOD_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MID_ASSIGNMENT_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MODIFIERS_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MODULE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MODULUS_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MULTIPLE_CONSTANT_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MULTIPLE_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MULTIPLICATIVE_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType NAMED_ARGUMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType NAMESPACE_PREFIX_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType NEXT_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType OBJECT_COLLECTION_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType OBJECT_CREATION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType OBJECT_CREATION_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ON_ERROR_SPECIAL_LABEL;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ON_ERROR_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType OPTION_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType OPTION_STATEMENTS_SECTION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ORDER_BY_QUERY_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ORDER_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PARENTHESIZED_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PARTITION_QUERY_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType POSITIONAL_ARGUMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PROPERTY_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PROPERTY_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUALIFIED_NAMESPACE_NAME;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_AGGREGATED_PARAMETER_PLATFORM;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_CONDITIONS_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_PARAMETER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_PARAMETER_PLATFORM;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RAISE_EVENT_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType REDIM_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType REDIM_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType REFERENCE_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType REFERENCE_NAME;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType REGION_PREPROCESSOR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType REGULAR_PARAMETER_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType REGULAR_PARAMETER_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RELATIONAL_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType REMOVE_HANDLER_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RESUME_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RETURN_ATTRIBUTE_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RETURN_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType SELECT_QUERY_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType SELECT_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType SHIFT_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType SIGN_OPERATOR_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType STOP_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType STRUCTURE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType SYNC_LOCK_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType THROW_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TRY_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_ARGUMENT_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_IMPLEMENTS_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_OF_IS_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_CONSTRAINT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_CONSTRAINT_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_OF_METHOD_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_OF_METHOD_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_OF_TYPE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_OF_TYPE_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_USAGE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNARY_NEGATION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNKNOWN_PREPROCESSOR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType USING_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType USING_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_FILE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_IDENTIFIER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_LITERAL_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_NAMESPACE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_XML_ATTRIBUTE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_XML_C_DATA_SECTION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_XML_COMMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_XML_DOCUMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_XML_ELEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_XML_ELEMENT_FOOTER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_XML_ELEMENT_HEADER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_XML_EMBEDDED_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_XML_LITERAL_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_XML_MEMBER_ACCESS_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_XML_MISC;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType V_B_XML_PROCESSING_INSTRUCTION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType VARIABLE_DECLARATION_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType WHERE_QUERY_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType WHILE_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType WHILE_UNTIL_CONDITION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType WITH_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType YIELD_STATEMENT;
    }
    public interface IVBHashableDeclaration : JetBrains.ReSharper.Psi.Dependencies.IHashableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Impl.Tree.IVBHashableDeclaration> Children { get; }
        bool IsInternal { get; }
        JetBrains.ReSharper.Psi.Dependencies.IHashableEntityInfo[] CalcAllHashes(string parentQualifiedName, out string qualifiedName);
    }
    public interface IVBXmlMemberAccessReference { }
    public enum LiteralExpressionType
    {
        XElement = 0,
        XDocument = 1,
        XProcessingInstruction = 2,
        XFragment = 3,
        XComment = 4,
        XData = 5,
    }
    public enum OrderByTypes
    {
        Order = 0,
        OrderDescending = 1,
        Then = 2,
        ThenDescending = 3,
    }
    public enum PartitionOperatorKinds
    {
        Take = 0,
        Skip = 1,
        TakeWhile = 2,
        SkipWhile = 3,
    }
    public abstract class QueryOperatorBase : JetBrains.ReSharper.Psi.VB.Impl.Tree.VBCompositeElement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        public abstract JetBrains.ReSharper.Psi.Tree.ITokenNode FirstKeyword { get; }
        public JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression QueryExpression { get; }
    }
    public abstract class TokenType
    {
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ADDHANDLER_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ADDRESSOF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AGGREGATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ALIAS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AND;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AND_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ANDALSO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ANDEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ANSI_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASCENDING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASTERISK;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASTERISKEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASYNC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AUTO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AWAIT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BACKSLASH;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BACKSLASHEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BAD_TOKEN;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BOOLEAN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BYREF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BYTE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BYVAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CALL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CASE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CATCH_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CBOOL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CBYTE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CCHAR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CDATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CDBL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CDEC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CHAR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CHAR_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CINT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CLASS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CLNG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType COBJ_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType COLON;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType COMMA;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CONST_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CONTINUE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CSBYTE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CSHORT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CSNG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CSTR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CTYPE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CUINT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CULNG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CUSHORT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CUSTOM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DATE_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DECIMAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DECLARE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DEFAULT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DELEGATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DESCENDING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DIM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DIRECTCAST_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DISTINCT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DIV;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DIVEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DOT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DOUBLE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EACH_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ELSE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ELSEIF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_ADDHANDLER;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_CLASS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_ENUM;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_EVENT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_FUNCTION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_GET;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_IF;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_INTERFACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_MODULE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_NAMESPACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_PROPERTY;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_RAISEEVENT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_REMOVEHANDLER;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_SELECT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_SET;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_STRUCTURE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_SUB;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_SYNCLOCK;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_TRY;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_USING;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_WHILE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_WITH;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ENDIF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ENUM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EQUALS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ERASE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ERROR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EVENT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EXCL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EXIT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FALSE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FINALLY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FLOATPOINT_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FOR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FRIEND_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FROM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FUNCTION_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GET_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GETTYPE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GETXMLNAMESPACE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GLOBAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GOSUB_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GOTO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GROUP_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GTGT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GTGTEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType HANDLES_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IDENTIFIER;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IMPLEMENTS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IMPLICIT_LINE_CONTINUATION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IMPORTS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INHERITS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTEGER_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTEGER_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTERFACE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ISFALSE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ISNOT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ISTRUE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ITERATOR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType JOIN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LBRACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LET_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LIB_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LIKE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LINE_TERMINATOR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LONG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LOOP_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LPARENTH;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LTLT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LTLTEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ME_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MID_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MINUS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MINUSEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MOD_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MODULE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MUSTINHERIT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MUSTOVERRIDE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MYBASE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MYCLASS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NAMESPACE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NARROWING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NEW_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NEXT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NOT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NOTHING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NOTINHERITABLE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NOTOVERRIDABLE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OBJECT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ON_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OPERATOR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OPTION_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OPTIONAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ORDER_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ORELSE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OUT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OVERLOADS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OVERRIDABLE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OVERRIDES_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PARAMARRAY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PARTIAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PLUS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PLUSEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PRESERVE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PRIVATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PROPERTY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PROTECTED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PUBLIC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType QUESTION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RAISEEVENT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RBRACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType READONLY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType REDIM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType REM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType REMOVEHANDLER_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RESUME_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RETURN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RPARENTH;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SBYTE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SELECT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SET_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SHADOWS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SHARED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SHARP;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SHORT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SINGLE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SKIP_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STATIC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STEP_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STOP_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STRING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STRING_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STRUCTURE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SUB_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SYNCLOCK_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TAKE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType THEN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType THROW_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TRUE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TRY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TRYCAST_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPECHAR_AND;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPECHAR_AT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPECHAR_DOLLAR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPECHAR_EXCL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPECHAR_PERC;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPECHAR_SHARP;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPEOF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType UINTEGER_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ULONG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType UNICODE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType UNTIL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType USHORT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType USING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType VARIANT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WEND_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WHEN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WHERE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WHILE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WIDENING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WITH_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WITHEVENTS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WRITEONLY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_CDATA_BODY;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_CDATA_END;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_CDATA_START;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_COMMENT_BODY;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_COMMENT_END;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_COMMENT_START;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_EQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_IDENTIFIER;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_NEW_LINE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_PI_BODY;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_PI_END;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_PI_START;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_SCRIPLET_END;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_SCRIPLET_START;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_SPACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_STRING;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_TAG_END;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_TAG_END1;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_TAG_START;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_TAG_START1;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_TEXT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_UNFINISHED_STRING;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XOR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XOR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XOREQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType YIELD_KEYWORD;
    }
    public sealed class VBChildRole
    {
        public const short LAST = 100;
        public const short NONE = 0;
        public const short VB_ARGUMENT = 28;
        public const short VB_ARGUMENT_LIST = 29;
        public const short VB_ARRAY_MODIFIERS_LIST = 36;
        public const short VB_ATTRIBUTE_LIST = 31;
        public const short VB_BLOCK = 39;
        public const short VB_BODY = 38;
        public const short VB_COLON = 6;
        public const short VB_COMMA = 5;
        public const short VB_DOT = 1;
        public const short VB_END_DECLARATION = 40;
        public const short VB_EQ = 2;
        public const short VB_EXCL = 11;
        public const short VB_GT = 4;
        public const short VB_INITIALIZER = 34;
        public const short VB_KEYWORD = 20;
        public const short VB_LBRACE = 9;
        public const short VB_LPARENTH = 7;
        public const short VB_LT = 3;
        public const short VB_MODIFIER = 35;
        public const short VB_MODIFIERS_LIST = 41;
        public const short VB_NAME = 37;
        public const short VB_OP_SIGN = 24;
        public const short VB_OP1 = 23;
        public const short VB_OP2 = 25;
        public const short VB_PARAMETERS_LIST = 33;
        public const short VB_QUALIFIER = 21;
        public const short VB_RBRACE = 10;
        public const short VB_REFERENCE = 22;
        public const short VB_RETURN_ATTRIBUTE_LIST = 32;
        public const short VB_RPARENTH = 8;
        public const short VB_STATEMENT_TERMINATOR = 99;
        public const short VB_TYPE_ARGUMENT_LIST = 26;
        public const short VB_TYPE_PARAMETERS_LIST = 27;
        public const short VB_TYPE_USAGE = 30;
    }
    public abstract class VBCompositeElement : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        public override JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        public virtual void Accept(JetBrains.ReSharper.Psi.VB.Tree.TreeNodeVisitor visitor) { }
        public virtual void Accept<TContext>(JetBrains.ReSharper.Psi.VB.Tree.TreeNodeVisitor<TContext> visitor, TContext context) { }
        public virtual TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.VB.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) { }
        public JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration GetContainingNamespaceDeclaration() { }
        public JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration GetContainingTypeDeclaration() { }
        public JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration GetContainingTypeMemberDeclaration() { }
    }
    [JetBrains.ReSharper.Psi.LanguageDefinitionAttribute("VB_XMLDOC", Edition="Vbnet")]
    public class VBXmlDocLanguage : JetBrains.ReSharper.Psi.Xml.XmlDocComments.XmlDocLanguage
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Tree.VBXmlDocLanguage Instance;
        public const string Name = "VB_XMLDOC";
        protected VBXmlDocLanguage() { }
    }
    public enum XmlMemberAccessType
    {
        Elements = 0,
        Descendants = 1,
        Attribute = 2,
    }
}
namespace JetBrains.ReSharper.Psi.VB.Impl.Types
{
    
    public class static Conversions
    {
        public static bool IsConvertible(JetBrains.ReSharper.Psi.VB.Types.IVBFunctionType functionType, JetBrains.ReSharper.Psi.IType to, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public static bool IsConvertible(JetBrains.ReSharper.Psi.VB.Types.IVBAnonymousType anonymousType, JetBrains.ReSharper.Psi.IType to, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public static bool IsNarrowingConversionExist(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, JetBrains.ReSharper.Psi.ITypeConversionRule rule, bool noWideningConversionKnown) { }
        public static bool IsNarrowingConversionPredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, bool noWideningConversionKnown) { }
        public static bool IsNarrowingConversionUserDefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public static bool IsReferenceConversion(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public static bool IsWideningConversionExist(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public static bool IsWideningConversionPredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public static bool IsWideningConversionSpecific(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, JetBrains.ReSharper.Psi.ITypeConversionRule rule, System.Func<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.IType, bool> multitypeConversionCheck) { }
        public static bool IsWideningConversionUserDefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public static JetBrains.ReSharper.Psi.IType ToITypeWithNothing(JetBrains.ReSharper.Psi.IExpressionType expressionType, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
    }
    public class FunctionBlockLambdaExpressionType : JetBrains.ReSharper.Psi.VB.Impl.Types.TreeLambdaExpressionType
    {
        public FunctionBlockLambdaExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.VB.Tree.ILambdaFunctionExpression lambdaExpression) { }
        public FunctionBlockLambdaExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.ILambdaParameter> parameters, JetBrains.ReSharper.Psi.VB.Tree.IBlock body, JetBrains.ReSharper.Psi.IType returnType, bool isAsync = False, bool isIterator = False) { }
        public override JetBrains.ReSharper.Psi.IType DeclaredReturnType { get; }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode VerificationScope { get; }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> GetReturnValues() { }
        protected override JetBrains.ReSharper.Psi.IExpressionType InferResultType() { }
        public override bool IsValid() { }
    }
    public class FunctionLambdaExpressionType : JetBrains.ReSharper.Psi.VB.Impl.Types.TreeLambdaExpressionType
    {
        public FunctionLambdaExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.ILambdaParameter> parameters, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression body, bool isAsync = False, bool isIterator = False) { }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode VerificationScope { get; }
        protected override JetBrains.ReSharper.Psi.IExpressionType InferResultType() { }
        public override bool IsValid() { }
    }
    public struct StrictPolicy
    {
        public StrictPolicy(bool strictOff) { }
        public bool IsStrictOff { get; }
    }
    public class SubLambdaExpressionType : JetBrains.ReSharper.Psi.VB.Impl.Types.TreeLambdaExpressionType
    {
        public SubLambdaExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.ILambdaParameter> parameters, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode body, bool isAsync = False, bool isIterator = False) { }
        public override JetBrains.ReSharper.Psi.IType DeclaredReturnType { get; }
        public override JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode VerificationScope { get; }
        protected override JetBrains.ReSharper.Psi.IExpressionType InferResultType() { }
        public override bool IsValid() { }
    }
    public abstract class TreeLambdaExpressionType : JetBrains.ReSharper.Psi.VB.Impl.Types.VBLambdaExpressionTypeBase
    {
        protected TreeLambdaExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.ILambdaParameter> parameters, bool isAsync, bool isIterator) { }
        public override bool IsAsync { get; }
        public override bool IsIterator { get; }
        public System.Collections.Generic.IList<string> ParameterNames { get; }
        public override JetBrains.ReSharper.Psi.IType CreateFunctionType() { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.ILambdaParameter> GetImplicitLambdaParameters() { }
        public override System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ParameterKind>> GetParameterTypesAndKinds() { }
        public override bool HasImplicitLambdaParameters() { }
        public override bool IsValid() { }
    }
    public class VBAnonymousArrayType : JetBrains.ReSharper.Psi.IExpressionType
    {
        public VBAnonymousArrayType(JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression element, JetBrains.ReSharper.Psi.IExpressionType[] elementsExpressionTypes) { }
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.IType ToIType() { }
    }
    public class VBConstantType : JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.VB.Types.IVBConstantType
    {
        public VBConstantType(JetBrains.ReSharper.Psi.ConstantValue value) { }
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.ConstantValue GetConstantValue() { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public override int GetHashCode() { }
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public bool IsPureZeroType() { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.IType ToIType() { }
    }
    public class VBFunctionType : JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.VB.Types.IVBFunctionType
    {
        public VBFunctionType(System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ParameterKind>> parameterTypesAndKinds, System.Collections.Generic.IList<string> parameterNames, JetBrains.ReSharper.Psi.IType returnType, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext) { }
        public System.Nullable<JetBrains.ReSharper.Psi.TypeClassification> Classify { get; }
        public bool IsOpenType { get; }
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<string> ParameterNames { get; }
        public System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ParameterKind>> ParameterTypesAndKinds { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IDelegate TypeElement { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeModifier> TypeModifiers { get; }
        public void Accept(JetBrains.ReSharper.Psi.TypeVisitor typeVisitor) { }
        public JetBrains.ReSharper.Psi.ITypePointer CreatePointer() { }
        public bool Equals(JetBrains.ReSharper.Psi.VB.Impl.Types.VBFunctionType other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public string GetPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext GetResolveContext() { }
        public JetBrains.ReSharper.Psi.IDeclaredType GetScalarType() { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetSymbolTable(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsValid() { }
        public bool IsWellFormed() { }
        public JetBrains.ReSharper.Psi.IType ToIType() { }
    }
    public abstract class VBLambdaExpressionTypeBase : JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.INonCachableExpressionType, JetBrains.ReSharper.Psi.VB.Types.IVBLambdaExpressionType
    {
        protected readonly JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext myResolveContext;
        protected VBLambdaExpressionTypeBase(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public virtual JetBrains.ReSharper.Psi.IType DeclaredReturnType { get; }
        public abstract bool IsAsync { get; }
        public abstract bool IsIterator { get; }
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public abstract JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode VerificationScope { get; }
        public abstract JetBrains.ReSharper.Psi.IType CreateFunctionType();
        public abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.ILambdaParameter> GetImplicitLambdaParameters();
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public abstract System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ParameterKind>> GetParameterTypesAndKinds();
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> GetReturnValues() { }
        public abstract bool HasImplicitLambdaParameters();
        protected abstract JetBrains.ReSharper.Psi.IExpressionType InferResultType();
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public virtual bool IsReturnTypeConvertibleTo(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution delegateSubstitution, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public bool IsSignatureConvertibleTo(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution delegateSubstitution, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public abstract bool IsValid();
        public JetBrains.ReSharper.Psi.IType ToIType() { }
    }
    public class VBMethodGroupType : JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.INonCachableExpressionType, JetBrains.ReSharper.Psi.VB.Types.IVBMethodGroupType
    {
        public VBMethodGroupType(JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IMethod> method, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
        public VBMethodGroupType(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IMethod>> methods, string name, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public VBMethodGroupType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.VB.Impl.Resolve.ResolveResults.MethodGroupResolveResult resolveResult, System.Version languageVersion) { }
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool IsConvertibleTo(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule rule) { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveWithDelegate(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> ResolveWithDelegate(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution delegateSubstitution) { }
        public JetBrains.ReSharper.Psi.IType ReturnTypeWithDelegate(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution delegateSubstitution) { }
        public JetBrains.ReSharper.Psi.IType ToIType() { }
    }
    public class VBNonCachableAnonymousArrayType : JetBrains.ReSharper.Psi.VB.Impl.Types.VBAnonymousArrayType, JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.INonCachableExpressionType
    {
        public VBNonCachableAnonymousArrayType(JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression element, JetBrains.ReSharper.Psi.IExpressionType[] elementsExpressionTypes) { }
    }
    public class VBNothingType : JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.VB.Types.IVBNothingType
    {
        public VBNothingType(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.IType ToIType() { }
        public override string ToString() { }
    }
    public class VBStrictTypeConversionRule : JetBrains.ReSharper.Psi.ITypeConversionRule, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRuleWithPolicy
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Types.VBStrictTypeConversionRule Instance;
        public bool IsNotLateBoundUsed { get; }
        public bool IsOnlyLateBoundUsed { get; }
        public bool IsStrictOffConversionUsed { get; }
        public bool IsExplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsImplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsStrictOff() { }
        public JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRuleWithPolicy RuleWithPolicy() { }
    }
    public class VBTypeConversionRuleOld : JetBrains.ReSharper.Psi.ITypeConversionRule
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Impl.Types.VBTypeConversionRuleOld Instance;
        public JetBrains.ReSharper.Psi.IExpressionType CreateConstantType(JetBrains.ReSharper.Psi.ConstantValue constantValue) { }
        public bool IsExplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, ref JetBrains.ReSharper.Psi.VB.Impl.Types.StrictPolicy policy) { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IExpressionType from, JetBrains.ReSharper.Psi.IType to, ref JetBrains.ReSharper.Psi.VB.Impl.Types.StrictPolicy policy) { }
        public bool IsImplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IExpressionType from, JetBrains.ReSharper.Psi.IType to, ref JetBrains.ReSharper.Psi.VB.Impl.Types.StrictPolicy policy) { }
        public JetBrains.ReSharper.Psi.IType ToIType(JetBrains.ReSharper.Psi.IExpressionType expressionType) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Naming
{
    
    public sealed class ValidityChecker
    {
        public static bool IsValidExpression(string expression) { }
        public static bool IsValidIdentifier(string identifier) { }
        public static bool IsValidName(string identifier) { }
        public static bool IsValidNamespaceOrTypeName(string qualifiedName) { }
        public static bool IsValidType(string typeUsage) { }
        public static bool IsValidTypeElement(string typeUsage) { }
    }
    public class static VBNameCompletionUtil
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IList<string> SuggestNamesOfIdentifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier identifier, [JetBrains.Annotations.NotNullAttribute()] string prefix) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Naming2.Upgrade
{
    
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    [JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgraderAttribute()]
    public class VBNamingSettingsUpgrade : JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.ClrNamingSettingsUpgrade<JetBrains.ReSharper.Psi.VB.Naming2.VBNamingSettings>
    {
        public VBNamingSettingsUpgrade(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected override JetBrains.ReSharper.Psi.Naming.Interfaces.INamingSettings GetSpecificSettings(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Naming2
{
    
    [JetBrains.ReSharper.Psi.Naming.Elements.NamedElementsBagAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBElementKindOfElementType : JetBrains.ReSharper.Psi.Naming.Elements.ElementKindOfElementType
    {
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind ASYNC_METHOD;
        protected VBElementKindOfElementType([JetBrains.Annotations.NotNullAttribute()] string name, string presentableName, System.Func<JetBrains.ReSharper.Psi.IDeclaredElement, bool> isApplicable) { }
        public override JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
    }
    public class VBNamingPolicyProvider : JetBrains.ReSharper.Psi.Naming.Settings.ClrPolicyProviderBase<JetBrains.ReSharper.Psi.VB.Naming2.VBNamingSettings>
    {
        public VBNamingPolicyProvider(JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.Application.Settings.IContextBoundSettingsStore settings) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBNamingPolicyProviderFactory : JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProviderFactory
    {
        public VBNamingPolicyProviderFactory(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider CreatePolicyProvider(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.Application.Settings.IContextBoundSettingsStore settingsStore) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBNamingService : JetBrains.ReSharper.Psi.Naming.Impl.ClrNamingLanguageServiceBase
    {
        public VBNamingService(JetBrains.ReSharper.Psi.VB.VBLanguage vbLanguage, JetBrains.ReSharper.Psi.VB.ExpectedTypes.IVBExpectedTypesProvider expectedTypeProvider) { }
        protected override JetBrains.ReSharper.Psi.Naming.Impl.NameRoot GetAbbreviation(JetBrains.ReSharper.Psi.Naming.Impl.NameRoot root) { }
        public override JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind GetScopeKind(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        protected override bool IsLocalDeclaration(JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
        protected virtual bool IsMangled(string name) { }
        public override string MangleNameIfNecessary(string name) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SuggestRoots([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, bool fromExpectedTypes, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SuggestRoots(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        protected override string Unmangle(string name) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Psi.Naming.Settings.NamingSettings), "VB.NET naming settings")]
    public class VBNamingSettings : JetBrains.ReSharper.Psi.Naming.Settings.ClrLanguageNamingSettingsKeyBase { }
}
namespace JetBrains.ReSharper.Psi.VB.Parsing
{
    
    public interface IVBParser : JetBrains.ReSharper.Psi.Parsing.IParser
    {
        System.Func<JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement> BindedToBufferChameleonStrategy { get; }
        System.Func<JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement> OpenChameleonStrategy { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock OpenChameleonBlock(JetBrains.ReSharper.Psi.Tree.ITreeNode owner);
        JetBrains.ReSharper.Psi.VB.Tree.IBlock ParseBlock();
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression ParseExpression();
        JetBrains.ReSharper.Psi.Tree.IFile ParseFile(System.Func<JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement> chameleonStrategy);
        JetBrains.ReSharper.Psi.Tree.ITreeNode ParseMemberDeclaration();
        JetBrains.ReSharper.Psi.VB.Tree.IVBStatement ParseStatement();
    }
    public class static ParserMessages
    {
        public const string IDS__ON_ERROR_GOTO_LABEL_AUX = "identifier or integer literal";
        public const string IDS__SIMPLEREFERENCENAME = "identifier";
        public const string IDS_ACCESS_MODIFIER = "access modifier";
        public const string IDS_ACCESSOR_KEYWORD = "accessor keyword";
        public const string IDS_AGGREGATE_QUERY_OPERATOR = "query operator";
        public const string IDS_ANONYMOUS_OBJECT_CREATION_EXPRESSION = "expression";
        public const string IDS_ARRAY_MODIFIER = "modifier";
        public const string IDS_ARRAY_RANK_MODIFIER = "modifier";
        public const string IDS_ARRAY_SIZE_MODIFIER = "modifier";
        public const string IDS_ASSIGNMENT_OP_SIGN = "assignment operation sign";
        public const string IDS_BLOCK_IF_STATEMENT = "statement";
        public const string IDS_BUILT_IN_TYPE_NAME = "built-in type name";
        public const string IDS_CASE_CLAUSE = "case clause";
        public const string IDS_CAST_EXPRESSION = "expression";
        public const string IDS_CAST_TARGET = "cast target";
        public const string IDS_CHARSET_MODIFIER = "modifier";
        public const string IDS_COLLECTION_ELEMENT_INITIALIZER = "collection element initializer";
        public const string IDS_COMPARISON_OPERATOR = "comparison operator";
        public const string IDS_CONTINUE_KIND = "continue kind";
        public const string IDS_CONVERSION_OPERATOR_DECLARATION = "declaration";
        public const string IDS_DECLARED_TYPE_USAGE = "type name";
        public const string IDS_END_EXTERNAL_SOURCE_PREPROCESSOR_DIRECTIVE = "external source preprocessor directive";
        public const string IDS_END_REGION_PREPROCESSOR_DIRECTIVE = "end region preprocessor directive";
        public const string IDS_EVENT_DECLARATION = "declaration";
        public const string IDS_EXIT_KIND = "exit kind";
        public const string IDS_EXPECTED_SYMBOL = "{0} expected";
        public const string IDS_EXPECTED_TWO_SYMBOLS = "{0} or {1} expected";
        public const string IDS_EXPRESSION_ARGUMENT = "expression argument";
        public const string IDS_EXPRESSION_RANGE_VARIABLE_DECLARATION_LIST = "expression or declaration";
        public const string IDS_FLOATING_POINT_TYPE_NAME = "IDS_FLOATING_POINT_TYPE_NAME";
        public const string IDS_FOR_EACH_STATEMENT = "statement";
        public const string IDS_FOR_STATEMENT = "statement";
        public const string IDS_FROM_QUERY_OPERATOR = "query operator";
        public const string IDS_GROUP_BY_QUERY_OPERATOR = "query operator";
        public const string IDS_GROUP_JOIN_QUERY_OPERATOR = "query operator";
        public const string IDS_HANDLES_CLAUSE = "\'Handles\' clause";
        public const string IDS_HANDLES_OR_IMPLEMENTS_CLAUSE = "handles or implements clause";
        public const string IDS_IMPLEMENTS_CLAUSE = "\'Implements\' clause";
        public const string IDS_IMPLICIT_LINE_CONTINUATION = "line continuation";
        public const string IDS_IMPORT_CLAUSE = "import clause";
        public const string IDS_INSTANCE_EXPRESSION = "expression";
        public const string IDS_INTEGRAL_TYPE_NAME = "intergral type name";
        public const string IDS_LABEL_NAME = "label";
        public const string IDS_LABEL_OR_STATEMENT_AUX = "statement";
        public const string IDS_LAMBDA_EXPRESSION = "expression";
        public const string IDS_LAMBDA_FUNCTION_EXPRESSION = "expression";
        public const string IDS_LAMBDA_SUB_EXPRESSION = "expression";
        public const string IDS_LINE_IF_STATEMENT = "statement";
        public const string IDS_LOOP_CONTROL_VARIABLE = "loop control variable";
        public const string IDS_LOOP_STATEMENT = "statement";
        public const string IDS_MODIFIER = "modifier";
        public const string IDS_NEW_EXPRESSION = "expression";
        public const string IDS_NUMERIC_TYPE_NAME = "numeric type name";
        public const string IDS_OBJECT_COLLECTION_INITIALIZER = "initializer";
        public const string IDS_OBJECT_CREATION_EXPRESSION_INITIALIZER = "initializer";
        public const string IDS_OBJECT_CREATION_INITIALIZER = "initializer";
        public const string IDS_OVERLOAD_OPERATOR_SIGN = "operator sign";
        public const string IDS_PARAMETER_MODIFIER = "modifier";
        public const string IDS_PRIMARY_EXPRESSION = "expression";
        public const string IDS_PRIMITIVE_TYPE_NAME = "primitive type name";
        public const string IDS_PROPERTY_INITIALIZER = "initializer";
        public const string IDS_QUERY_OPERATOR = "query operator";
        public const string IDS_REGULAR_PARAMETER_LIST = "parameter list";
        public const string IDS_SIGN_OPERATOR_DECLARATION = "declaration";
        public const string IDS_TYPE_CHAR = "type char";
        public const string IDS_TYPE_PARAMETER_CONSTRAINT = "type parameter constraint";
        public const string IDS_TYPE_PARAMETER_DECLARATION = "type parameter constraint";
        public const string IDS_TYPE_USAGE = "type name";
        public const string IDS_UNEXPECTED_EOF = "Unexpected end of file";
        public const string IDS_UNEXPECTED_TOKEN = "Unexpected token";
        public const string IDS_USING_STATEMENT_RESOURCES = "statement";
        public const string IDS_V_B_ARGUMENT = "argument";
        public const string IDS_V_B_EXPRESSION = "expression";
        public const string IDS_V_B_IDENTIFIER = "identifier";
        public const string IDS_V_B_LITERAL_EXPRESSION = "expression";
        public const string IDS_V_B_XML_ATTRIBUTE = "XML attribute";
        public const string IDS_V_B_XML_ELEMENT = "XML element";
        public const string IDS_V_B_XML_EMBEDDED_EXPRESSION = "XML expression";
        public const string IDS_V_B_XML_LITERAL_EXPRESSION = "XML expression";
        public const string IDS_V_B_XML_MEMBER_ACCESS_EXPRESSION = "XML expression";
        public const string IDS_V_B_XML_MISC = "XML expression";
        public const string IDS_VARIABLE_INITIALIZER = "initializer";
        public static string GetExpectedMessage(string expectedSymbol) { }
        public static string GetExpectedMessage(string firstExpectedSymbol, string secondExpectedSymbol) { }
        public static string GetString(string id) { }
        public static string GetUnexpectedEofMessage() { }
        public static string GetUnexpectedTokenMessage() { }
        public static string GetUnexpectedTokenMessage(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) { }
    }
    public class VBLexer : JetBrains.ReSharper.Psi.Parsing.ILexer
    {
        public VBLexer(JetBrains.Text.IBuffer buffer) { }
        public JetBrains.Text.IBuffer Buffer { get; }
        public object CurrentPosition { get; set; }
        public int TokenEnd { get; }
        public int TokenStart { get; }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType TokenType { get; }
        public void Advance() { }
        public static JetBrains.ReSharper.Psi.Parsing.TokenNodeType GetKeyword(string str) { }
        public static bool IsKeyword(string str) { }
        public void Start() { }
    }
    public class VBLexerGenerated : JetBrains.ReSharper.Psi.Parsing.IIncrementalLexer, JetBrains.ReSharper.Psi.Parsing.ILexer, JetBrains.ReSharper.Psi.Parsing.ILexer<JetBrains.ReSharper.Psi.VB.Parsing.VBLexerState>, JetBrains.ReSharper.Psi.Parsing.ILexerEx
    {
        protected const int AFTERDOT = 2;
        protected const int AFTERIDENTIFIER = 1;
        protected JetBrains.ReSharper.Psi.Parsing.TokenNodeType currTokenType;
        static readonly JetBrains.ReSharper.Psi.Parsing.LexerDictionary<JetBrains.ReSharper.Psi.Parsing.TokenNodeType> keywords;
        protected const int YYINITIAL = 0;
        public VBLexerGenerated(JetBrains.Text.IBuffer buffer) { }
        public VBLexerGenerated(JetBrains.Text.IBuffer buffer, int startOffset, int endOffset) { }
        public JetBrains.Text.IBuffer Buffer { get; }
        protected int BufferEnd { get; set; }
        protected int BufferIndex { get; set; }
        protected int BufferStart { get; set; }
        public JetBrains.ReSharper.Psi.VB.Parsing.VBLexerState CurrentPosition { get; set; }
        public int EOFPos { get; }
        public int LexemIndent { get; }
        public uint LexerStateEx { get; }
        protected int LexicalState { get; set; }
        public int TokenEnd { get; }
        public int TokenStart { get; }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType TokenType { get; }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType _locateToken() { }
        public void Advance() { }
        protected virtual void locateToken() { }
        protected JetBrains.ReSharper.Psi.Parsing.TokenNodeType makeToken(JetBrains.ReSharper.Psi.Parsing.TokenNodeType type) { }
        public void Start() { }
        public void Start(int startOffset, int endOffset, uint state) { }
    }
    public struct VBLexerState
    {
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType currTokenType;
        public int yy_buffer_end;
        public int yy_buffer_index;
        public int yy_buffer_start;
        public int yy_lexical_state;
    }
    public class static VBTokenType
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ACCESS_MODIFIERS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ADDHANDLER_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ADDRESSOF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AGGREGATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ALIAS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AND;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AND_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ANDALSO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ANDEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ANSI_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASCENDING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASTERISK;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASTERISKEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASYNC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AUTO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AWAIT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BACKSLASH;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BACKSLASHEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BAD_TOKEN;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BOOLEAN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BYREF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BYTE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BYVAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CALL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CASE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CATCH_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CBOOL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CBYTE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CCHAR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CDATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CDBL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CDEC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CHAR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CHAR_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CINT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CLASS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CLNG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType COBJ_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType COLON;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType COMMA;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType COMMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet COMPOUND_END_TOKEN;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CONST_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CONTINUE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CSBYTE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CSHORT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CSNG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CSTR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CTYPE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CUINT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CULNG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CUSHORT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CUSTOM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DATE_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DECIMAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DECLARE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DEFAULT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DELEGATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DESCENDING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DIM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DIRECTCAST_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DISTINCT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DIV;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DIVEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DOT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DOUBLE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DUMMY_TERMINATOR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EACH_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ELSE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ELSEIF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_ADDHANDLER;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_CLASS;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet END_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_ENUM;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_EVENT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_FUNCTION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_GET;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_IF;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_INTERFACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_MODULE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_NAMESPACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_OPERATOR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_PROPERTY;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_RAISEEVENT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_REMOVEHANDLER;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_SELECT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_SET;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_STRUCTURE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_SUB;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_SYNCLOCK;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet END_TOPLEVEL_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_TRY;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_USING;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_WHILE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_WITH;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ENDIF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ENUM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EQUALS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ERASE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ERROR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EVENT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EXCL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EXIT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FALSE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FINALLY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FLOATPOINT_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FOR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FRIEND_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FROM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FUNCTION_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GET_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GETTYPE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GETXMLNAMESPACE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GLOBAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GOSUB_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GOTO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GROUP_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GTGT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GTGTEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType HANDLES_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IDENTIFIER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet IDENTIFIER_KEYWORDS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IMPLEMENTS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IMPLICIT_LINE_CONTINUATION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IMPORTS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INHERITS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTEGER_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTEGER_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTERFACE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ISFALSE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ISNOT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ISTRUE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ITERATOR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType JOIN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet KEYWORDS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LBRACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LET_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LIB_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LIKE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LINE_CONTINUATION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LINE_TERMINATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet LITERALS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LONG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LOOP_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LPARENTH;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LTLT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LTLTEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ME_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MID_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MINUS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MINUSEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MOD_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MODULE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MUSTINHERIT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MUSTOVERRIDE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MYBASE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MYCLASS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NAMESPACE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NARROWING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NEW_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NEXT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NOT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NOTHING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NOTINHERITABLE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NOTOVERRIDABLE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OBJECT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ON_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OPERATOR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OPTION_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OPTIONAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ORDER_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ORELSE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OUT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OVERLOADS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OVERRIDABLE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OVERRIDES_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PARAMARRAY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PARTIAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PLUS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PLUSEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PRESERVE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PRIVATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PROPERTY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PROTECTED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PUBLIC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType QUESTION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RAISEEVENT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RBRACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType READONLY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType REDIM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType REM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType REMOVEHANDLER_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RESUME_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RETURN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RPARENTH;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SBYTE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SELECT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SET_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SHADOWS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SHARED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SHARP;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SHORT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SINGLE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SKIP_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STATIC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STEP_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STOP_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STRING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STRING_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STRUCTURE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SUB_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SYNCLOCK_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TAKE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType THEN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType THROW_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TRUE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TRY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TRYCAST_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TYPE_NAME;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPECHAR_AND;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPECHAR_AT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPECHAR_DOLLAR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPECHAR_EXCL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPECHAR_PERC;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPECHAR_SHARP;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TYPECHARS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPEOF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType UINTEGER_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ULONG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType UNICODE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType UNTIL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType USHORT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType USING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType VARIANT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WEND_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WHEN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WHERE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WHILE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WHITE_SPACE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet WHITESPACE_OR_COMMENT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WIDENING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WITH_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WITHEVENTS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WRITEONLY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_CDATA_BODY;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_CDATA_END;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_CDATA_START;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_CHAR_REF;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_COMMENT_BODY;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_COMMENT_END;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_COMMENT_START;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_ENTITY_REF;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_EQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_ERROR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_IDENTIFIER;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_NEW_LINE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_PI_BODY;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_PI_END;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_PI_START;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_SCRIPLET_END;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_SCRIPLET_START;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_SPACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_STRING;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_TAG_END;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_TAG_END1;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_TAG_START;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_TAG_START1;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_TEXT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XML_UNFINISHED_STRING;
        public static readonly JetBrains.ReSharper.Psi.Parsing.XmlTokenTypes XmlTokens;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XOR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XOR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XOREQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType YIELD_KEYWORD;
        public class DelimiterTokenNodeType : JetBrains.ReSharper.Psi.VB.Parsing.VBTokenType.VBTokenNodeType
        {
            public DelimiterTokenNodeType(string s, string representation, int index) { }
            public override string TokenRepresentation { get; }
            public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase Create(JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.TreeOffset startOffset, JetBrains.ReSharper.Psi.TreeOffset endOffset) { }
        }
        public class KeywordTokenNodeType : JetBrains.ReSharper.Psi.VB.Parsing.VBTokenType.VBTokenNodeType
        {
            public KeywordTokenNodeType(string s, string representation, int index, bool isFilteredToken = False) { }
            public override bool IsFiltered { get; }
            public override string TokenRepresentation { get; }
            public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase Create(JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.TreeOffset startOffset, JetBrains.ReSharper.Psi.TreeOffset endOffset) { }
        }
        public abstract class VBTokenNodeType : JetBrains.ReSharper.Psi.Parsing.TokenNodeType
        {
            protected VBTokenNodeType(string s, int index) { }
            public virtual bool IsComment { get; }
            public virtual bool IsConstantLiteral { get; }
            public virtual bool IsIdentifier { get; }
            public virtual bool IsKeyword { get; }
            public virtual bool IsStringLiteral { get; }
            public override bool IsWhitespace { get; }
            public override string TokenRepresentation { get; }
            public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase Create(JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.TreeOffset startOffset, JetBrains.ReSharper.Psi.TreeOffset endOffset) { }
        }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBXmlTokenBuilder : JetBrains.ReSharper.Psi.Parsing.IXmlTokenBuilder
    {
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase CreateToken(JetBrains.ReSharper.Psi.Parsing.XmlTokenNodeType tokenType, JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.TreeOffset startOffset, JetBrains.ReSharper.Psi.TreeOffset endOffset) { }
    }
    public class XmlPartLexer : JetBrains.ReSharper.Psi.Parsing.XmlLexerGenerated
    {
        public XmlPartLexer(JetBrains.Text.IBuffer buffer) { }
        protected override void locateToken() { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Resolve
{
    
    public interface IOverloadResolutionData
    {
        JetBrains.ReSharper.Psi.VB.Impl.Resolve.IArgumentsMatcher ArgumentsMatcher { get; }
        JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.IMoreSpecificSelector MoreSpecificSelector { get; }
        JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext ResolveContext { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> TypeArguments { get; }
        JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule TypeConversionRule { get; }
        JetBrains.ReSharper.Psi.VB.Impl.Resolve.OverloadResolution.ITypeInferenceRule TypeInferenceRule { get; }
        bool TypesAreAlreadyInfered { get; }
        System.Version VBVersion { get; }
    }
    public interface IOverloadResolutionResult
    {
        JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        bool HasModuleMethod { get; }
        bool IsApplicableResolveResult { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CommitResolveResult();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo GetResolveResult();
    }
    public interface IResolveInfoWithImports : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo
    {
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.VB.Tree.IImportClause> ImportClauses { get; }
    }
    public class ResolveInfoWithImport : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo, JetBrains.ReSharper.Psi.VB.Resolve.IResolveInfoWithImports
    {
        public ResolveInfoWithImport(JetBrains.ReSharper.Psi.VB.Tree.IImportClause importClause, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.VB.Tree.IImportClause> ImportClauses { get; }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ResolveErrorType { get; }
    }
    public class ResolveInfoWithImports : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo, JetBrains.ReSharper.Psi.VB.Resolve.IResolveInfoWithImports
    {
        public ResolveInfoWithImports(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.VB.Tree.IImportClause> importClauses, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.VB.Tree.IImportClause> ImportClauses { get; }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ResolveErrorType { get; }
    }
    public class VBImplicitBaseConstructorInvocationReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ImplicitBaseConstructorInvocationReference
    {
        public VBImplicitBaseConstructorInvocationReference(JetBrains.ReSharper.Psi.Tree.IDeclaration ownerElement, JetBrains.ReSharper.Psi.IClass baseClass) { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
    }
    public class VBResolveErrorType : JetBrains.ReSharper.Psi.Resolve.ResolveErrorType
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType CANT_USE_ACESSOR_DIRECTLY;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType DEFAULT_PROPERTY_NOT_RESOLVED;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType INCORRECT_AWAITABLE_PATTERN;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType INCORRECT_FOREACH_PATTERN;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType INCORRECT_PARAMETER_NUMBER_IN_MID;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType INCORRECT_QUALIFIER_USAGE;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType MORE_APPLICABLE_NOT_FOUND;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType MORE_SPECIFIC_NOT_FOUND;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType NOT_EVENT;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType NOT_METHOD;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType NOT_PROPERTY_IN_DICTIONARY_ACCESS;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType NOT_RESOLVED_INTERFACE_SPECIFIER;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType NOT_RESOLVED_TEXT_REFERENCE;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType NOT_VALID_HERE;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType NOT_VARIABLE_IN_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType STRICTNESS_FAILED;
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.VBResolveErrorType USE_LOCAL_BEFORE_DECLARATION;
    }
    public class static VBResolveInfoFactory
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo Create(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.VB.Tree.IImportClause> importClauses, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo Create(JetBrains.ReSharper.Psi.VB.Tree.IImportClause importClause, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
    }
    public class static VBResolveResultExtensions
    {
        public static bool IsLateBound(this JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo resultWithInfo) { }
        public static bool IsReturnValue(this JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> LiftedOrSimpleCandidates(this JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        public static JetBrains.ReSharper.Psi.IDeclaredElement LiftedOrSimpleDeclaredElement(this JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Resolve.TypeInference
{
    
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBTypeInferenceBoundsSolver : JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceBoundsSolver
    {
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> Solve(System.Collections.Generic.IList<JetBrains.Util.OneToSetMap<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound>> typeBounds, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution SolveLikeResolve(System.Collections.Generic.IList<JetBrains.Util.OneToSetMap<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound>> typeBounds, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
    }
    public class static VBTypeInferenceEngine
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution ExplicitInference(JetBrains.ReSharper.Psi.ITypeParametersOwner element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> typeArguments) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution ImplicitInference(ref JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Resolve.ISubstitution qualifierSubstitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.IVBArgumentInfo> arguments, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution ImplicitInference(ref JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Resolve.ISubstitution qualifierSubstitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters, JetBrains.ReSharper.Psi.VB.Impl.Resolve.ArgumentsMatchResult matchResult, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule, System.Version vbVersion) { }
        public static JetBrains.ReSharper.Psi.IType SolveTypeInferenceBounds(this System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound> bounds, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule typeConversionRule) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBTypeInferenceMatcher : JetBrains.ReSharper.Psi.Resolve.TypeInference.CLRTypeInferenceMatcher
    {
        public static readonly JetBrains.ReSharper.Psi.VB.Resolve.TypeInference.VBTypeInferenceMatcher Instance;
        public override bool Match(JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceKind inferenceKind, JetBrains.ReSharper.Psi.IType actualType, JetBrains.ReSharper.Psi.IType formalTypeWithVariables, JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceConsumer consumer) { }
        protected override JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceKind NextKind(JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceKind inferenceKind, JetBrains.ReSharper.Psi.ITypeParameter typeParameter, bool isArray) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Resources
{
    
    public sealed class PsiVBThemedIcons
    {
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.VB;component/resources/PsiVBThemedIcons/ThemedIcons.PsiVB" +
            ".Generated.Xaml", 6, "VbAnonymousMethod")]
        public sealed class VbAnonymousMethod : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.VB;component/resources/PsiVBThemedIcons/ThemedIcons.PsiVB" +
            ".Generated.Xaml", 2, "Vbasic")]
        public sealed class Vbasic : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.VB;component/resources/PsiVBThemedIcons/ThemedIcons.PsiVB" +
            ".Generated.Xaml", 4, "VbDelegateFunction")]
        public sealed class VbDelegateFunction : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.VB;component/resources/PsiVBThemedIcons/ThemedIcons.PsiVB" +
            ".Generated.Xaml", 8, "VbDelegateSub")]
        public sealed class VbDelegateSub : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.VB;component/resources/PsiVBThemedIcons/ThemedIcons.PsiVB" +
            ".Generated.Xaml", 1, "VbExtensionFunction")]
        public sealed class VbExtensionFunction : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.VB;component/resources/PsiVBThemedIcons/ThemedIcons.PsiVB" +
            ".Generated.Xaml", 7, "VbExtensionSub")]
        public sealed class VbExtensionSub : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.VB;component/resources/PsiVBThemedIcons/ThemedIcons.PsiVB" +
            ".Generated.Xaml", 9, "VbFunction")]
        public sealed class VbFunction : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.VB;component/resources/PsiVBThemedIcons/ThemedIcons.PsiVB" +
            ".Generated.Xaml", 0, "VbModule")]
        public sealed class VbModule : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.VB;component/resources/PsiVBThemedIcons/ThemedIcons.PsiVB" +
            ".Generated.Xaml", 3, "VbPropertyWithParams")]
        public sealed class VbPropertyWithParams : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.VB;component/resources/PsiVBThemedIcons/ThemedIcons.PsiVB" +
            ".Generated.Xaml", 5, "VbSub")]
        public sealed class VbSub : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Tree
{
    
    public class static AccessorDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration GetByParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
    }
    public class static AccessorOwnerDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAccessorOwnerDeclaration GetByAccessorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAccessorOwnerDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAccessorOwnerDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAccessorOwnerDeclaration GetByImplementsClause(JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAccessorOwnerDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAccessorOwnerDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static AddHandlerStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAddHandlerStatement GetByEventExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAddHandlerStatement GetByHandlerExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static AdditiveExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAdditiveExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAdditiveExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static AddressOfExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAddressOfExpression GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param) { }
    }
    public class static AggregatedRangeVariableDeclarationListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList GetByDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration param) { }
    }
    public class static AggregatedRangeVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryAggregatedParameterPlatform param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static AggregateQueryOperatorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAggregateQueryOperator GetByCollectionVariable(JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAggregateQueryOperator GetByDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclarationList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAggregateQueryOperator GetByIntoClause(JetBrains.ReSharper.Psi.VB.Tree.IIntoOfAggregateQueryOperator param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAggregateQueryOperator GetByQueryOperator(JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator param) { }
    }
    public class static AliasClauseNavigator { }
    public class static AnonymousArrayCreationExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression GetTopmostByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
    }
    public class static AnonymousArrayCreationExt
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> AllElements(this JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression arrayCreationExpression) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IExpressionType> AllElementTypes(this JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression arrayCreationExpression) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IExpressionType> AllElementTypes(this JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression arrayCreationExpression, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static int Rank(this JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression creationExpression) { }
    }
    public class static AnonymousMemberDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAnonymousMemberDeclaration GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAnonymousMemberDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static AnonymousObjectCreationExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectCreationExpression GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectInitializer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectCreationExpression GetByMemberDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IAnonymousMemberDeclaration param) { }
    }
    public class static AnonymousObjectInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectInitializer GetByMemberDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IAnonymousMemberDeclaration param) { }
    }
    public class static ArgumentedExpressionNavigator
    {
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner GetByArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBArgument argument) { }
    }
    public class static ArgumentListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IArgumentList GetByArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBArgument param) { }
    }
    public class static ArrayBoundNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IArrayBound GetByBound1(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IArrayBound GetByBound2(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static ArrayCreationExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IArrayCreationExpression GetByArrayInitializer(JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IArrayCreationExpression GetByArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IArrayCreationExpression GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param) { }
    }
    public class static ArrayModifierNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IArrayModifier GetByArrayBound(JetBrains.ReSharper.Psi.VB.Tree.IArrayBound param) { }
    }
    public class static ArrayModifiersListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList GetByArrayModifier(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifier param) { }
    }
    public class static AssignmentStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAssignmentStatement GetByLValue(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAssignmentStatement GetByRValue(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public enum AssignmentType
    {
        INVALID = 0,
        EQ = 1,
        PLUSEQ = 2,
        MINUSEQ = 3,
        ASTERISKEQ = 4,
        DIVEQ = 5,
        BACKSLASHEQ = 6,
        ANDEQ = 7,
        XOREQ = 8,
        LTLTEQ = 9,
        GTGTEQ = 10,
    }
    public class static AttributeListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAttributeList GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
    }
    public class static AttributeListOwnerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
    }
    public class static AttributeNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAttribute GetByArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBArgument param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAttribute GetByArgumentList(JetBrains.ReSharper.Psi.VB.Tree.IArgumentList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAttribute GetByAttributeType(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param) { }
    }
    public class static AttributesOwnerDeclarationNavigator
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
    }
    public class static AwaitExpressionExt
    {
        public static JetBrains.ReSharper.Psi.IType GetAsyncFunctionReturnType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.VB.Tree.IAwaitExpression awaitExpression) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration GetContainingAsyncDeclaration(this JetBrains.ReSharper.Psi.VB.Tree.IAwaitExpression awaitExpression) { }
        public static bool IsUnderAsyncDeclaration(this JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode node) { }
    }
    public class static AwaitExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAwaitExpression GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static AwaitStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IAwaitStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IAwaitExpression param) { }
    }
    public class static BlockIfStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IBlockIfStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IBlockIfStatement GetByElseIfStatement(JetBrains.ReSharper.Psi.VB.Tree.IElseIfStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IBlockIfStatement GetByElseStatement(JetBrains.ReSharper.Psi.VB.Tree.IElseStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IBlockIfStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static BlockNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IBlock GetByStatement(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement param) { }
    }
    public class static CaseClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICaseClause GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICaseClause GetByToExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static CaseStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICaseStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICaseStatement GetByCaseClause(JetBrains.ReSharper.Psi.VB.Tree.ICaseClause param) { }
    }
    public enum CastExpressionKind
    {
        CType = 0,
        TryCast = 1,
        DirectCast = 2,
        CPredefined = 3,
    }
    public class static CastExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICastExpression GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICastExpression GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static CatchStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICatchStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICatchStatement GetByCatchVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ICatchVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICatchStatement GetByCatchVariableExpression(JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICatchStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static CatchVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICatchVariableDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICatchVariableDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static CharsetModifierNavigator { }
    public class static ClassBaseClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassBaseClause GetByInheritsType(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param) { }
    }
    public class static ClassBodyNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassBody GetByConstructorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassBody GetByConversionOperatorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassBody GetByEventDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassBody GetByExternalMethodDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassBody GetByMethodDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassBody GetByMultipleConstantDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IMultipleConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassBody GetByMultipleVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IMultipleVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassBody GetByPropertyDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassBody GetBySignOperatorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration param) { }
    }
    public class static ClassDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByBaseClause(JetBrains.ReSharper.Psi.VB.Tree.IClassBaseClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByBody(JetBrains.ReSharper.Psi.VB.Tree.IClassBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByConstantDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByConstructorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByConversionOperatorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByEventDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByImplementsClause(JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByImplementsType(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByInheritsType(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByMethodDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByPropertyDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetBySignOperatorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByTypeParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration GetByVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration param) { }
    }
    public class static ClassLikeDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByBaseClassSpecification(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName referenceName) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByBaseClassSpecification(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage declaredTypeUsage) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByBaseInterfaceSpecification(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName referenceName) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByBaseInterfaceSpecification(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage declaredTypeUsage) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByBaseTypeSpecification(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName referenceName) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByBaseTypeSpecification(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage declaredTypeUsage) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByBody(JetBrains.ReSharper.Psi.VB.Tree.IClassBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByConstantDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByConstructorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByConversionOperatorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByEventDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByMethodDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByPropertyDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetBySignOperatorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetByVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration param) { }
    }
    public class static CollectionElementInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICollectionElementInitializer GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICollectionElementInitializer GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static CollectionRangeVariableDeclarationListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclarationList GetByDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration param) { }
    }
    public class static CollectionRangeVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public enum CommentType : byte
    {
        END_OF_LINE_COMMENT = 0,
        REM_COMMENT = 1,
        DOC_COMMENT = 2,
    }
    public class static ConcatenationExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConcatenationExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConcatenationExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static ConditionalExpressionExtensions
    {
        public static JetBrains.Util.Pair<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> ConditionedOperands(this JetBrains.ReSharper.Psi.VB.Tree.IConditionalExpression expr) { }
    }
    public enum ConditionalExpressionKind
    {
        UNKNOWN = 0,
        TERNARY = 1,
        NULL_COALESCING = 2,
    }
    public class static ConditionalExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConditionalExpression GetByArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBArgument param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConditionalExpression GetByArgumentList(JetBrains.ReSharper.Psi.VB.Tree.IArgumentList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConditionalExpression GetByCondition([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConditionalExpression GetByElseExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConditionalExpression GetByFirstOperandOfNullCoalescing([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConditionalExpression GetBySecondOperandOfNullCoalescing([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConditionalExpression GetByThenExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
    }
    public class static ConstantDeclarationNavigator
    {
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static ConstPreprocessorDirectiveNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConstPreprocessorDirective GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConstPreprocessorDirective GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static ConstructorDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration GetByParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
    }
    public enum ContinueStatementKind
    {
        Unknown = 0,
        Do = 1,
        For = 2,
        While = 3,
    }
    public class static ContinueStatementNavigator { }
    public class static ConversionOperatorDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration GetByParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration GetByReturnAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration GetByReturnType(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static DeclaredTypeUsageNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage GetByTypeName(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param) { }
    }
    public class static DelegateDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration GetByParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration GetByReturnAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration GetByReturnTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration GetByTypeParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList param) { }
    }
    public class static DictionaryAccessExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDictionaryAccessExpression GetByArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDictionaryAccessExpression GetByBaseExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param) { }
    }
    public class static DistinctQueryOperatorNavigator { }
    public class static DocCommentBlockNodeNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBDocCommentBlockNode GetByDocCommentNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDocComment docCommentNode) { }
    }
    public class static DoLoopStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDoLoopStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDoLoopStatement GetByPostCondition(JetBrains.ReSharper.Psi.VB.Tree.IWhileUntilCondition param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IDoLoopStatement GetByPreCondition(JetBrains.ReSharper.Psi.VB.Tree.IWhileUntilCondition param) { }
    }
    public class static ElseIfPreprocessorDirectiveNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IElseIfPreprocessorDirective GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static ElseIfStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IElseIfStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IElseIfStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static ElsePreprocessorDirectiveNavigator { }
    public class static ElseStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IElseStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
    }
    public class static EmptyArgumentNavigator { }
    public class static EndExternalSourcePreprocessorDirectiveNavigator { }
    public class static EndIfPreprocessorDirectiveNavigator { }
    public class static EndRegionPreprocessorDirectiveNavigator { }
    public class static EndStatementNavigator { }
    public class static EnumDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEnumDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEnumDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEnumDeclaration GetByBaseTypeName(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEnumDeclaration GetByEnumMemberDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEnumDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEnumDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static EnumMemberDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static EraseStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEraseStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param) { }
    }
    public class static ErrorStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IErrorStatement GetByNextExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static EventDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration GetByAccessorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration GetByDelegateParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration GetByDelegateParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration GetByDelegateTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration GetByImplementsClause(JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static EventSpecifierNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IEventSpecifier GetByMemberName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public enum ExitStatementKind
    {
        Unknown = 0,
        For = 1,
        Do = 2,
        While = 3,
        Select = 4,
        Sub = 5,
        Function = 6,
        Property = 7,
        Try = 8,
    }
    public class static ExitStatementNavigator { }
    public class static ExponentiationExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExponentiationExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExponentiationExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static ExpressionArgumentNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExpressionArgument GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public enum ExpressionClassification
    {
        Value = 0,
        Variable = 1,
        Namespace = 2,
        Type = 3,
        Invocation = 4,
        MethodPointer = 5,
        LambdaMethod = 6,
        LateBound = 7,
        Event = 8,
        AnonymousArrayCreation = 9,
        Void = 10,
        Nothing = 11,
    }
    public class static ExpressionRangeVariableDeclarationListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList GetByDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration param) { }
    }
    public class static ExpressionRangeVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static ExpressionStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExpressionStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static ExternalChecksumPreprocessorDirectiveNavigator { }
    public class static ExternalMethodDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByAliasClause(JetBrains.ReSharper.Psi.VB.Tree.IAliasClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByCharsetModifier(JetBrains.ReSharper.Psi.VB.Tree.ICharsetModifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByLibraryClause(JetBrains.ReSharper.Psi.VB.Tree.ILibraryClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByReturnAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByReturnTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByTypeParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodList param) { }
    }
    public class static ExternalSourcePreprocessorDirectiveNavigator { }
    public class static FinallyStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IFinallyStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
    }
    public class static ForEachStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IForEachStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IForEachStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IForEachStatement GetByLoopVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IForEachStatement GetByLoopVariableExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IForEachStatement GetByNextClause(JetBrains.ReSharper.Psi.VB.Tree.INextClause param) { }
    }
    public class static ForStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IForStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IForStatement GetByEndExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IForStatement GetByLoopVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IForStatement GetByLoopVariableExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IForStatement GetByNextClause(JetBrains.ReSharper.Psi.VB.Tree.INextClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IForStatement GetByStartExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IForStatement GetByStepExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static FromQueryOperatorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IFromQueryOperator GetByDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclarationList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IFromQueryOperator GetByVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration param) { }
    }
    public class static FunctionDeclarationExtensions
    {
        public static bool IsAsynchronous(this JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration declaration) { }
        public static bool IsIterator(this JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration declaration) { }
    }
    public class static GetTypeExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IGetTypeExpression GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static GetXmlNamespaceExpressionNavigator { }
    public class static GotoStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IGotoStatement GetByLabelName(JetBrains.ReSharper.Psi.VB.Tree.ILabelName param) { }
    }
    public class static GroupByQueryOperatorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IGroupByQueryOperator GetByKeyDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IGroupByQueryOperator GetByKeyDeclarationsList(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IGroupByQueryOperator GetByResultDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IGroupByQueryOperator GetByResultDeclarationsList(JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IGroupByQueryOperator GetBySelectorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IGroupByQueryOperator GetBySelectorDeclarationsList(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList param) { }
    }
    public class static GroupJoinQueryOperatorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IGroupJoinQueryOperator GetByDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IGroupJoinQueryOperator GetByJoinOperator(JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IGroupJoinQueryOperator GetByResultDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration param) { }
    }
    public class static HandlesClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IHandlesClause GetByEventSpecifier(JetBrains.ReSharper.Psi.VB.Tree.IEventSpecifier param) { }
    }
    public interface IAccessorDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.IAccessor DeclaredElement { get; }
        bool IsIterator { get; }
        bool IsValueParameterDeclared { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Keyword { get; }
        JetBrains.ReSharper.Psi.AccessorKind Kind { get; }
    }
    public interface IAccessorOwnerDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration> AccessorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration> AccessorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        new JetBrains.ReSharper.Psi.ITypeMember DeclaredElement { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause ImplementsClause { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration AddAccessorDeclarationAfter(JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration param, JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration anchor);
        JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration AddAccessorDeclarationBefore(JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration param, JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration anchor);
        void RemoveAccessorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration param);
        JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause SetImplementsClause(JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
    }
    public interface IAddHandlerStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AddHandlerKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Comma { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression EventExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression HandlerExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetEventExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetHandlerExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IAdditiveExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IAddressOfExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AddressOfKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression Expression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param);
    }
    public interface IAggregatedRangeVariableDeclaration : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryAnonymousTypeProperty, JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryDeclaredElement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryAnonymousTypeProperty DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryAggregatedParameterPlatform Expression { get; }
        new JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new System.Xml.XmlNode GetXMLDoc(bool inherit);
        new bool IsSynthetic();
        new bool IsValid();
        JetBrains.ReSharper.Psi.VB.Tree.IQueryAggregatedParameterPlatform SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryAggregatedParameterPlatform param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
    }
    public interface IAggregatedRangeVariableDeclarationList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration> Declarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration> DeclarationsEnumerable { get; }
    }
    public interface IAggregateQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryCallsChainOwner, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IQueryReferenceOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AggregateKeyword { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IQueryReference AggregateReference { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration> CollectionVariables { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration> CollectionVariablesEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclarationList DeclarationList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IIntoOfAggregateQueryOperator IntoClause { get; }
        bool IsStandalone { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator> QueryOperators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator> QueryOperatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclarationList SetDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclarationList param);
        JetBrains.ReSharper.Psi.VB.Tree.IIntoOfAggregateQueryOperator SetIntoClause(JetBrains.ReSharper.Psi.VB.Tree.IIntoOfAggregateQueryOperator param);
    }
    public interface IAliasClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AliasKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode AliasName { get; }
    }
    public interface IAnonymousArrayCreationExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> Initializer { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> InitializerEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression AddElementInitializerAfter(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression anchor);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression AddElementInitializerBefore(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression anchor);
        void RemoveElementInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IAnonymousMemberDeclaration : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Dot { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        bool IsKey { get; }
        bool IsProjectionInitializer { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Key { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.Resolve.IReference ReferenceToProperty { get; }
        string GetName();
        JetBrains.DocumentModel.DocumentRange GetNameDocumentRange();
        JetBrains.ReSharper.Psi.TreeTextRange GetNameTextRange();
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        void SetName(string name);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
    }
    public interface IAnonymousObjectCreationExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.INewExpression, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectInitializer Initializer { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IAnonymousMemberDeclaration> MemberDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IAnonymousMemberDeclaration> MemberDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NewKeyword { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.AnonymousTypeDescriptor> GetTypeDescriptor();
        JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectInitializer SetInitializer(JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectInitializer param);
    }
    public interface IAnonymousObjectInitializer : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IAnonymousMemberDeclaration> MemberDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IAnonymousMemberDeclaration> MemberDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode WithKeyword { get; }
    }
    public interface IArgumentList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBArgument> Arguments { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBArgument> ArgumentsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
    }
    public interface IArrayBound : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Bound1 { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Bound2 { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ToKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetBound1(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetBound2(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IArrayCreationExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.INewExpression, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression ArrayInitializer { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList ArrayModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NewLeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NullableMark { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression SetArrayInitializer(JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList SetArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param);
        void SetArrayType(JetBrains.ReSharper.Psi.IArrayType arrayType);
        JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param);
    }
    public interface IArrayModifier : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IArrayBound> ArrayBounds { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IArrayBound> ArrayBoundsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
    }
    public interface IArrayModifiersList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IArrayModifier> ArrayModifiers { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IArrayModifier> ArrayModifiersEnumerable { get; }
    }
    public interface IAssignmentStatement : JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.AssignmentType AssignmentType { get; }
        bool IsCompoundAssignment { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression LValue { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OpSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression RValue { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetLValue(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetRValue(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IAttribute : JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Tree.IArgumentsOwner, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName AttributeType { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Colon { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference ConstructorReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Target { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference TypeReference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName SetAttributeType(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param);
    }
    public interface IAttributeList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IAttribute> Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IAttribute> AttributesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> LeftAngle { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> LeftAngleEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> RightAngle { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> RightAngleEnumerable { get; }
    }
    public interface IAttributeListOwner : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IAttributeList AttributeList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IAttributeList SetAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param);
    }
    public interface IAttributesOwnerDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IAttribute> Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IAttribute> AttributesEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IAttribute AddAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute attribute);
        void RemoveAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute attribute);
    }
    public interface IAwaitExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.IType AwaitableType { get; }
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference AwaiterGetResultReference { get; }
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference AwaiterIsCompletedReference { get; }
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference AwaiterOnCompletedReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode AwaitKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference GetAwaiterReference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IAwaitStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IAwaitExpression Expression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IAwaitExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IAwaitExpression param);
    }
    public interface IBlock : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope, JetBrains.ReSharper.Psi.ILocalScope, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        bool IsBody { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBStatement> Statements { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBStatement> StatementsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBStatement AddStatement(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement statement, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement anchorStatement, bool before);
        JetBrains.ReSharper.Psi.VB.Tree.IVBStatement AddStatementAfter(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement statement, JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange anchorRange);
        JetBrains.ReSharper.Psi.VB.Tree.IVBStatement AddStatementBefore(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement statement, JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange anchorRange);
        JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange AddStatementsRange(JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange range, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, bool before);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ILabel> GetAllLabels();
        JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange GetAllStatementsRange();
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ILabel> GetLabelByName(string name);
        JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange GetStatementsRange(JetBrains.ReSharper.Psi.TreeTextRange textRange);
        JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange GetStatementsRange(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement first, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement last);
        void RemoveStatement(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement statement);
        void RemoveStatementsRange(JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange range);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IBlock ReplaceBy([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IBlock block);
    }
    public interface IBlockIfStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IBlock Block { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IElseIfStatement> ElseIfStatements { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IElseIfStatement> ElseIfStatementsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IElseStatement ElseStatement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndIf { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IfKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ThenKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
        JetBrains.ReSharper.Psi.VB.Tree.IElseStatement SetElseStatement(JetBrains.ReSharper.Psi.VB.Tree.IElseStatement param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface ICaseClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IsKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression ToExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ToKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetToExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface ICaseStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IBlock Block { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ICaseClause> CaseClauses { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ICaseClause> CaseClausesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode CaseKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ElseKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
    }
    public interface ICastExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Comma { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Keyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.CastExpressionKind Kind { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.IType GetCastType();
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface ICatchStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IBlock Block { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode CatchKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ICatchVariableDeclaration CatchVariableDeclaration { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression CatchVariableExpression { get; }
        JetBrains.ReSharper.Psi.IDeclaredType ExceptionType { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode WhenKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
        JetBrains.ReSharper.Psi.VB.Tree.ICatchVariableDeclaration SetCatchVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ICatchVariableDeclaration param);
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression SetCatchVariableExpression(JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface ICatchVariableDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBLocalVariableDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
    }
    public interface ICharsetModifier : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IClassBaseClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode InheritsKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage InheritsType { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage SetInheritsType(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param);
    }
    public interface IClassBody : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration> ConstructorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration> ConstructorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration> ConversionOperatorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration> ConversionOperatorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration> EventDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration> EventDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration> ExternalMethodDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration> ExternalMethodDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration> MethodDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration> MethodDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IMultipleConstantDeclaration> MultipleConstantDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IMultipleConstantDeclaration> MultipleConstantDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IMultipleVariableDeclaration> MultipleVariableDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IMultipleVariableDeclaration> MultipleVariableDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration> PropertyDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration> PropertyDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration> SignOperatorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration> SignOperatorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode> TypeDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode> TypeDeclarationsEnumerable { get; }
    }
    public interface IClassDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationWithRangeContainer, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBNestedTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBProperTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.VB.Tree.IClassBaseClause BaseClause { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ClassKeyword { get; }
        JetBrains.ReSharper.Psi.IClass DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndClass { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause> ImplementsClauses { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause> ImplementsClausesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage> ImplementsTypes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage> ImplementsTypesEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage InheritsType { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode> NestedTypeDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode> NestedTypeDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode> TypeDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode> TypeDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration> TypeParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration> TypeParameterDeclarationsEnumerable { get; }
        new JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList TypeParameterList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause AddImplementsClauseAfter(JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause param, JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause anchor);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause AddImplementsClauseBefore(JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause param, JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause anchor);
        void AddImplementsType(JetBrains.ReSharper.Psi.IDeclaredType implementsType);
        void RemoveImplementsType(JetBrains.ReSharper.Psi.IDeclaredType implementsType);
        void SetBaseClass(JetBrains.ReSharper.Psi.IDeclaredType @base);
        JetBrains.ReSharper.Psi.VB.Tree.IClassBaseClause SetBaseClause(JetBrains.ReSharper.Psi.VB.Tree.IClassBaseClause param);
        JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage SetInheritsType(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param);
        new JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList SetTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList param);
    }
    public interface IClassLikeDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationWithRangeContainer, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBProperTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration
    {
        JetBrains.ReSharper.Psi.VB.Tree.IClassBody Body { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration> ConstantDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration> ConstantDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration> ConstructorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration> ConstructorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration> ConversionOperatorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration> ConversionOperatorDeclarationsEnumerable { get; }
        new JetBrains.ReSharper.Psi.ITypeElement DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration> EventDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration> EventDeclarationsEnumerable { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage> ExtendsListTypeUsages { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration> MethodDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration> MethodDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration> PropertyDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration> PropertyDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration> SignOperatorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration> SignOperatorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration> VariableDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration> VariableDeclarationsEnumerable { get; }
        T AddTypeMemberDeclaration<T>(T member)
            where T : JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration;
        T AddTypeMemberDeclarationAfter<T>(T member, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration anchor)
            where T : JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration;
        T AddTypeMemberDeclarationBefore<T>(T member, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration anchor)
            where T : JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration;
        JetBrains.ReSharper.Psi.TreeTextRange GetBodyTreeRange();
        new JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration GetContainingNamespaceDeclaration();
        T InsertAtSpecificPosition<T>(T param, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor)
            where T : JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration;
        void RemoveTypeMemberDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration member);
        JetBrains.ReSharper.Psi.VB.Tree.IClassBody SetBody(JetBrains.ReSharper.Psi.VB.Tree.IClassBody param);
    }
    public interface ICollectionElementInitializer : JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> Initializer { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> InitializerEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
        void RemoveInitializerArgumentAt(int index);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface ICollectionRangeVariableDeclaration : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryDeclaredElement, JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryRangeVariable, JetBrains.ReSharper.Psi.VB.Tree.IQueryReferenceOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryRangeVariable DeclaredElement { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode InKeyword { get; }
        new JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryReference SelectManyReference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new System.Xml.XmlNode GetXMLDoc(bool inherit);
        new bool IsSynthetic();
        new bool IsValid();
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface ICollectionRangeVariableDeclarationList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration> Declarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration> DeclarationsEnumerable { get; }
    }
    public interface IConcatenationExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IConditionalExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IArgumentList ArgumentList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBArgument> Arguments { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBArgument> ArgumentsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Condition { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression ElseExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression FirstOperandOfNullCoalescing { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IfKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ConditionalExpressionKind Kind { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SecondOperandOfNullCoalescing { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression ThenExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IArgumentList SetArgumentList(JetBrains.ReSharper.Psi.VB.Tree.IArgumentList param);
    }
    public interface IConstantDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.IField DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Initializer { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface IConstPreprocessorDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ConstKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
    }
    public interface IConstructorDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.IConstructor DeclaredElement { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression Initializer { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NewKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode SubKeyword { get; }
    }
    public interface IContinueStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ContinueKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ContinueKind { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ContinueStatementKind Kind { get; }
    }
    public interface IConversionOperatorDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode CTypeKeyword { get; }
    }
    public interface IDeclaredTypeUsage : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName TypeName { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName SetTypeName(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param);
    }
    public interface IDelegateDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBNestedTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBProperTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.IDelegate DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode DelegateKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode FunctionKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList ReturnAttributeList { get; }
        JetBrains.ReSharper.Psi.IType ReturnType { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage ReturnTypeUsage { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode SubKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration> TypeParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration> TypeParameterDeclarationsEnumerable { get; }
        new JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList TypeParameterList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList SetReturnAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetReturnTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
        new JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList SetTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList param);
    }
    public interface IDictionaryAccessExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Argument { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression BaseExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ExclSign { get; }
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new bool IsValid();
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression SetBaseExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param);
    }
    public interface IDistinctQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IQueryReferenceOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode DistinctKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryReference DistinctReference { get; }
    }
    public interface IDocComment : JetBrains.ReSharper.Psi.Tree.IComment, JetBrains.ReSharper.Psi.Tree.ICommentNode, JetBrains.ReSharper.Psi.Tree.ITokenNode, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBComment
    {
        JetBrains.ReSharper.Psi.VB.Tree.IDocComment ReplaceBy(JetBrains.ReSharper.Psi.VB.Tree.IDocComment docCommentNode);
    }
    public interface IDoLoopStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.ILoopStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode DoKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LoopKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IWhileUntilCondition PostCondition { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IWhileUntilCondition PreCondition { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IWhileUntilCondition SetPostCondition(JetBrains.ReSharper.Psi.VB.Tree.IWhileUntilCondition param);
        JetBrains.ReSharper.Psi.VB.Tree.IWhileUntilCondition SetPreCondition(JetBrains.ReSharper.Psi.VB.Tree.IWhileUntilCondition param);
    }
    public interface IElseIfPreprocessorDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ElseIfKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ThenKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IElseIfStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IBlock Block { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ElseIfKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ThenKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IElsePreprocessorDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ElseKeyword { get; }
    }
    public interface IElseStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IBlock Block { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ElseKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
    }
    public interface IEmptyArgument : JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.Tree.IArgument, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBArgument, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IEndExternalSourcePreprocessorDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ExternalSourceWord { get; }
    }
    public interface IEndIfPreprocessorDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndIf { get; }
    }
    public interface IEndRegionPreprocessorDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RegionWord { get; }
    }
    public interface IEndStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndKeyword { get; }
    }
    public interface IEnumDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationWithRangeContainer, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBNestedTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBProperTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage BaseTypeName { get; }
        JetBrains.ReSharper.Psi.IEnum DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndEnum { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EnumKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration> EnumMemberDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration> EnumMemberDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration AddEnumMemberDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration param, JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration anchor, bool before);
        JetBrains.ReSharper.Psi.IType GetUnderlyingType();
        void RemoveEnumMemberDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration param);
        JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage SetBaseTypeName(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param);
    }
    public interface IEnumMemberDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.IField EnumMember { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Initializer { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
    }
    public interface IEraseStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EraseKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression> Expressions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression> ExpressionsEnumerable { get; }
    }
    public interface IErrorStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ErrorKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression NextExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetNextExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IEventDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAccessorOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IImplementsSpecificationOwner, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode CustomKeyword { get; }
        JetBrains.ReSharper.Psi.IEvent DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration> DelegateParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration> DelegateParameterDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList DelegateParameterList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage DelegateTypeUsage { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndEvent { get; }
        string EventHandlerShortName { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EventKeyword { get; }
        bool IsCustom { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration AddParameterDeclarationAfter(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration parameter, JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration anchor);
        JetBrains.ReSharper.Psi.Tree.IParameterDeclaration AddParameterDeclarationAfter(JetBrains.ReSharper.Psi.ParameterKind kind, JetBrains.ReSharper.Psi.IType parameterType, string parameterName, JetBrains.ReSharper.Psi.Tree.IParameterDeclaration anchor);
        JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration AddParameterDeclarationBefore(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration parameter, JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration anchor);
        JetBrains.ReSharper.Psi.Tree.IParameterDeclaration AddParameterDeclarationBefore(JetBrains.ReSharper.Psi.ParameterKind kind, JetBrains.ReSharper.Psi.IType parameterType, string parameterName, JetBrains.ReSharper.Psi.Tree.IParameterDeclaration anchor);
        bool HasEventField();
        bool HasEventHandler();
        void RemoveParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration parameter);
        JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList SetDelegateParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param);
        JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage SetDelegateTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param);
    }
    public interface IEventSpecifier : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode Base { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Dot { get; }
        JetBrains.ReSharper.Psi.Resolve.IReference EventReference { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference FieldReference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier MemberName { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetMemberName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
    }
    public interface IExitStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ExitKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ExitKind { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ExitStatementKind Kind { get; }
    }
    public interface IExponentiationExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IExpressionArgument : JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.Tree.IArgument, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBArgument, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IExpressionRangeVariableDeclaration : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryAnonymousTypeProperty, JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryDeclaredElement, JetBrains.ReSharper.Psi.VB.Tree.IQueryReferenceOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryAnonymousTypeProperty DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform Expression { get; }
        new JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryReference LetReference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new System.Xml.XmlNode GetXMLDoc(bool inherit);
        new bool IsSynthetic();
        new bool IsValid();
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface IExpressionRangeVariableDeclarationList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration> Declarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration> DeclarationsEnumerable { get; }
    }
    public interface IExpressionStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IExternalChecksumPreprocessorDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Checksum { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> ChecksumEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ExternalChecksumWord { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Guid { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> GuidEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Source { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> SourceEnumerable { get; }
    }
    public interface IExternalMethodDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.VB.Tree.IAliasClause AliasClause { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ICharsetModifier CharsetModifier { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode DeclareKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ILibraryClause LibraryClause { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IAliasClause SetAliasClause(JetBrains.ReSharper.Psi.VB.Tree.IAliasClause param);
        JetBrains.ReSharper.Psi.VB.Tree.ICharsetModifier SetCharsetModifier(JetBrains.ReSharper.Psi.VB.Tree.ICharsetModifier param);
        JetBrains.ReSharper.Psi.VB.Tree.ILibraryClause SetLibraryClause(JetBrains.ReSharper.Psi.VB.Tree.ILibraryClause param);
    }
    public interface IExternalSourcePreprocessorDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Comma { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ExternalSourceWord { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Line { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Source { get; }
    }
    public interface IFinallyStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IBlock Block { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode FinallyKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
    }
    public interface IForEachStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.ILoopStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IForEachStatementReference CurrentReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EachKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ForKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IForEachStatementReference GetEnumeratorReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode InKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration LoopVariableDeclaration { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression LoopVariableExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IForEachStatementReference MoveNextReference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.INextClause NextClause { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration SetLoopVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration param);
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression SetLoopVariableExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.INextClause SetNextClause(JetBrains.ReSharper.Psi.VB.Tree.INextClause param);
    }
    public interface IForEachStatementReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder { }
    public interface IForStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.ILoopStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression EndExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ForKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration LoopVariableDeclaration { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression LoopVariableExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.INextClause NextClause { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression StartExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression StepExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode StepKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ToKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetEndExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration SetLoopVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration param);
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression SetLoopVariableExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.INextClause SetNextClause(JetBrains.ReSharper.Psi.VB.Tree.INextClause param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetStartExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetStepExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public class static IfPreprocessorDirectiveNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IIfPreprocessorDirective GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public interface IFromQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclarationList DeclarationList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode FromKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration> VariableDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration> VariableDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclarationList SetDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclarationList param);
    }
    public interface IGetTypeExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType ArgumentType { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode GetTypeKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface IGetXmlNamespaceExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode GetXmlNamespaceKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NamespaceName { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
    }
    public interface IGotoStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.ILabelReferencingStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode GotoKeyword { get; }
    }
    public interface IGroupByQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IQueryReferenceOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ByKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryReference GroupByReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode GroupKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IntoKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration> KeyDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration> KeyDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList KeyDeclarationsList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration> ResultDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration> ResultDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList ResultDeclarationsList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration> SelectorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration> SelectorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList SelectorDeclarationsList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList SetKeyDeclarationsList(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList param);
        JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList SetResultDeclarationsList(JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList param);
        JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList SetSelectorDeclarationsList(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList param);
    }
    public interface IGroupJoinQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IQueryReferenceOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList DeclarationList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryReference GroupJoinReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode GroupKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IntoKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator JoinOperator { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration> ResultDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration> ResultDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList SetDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList param);
        JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator SetJoinOperator(JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator param);
    }
    public interface IHandlesClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IEventSpecifier> EventSpecifiers { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IEventSpecifier> EventSpecifiersEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode HandlesKeyword { get; }
    }
    public interface IIfPreprocessorDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IfKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ThenKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IImplementsClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ImplementsKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IInterfaceMemberSpecifier> MemberSpecifiers { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IInterfaceMemberSpecifier> MemberSpecifiersEnumerable { get; }
    }
    public interface IImplementsSpecificationOwner
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Tree.IInterfaceMemberSpecifier> MemberSpecifiers { get; }
        void AddImplementsSpecification(JetBrains.ReSharper.Psi.IDeclaredType interfaceType, string name);
        void RemoveAllImplementsSpecifications();
        void RemoveImplementsSpecification(JetBrains.ReSharper.Psi.IDeclaredType interfaceType);
    }
    public interface IImportAliasClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IImportClause, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Alias { get; }
        string AliasName { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName ImportedSymbol { get; }
        JetBrains.ReSharper.Psi.Resolve.IReference ImportedSymbolReference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetAlias(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName SetImportedSymbol(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param);
    }
    public interface IImportClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IImportDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IImportClause> ImportClauses { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IImportClause> ImportClausesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ImportsKeyword { get; }
    }
    public interface IImportDirectivesSection : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IImportDirective> ImportDirectives { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IImportDirective> ImportDirectivesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
    }
    public interface IImportNamespaceClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IImportClause, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IDeclaredElement ImportedElement { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName ImportedNamespaceReferenceName { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName SetImportedNamespaceReferenceName(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param);
    }
    public interface IImportXMLNamespaceClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IImportClause, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Identifier { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Space { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> SpaceEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode String { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TagEnd { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TagStart { get; }
    }
    public interface IInactivePreprocessorBranch : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IIndexExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IArgumentsOwner, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression Expression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IIndexExpressionReference Reference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param);
    }
    public interface IIndexExpressionReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.ReSharper.Psi.VB.IVBInvocationReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.VB.Tree.IndexExpressionKind GetKind(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression GetTreeNode();
    }
    public interface IInstanceExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Instance { get; }
        JetBrains.ReSharper.Psi.VB.Tree.InstanceExpressionKind Kind { get; }
        JetBrains.ReSharper.Psi.IDeclaredType GetInstanceType();
    }
    public interface IIntegerDivisionExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IInterfaceDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationWithRangeContainer, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBNestedTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBProperTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        new JetBrains.ReSharper.Psi.ITypeElement DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndInterface { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause> InheritsClauses { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause> InheritsClausesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage> InheritsTypes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage> InheritsTypesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode InterfaceKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode> TypeDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode> TypeDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration> TypeParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration> TypeParameterDeclarationsEnumerable { get; }
        new JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList TypeParameterList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause AddInheritsClauseAfter(JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause param, JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause anchor);
        JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause AddInheritsClauseBefore(JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause param, JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause anchor);
        void AddInheritsType(JetBrains.ReSharper.Psi.IDeclaredType implementsType);
        void RemoveInheritsType(JetBrains.ReSharper.Psi.IDeclaredType implementsType);
        new JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList SetTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList param);
    }
    public interface IInterfaceInheritsClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode InheritsKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage> InheritsTypes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage> InheritsTypesEnumerable { get; }
    }
    public interface IInterfaceMemberSpecifier : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Dot { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName InterfaceQualification { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier MemberName { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName SetInterfaceQualification(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetMemberName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
    }
    public interface IIntoOfAggregateQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IQueryReferenceOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList AggregatedRangeVariableDeclarationList { get; }
        bool HasSignleInto { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IntoKeyword { get; }
        bool IsStandalone { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IQueryReference SelectReference { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration> Variables { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration> VariablesEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList SetAggregatedRangeVariableDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList param);
    }
    public interface IInvocationStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode CallKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IIsExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression LeftExpr { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OpSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression RightExpr { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IIsNotExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression LeftExpr { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OpSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression RightExpr { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IJoinCollectionRangeVariableDeclaration : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryDeclaredElement, JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryRangeVariable, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.VB.DeclaredElements.Query.IQueryRangeVariable DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode InKeyword { get; }
        new JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Value { get; }
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new System.Xml.XmlNode GetXMLDoc(bool inherit);
        new bool IsSynthetic();
        new bool IsValid();
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetValue(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IJoinCondition : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqualsKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform LeftExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform RightExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform SetLeftExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param);
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform SetRightExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param);
    }
    public interface IJoinQueryConditionsListFake : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> EqualsKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> EqualsKeywordEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> Expression { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> ExpressionEnumerable { get; }
    }
    public interface IJoinQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryCallsChainOwner, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IQueryReferenceOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IJoinCondition> Conditions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IJoinCondition> ConditionsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryConditionsList ConditionsList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IJoinCollectionRangeVariableDeclaration Declaration { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode JoinKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryReference JoinReference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator NestedJoinQueryOperator { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OnKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryConditionsList SetConditionsList(JetBrains.ReSharper.Psi.VB.Tree.IQueryConditionsList param);
        JetBrains.ReSharper.Psi.VB.Tree.IJoinCollectionRangeVariableDeclaration SetDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IJoinCollectionRangeVariableDeclaration param);
        JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator SetNestedJoinQueryOperator(JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator param);
    }
    public interface ILabelDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.ILabel DeclaredElement { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ILabelName LabelName { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ILabelName SetLabelName(JetBrains.ReSharper.Psi.VB.Tree.ILabelName param);
    }
    public interface ILabelName : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode Name { get; }
    }
    public interface ILabelReferencingStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        string Label { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ILabelName LabelName { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ILabelName SetLabelName(JetBrains.ReSharper.Psi.VB.Tree.ILabelName param);
    }
    public interface ILabelStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.ILabelDeclaration Declaration { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ILabelDeclaration SetDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILabelDeclaration param);
    }
    public interface ILambdaExpression : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.ILocalScope, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsyncKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock Block { get; }
        bool HasImplicitlyTypedParameters { get; }
        bool IsAsynchronous { get; }
        bool IsIterator { get; }
        bool IsMultiline { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IteratorKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration> ParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration> ParameterDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.IType ReturnType { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ILambdaSignature Signature { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.IType GetReturnType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        void SetAsync(bool value);
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
        void SetIterator(bool value);
        JetBrains.ReSharper.Psi.VB.Tree.ILambdaSignature SetSignature(JetBrains.ReSharper.Psi.VB.Tree.ILambdaSignature param);
    }
    public interface ILambdaFunctionExpression : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.ILocalScope, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.ILambdaExpression, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndFunction { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode FunctionKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage ReturnTypeUsage { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetReturnTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface ILambdaParameterDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IParameterDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParameterDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.ILambdaParameter DeclaredElement { get; }
        bool IsExplicitlyTyped { get; }
        bool IsImplicitlyTyped { get; }
    }
    public interface ILambdaSignature : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration> ParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration> ParameterDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
    }
    public interface ILambdaSubExpression : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.ILocalScope, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.ILambdaExpression, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndSub { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBStatement Statement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode SubKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBStatement SetStatement(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement param);
    }
    public interface ILetQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList DeclarationList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LetKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration> VariableDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration> VariableDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList SetDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList param);
    }
    public interface ILibraryClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode LibKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LibName { get; }
    }
    public interface ILikeExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface ILineIfStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody ElseBranch { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody> ElseIfBranch { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody> ElseIfBranchEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> ElseIfExpression { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> ElseIfExpressionEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> ElseIfKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> ElseIfKeywordEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ElseKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody IfBranch { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IfKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> ThenKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> ThenKeywordEnumerable { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Tree.IVBStatement> GetElseIfStatements(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression elseIfCondition);
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBStatement> GetElseStatements();
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBStatement> GetIfStatements();
        JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody SetElseBranch(JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody SetIfBranch(JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody param);
    }
    public interface ILineIfStatementBody : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Colons { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> ColonsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBStatement> Statements { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBStatement> StatementsEnumerable { get; }
    }
    public interface ILocalDeclarationList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression CreationExpression { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration> Declarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration> DeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Initializer { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression SetCreationExpression(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface ILocalDeclarationStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IAttributeList AttributeList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationList> DeclarationLists { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationList> DeclarationListsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Keyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.LocalDeclarationKind Kind { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration> VariableDeclarations { get; }
        void RemoveVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration declaration);
        JetBrains.ReSharper.Psi.VB.Tree.IAttributeList SetAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param);
    }
    public interface ILocalVariableDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBLocalVariableDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList ArrayModifiersList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression CreationExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationList DeclarationsList { get; }
        JetBrains.ReSharper.Psi.VB.IVBLocalVariable DeclaredElement { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Initializer { get; }
        bool IsImplicitlyTyped { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NullableMark { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList SetArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param);
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression SetCreationExpression(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface ILogicalAndExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface ILogicalNotExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBUnaryExpression { }
    public interface ILogicalOrExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface ILogicalXorExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface ILoopControlVariableDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBLocalVariableDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList ArrayModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NullableMark { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList SetArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param);
    }
    public interface ILoopStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IBlock Block { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
    }
    public interface IMemberAccessExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IMemberInitializer : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Dot { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
    }
    public interface IMethodDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IImplementsSpecificationOwner, JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        new JetBrains.ReSharper.Psi.VB.Tree.IAttributeList AttributeList { get; }
        new JetBrains.ReSharper.Psi.IMethod DeclaredElement { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IHandlesClause HandlesClause { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause ImplementsClause { get; }
        bool IsAsynchronous { get; }
        bool IsExtensionMethodPossible { get; }
        bool IsIterator { get; }
        bool IsPartial { get; }
        new JetBrains.ReSharper.Psi.VB.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration AddTypeParameterBefore(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration param, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration anchor);
        void RemoveTypeParameter(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration param);
        void SetAsync(bool value);
        JetBrains.ReSharper.Psi.VB.Tree.IHandlesClause SetHandlesClause(JetBrains.ReSharper.Psi.VB.Tree.IHandlesClause param);
        JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause SetImplementsClause(JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause param);
        void SetIterator(bool value);
        new JetBrains.ReSharper.Psi.VB.Tree.IModifiersList SetModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param);
        void SetPartial(bool value);
    }
    public interface IMethodDeclarationBase : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        new JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IAttribute> Attributes { get; }
        JetBrains.ReSharper.Psi.IMethod DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode FunctionKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.MethodDeclarationKind Kind { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList ReturnAttributeList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage ReturnTypeUsage { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode SubKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration> TypeParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration> TypeParameterDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodList TypeParameterList { get; }
        new JetBrains.ReSharper.Psi.VB.Tree.IAttribute AddAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute attribute);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList SetReturnAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetReturnTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodList SetTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodList param);
    }
    public interface IMidAssignmentStatement : JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Tree.IArgumentsOwner, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Eq { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode MidKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression RValue { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TypeChar { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetRValue(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IModifiersList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.AccessRights AccessRightsModifiers { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Modifiers { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> ModifiersEnumerable { get; }
        void AddModifier(JetBrains.ReSharper.Psi.Tree.ITokenNode modifierNode);
        bool HasModifier(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tType);
        void RemoveModifier(JetBrains.ReSharper.Psi.Tree.ITokenNode modifierNode);
    }
    public interface IModifiersListOwner : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IModifiersList SetModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param);
    }
    public interface IModuleDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationWithRangeContainer, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBProperTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndModule { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ModuleKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode> NestedTypeDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode> NestedTypeDeclarationsEnumerable { get; }
    }
    public interface IModulusExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public class static ImplementsClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause GetByMemberSpecifier(JetBrains.ReSharper.Psi.VB.Tree.IInterfaceMemberSpecifier param) { }
    }
    public class static ImportAliasClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportAliasClause GetByAlias(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportAliasClause GetByImportedSymbol(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param) { }
    }
    public class static ImportClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportClause GetByImportedSymbol(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param) { }
    }
    public class static ImportDirectiveNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportDirective GetByImportClause(JetBrains.ReSharper.Psi.VB.Tree.IImportClause param) { }
    }
    public class static ImportDirectivesSectionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportDirectivesSection GetByImportDirective(JetBrains.ReSharper.Psi.VB.Tree.IImportDirective param) { }
    }
    public class static ImportNamespaceClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IImportNamespaceClause GetByImportedNamespaceReferenceName(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param) { }
    }
    public class static ImportXMLNamespaceClauseNavigator { }
    public interface IMultipleConstantDeclaration : JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ConstKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration> Declarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration> DeclarationsEnumerable { get; }
    }
    public interface IMultipleVariableDeclaration : JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclarationList> DeclarationLists { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclarationList> DeclarationListsEnumerable { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration> VariableDeclarations { get; }
    }
    public interface IMultiplicativeExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface INamedArgument : JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.Tree.IArgument, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo, JetBrains.ReSharper.Psi.VB.Tree.IExpressionArgument, JetBrains.ReSharper.Psi.VB.Tree.IVBArgument, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ColonSign { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        string ParameterName { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
        void SetName(string name);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
    }
    public interface INamespaceMemberDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface INamespacePrefixExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Name { get; }
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
    }
    public class static IndexExpressionExtentions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBExpression GetInvocationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBExpression GetInvocationExpression(JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression element) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IndexExpressionKind GetKind([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.VB.Tree.IIndexExpressionReference reference) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression InvokedReferenceExpression(this JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression indexExpression) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpressionReference InvokedReferenceExpressionReference(this JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression indexExpression) { }
        public static bool IsConstructorReference(this JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression indexExpression) { }
    }
    public enum IndexExpressionKind
    {
        ConstructorInvocation = 0,
        MethodInvocation = 1,
        DelegateInvocation = 2,
        DefaultPropertyInvocation = 3,
        ArrayIndexerInvocation = 4,
        LateBound = 5,
        ResolveFailure = 6,
    }
    public class static IndexExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression GetByArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBArgument param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression GetByArgumentList(JetBrains.ReSharper.Psi.VB.Tree.IArgumentList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param) { }
    }
    public interface INewExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface INextClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> NextExpressions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> NextExpressionsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NextKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ILoopStatement FindOutermostClosedForLoop();
    }
    public class static InitializerOwnerDeclarationNavigator
    {
        public static JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration ByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression initializer) { }
    }
    public enum InstanceExpressionKind
    {
        UNKNOWN = 0,
        ME = 1,
        MYCLASS = 2,
        MYBASE = 3,
    }
    public class static InstanceExpressionNavigator { }
    public class static IntegerDivisionExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IIntegerDivisionExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IIntegerDivisionExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static InterfaceDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByBody(JetBrains.ReSharper.Psi.VB.Tree.IClassBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByConstantDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByConstructorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByConversionOperatorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByEventDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByInheritsClause(JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByInheritsType(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByMethodDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByPropertyDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetBySignOperatorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByTypeParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration GetByVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration param) { }
    }
    public class static InterfaceInheritsClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause GetByInheritsType(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param) { }
    }
    public class static InterfaceMemberSpecifierNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceMemberSpecifier GetByInterfaceQualification(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInterfaceMemberSpecifier GetByMemberName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration GetContainingDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IInterfaceMemberSpecifier memberSpecifier) { }
    }
    public class static IntoOfAggregateQueryOperatorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IIntoOfAggregateQueryOperator GetByAggregatedRangeVariableDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IIntoOfAggregateQueryOperator GetByVariable(JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration param) { }
    }
    public class static InvocationStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IInvocationStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public interface IObjectCollectionInitializer : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode FromKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ICollectionElementInitializer> Initializer { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ICollectionElementInitializer> InitializerEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
    }
    public interface IObjectCreationExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IArgumentsOwner, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.INewExpression, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCollectionInitializer CollectionInitializer { get; }
        JetBrains.ReSharper.Psi.Resolve.IReference ConstructorReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NewKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NullableMark { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationInitializer ObjectInitializer { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference TypeReference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCollectionInitializer SetCollectionInitializer(JetBrains.ReSharper.Psi.VB.Tree.IObjectCollectionInitializer param);
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationInitializer SetObjectInitializer(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationInitializer param);
        JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param);
    }
    public interface IObjectCreationInitializer : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IMemberInitializer> MemberInitializers { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IMemberInitializer> MemberInitializersEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode WithKeyword { get; }
    }
    public interface IOnErrorSpecialLabel : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode LiteralAfterMinus { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Minus { get; }
    }
    public interface IOnErrorStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.ILabelReferencingStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ErrorKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode GotoKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NextKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OnKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ResumeKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IOnErrorSpecialLabel SpecialLabel { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IOnErrorSpecialLabel SetSpecialLabel(JetBrains.ReSharper.Psi.VB.Tree.IOnErrorSpecialLabel param);
    }
    public interface IOperatorDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.IOperator DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OperatorKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList ReturnAttributeList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage ReturnType { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList SetReturnAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetReturnType(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface IOptionStatement : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OptionKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Value { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetValue(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
    }
    public interface IOptionStatementsSection : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IOptionStatement> OptionStatements { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IOptionStatement> OptionStatementsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
    }
    public interface IOrderByQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ByKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IOrderExpression> OrderExpressions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IOrderExpression> OrderExpressionsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OrderKeyword { get; }
    }
    public interface IOrderExpression : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryReferenceOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AscendingKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode DescendingKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform Expression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param);
    }
    public interface IParenthesizedExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IPartitionQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IQueryReferenceOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode SkipKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TakeKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode WhileKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Impl.Tree.PartitionOperatorKinds GetKind();
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param);
    }
    public interface IPositionalArgument : JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.Tree.IArgument, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo, JetBrains.ReSharper.Psi.VB.Tree.IExpressionArgument, JetBrains.ReSharper.Psi.VB.Tree.IVBArgument, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IPreprocessorDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Sharp { get; }
        JetBrains.ReSharper.Psi.ConstantValue GetConstantValue(string name);
    }
    public interface IPrimaryExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IPropertyDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAccessorOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IImplementsSpecificationOwner, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression CreationExpression { get; }
        JetBrains.ReSharper.Psi.IProperty DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndProperty { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Initializer { get; }
        bool IsAuto { get; }
        bool IsDefault { get; }
        bool IsIterator { get; }
        new JetBrains.ReSharper.Psi.VB.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IPropertyInitializer PropertyInitializer { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode PropertyKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList ReturnAttributeList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        void AddRemoveBody(bool add);
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression SetCreationExpression(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression param);
        void SetDefault(bool value);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        void SetIterator(bool value);
        JetBrains.ReSharper.Psi.VB.Tree.IPropertyInitializer SetPropertyInitializer(JetBrains.ReSharper.Psi.VB.Tree.IPropertyInitializer param);
        JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList SetReturnAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface IPropertyInitializer : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Initializer { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IQualifiedNamespaceName : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        string DeclaredName { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Dot { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName Qualifier { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName ReplaceBy(JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName node);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName SetQualifier(JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName param);
    }
    public interface IQueryAggregatedParameterPlatform : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Ident { get; }
        bool IsGroup { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        string MethodName { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform Platform { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetIdent(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform SetPlatform(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param);
    }
    public interface IQueryCallsChainOwner
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression QueryExpression { get; }
    }
    public interface IQueryConditionsList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> AndKeywords { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> AndKeywordsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IJoinCondition> joinCondition { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IJoinCondition> joinConditionEnumerable { get; }
    }
    public interface IQueryExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IQueryCallsChainOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator FirstQueryOperator { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator> QueryOperators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator> QueryOperatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator SetFirstQueryOperator(JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator param);
    }
    public interface IQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode FirstKeyword { get; }
    }
    public interface IQueryParameter : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Value { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetValue(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IQueryParameterPlatform : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Value { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetValue(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IQueryReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedOnePhaseReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.Util.IUserDataHolder
    {
        new bool IsValid();
    }
    public interface IQueryReferenceOwner
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IQueryReference GetQueryLastReference(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        bool IsSelector();
    }
    public interface IRaiseEventStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RaiseEventKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param);
    }
    public interface IRedimClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IArrayBound> ArrayBounds { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IArrayBound> ArrayBoundsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifier SizeModifier { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifier SetSizeModifier(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifier param);
    }
    public interface IRedimStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode PreserveKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IRedimClause> RedimClauses { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IRedimClause> RedimClausesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RedimKeyword { get; }
    }
    public interface IReferenceExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeArgumentsOwnerElement, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IMemberAccessExpression, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression BaseExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Dot { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier NameIdentifier { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression QualifierExpression { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpressionReference Reference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList TypeArgumentList { get; }
        new System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> TypeArguments { get; }
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new bool IsValid();
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression SetBaseExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        void SetQualifierExpression(JetBrains.ReSharper.Psi.VB.Tree.QualifierUsage qualifierUsage);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList SetTypeArgumentList(JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList param);
        void SetTypeArguments(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> typeArguments);
    }
    public interface IReferenceExpressionReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.Resolve.ICompleteableReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedTwoPhaseReference, JetBrains.ReSharper.Psi.VB.IVBInvocationReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.VB.Tree.ReferenceExpressionKind GetKind();
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression GetTreeNode();
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveAsUnqualified(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable);
    }
    public interface IReferenceName : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeArgumentsOwnerElement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IAttribute ContainingAttribute { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression ContainingCreationExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Dot { get; }
        bool IsGlobalNamespacePrefix { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier NameIdentifier { get; }
        string QualifiedName { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName Qualifier { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceNameReference Reference { get; }
        string ShortName { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList TypeArgumentList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName ReplaceBy(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName name);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName SetQualifier(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList SetTypeArgumentList(JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList param);
    }
    public interface IReferenceNameReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.Resolve.ICompleteableReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveAsUnqualified(JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable);
    }
    public interface IRegionPreprocessorDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IEndRegionPreprocessorDirective EndRegion { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RegionName { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string RegionNameText { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RegionWord { get; }
    }
    public interface IRegularParameterDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IParameterDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParameterDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression DefaultInitializer { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        bool IsOptional { get; }
        bool IsParameterArray { get; }
        JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration ReplaceBy(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration declaration);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetDefaultInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        void SetKind(JetBrains.ReSharper.Psi.ParameterKind kind);
        void SetParamArray(bool isParamArray);
        new void SetType(JetBrains.ReSharper.Psi.IType type);
    }
    public interface IRegularParameterList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration> ParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration> ParameterDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
    }
    public interface IRelationalExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IRemoveHandlerStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Comma { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression EventExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression HandlerExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RemoveHandlerKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetEventExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetHandlerExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IResumeStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.ILabelReferencingStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode NextKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ResumeKeyword { get; }
    }
    public interface IReturnAttributeList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IAttributeList AttributeList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IAttributeList SetAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param);
    }
    public interface IReturnStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ReturnKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface ISelectQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IQueryReferenceOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList DeclarationList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode SelectKeyword { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IQueryReference SelectReference { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration> VariableDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration> VariableDeclarationsEnumerable { get; }
        bool HasReference();
        JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList SetDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList param);
    }
    public interface ISelectStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode CaseKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ICaseStatement> CaseStatements { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ICaseStatement> CaseStatementsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndSelect { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode SelectKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ICaseStatement AddCaseStatement(JetBrains.ReSharper.Psi.VB.Tree.ICaseStatement param, JetBrains.ReSharper.Psi.VB.Tree.ICaseStatement anchor, bool before);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public class static IsExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IIsExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IIsExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public interface IShiftExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface ISignOperatorDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode OpSign { get; }
    }
    public class static IsNotExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IIsNotExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IIsNotExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public interface IStopStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode StopKeyword { get; }
    }
    public interface IStructureDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationWithRangeContainer, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBNestedTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBProperTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        new JetBrains.ReSharper.Psi.ITypeElement DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndStructure { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause> ImplementsClauses { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause> ImplementsClausesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage> ImplementsTypes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage> ImplementsTypesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode> NestedTypeDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode> NestedTypeDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode StructureKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration> TypeParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration> TypeParameterDeclarationsEnumerable { get; }
        new JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList TypeParameterList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause AddImplementsClauseAfter(JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause param, JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause anchor);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause AddImplementsClauseBefore(JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause param, JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause anchor);
        void AddImplementsType(JetBrains.ReSharper.Psi.IDeclaredType implementsType);
        void RemoveImplementsType(JetBrains.ReSharper.Psi.IDeclaredType implementsType);
        new JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList SetTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList param);
    }
    public interface ISyncLockStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IBlock Block { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndSyncLock { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode SyncLockKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IThrowStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression NextExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ThrowKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetNextExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface ITryStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ICatchStatement> CatchStatements { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ICatchStatement> CatchStatementsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndTry { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IFinallyStatement FinallyStatement { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock TryBlock { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TryKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IFinallyStatement SetFinallyStatement(JetBrains.ReSharper.Psi.VB.Tree.IFinallyStatement param);
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetTryBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
    }
    public interface ITypeArgumentList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OfKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage> TypeArguments { get; }
        void SetTypeArguments(JetBrains.ReSharper.Psi.IType[] types);
        void SetTypeArguments(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage[] typeNodes);
    }
    public interface ITypeImplementsClause : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ImplementsKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage> ImplementsTypes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage> ImplementsTypesEnumerable { get; }
    }
    public interface ITypeMemberOwnerDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBProperTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration
    {
        new JetBrains.ReSharper.Psi.ITypeElement DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration> MemberDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
    }
    public interface ITypeOfIsExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IsKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TypeOfKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface ITypeParameterConstraint : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ClassKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NewKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode StructureKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface ITypeParameterConstraintList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint> Constraint { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint> ConstraintEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
    }
    public interface ITypeParameterDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.TypeParameterConstraintFlags ConstraintFlags { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList ConstraintList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint> Constraints { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint> ConstraintsEnumerable { get; }
        JetBrains.ReSharper.Psi.ITypeParameter DeclaredElement { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> DeclaredTypeConstraints { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode InKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OutKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList SetConstraintList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
    }
    public interface ITypeParameterOfMethodDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface ITypeParameterOfMethodList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OfKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration> TypeParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration> TypeParameterDeclarationsEnumerable { get; }
    }
    public interface ITypeParameterOfTypeDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.TypeParameterVariance Variance { get; }
    }
    public interface ITypeParameterOfTypeList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OfKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration> TypeParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration> TypeParameterDeclarationsEnumerable { get; }
    }
    public interface ITypeParameterOfTypeOwnerDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration
    {
        JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList TypeParameterList { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration> TypeParameters { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration AddTypeParameterAfter(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration param, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration anchor);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration AddTypeParameterBefore(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration param, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration anchor);
        void RemoveTypeParameter(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList SetTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList list);
    }
    public interface ITypeUsage : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList ArrayModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NullableMark { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName TypeName { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage ReplaceBy(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage typeUsage);
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList SetArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param);
        JetBrains.ReSharper.Psi.VB.Tree.IReferenceName SetTypeName(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param);
    }
    public interface IUnaryNegationExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBUnaryExpression { }
    public interface IUnknownPreprocessorDirective : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IUsingStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IBlock Block { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndUsing { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode UsingKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IUsingVariableDeclaration> VariableDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IUsingVariableDeclaration> VariableDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IUsingVariableDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBLocalVariableDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList ArrayModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression CreationExpression { get; }
        JetBrains.ReSharper.Psi.VB.IVBLocalVariable DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Initializer { get; }
        bool IsImplicitlyTyped { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NullableMark { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList SetArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param);
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression SetCreationExpression(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IVariableDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration
    {
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList ArrayModifiersList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression CreationExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclarationList DeclarationsList { get; }
        JetBrains.ReSharper.Psi.IField DeclaredElement { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Initializer { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IMultipleVariableDeclaration MultipleDeclaration { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NullableMark { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        bool WithEvents { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList SetArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param);
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression SetCreationExpression(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface IVariableDeclarationList : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression CreationExpression { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration> Declarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration> DeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Initializer { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression SetCreationExpression(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface IVBArgument : JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.Tree.IArgument, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBArgumentInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new bool IsValid();
        JetBrains.ReSharper.Psi.VB.Tree.IVBArgument ReplaceBy(JetBrains.ReSharper.Psi.VB.Tree.IVBArgument argument);
    }
    public interface IVBArgumentsOwner : JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Tree.IArgumentsOwner, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IArgumentList ArgumentList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBArgument> Arguments { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBArgument> ArgumentsEnumerable { get; }
        T AddArgumentAfter<T>(T argument, JetBrains.ReSharper.Psi.VB.Tree.IVBArgument anchor)
            where T : JetBrains.ReSharper.Psi.VB.Tree.IVBArgument;
        T AddArgumentBefore<T>(T argument, JetBrains.ReSharper.Psi.VB.Tree.IVBArgument anchor)
            where T : JetBrains.ReSharper.Psi.VB.Tree.IVBArgument;
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new bool IsValid();
        void RemoveArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBArgument argument);
        T ReplaceArgument<T>(JetBrains.ReSharper.Psi.VB.Tree.IVBArgument oldArgument, T newArgument)
            where T : JetBrains.ReSharper.Psi.VB.Tree.IVBArgument;
        JetBrains.ReSharper.Psi.VB.Tree.IArgumentList SetArgumentList(JetBrains.ReSharper.Psi.VB.Tree.IArgumentList param);
    }
    public interface IVBBinaryExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression LeftExpr { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OpSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression RightExpr { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IVBComment : JetBrains.ReSharper.Psi.Tree.IComment, JetBrains.ReSharper.Psi.Tree.ICommentNode, JetBrains.ReSharper.Psi.Tree.ITokenNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.CommentType CommentType { get; }
    }
    public interface IVBDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IVBDocCommentBlockNode : JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Xml.XmlDocComments.IDocCommentBlockNodeWithPsi<JetBrains.ReSharper.Psi.Xml.XmlDocComments.IDocCommentXmlPsi, JetBrains.ReSharper.Psi.VB.Tree.IDocComment> { }
    public interface IVBExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ExpressionAccessType GetAccessType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.VB.Tree.ExpressionClassification GetClassification();
        JetBrains.ReSharper.Psi.VB.Tree.ExpressionClassification GetClassification(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression ReplaceBy([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expr);
    }
    public interface IVBFile : JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.Tree.IDefaultNamespaceOwner, JetBrains.ReSharper.Psi.Tree.IFile, JetBrains.ReSharper.Psi.Tree.INamespaceDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeAndNamespaceHolderDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeAndNamespaceHolderDeclaration
    {
        System.Nullable<JetBrains.ReSharper.Psi.VB.Tree.VBFileOption> ExplicitOption { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IAttributeList GlobalAttributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IImportClause> Imports { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IImportClause> ImportsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IImportDirectivesSection ImportsSection { get; }
        System.Nullable<JetBrains.ReSharper.Psi.VB.Tree.VBFileOption> InferOption { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IOptionStatement> Options { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IOptionStatement> OptionsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IOptionStatementsSection OptionsSection { get; }
        System.Nullable<JetBrains.ReSharper.Psi.VB.Tree.VBFileOption> StrictOption { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IImportDirective AddImport(JetBrains.ReSharper.Psi.VB.Tree.IImportDirective param, bool saveUsingListPosition = False);
        JetBrains.ReSharper.Psi.VB.Tree.IImportDirective AddImportAfter(JetBrains.ReSharper.Psi.VB.Tree.IImportDirective param, JetBrains.ReSharper.Psi.VB.Tree.IImportDirective anchor);
        JetBrains.ReSharper.Psi.VB.Tree.IImportDirective AddImportBefore(JetBrains.ReSharper.Psi.VB.Tree.IImportDirective param, JetBrains.ReSharper.Psi.VB.Tree.IImportDirective anchor);
        JetBrains.ReSharper.Psi.PreProcessingDirectivesInFile GetPreprocessorConditionals();
        void RemoveImport(JetBrains.ReSharper.Psi.VB.Tree.IImportDirective param);
        void RemoveImportClause(JetBrains.ReSharper.Psi.VB.Tree.IImportClause clause);
        JetBrains.ReSharper.Psi.VB.Tree.IAttributeList SetGlobalAttributes(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param);
        JetBrains.ReSharper.Psi.VB.Tree.IImportDirectivesSection SetImportsSection(JetBrains.ReSharper.Psi.VB.Tree.IImportDirectivesSection param);
        JetBrains.ReSharper.Psi.VB.Tree.IOptionStatementsSection SetOptions([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOptionStatementsSection param);
        JetBrains.ReSharper.Psi.VB.Tree.IOptionStatementsSection SetOptionsSection(JetBrains.ReSharper.Psi.VB.Tree.IOptionStatementsSection param);
    }
    public interface IVBFunctionDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IBlock Block { get; }
        new JetBrains.ReSharper.Psi.IFunction DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndDeclaration { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
    }
    public interface IVBIdentifier : JetBrains.ReSharper.Psi.Tree.IIdentifier, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode NameToken { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TypeChar { get; }
    }
    public interface IVBLiteralExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ILiteralExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        new JetBrains.ReSharper.Psi.Tree.ITokenNode Literal { get; }
    }
    public interface IVBLocalVariableDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.ILocalVariable DeclaredVariable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface IVBModifiersOwnerDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        bool IsOverloads { get; }
        bool IsWriteonly { get; }
        void SetOverloads(bool value);
        void SetWriteonly(bool value);
    }
    public interface IVBNamespaceDeclaration : JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.INamespaceDeclaration, JetBrains.ReSharper.Psi.Tree.INamespaceDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeAndNamespaceHolderDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeAndNamespaceHolderDeclaration
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration ContainingNamespace { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndNamespace { get; }
        bool IsGlobal { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NamespaceKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName QualifiedNamespaceName { get; }
        string ShortName { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName SetQualifiedNamespaceName(JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName param);
    }
    public interface IVBNestedTypeDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBProperTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration { }
    public interface IVBOperatorNode : JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorReference Reference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Sign { get; }
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new bool IsValid();
    }
    public interface IVBOperatorReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.ReSharper.Psi.VB.IVBInvocationReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode GetTreeNode();
    }
    public interface IVBParameterDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IParameterDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList ArrayModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Modifier { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> ModifierEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NullableMark { get; }
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList SetArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param);
    }
    public interface IVBParametersOwnerDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IAttributeList AttributeList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IAttribute> Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IAttribute> AttributesEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration> ParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration> ParameterDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList ParameterList { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration AddParameterDeclarationAfter(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration parameter, JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration anchor);
        JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration AddParameterDeclarationBefore(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration parameter, JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration anchor);
        void RemoveParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration parameter);
        JetBrains.ReSharper.Psi.VB.Tree.IAttributeList SetAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param);
        JetBrains.ReSharper.Psi.VB.Tree.IModifiersList SetModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param);
        JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList SetParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param);
    }
    public interface IVBProperTypeDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration
    {
        JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration GetContainingClassLikeDeclaration();
    }
    public interface IVBStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        TStatement ReplaceBy<TStatement>([JetBrains.Annotations.NotNullAttribute()] TStatement stmt)
            where TStatement :  class, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement;
    }
    public interface IVBStatementsRange : JetBrains.ReSharper.Psi.Tree.IStatementsRange { }
    public interface IVBTreeNode : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        void Accept(JetBrains.ReSharper.Psi.VB.Tree.TreeNodeVisitor visitor);
        void Accept<TContext>(JetBrains.ReSharper.Psi.VB.Tree.TreeNodeVisitor<TContext> visitor, TContext context);
        TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.VB.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context);
        [JetBrains.Annotations.PureAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration GetContainingNamespaceDeclaration();
        [JetBrains.Annotations.PureAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration GetContainingTypeDeclaration();
        [JetBrains.Annotations.PureAttribute()]
        JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration GetContainingTypeMemberDeclaration();
    }
    public interface IVBTypeAndNamespaceHolderDeclaration : JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.Tree.INamespaceDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeAndNamespaceHolderDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration> NamespaceDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration> NamespaceDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration> TypeAndNamespaceDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration> TypeDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration> TypeDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration AddNamespaceDeclarationAfter(JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration param, JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration anchor);
        JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration AddNamespaceDeclarationBefore(JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration param, JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration anchor);
        T AddTypeDeclarationAfter<T>(T param, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration anchor)
            where T : JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration;
        T AddTypeDeclarationBefore<T>(T param, JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration anchor)
            where T : JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration;
        void RemoveNamespaceDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration param);
        void RemoveTypeDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration param);
    }
    public interface IVBTypeDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        new JetBrains.ReSharper.Psi.ITypeElement DeclaredElement { get; }
        bool IsPartial { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier Name { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration OwnerNamespaceDeclaration { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        void SetPartial(bool value);
    }
    public interface IVBTypeMemberDeclaration : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode, JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        new JetBrains.ReSharper.Psi.ITypeMember DeclaredElement { get; }
        new JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration GetContainingTypeDeclaration();
    }
    public interface IVBUnaryExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.IVBInvocationInfo, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBOperatorNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OpSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IVBXmlAttribute : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AttributeName { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode AttributeValue { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression EmbeddedAttribute { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Whitespace { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> WhitespaceEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression SetEmbeddedAttribute(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression param);
    }
    public interface IVBXmlCDataSection : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IVBXmlComment : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IVBXmlDocument : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement XmlDocumentElement { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression XmlDocumentExpression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement SetXmlDocumentElement(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression SetXmlDocumentExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression param);
    }
    public interface IVBXmlElement : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementFooter ElementFooter { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementHeader ElementHeader { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression> EmbeddedExpressios { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression> EmbeddedExpressiosEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement> NestedElements { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement> NestedElementsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Text { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> TextEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement AddElementAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement element, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement anchor);
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement AddElementBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement element, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement anchor);
        void RemoveElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement element);
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementFooter SetElementFooter(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementFooter param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementHeader SetElementHeader(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementHeader param);
    }
    public interface IVBXmlElementFooter : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Name { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TagEnd { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TagStart { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Whitespace { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> WhitespaceEnumerable { get; }
    }
    public interface IVBXmlElementHeader : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBXmlAttribute> Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IVBXmlAttribute> AttributesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ElementName { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression EmbeddedExpression { get; }
        bool IsClosed { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TagEnd { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TagStart { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Whitespace { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> WhitespaceEnumerable { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression SetEmbeddedExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression param);
    }
    public interface IVBXmlEmbeddedExpression : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode EmbeddedExpressionEnd { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EmbeddedExpressionStart { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IVBXmlLiteralExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlCDataSection XmlCData { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlDocument XmlDocument { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlCDataSection SetXmlCData(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlCDataSection param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBXmlDocument SetXmlDocument(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlDocument param);
    }
    public interface IVBXmlMemberAccessExpression : JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IMemberAccessExpression, JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBExpression, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AtSign { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier AttributeName { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression BaseExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Dot { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Name { get; }
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference Reference { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier SetAttributeName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param);
        JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression SetBaseExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param);
    }
    public interface IVBXmlMisc : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode { }
    public interface IVBXmlProcessingInstruction : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        bool IsXmlProlog { get; }
    }
    public interface IWhereQueryOperator : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator, JetBrains.ReSharper.Psi.VB.Tree.IQueryReferenceOwner, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode WhereKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param);
    }
    public interface IWhileStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.ILoopStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndWhile { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode WhileKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IWhileUntilCondition : JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Keyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IWithStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IBlock Block { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndWith { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> StatementTerminatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode WithKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param);
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public interface IYieldStatement : JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode
    {
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode YieldKeyword { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBExpression SetExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param);
    }
    public class static JoinCollectionRangeVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IJoinCollectionRangeVariableDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IJoinCollectionRangeVariableDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IJoinCollectionRangeVariableDeclaration GetByValue(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static JoinConditionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IJoinCondition GetByLeftExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IJoinCondition GetByRightExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param) { }
    }
    public class static JoinQueryConditionsListFakeNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryConditionsListFake GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static JoinQueryOperatorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator GetByCondition(JetBrains.ReSharper.Psi.VB.Tree.IJoinCondition param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator GetByConditionsList(JetBrains.ReSharper.Psi.VB.Tree.IQueryConditionsList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator GetByDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IJoinCollectionRangeVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator GetByNestedJoinQueryOperator(JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator param) { }
    }
    public class static LabelDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILabelDeclaration GetByLabelName(JetBrains.ReSharper.Psi.VB.Tree.ILabelName param) { }
    }
    public class static LabelNameNavigator { }
    public class static LabelReferencingStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILabelReferencingStatement GetByLabelName(JetBrains.ReSharper.Psi.VB.Tree.ILabelName param) { }
    }
    public class static LabelStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILabelStatement GetByDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILabelDeclaration param) { }
    }
    public class static LambdaExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaExpression GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaExpression GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaExpression GetBySignature(JetBrains.ReSharper.Psi.VB.Tree.ILambdaSignature param) { }
    }
    public class static LambdaFunctionExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaFunctionExpression GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaFunctionExpression GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaFunctionExpression GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaFunctionExpression GetByReturnTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaFunctionExpression GetBySignature(JetBrains.ReSharper.Psi.VB.Tree.ILambdaSignature param) { }
    }
    public class static LambdaParameterDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration GetByArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static LambdaSignatureNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaSignature GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration param) { }
    }
    public class static LambdaSubExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaSubExpression GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaSubExpression GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaSubExpression GetBySignature(JetBrains.ReSharper.Psi.VB.Tree.ILambdaSignature param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILambdaSubExpression GetByStatement(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement param) { }
    }
    public class static LetQueryOperatorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILetQueryOperator GetByDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILetQueryOperator GetByVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration param) { }
    }
    public class static LibraryClauseNavigator { }
    public class static LikeExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILikeExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILikeExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static LineIfStatementBodyNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody GetByStatement(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement param) { }
    }
    public class static LineIfStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatement GetByElseBranch(JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatement GetByElseIfBranch(JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatement GetByElseIfExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatement GetByIfBranch(JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody param) { }
    }
    public enum LocalDeclarationKind
    {
        UNKNOWN = 0,
        STATIC = 1,
        CONST = 2,
        DIM = 3,
    }
    public class static LocalDeclarationListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationList GetByCreationExpression(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationList GetByDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationList GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationList GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static LocalDeclarationStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationStatement GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationStatement GetByDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationList param) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationStatement GetByVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration declaration) { }
    }
    public class static LocalVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration GetByArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration> GetByCreationExpression(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration> GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration> GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static LogicalAndExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILogicalAndExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILogicalAndExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static LogicalNotExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILogicalNotExpression GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static LogicalOrExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILogicalOrExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILogicalOrExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static LogicalXorExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILogicalXorExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILogicalXorExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static LoopControlVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration GetByArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static LoopStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
    }
    public class static MemberAccessExpressionNavigator { }
    public class static MemberInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMemberInitializer GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMemberInitializer GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static MethodDeclarationBaseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase GetByParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase GetByReturnAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase GetByReturnTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase GetByTypeParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase GetByTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodList param) { }
    }
    public enum MethodDeclarationKind
    {
        SUB = 0,
        FUNCTION = 1,
    }
    public class static MethodDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByHandlesClause(JetBrains.ReSharper.Psi.VB.Tree.IHandlesClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByImplementsClause(JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByReturnAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByReturnTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByTypeParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodList param) { }
    }
    public class static MidAssignmentStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMidAssignmentStatement GetByArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBArgument param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMidAssignmentStatement GetByArgumentExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMidAssignmentStatement GetByArgumentList(JetBrains.ReSharper.Psi.VB.Tree.IArgumentList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMidAssignmentStatement GetByRValue(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static ModifiersListNavigator { }
    public class static ModifiersListOwnerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
    }
    public class static ModuleDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetByBody(JetBrains.ReSharper.Psi.VB.Tree.IClassBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetByConstantDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetByConstructorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetByConversionOperatorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetByEventDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetByMethodDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetByPropertyDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetBySignOperatorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration GetByVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration param) { }
    }
    public class static ModulusExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModulusExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IModulusExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static MultipleConstantDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMultipleConstantDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMultipleConstantDeclaration GetByDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMultipleConstantDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
    }
    public class static MultipleVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMultipleVariableDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMultipleVariableDeclaration GetByDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclarationList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMultipleVariableDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
    }
    public class static MultiplicativeExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMultiplicativeExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IMultiplicativeExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static NamedArgumentNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.INamedArgument GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.INamedArgument GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static NamespaceMemberDeclarationNavigator { }
    public class static NamespacePrefixExpressionNavigator { }
    public class static NewExpressionNavigator { }
    public class static NextClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.INextClause GetByNextExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static ObjectCollectionInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IObjectCollectionInitializer GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.ICollectionElementInitializer param) { }
    }
    public class static ObjectCreationExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression GetByArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBArgument param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression GetByArgumentList(JetBrains.ReSharper.Psi.VB.Tree.IArgumentList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression GetByCollectionInitializer(JetBrains.ReSharper.Psi.VB.Tree.IObjectCollectionInitializer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression GetByObjectInitializer(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationInitializer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression GetByReference(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param) { }
    }
    public class static ObjectCreationInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationInitializer GetByMemberInitializer(JetBrains.ReSharper.Psi.VB.Tree.IMemberInitializer param) { }
    }
    public class static OnErrorSpecialLabelNavigator { }
    public class static OnErrorStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOnErrorStatement GetByLabelName(JetBrains.ReSharper.Psi.VB.Tree.ILabelName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOnErrorStatement GetBySpecialLabel(JetBrains.ReSharper.Psi.VB.Tree.IOnErrorSpecialLabel param) { }
    }
    public class static OperatorDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration GetByParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration GetByReturnAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration GetByReturnType(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static OptionStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOptionStatement GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOptionStatement GetByValue(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static OptionStatementsSectionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOptionStatementsSection GetByOptionStatement(JetBrains.ReSharper.Psi.VB.Tree.IOptionStatement param) { }
    }
    public class static OrderByQueryOperatorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOrderByQueryOperator GetByOrderExpression(JetBrains.ReSharper.Psi.VB.Tree.IOrderExpression param) { }
    }
    public class static OrderExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IOrderExpression GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param) { }
    }
    public class static ParenthesizedExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IParenthesizedExpression GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static PartitionQueryOperatorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPartitionQueryOperator GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param) { }
    }
    public class static PositionalArgumentNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPositionalArgument GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static PreprocessorDirectiveNavigator { }
    public class static PrimaryExpressionNavigator { }
    public class static PropertyDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByAccessorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByCreationExpression(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByImplementsClause(JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByPropertyInitializer(JetBrains.ReSharper.Psi.VB.Tree.IPropertyInitializer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByReturnAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static PropertyInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IPropertyInitializer GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static QualifiedNamespaceNameExtension
    {
        public static bool IsGlobal(this JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName qualifiedNamespaceName) { }
    }
    public class static QualifiedNamespaceNameNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName GetByQualifier(JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName param) { }
    }
    public class QualifierUsage
    {
        public static JetBrains.ReSharper.Psi.VB.Tree.QualifierUsage QualifiedByDotOnly { get; }
        public JetBrains.ReSharper.Psi.VB.Tree.IVBExpression QualifierExpression { get; }
        public static JetBrains.ReSharper.Psi.VB.Tree.QualifierUsage Unqualified { get; }
        public bool UseDot { get; }
        public static JetBrains.ReSharper.Psi.VB.Tree.QualifierUsage QualifiedByExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
    }
    public class static QueryAggregatedParameterPlatformNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryAggregatedParameterPlatform GetByIdent(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryAggregatedParameterPlatform GetByPlatform(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param) { }
    }
    public class static QueryConditionsListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryConditionsList GetByjoinCondition(JetBrains.ReSharper.Psi.VB.Tree.IJoinCondition param) { }
    }
    public class static QueryExpressionNavigator
    {
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression GetByAggregatedRangeVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration declaration) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression GetByCollectionRangeVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration declaration) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression GetByExpressionRangeVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration declaration) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression GetByFirstQueryOperator(JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator param) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression GetByJoinCollectionRangeVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IJoinCollectionRangeVariableDeclaration declaration) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression GetByPlatform(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform platform) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression GetByQueryOperator(JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator param) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression GetExpressionThroughOparators(JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator operatorNode) { }
    }
    public class static QueryOperatorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator GetByPlatform(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform platform) { }
    }
    public class static QueryParameterNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryParameter GetByValue(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static QueryParameterPlatformNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform GetByValue(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static RaiseEventStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRaiseEventStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param) { }
    }
    public class static RedimClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRedimClause GetByArrayBound(JetBrains.ReSharper.Psi.VB.Tree.IArrayBound param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRedimClause GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRedimClause GetBySizeModifier(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifier param) { }
    }
    public class static RedimStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRedimStatement GetByRedimClause(JetBrains.ReSharper.Psi.VB.Tree.IRedimClause param) { }
    }
    public class static ReferenceExpressionExtensions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBExpression FindQualifierExpression(this JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression referenceExpression) { }
    }
    public enum ReferenceExpressionKind
    {
        ConstructorReference = 0,
        SimpleReference = 1,
        IndexReference = 2,
        AddressOfReference = 3,
        EventReference = 4,
        PredefinedTypeReference = 5,
    }
    public class static ReferenceExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression GetByBaseExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression GetByNameIdentifier(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression GetByQualifierExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expr) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression GetByTypeArgumentList(JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList param) { }
    }
    public class static ReferenceNameNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IReferenceName GetByNameIdentifier(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IReferenceName GetByQualifier(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IReferenceName GetByTypeArgumentList(JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList param) { }
    }
    public class static RegionPreprocessorDirectiveNavigator { }
    public class static RegularParameterDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration GetByArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration GetByDefaultInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static RegularParameterListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
    }
    public class static RelationalExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRelationalExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRelationalExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static RemoveHandlerStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRemoveHandlerStatement GetByEventExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IRemoveHandlerStatement GetByHandlerExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static ResumeStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IResumeStatement GetByLabelName(JetBrains.ReSharper.Psi.VB.Tree.ILabelName param) { }
    }
    public class static ReturnAttributeListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
    }
    public class static ReturnStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IReturnStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static SelectQueryOperatorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISelectQueryOperator GetByDeclarationList(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISelectQueryOperator GetByVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration param) { }
    }
    public class static SelectStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISelectStatement GetByCaseStatement(JetBrains.ReSharper.Psi.VB.Tree.ICaseStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISelectStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static ShiftExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IShiftExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IShiftExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static SignOperatorDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration GetByParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration GetByReturnAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration GetByReturnType(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static StopStatementNavigator { }
    public class static StructureDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByBody(JetBrains.ReSharper.Psi.VB.Tree.IClassBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByConstantDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByConstructorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByConversionOperatorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByEventDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByImplementsClause(JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByImplementsType(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByMethodDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByPropertyDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetBySignOperatorDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByTypeParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration GetByVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration param) { }
    }
    public class static SyncLockStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISyncLockStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ISyncLockStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static ThrowStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IThrowStatement GetByNextExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public abstract class TreeNodeVisitor
    {
        public virtual void VisitAccessorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration accessorDeclarationParam) { }
        public virtual void VisitAccessorOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAccessorOwnerDeclaration accessorOwnerDeclarationParam) { }
        public virtual void VisitAddHandlerStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAddHandlerStatement addHandlerStatementParam) { }
        public virtual void VisitAdditiveExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAdditiveExpression additiveExpressionParam) { }
        public virtual void VisitAddressOfExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAddressOfExpression addressOfExpressionParam) { }
        public virtual void VisitAggregatedRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration aggregatedRangeVariableDeclarationParam) { }
        public virtual void VisitAggregatedRangeVariableDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList aggregatedRangeVariableDeclarationListParam) { }
        public virtual void VisitAggregateQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAggregateQueryOperator aggregateQueryOperatorParam) { }
        public virtual void VisitAliasClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAliasClause aliasClauseParam) { }
        public virtual void VisitAnonymousArrayCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression anonymousArrayCreationExpressionParam) { }
        public virtual void VisitAnonymousMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAnonymousMemberDeclaration anonymousMemberDeclarationParam) { }
        public virtual void VisitAnonymousObjectCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectCreationExpression anonymousObjectCreationExpressionParam) { }
        public virtual void VisitAnonymousObjectInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectInitializer anonymousObjectInitializerParam) { }
        public virtual void VisitArgumentList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArgumentList argumentListParam) { }
        public virtual void VisitArrayBound([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayBound arrayBoundParam) { }
        public virtual void VisitArrayCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayCreationExpression arrayCreationExpressionParam) { }
        public virtual void VisitArrayModifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayModifier arrayModifierParam) { }
        public virtual void VisitArrayModifiersList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList arrayModifiersListParam) { }
        public virtual void VisitAssignmentStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAssignmentStatement assignmentStatementParam) { }
        public virtual void VisitAttribute([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAttribute attributeParam) { }
        public virtual void VisitAttributeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAttributeList attributeListParam) { }
        public virtual void VisitAttributeListOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner attributeListOwnerParam) { }
        public virtual void VisitAttributesOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration attributesOwnerDeclarationParam) { }
        public virtual void VisitAwaitExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAwaitExpression awaitExpressionParam) { }
        public virtual void VisitAwaitStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAwaitStatement awaitStatementParam) { }
        public virtual void VisitBlock([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IBlock blockParam) { }
        public virtual void VisitBlockIfStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IBlockIfStatement blockIfStatementParam) { }
        public virtual void VisitCaseClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICaseClause caseClauseParam) { }
        public virtual void VisitCaseStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICaseStatement caseStatementParam) { }
        public virtual void VisitCastExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICastExpression castExpressionParam) { }
        public virtual void VisitCatchStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICatchStatement catchStatementParam) { }
        public virtual void VisitCatchVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICatchVariableDeclaration catchVariableDeclarationParam) { }
        public virtual void VisitCharsetModifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICharsetModifier charsetModifierParam) { }
        public virtual void VisitClassBaseClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IClassBaseClause classBaseClauseParam) { }
        public virtual void VisitClassBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IClassBody classBodyParam) { }
        public virtual void VisitClassDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration classDeclarationParam) { }
        public virtual void VisitClassLikeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration classLikeDeclarationParam) { }
        public virtual void VisitCollectionElementInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICollectionElementInitializer collectionElementInitializerParam) { }
        public virtual void VisitCollectionRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration collectionRangeVariableDeclarationParam) { }
        public virtual void VisitCollectionRangeVariableDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclarationList collectionRangeVariableDeclarationListParam) { }
        public virtual void VisitConcatenationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConcatenationExpression concatenationExpressionParam) { }
        public virtual void VisitConditionalExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConditionalExpression conditionalExpressionParam) { }
        public virtual void VisitConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration constantDeclarationParam) { }
        public virtual void VisitConstPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConstPreprocessorDirective constPreprocessorDirectiveParam) { }
        public virtual void VisitConstructorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration constructorDeclarationParam) { }
        public virtual void VisitContinueStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IContinueStatement continueStatementParam) { }
        public virtual void VisitConversionOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration conversionOperatorDeclarationParam) { }
        public virtual void VisitDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage declaredTypeUsageParam) { }
        public virtual void VisitDelegateDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration delegateDeclarationParam) { }
        public virtual void VisitDictionaryAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDictionaryAccessExpression dictionaryAccessExpressionParam) { }
        public virtual void VisitDistinctQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDistinctQueryOperator distinctQueryOperatorParam) { }
        public virtual void VisitDocCommentBlockNode(JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode xmlDoc) { }
        public virtual void VisitDoLoopStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDoLoopStatement doLoopStatementParam) { }
        public virtual void VisitElseIfPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IElseIfPreprocessorDirective elseIfPreprocessorDirectiveParam) { }
        public virtual void VisitElseIfStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IElseIfStatement elseIfStatementParam) { }
        public virtual void VisitElsePreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IElsePreprocessorDirective elsePreprocessorDirectiveParam) { }
        public virtual void VisitElseStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IElseStatement elseStatementParam) { }
        public virtual void VisitEmptyArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEmptyArgument emptyArgumentParam) { }
        public virtual void VisitEndExternalSourcePreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEndExternalSourcePreprocessorDirective endExternalSourcePreprocessorDirectiveParam) { }
        public virtual void VisitEndIfPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEndIfPreprocessorDirective endIfPreprocessorDirectiveParam) { }
        public virtual void VisitEndRegionPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEndRegionPreprocessorDirective endRegionPreprocessorDirectiveParam) { }
        public virtual void VisitEndStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEndStatement endStatementParam) { }
        public virtual void VisitEnumDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEnumDeclaration enumDeclarationParam) { }
        public virtual void VisitEnumMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration enumMemberDeclarationParam) { }
        public virtual void VisitEraseStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEraseStatement eraseStatementParam) { }
        public virtual void VisitErrorStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IErrorStatement errorStatementParam) { }
        public virtual void VisitEventDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration eventDeclarationParam) { }
        public virtual void VisitEventSpecifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEventSpecifier eventSpecifierParam) { }
        public virtual void VisitExitStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExitStatement exitStatementParam) { }
        public virtual void VisitExponentiationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExponentiationExpression exponentiationExpressionParam) { }
        public virtual void VisitExpressionArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExpressionArgument expressionArgumentParam) { }
        public virtual void VisitExpressionRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration expressionRangeVariableDeclarationParam) { }
        public virtual void VisitExpressionRangeVariableDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList expressionRangeVariableDeclarationListParam) { }
        public virtual void VisitExpressionStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExpressionStatement expressionStatementParam) { }
        public virtual void VisitExternalChecksumPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExternalChecksumPreprocessorDirective externalChecksumPreprocessorDirectiveParam) { }
        public virtual void VisitExternalMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration externalMethodDeclarationParam) { }
        public virtual void VisitExternalSourcePreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExternalSourcePreprocessorDirective externalSourcePreprocessorDirectiveParam) { }
        public virtual void VisitFinallyStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IFinallyStatement finallyStatementParam) { }
        public virtual void VisitForEachStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IForEachStatement forEachStatementParam) { }
        public virtual void VisitForStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IForStatement forStatementParam) { }
        public virtual void VisitFromQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IFromQueryOperator fromQueryOperatorParam) { }
        public virtual void VisitGetTypeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGetTypeExpression getTypeExpressionParam) { }
        public virtual void VisitGetXmlNamespaceExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGetXmlNamespaceExpression getXmlNamespaceExpressionParam) { }
        public virtual void VisitGotoStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGotoStatement gotoStatementParam) { }
        public virtual void VisitGroupByQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGroupByQueryOperator groupByQueryOperatorParam) { }
        public virtual void VisitGroupJoinQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGroupJoinQueryOperator groupJoinQueryOperatorParam) { }
        public virtual void VisitHandlesClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IHandlesClause handlesClauseParam) { }
        public virtual void VisitIfPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIfPreprocessorDirective ifPreprocessorDirectiveParam) { }
        public virtual void VisitImplementsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause implementsClauseParam) { }
        public virtual void VisitImportAliasClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportAliasClause importAliasClauseParam) { }
        public virtual void VisitImportClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportClause importClauseParam) { }
        public virtual void VisitImportDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportDirective importDirectiveParam) { }
        public virtual void VisitImportDirectivesSection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportDirectivesSection importDirectivesSectionParam) { }
        public virtual void VisitImportNamespaceClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportNamespaceClause importNamespaceClauseParam) { }
        public virtual void VisitImportXMLNamespaceClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportXMLNamespaceClause importXMLNamespaceClauseParam) { }
        public virtual void VisitInactivePreprocessorBranchNode(JetBrains.ReSharper.Psi.VB.Tree.IInactivePreprocessorBranch inactivePreprocessorBranch) { }
        public virtual void VisitIndexExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression indexExpressionParam) { }
        public virtual void VisitInstanceExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInstanceExpression instanceExpressionParam) { }
        public virtual void VisitIntegerDivisionExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIntegerDivisionExpression integerDivisionExpressionParam) { }
        public virtual void VisitInterfaceDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration interfaceDeclarationParam) { }
        public virtual void VisitInterfaceInheritsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause interfaceInheritsClauseParam) { }
        public virtual void VisitInterfaceMemberSpecifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInterfaceMemberSpecifier interfaceMemberSpecifierParam) { }
        public virtual void VisitIntoOfAggregateQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIntoOfAggregateQueryOperator intoOfAggregateQueryOperatorParam) { }
        public virtual void VisitInvocationStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInvocationStatement invocationStatementParam) { }
        public virtual void VisitIsExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIsExpression isExpressionParam) { }
        public virtual void VisitIsNotExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIsNotExpression isNotExpressionParam) { }
        public virtual void VisitJoinCollectionRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IJoinCollectionRangeVariableDeclaration joinCollectionRangeVariableDeclarationParam) { }
        public virtual void VisitJoinCondition([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IJoinCondition joinConditionParam) { }
        public virtual void VisitJoinQueryConditionsListFake([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryConditionsListFake joinQueryConditionsListFakeParam) { }
        public virtual void VisitJoinQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator joinQueryOperatorParam) { }
        public virtual void VisitLabelDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILabelDeclaration labelDeclarationParam) { }
        public virtual void VisitLabelName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILabelName labelNameParam) { }
        public virtual void VisitLabelReferencingStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILabelReferencingStatement labelReferencingStatementParam) { }
        public virtual void VisitLabelStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILabelStatement labelStatementParam) { }
        public virtual void VisitLambdaExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaExpression lambdaExpressionParam) { }
        public virtual void VisitLambdaFunctionExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaFunctionExpression lambdaFunctionExpressionParam) { }
        public virtual void VisitLambdaParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration lambdaParameterDeclarationParam) { }
        public virtual void VisitLambdaSignature([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaSignature lambdaSignatureParam) { }
        public virtual void VisitLambdaSubExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaSubExpression lambdaSubExpressionParam) { }
        public virtual void VisitLetQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILetQueryOperator letQueryOperatorParam) { }
        public virtual void VisitLibraryClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILibraryClause libraryClauseParam) { }
        public virtual void VisitLikeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILikeExpression likeExpressionParam) { }
        public virtual void VisitLineIfStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatement lineIfStatementParam) { }
        public virtual void VisitLineIfStatementBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody lineIfStatementBodyParam) { }
        public virtual void VisitLocalDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationList localDeclarationListParam) { }
        public virtual void VisitLocalDeclarationStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationStatement localDeclarationStatementParam) { }
        public virtual void VisitLocalVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration localVariableDeclarationParam) { }
        public virtual void VisitLogicalAndExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILogicalAndExpression logicalAndExpressionParam) { }
        public virtual void VisitLogicalNotExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILogicalNotExpression logicalNotExpressionParam) { }
        public virtual void VisitLogicalOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILogicalOrExpression logicalOrExpressionParam) { }
        public virtual void VisitLogicalXorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILogicalXorExpression logicalXorExpressionParam) { }
        public virtual void VisitLoopControlVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration loopControlVariableDeclarationParam) { }
        public virtual void VisitLoopStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILoopStatement loopStatementParam) { }
        public virtual void VisitMemberAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMemberAccessExpression memberAccessExpressionParam) { }
        public virtual void VisitMemberInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMemberInitializer memberInitializerParam) { }
        public virtual void VisitMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration methodDeclarationParam) { }
        public virtual void VisitMethodDeclarationBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase methodDeclarationBaseParam) { }
        public virtual void VisitMidAssignmentStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMidAssignmentStatement midAssignmentStatementParam) { }
        public virtual void VisitModifiersList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IModifiersList modifiersListParam) { }
        public virtual void VisitModifiersListOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner modifiersListOwnerParam) { }
        public virtual void VisitModuleDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration moduleDeclarationParam) { }
        public virtual void VisitModulusExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IModulusExpression modulusExpressionParam) { }
        public virtual void VisitMultipleConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMultipleConstantDeclaration multipleConstantDeclarationParam) { }
        public virtual void VisitMultipleVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMultipleVariableDeclaration multipleVariableDeclarationParam) { }
        public virtual void VisitMultiplicativeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMultiplicativeExpression multiplicativeExpressionParam) { }
        public virtual void VisitNamedArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INamedArgument namedArgumentParam) { }
        public virtual void VisitNamespaceMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration namespaceMemberDeclarationParam) { }
        public virtual void VisitNamespacePrefixExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INamespacePrefixExpression namespacePrefixExpressionParam) { }
        public virtual void VisitNewExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INewExpression newExpressionParam) { }
        public virtual void VisitNextClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INextClause nextClauseParam) { }
        public virtual void VisitNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public virtual void VisitObjectCollectionInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IObjectCollectionInitializer objectCollectionInitializerParam) { }
        public virtual void VisitObjectCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression objectCreationExpressionParam) { }
        public virtual void VisitObjectCreationInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationInitializer objectCreationInitializerParam) { }
        public virtual void VisitOnErrorSpecialLabel([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOnErrorSpecialLabel onErrorSpecialLabelParam) { }
        public virtual void VisitOnErrorStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOnErrorStatement onErrorStatementParam) { }
        public virtual void VisitOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration operatorDeclarationParam) { }
        public virtual void VisitOptionStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOptionStatement optionStatementParam) { }
        public virtual void VisitOptionStatementsSection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOptionStatementsSection optionStatementsSectionParam) { }
        public virtual void VisitOrderByQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOrderByQueryOperator orderByQueryOperatorParam) { }
        public virtual void VisitOrderExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOrderExpression orderExpressionParam) { }
        public virtual void VisitParenthesizedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IParenthesizedExpression parenthesizedExpressionParam) { }
        public virtual void VisitPartitionQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPartitionQueryOperator partitionQueryOperatorParam) { }
        public virtual void VisitPositionalArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPositionalArgument positionalArgumentParam) { }
        public virtual void VisitPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective preprocessorDirectiveParam) { }
        public virtual void VisitPrimaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression primaryExpressionParam) { }
        public virtual void VisitPropertyDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration propertyDeclarationParam) { }
        public virtual void VisitPropertyInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPropertyInitializer propertyInitializerParam) { }
        public virtual void VisitQualifiedNamespaceName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName qualifiedNamespaceNameParam) { }
        public virtual void VisitQueryAggregatedParameterPlatform([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryAggregatedParameterPlatform queryAggregatedParameterPlatformParam) { }
        public virtual void VisitQueryConditionsList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryConditionsList queryConditionsListParam) { }
        public virtual void VisitQueryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression queryExpressionParam) { }
        public virtual void VisitQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator queryOperatorParam) { }
        public virtual void VisitQueryParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryParameter queryParameterParam) { }
        public virtual void VisitQueryParameterPlatform([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform queryParameterPlatformParam) { }
        public virtual void VisitRaiseEventStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRaiseEventStatement raiseEventStatementParam) { }
        public virtual void VisitRedimClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRedimClause redimClauseParam) { }
        public virtual void VisitRedimStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRedimStatement redimStatementParam) { }
        public virtual void VisitReferenceExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression referenceExpressionParam) { }
        public virtual void VisitReferenceName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReferenceName referenceNameParam) { }
        public virtual void VisitRegionPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRegionPreprocessorDirective regionPreprocessorDirectiveParam) { }
        public virtual void VisitRegularParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration regularParameterDeclarationParam) { }
        public virtual void VisitRegularParameterList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList regularParameterListParam) { }
        public virtual void VisitRelationalExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRelationalExpression relationalExpressionParam) { }
        public virtual void VisitRemoveHandlerStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRemoveHandlerStatement removeHandlerStatementParam) { }
        public virtual void VisitResumeStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IResumeStatement resumeStatementParam) { }
        public virtual void VisitReturnAttributeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList returnAttributeListParam) { }
        public virtual void VisitReturnStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReturnStatement returnStatementParam) { }
        public virtual void VisitSelectQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ISelectQueryOperator selectQueryOperatorParam) { }
        public virtual void VisitSelectStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ISelectStatement selectStatementParam) { }
        public virtual void VisitShiftExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IShiftExpression shiftExpressionParam) { }
        public virtual void VisitSignOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration signOperatorDeclarationParam) { }
        public virtual void VisitStopStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IStopStatement stopStatementParam) { }
        public virtual void VisitStructureDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration structureDeclarationParam) { }
        public virtual void VisitSyncLockStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ISyncLockStatement syncLockStatementParam) { }
        public virtual void VisitThrowStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IThrowStatement throwStatementParam) { }
        public virtual void VisitTryStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITryStatement tryStatementParam) { }
        public virtual void VisitTypeArgumentList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList typeArgumentListParam) { }
        public virtual void VisitTypeImplementsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause typeImplementsClauseParam) { }
        public virtual void VisitTypeMemberOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration typeMemberOwnerDeclarationParam) { }
        public virtual void VisitTypeOfIsExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeOfIsExpression typeOfIsExpressionParam) { }
        public virtual void VisitTypeParameterConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint typeParameterConstraintParam) { }
        public virtual void VisitTypeParameterConstraintList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList typeParameterConstraintListParam) { }
        public virtual void VisitTypeParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterDeclaration typeParameterDeclarationParam) { }
        public virtual void VisitTypeParameterOfMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration typeParameterOfMethodDeclarationParam) { }
        public virtual void VisitTypeParameterOfMethodList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodList typeParameterOfMethodListParam) { }
        public virtual void VisitTypeParameterOfTypeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration typeParameterOfTypeDeclarationParam) { }
        public virtual void VisitTypeParameterOfTypeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList typeParameterOfTypeListParam) { }
        public virtual void VisitTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage typeUsageParam) { }
        public virtual void VisitUnaryNegationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IUnaryNegationExpression unaryNegationExpressionParam) { }
        public virtual void VisitUnknownPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IUnknownPreprocessorDirective unknownPreprocessorDirectiveParam) { }
        public virtual void VisitUsingStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IUsingStatement usingStatementParam) { }
        public virtual void VisitUsingVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IUsingVariableDeclaration usingVariableDeclarationParam) { }
        public virtual void VisitVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration variableDeclarationParam) { }
        public virtual void VisitVariableDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclarationList variableDeclarationListParam) { }
        public virtual void VisitVBArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBArgument vBArgumentParam) { }
        public virtual void VisitVBArgumentsOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner vBArgumentsOwnerParam) { }
        public virtual void VisitVBBinaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression vBBinaryExpressionParam) { }
        public virtual void VisitVBDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration vBDeclarationParam) { }
        public virtual void VisitVBExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression vBExpressionParam) { }
        public virtual void VisitVBFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBFile vBFileParam) { }
        public virtual void VisitVBFunctionDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration vBFunctionDeclarationParam) { }
        public virtual void VisitVBIdentifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier vBIdentifierParam) { }
        public virtual void VisitVBLiteralExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBLiteralExpression vBLiteralExpressionParam) { }
        public virtual void VisitVBLocalVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBLocalVariableDeclaration vBLocalVariableDeclarationParam) { }
        public virtual void VisitVBModifiersOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration vBModifiersOwnerDeclarationParam) { }
        public virtual void VisitVBNamespaceDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration vBNamespaceDeclarationParam) { }
        public virtual void VisitVBParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBParameterDeclaration vBParameterDeclarationParam) { }
        public virtual void VisitVBParametersOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration vBParametersOwnerDeclarationParam) { }
        public virtual void VisitVBStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBStatement vBStatementParam) { }
        public virtual void VisitVBTypeAndNamespaceHolderDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBTypeAndNamespaceHolderDeclaration vBTypeAndNamespaceHolderDeclarationParam) { }
        public virtual void VisitVBTypeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration vBTypeDeclarationParam) { }
        public virtual void VisitVBTypeMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration vBTypeMemberDeclarationParam) { }
        public virtual void VisitVBUnaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBUnaryExpression vBUnaryExpressionParam) { }
        public virtual void VisitVBXmlAttribute([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlAttribute vBXmlAttributeParam) { }
        public virtual void VisitVBXmlCDataSection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlCDataSection vBXmlCDataSectionParam) { }
        public virtual void VisitVBXmlComment([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlComment vBXmlCommentParam) { }
        public virtual void VisitVBXmlDocument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlDocument vBXmlDocumentParam) { }
        public virtual void VisitVBXmlElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement vBXmlElementParam) { }
        public virtual void VisitVBXmlElementFooter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementFooter vBXmlElementFooterParam) { }
        public virtual void VisitVBXmlElementHeader([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementHeader vBXmlElementHeaderParam) { }
        public virtual void VisitVBXmlEmbeddedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression vBXmlEmbeddedExpressionParam) { }
        public virtual void VisitVBXmlLiteralExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlLiteralExpression vBXmlLiteralExpressionParam) { }
        public virtual void VisitVBXmlMemberAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlMemberAccessExpression vBXmlMemberAccessExpressionParam) { }
        public virtual void VisitVBXmlMisc([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlMisc vBXmlMiscParam) { }
        public virtual void VisitVBXmlProcessingInstruction([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlProcessingInstruction vBXmlProcessingInstructionParam) { }
        public virtual void VisitWhereQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IWhereQueryOperator whereQueryOperatorParam) { }
        public virtual void VisitWhileStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IWhileStatement whileStatementParam) { }
        public virtual void VisitWhileUntilCondition([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IWhileUntilCondition whileUntilConditionParam) { }
        public virtual void VisitWithStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IWithStatement withStatementParam) { }
        public virtual void VisitYieldStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IYieldStatement yieldStatementParam) { }
    }
    public abstract class TreeNodeVisitor<TContext>
    
    {
        public virtual void VisitAccessorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration accessorDeclarationParam, TContext context) { }
        public virtual void VisitAccessorOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAccessorOwnerDeclaration accessorOwnerDeclarationParam, TContext context) { }
        public virtual void VisitAddHandlerStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAddHandlerStatement addHandlerStatementParam, TContext context) { }
        public virtual void VisitAdditiveExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAdditiveExpression additiveExpressionParam, TContext context) { }
        public virtual void VisitAddressOfExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAddressOfExpression addressOfExpressionParam, TContext context) { }
        public virtual void VisitAggregatedRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration aggregatedRangeVariableDeclarationParam, TContext context) { }
        public virtual void VisitAggregatedRangeVariableDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList aggregatedRangeVariableDeclarationListParam, TContext context) { }
        public virtual void VisitAggregateQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAggregateQueryOperator aggregateQueryOperatorParam, TContext context) { }
        public virtual void VisitAliasClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAliasClause aliasClauseParam, TContext context) { }
        public virtual void VisitAnonymousArrayCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression anonymousArrayCreationExpressionParam, TContext context) { }
        public virtual void VisitAnonymousMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAnonymousMemberDeclaration anonymousMemberDeclarationParam, TContext context) { }
        public virtual void VisitAnonymousObjectCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectCreationExpression anonymousObjectCreationExpressionParam, TContext context) { }
        public virtual void VisitAnonymousObjectInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectInitializer anonymousObjectInitializerParam, TContext context) { }
        public virtual void VisitArgumentList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArgumentList argumentListParam, TContext context) { }
        public virtual void VisitArrayBound([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayBound arrayBoundParam, TContext context) { }
        public virtual void VisitArrayCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayCreationExpression arrayCreationExpressionParam, TContext context) { }
        public virtual void VisitArrayModifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayModifier arrayModifierParam, TContext context) { }
        public virtual void VisitArrayModifiersList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList arrayModifiersListParam, TContext context) { }
        public virtual void VisitAssignmentStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAssignmentStatement assignmentStatementParam, TContext context) { }
        public virtual void VisitAttribute([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAttribute attributeParam, TContext context) { }
        public virtual void VisitAttributeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAttributeList attributeListParam, TContext context) { }
        public virtual void VisitAttributeListOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner attributeListOwnerParam, TContext context) { }
        public virtual void VisitAttributesOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration attributesOwnerDeclarationParam, TContext context) { }
        public virtual void VisitAwaitExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAwaitExpression awaitExpressionParam, TContext context) { }
        public virtual void VisitAwaitStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAwaitStatement awaitStatementParam, TContext context) { }
        public virtual void VisitBlock([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IBlock blockParam, TContext context) { }
        public virtual void VisitBlockIfStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IBlockIfStatement blockIfStatementParam, TContext context) { }
        public virtual void VisitCaseClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICaseClause caseClauseParam, TContext context) { }
        public virtual void VisitCaseStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICaseStatement caseStatementParam, TContext context) { }
        public virtual void VisitCastExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICastExpression castExpressionParam, TContext context) { }
        public virtual void VisitCatchStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICatchStatement catchStatementParam, TContext context) { }
        public virtual void VisitCatchVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICatchVariableDeclaration catchVariableDeclarationParam, TContext context) { }
        public virtual void VisitCharsetModifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICharsetModifier charsetModifierParam, TContext context) { }
        public virtual void VisitClassBaseClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IClassBaseClause classBaseClauseParam, TContext context) { }
        public virtual void VisitClassBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IClassBody classBodyParam, TContext context) { }
        public virtual void VisitClassDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration classDeclarationParam, TContext context) { }
        public virtual void VisitClassLikeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration classLikeDeclarationParam, TContext context) { }
        public virtual void VisitCollectionElementInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICollectionElementInitializer collectionElementInitializerParam, TContext context) { }
        public virtual void VisitCollectionRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration collectionRangeVariableDeclarationParam, TContext context) { }
        public virtual void VisitCollectionRangeVariableDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclarationList collectionRangeVariableDeclarationListParam, TContext context) { }
        public virtual void VisitConcatenationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConcatenationExpression concatenationExpressionParam, TContext context) { }
        public virtual void VisitConditionalExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConditionalExpression conditionalExpressionParam, TContext context) { }
        public virtual void VisitConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration constantDeclarationParam, TContext context) { }
        public virtual void VisitConstPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConstPreprocessorDirective constPreprocessorDirectiveParam, TContext context) { }
        public virtual void VisitConstructorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration constructorDeclarationParam, TContext context) { }
        public virtual void VisitContinueStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IContinueStatement continueStatementParam, TContext context) { }
        public virtual void VisitConversionOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration conversionOperatorDeclarationParam, TContext context) { }
        public virtual void VisitDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage declaredTypeUsageParam, TContext context) { }
        public virtual void VisitDelegateDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration delegateDeclarationParam, TContext context) { }
        public virtual void VisitDictionaryAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDictionaryAccessExpression dictionaryAccessExpressionParam, TContext context) { }
        public virtual void VisitDistinctQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDistinctQueryOperator distinctQueryOperatorParam, TContext context) { }
        public virtual void VisitDocCommentBlockNode(JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode xmlDoc, TContext context) { }
        public virtual void VisitDoLoopStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDoLoopStatement doLoopStatementParam, TContext context) { }
        public virtual void VisitElseIfPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IElseIfPreprocessorDirective elseIfPreprocessorDirectiveParam, TContext context) { }
        public virtual void VisitElseIfStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IElseIfStatement elseIfStatementParam, TContext context) { }
        public virtual void VisitElsePreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IElsePreprocessorDirective elsePreprocessorDirectiveParam, TContext context) { }
        public virtual void VisitElseStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IElseStatement elseStatementParam, TContext context) { }
        public virtual void VisitEmptyArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEmptyArgument emptyArgumentParam, TContext context) { }
        public virtual void VisitEndExternalSourcePreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEndExternalSourcePreprocessorDirective endExternalSourcePreprocessorDirectiveParam, TContext context) { }
        public virtual void VisitEndIfPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEndIfPreprocessorDirective endIfPreprocessorDirectiveParam, TContext context) { }
        public virtual void VisitEndRegionPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEndRegionPreprocessorDirective endRegionPreprocessorDirectiveParam, TContext context) { }
        public virtual void VisitEndStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEndStatement endStatementParam, TContext context) { }
        public virtual void VisitEnumDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEnumDeclaration enumDeclarationParam, TContext context) { }
        public virtual void VisitEnumMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration enumMemberDeclarationParam, TContext context) { }
        public virtual void VisitEraseStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEraseStatement eraseStatementParam, TContext context) { }
        public virtual void VisitErrorStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IErrorStatement errorStatementParam, TContext context) { }
        public virtual void VisitEventDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration eventDeclarationParam, TContext context) { }
        public virtual void VisitEventSpecifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEventSpecifier eventSpecifierParam, TContext context) { }
        public virtual void VisitExitStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExitStatement exitStatementParam, TContext context) { }
        public virtual void VisitExponentiationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExponentiationExpression exponentiationExpressionParam, TContext context) { }
        public virtual void VisitExpressionArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExpressionArgument expressionArgumentParam, TContext context) { }
        public virtual void VisitExpressionRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration expressionRangeVariableDeclarationParam, TContext context) { }
        public virtual void VisitExpressionRangeVariableDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList expressionRangeVariableDeclarationListParam, TContext context) { }
        public virtual void VisitExpressionStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExpressionStatement expressionStatementParam, TContext context) { }
        public virtual void VisitExternalChecksumPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExternalChecksumPreprocessorDirective externalChecksumPreprocessorDirectiveParam, TContext context) { }
        public virtual void VisitExternalMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration externalMethodDeclarationParam, TContext context) { }
        public virtual void VisitExternalSourcePreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExternalSourcePreprocessorDirective externalSourcePreprocessorDirectiveParam, TContext context) { }
        public virtual void VisitFinallyStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IFinallyStatement finallyStatementParam, TContext context) { }
        public virtual void VisitForEachStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IForEachStatement forEachStatementParam, TContext context) { }
        public virtual void VisitForStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IForStatement forStatementParam, TContext context) { }
        public virtual void VisitFromQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IFromQueryOperator fromQueryOperatorParam, TContext context) { }
        public virtual void VisitGetTypeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGetTypeExpression getTypeExpressionParam, TContext context) { }
        public virtual void VisitGetXmlNamespaceExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGetXmlNamespaceExpression getXmlNamespaceExpressionParam, TContext context) { }
        public virtual void VisitGotoStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGotoStatement gotoStatementParam, TContext context) { }
        public virtual void VisitGroupByQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGroupByQueryOperator groupByQueryOperatorParam, TContext context) { }
        public virtual void VisitGroupJoinQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGroupJoinQueryOperator groupJoinQueryOperatorParam, TContext context) { }
        public virtual void VisitHandlesClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IHandlesClause handlesClauseParam, TContext context) { }
        public virtual void VisitIfPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIfPreprocessorDirective ifPreprocessorDirectiveParam, TContext context) { }
        public virtual void VisitImplementsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause implementsClauseParam, TContext context) { }
        public virtual void VisitImportAliasClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportAliasClause importAliasClauseParam, TContext context) { }
        public virtual void VisitImportClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportClause importClauseParam, TContext context) { }
        public virtual void VisitImportDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportDirective importDirectiveParam, TContext context) { }
        public virtual void VisitImportDirectivesSection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportDirectivesSection importDirectivesSectionParam, TContext context) { }
        public virtual void VisitImportNamespaceClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportNamespaceClause importNamespaceClauseParam, TContext context) { }
        public virtual void VisitImportXMLNamespaceClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportXMLNamespaceClause importXMLNamespaceClauseParam, TContext context) { }
        public virtual void VisitIndexExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression indexExpressionParam, TContext context) { }
        public virtual void VisitInstanceExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInstanceExpression instanceExpressionParam, TContext context) { }
        public virtual void VisitIntegerDivisionExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIntegerDivisionExpression integerDivisionExpressionParam, TContext context) { }
        public virtual void VisitInterfaceDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration interfaceDeclarationParam, TContext context) { }
        public virtual void VisitInterfaceInheritsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause interfaceInheritsClauseParam, TContext context) { }
        public virtual void VisitInterfaceMemberSpecifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInterfaceMemberSpecifier interfaceMemberSpecifierParam, TContext context) { }
        public virtual void VisitIntoOfAggregateQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIntoOfAggregateQueryOperator intoOfAggregateQueryOperatorParam, TContext context) { }
        public virtual void VisitInvocationStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInvocationStatement invocationStatementParam, TContext context) { }
        public virtual void VisitIsExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIsExpression isExpressionParam, TContext context) { }
        public virtual void VisitIsNotExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIsNotExpression isNotExpressionParam, TContext context) { }
        public virtual void VisitJoinCollectionRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IJoinCollectionRangeVariableDeclaration joinCollectionRangeVariableDeclarationParam, TContext context) { }
        public virtual void VisitJoinCondition([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IJoinCondition joinConditionParam, TContext context) { }
        public virtual void VisitJoinQueryConditionsListFake([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryConditionsListFake joinQueryConditionsListFakeParam, TContext context) { }
        public virtual void VisitJoinQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator joinQueryOperatorParam, TContext context) { }
        public virtual void VisitLabelDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILabelDeclaration labelDeclarationParam, TContext context) { }
        public virtual void VisitLabelName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILabelName labelNameParam, TContext context) { }
        public virtual void VisitLabelReferencingStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILabelReferencingStatement labelReferencingStatementParam, TContext context) { }
        public virtual void VisitLabelStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILabelStatement labelStatementParam, TContext context) { }
        public virtual void VisitLambdaExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaExpression lambdaExpressionParam, TContext context) { }
        public virtual void VisitLambdaFunctionExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaFunctionExpression lambdaFunctionExpressionParam, TContext context) { }
        public virtual void VisitLambdaParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration lambdaParameterDeclarationParam, TContext context) { }
        public virtual void VisitLambdaSignature([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaSignature lambdaSignatureParam, TContext context) { }
        public virtual void VisitLambdaSubExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaSubExpression lambdaSubExpressionParam, TContext context) { }
        public virtual void VisitLetQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILetQueryOperator letQueryOperatorParam, TContext context) { }
        public virtual void VisitLibraryClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILibraryClause libraryClauseParam, TContext context) { }
        public virtual void VisitLikeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILikeExpression likeExpressionParam, TContext context) { }
        public virtual void VisitLineIfStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatement lineIfStatementParam, TContext context) { }
        public virtual void VisitLineIfStatementBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody lineIfStatementBodyParam, TContext context) { }
        public virtual void VisitLocalDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationList localDeclarationListParam, TContext context) { }
        public virtual void VisitLocalDeclarationStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationStatement localDeclarationStatementParam, TContext context) { }
        public virtual void VisitLocalVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration localVariableDeclarationParam, TContext context) { }
        public virtual void VisitLogicalAndExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILogicalAndExpression logicalAndExpressionParam, TContext context) { }
        public virtual void VisitLogicalNotExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILogicalNotExpression logicalNotExpressionParam, TContext context) { }
        public virtual void VisitLogicalOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILogicalOrExpression logicalOrExpressionParam, TContext context) { }
        public virtual void VisitLogicalXorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILogicalXorExpression logicalXorExpressionParam, TContext context) { }
        public virtual void VisitLoopControlVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration loopControlVariableDeclarationParam, TContext context) { }
        public virtual void VisitLoopStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILoopStatement loopStatementParam, TContext context) { }
        public virtual void VisitMemberAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMemberAccessExpression memberAccessExpressionParam, TContext context) { }
        public virtual void VisitMemberInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMemberInitializer memberInitializerParam, TContext context) { }
        public virtual void VisitMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration methodDeclarationParam, TContext context) { }
        public virtual void VisitMethodDeclarationBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase methodDeclarationBaseParam, TContext context) { }
        public virtual void VisitMidAssignmentStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMidAssignmentStatement midAssignmentStatementParam, TContext context) { }
        public virtual void VisitModifiersList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IModifiersList modifiersListParam, TContext context) { }
        public virtual void VisitModifiersListOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner modifiersListOwnerParam, TContext context) { }
        public virtual void VisitModuleDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration moduleDeclarationParam, TContext context) { }
        public virtual void VisitModulusExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IModulusExpression modulusExpressionParam, TContext context) { }
        public virtual void VisitMultipleConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMultipleConstantDeclaration multipleConstantDeclarationParam, TContext context) { }
        public virtual void VisitMultipleVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMultipleVariableDeclaration multipleVariableDeclarationParam, TContext context) { }
        public virtual void VisitMultiplicativeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMultiplicativeExpression multiplicativeExpressionParam, TContext context) { }
        public virtual void VisitNamedArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INamedArgument namedArgumentParam, TContext context) { }
        public virtual void VisitNamespaceMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration namespaceMemberDeclarationParam, TContext context) { }
        public virtual void VisitNamespacePrefixExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INamespacePrefixExpression namespacePrefixExpressionParam, TContext context) { }
        public virtual void VisitNewExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INewExpression newExpressionParam, TContext context) { }
        public virtual void VisitNextClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INextClause nextClauseParam, TContext context) { }
        public virtual void VisitNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node, TContext context) { }
        public virtual void VisitObjectCollectionInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IObjectCollectionInitializer objectCollectionInitializerParam, TContext context) { }
        public virtual void VisitObjectCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression objectCreationExpressionParam, TContext context) { }
        public virtual void VisitObjectCreationInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationInitializer objectCreationInitializerParam, TContext context) { }
        public virtual void VisitOnErrorSpecialLabel([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOnErrorSpecialLabel onErrorSpecialLabelParam, TContext context) { }
        public virtual void VisitOnErrorStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOnErrorStatement onErrorStatementParam, TContext context) { }
        public virtual void VisitOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration operatorDeclarationParam, TContext context) { }
        public virtual void VisitOptionStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOptionStatement optionStatementParam, TContext context) { }
        public virtual void VisitOptionStatementsSection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOptionStatementsSection optionStatementsSectionParam, TContext context) { }
        public virtual void VisitOrderByQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOrderByQueryOperator orderByQueryOperatorParam, TContext context) { }
        public virtual void VisitOrderExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOrderExpression orderExpressionParam, TContext context) { }
        public virtual void VisitParenthesizedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IParenthesizedExpression parenthesizedExpressionParam, TContext context) { }
        public virtual void VisitPartitionQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPartitionQueryOperator partitionQueryOperatorParam, TContext context) { }
        public virtual void VisitPositionalArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPositionalArgument positionalArgumentParam, TContext context) { }
        public virtual void VisitPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective preprocessorDirectiveParam, TContext context) { }
        public virtual void VisitPrimaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression primaryExpressionParam, TContext context) { }
        public virtual void VisitPropertyDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration propertyDeclarationParam, TContext context) { }
        public virtual void VisitPropertyInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPropertyInitializer propertyInitializerParam, TContext context) { }
        public virtual void VisitQualifiedNamespaceName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName qualifiedNamespaceNameParam, TContext context) { }
        public virtual void VisitQueryAggregatedParameterPlatform([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryAggregatedParameterPlatform queryAggregatedParameterPlatformParam, TContext context) { }
        public virtual void VisitQueryConditionsList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryConditionsList queryConditionsListParam, TContext context) { }
        public virtual void VisitQueryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression queryExpressionParam, TContext context) { }
        public virtual void VisitQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator queryOperatorParam, TContext context) { }
        public virtual void VisitQueryParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryParameter queryParameterParam, TContext context) { }
        public virtual void VisitQueryParameterPlatform([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform queryParameterPlatformParam, TContext context) { }
        public virtual void VisitRaiseEventStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRaiseEventStatement raiseEventStatementParam, TContext context) { }
        public virtual void VisitRedimClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRedimClause redimClauseParam, TContext context) { }
        public virtual void VisitRedimStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRedimStatement redimStatementParam, TContext context) { }
        public virtual void VisitReferenceExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression referenceExpressionParam, TContext context) { }
        public virtual void VisitReferenceName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReferenceName referenceNameParam, TContext context) { }
        public virtual void VisitRegionPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRegionPreprocessorDirective regionPreprocessorDirectiveParam, TContext context) { }
        public virtual void VisitRegularParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration regularParameterDeclarationParam, TContext context) { }
        public virtual void VisitRegularParameterList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList regularParameterListParam, TContext context) { }
        public virtual void VisitRelationalExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRelationalExpression relationalExpressionParam, TContext context) { }
        public virtual void VisitRemoveHandlerStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRemoveHandlerStatement removeHandlerStatementParam, TContext context) { }
        public virtual void VisitResumeStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IResumeStatement resumeStatementParam, TContext context) { }
        public virtual void VisitReturnAttributeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList returnAttributeListParam, TContext context) { }
        public virtual void VisitReturnStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReturnStatement returnStatementParam, TContext context) { }
        public virtual void VisitSelectQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ISelectQueryOperator selectQueryOperatorParam, TContext context) { }
        public virtual void VisitSelectStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ISelectStatement selectStatementParam, TContext context) { }
        public virtual void VisitShiftExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IShiftExpression shiftExpressionParam, TContext context) { }
        public virtual void VisitSignOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration signOperatorDeclarationParam, TContext context) { }
        public virtual void VisitStopStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IStopStatement stopStatementParam, TContext context) { }
        public virtual void VisitStructureDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration structureDeclarationParam, TContext context) { }
        public virtual void VisitSyncLockStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ISyncLockStatement syncLockStatementParam, TContext context) { }
        public virtual void VisitThrowStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IThrowStatement throwStatementParam, TContext context) { }
        public virtual void VisitTryStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITryStatement tryStatementParam, TContext context) { }
        public virtual void VisitTypeArgumentList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList typeArgumentListParam, TContext context) { }
        public virtual void VisitTypeImplementsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause typeImplementsClauseParam, TContext context) { }
        public virtual void VisitTypeMemberOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration typeMemberOwnerDeclarationParam, TContext context) { }
        public virtual void VisitTypeOfIsExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeOfIsExpression typeOfIsExpressionParam, TContext context) { }
        public virtual void VisitTypeParameterConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint typeParameterConstraintParam, TContext context) { }
        public virtual void VisitTypeParameterConstraintList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList typeParameterConstraintListParam, TContext context) { }
        public virtual void VisitTypeParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterDeclaration typeParameterDeclarationParam, TContext context) { }
        public virtual void VisitTypeParameterOfMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration typeParameterOfMethodDeclarationParam, TContext context) { }
        public virtual void VisitTypeParameterOfMethodList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodList typeParameterOfMethodListParam, TContext context) { }
        public virtual void VisitTypeParameterOfTypeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration typeParameterOfTypeDeclarationParam, TContext context) { }
        public virtual void VisitTypeParameterOfTypeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList typeParameterOfTypeListParam, TContext context) { }
        public virtual void VisitTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage typeUsageParam, TContext context) { }
        public virtual void VisitUnaryNegationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IUnaryNegationExpression unaryNegationExpressionParam, TContext context) { }
        public virtual void VisitUnknownPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IUnknownPreprocessorDirective unknownPreprocessorDirectiveParam, TContext context) { }
        public virtual void VisitUsingStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IUsingStatement usingStatementParam, TContext context) { }
        public virtual void VisitUsingVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IUsingVariableDeclaration usingVariableDeclarationParam, TContext context) { }
        public virtual void VisitVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration variableDeclarationParam, TContext context) { }
        public virtual void VisitVariableDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclarationList variableDeclarationListParam, TContext context) { }
        public virtual void VisitVBArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBArgument vBArgumentParam, TContext context) { }
        public virtual void VisitVBArgumentsOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner vBArgumentsOwnerParam, TContext context) { }
        public virtual void VisitVBBinaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression vBBinaryExpressionParam, TContext context) { }
        public virtual void VisitVBDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration vBDeclarationParam, TContext context) { }
        public virtual void VisitVBExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression vBExpressionParam, TContext context) { }
        public virtual void VisitVBFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBFile vBFileParam, TContext context) { }
        public virtual void VisitVBFunctionDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration vBFunctionDeclarationParam, TContext context) { }
        public virtual void VisitVBIdentifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier vBIdentifierParam, TContext context) { }
        public virtual void VisitVBLiteralExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBLiteralExpression vBLiteralExpressionParam, TContext context) { }
        public virtual void VisitVBLocalVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBLocalVariableDeclaration vBLocalVariableDeclarationParam, TContext context) { }
        public virtual void VisitVBModifiersOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration vBModifiersOwnerDeclarationParam, TContext context) { }
        public virtual void VisitVBNamespaceDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration vBNamespaceDeclarationParam, TContext context) { }
        public virtual void VisitVBParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBParameterDeclaration vBParameterDeclarationParam, TContext context) { }
        public virtual void VisitVBParametersOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration vBParametersOwnerDeclarationParam, TContext context) { }
        public virtual void VisitVBStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBStatement vBStatementParam, TContext context) { }
        public virtual void VisitVBTypeAndNamespaceHolderDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBTypeAndNamespaceHolderDeclaration vBTypeAndNamespaceHolderDeclarationParam, TContext context) { }
        public virtual void VisitVBTypeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration vBTypeDeclarationParam, TContext context) { }
        public virtual void VisitVBTypeMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration vBTypeMemberDeclarationParam, TContext context) { }
        public virtual void VisitVBUnaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBUnaryExpression vBUnaryExpressionParam, TContext context) { }
        public virtual void VisitVBXmlAttribute([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlAttribute vBXmlAttributeParam, TContext context) { }
        public virtual void VisitVBXmlCDataSection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlCDataSection vBXmlCDataSectionParam, TContext context) { }
        public virtual void VisitVBXmlComment([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlComment vBXmlCommentParam, TContext context) { }
        public virtual void VisitVBXmlDocument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlDocument vBXmlDocumentParam, TContext context) { }
        public virtual void VisitVBXmlElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement vBXmlElementParam, TContext context) { }
        public virtual void VisitVBXmlElementFooter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementFooter vBXmlElementFooterParam, TContext context) { }
        public virtual void VisitVBXmlElementHeader([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementHeader vBXmlElementHeaderParam, TContext context) { }
        public virtual void VisitVBXmlEmbeddedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression vBXmlEmbeddedExpressionParam, TContext context) { }
        public virtual void VisitVBXmlLiteralExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlLiteralExpression vBXmlLiteralExpressionParam, TContext context) { }
        public virtual void VisitVBXmlMemberAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlMemberAccessExpression vBXmlMemberAccessExpressionParam, TContext context) { }
        public virtual void VisitVBXmlMisc([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlMisc vBXmlMiscParam, TContext context) { }
        public virtual void VisitVBXmlProcessingInstruction([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlProcessingInstruction vBXmlProcessingInstructionParam, TContext context) { }
        public virtual void VisitWhereQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IWhereQueryOperator whereQueryOperatorParam, TContext context) { }
        public virtual void VisitWhileStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IWhileStatement whileStatementParam, TContext context) { }
        public virtual void VisitWhileUntilCondition([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IWhileUntilCondition whileUntilConditionParam, TContext context) { }
        public virtual void VisitWithStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IWithStatement withStatementParam, TContext context) { }
        public virtual void VisitYieldStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IYieldStatement yieldStatementParam, TContext context) { }
    }
    public abstract class TreeNodeVisitor<TContext, TReturn>
    
    
    {
        public virtual TReturn VisitAccessorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAccessorDeclaration accessorDeclarationParam, TContext context) { }
        public virtual TReturn VisitAccessorOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAccessorOwnerDeclaration accessorOwnerDeclarationParam, TContext context) { }
        public virtual TReturn VisitAddHandlerStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAddHandlerStatement addHandlerStatementParam, TContext context) { }
        public virtual TReturn VisitAdditiveExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAdditiveExpression additiveExpressionParam, TContext context) { }
        public virtual TReturn VisitAddressOfExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAddressOfExpression addressOfExpressionParam, TContext context) { }
        public virtual TReturn VisitAggregatedRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclaration aggregatedRangeVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitAggregatedRangeVariableDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAggregatedRangeVariableDeclarationList aggregatedRangeVariableDeclarationListParam, TContext context) { }
        public virtual TReturn VisitAggregateQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAggregateQueryOperator aggregateQueryOperatorParam, TContext context) { }
        public virtual TReturn VisitAliasClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAliasClause aliasClauseParam, TContext context) { }
        public virtual TReturn VisitAnonymousArrayCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAnonymousArrayCreationExpression anonymousArrayCreationExpressionParam, TContext context) { }
        public virtual TReturn VisitAnonymousMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAnonymousMemberDeclaration anonymousMemberDeclarationParam, TContext context) { }
        public virtual TReturn VisitAnonymousObjectCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectCreationExpression anonymousObjectCreationExpressionParam, TContext context) { }
        public virtual TReturn VisitAnonymousObjectInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAnonymousObjectInitializer anonymousObjectInitializerParam, TContext context) { }
        public virtual TReturn VisitArgumentList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArgumentList argumentListParam, TContext context) { }
        public virtual TReturn VisitArrayBound([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayBound arrayBoundParam, TContext context) { }
        public virtual TReturn VisitArrayCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayCreationExpression arrayCreationExpressionParam, TContext context) { }
        public virtual TReturn VisitArrayModifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayModifier arrayModifierParam, TContext context) { }
        public virtual TReturn VisitArrayModifiersList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList arrayModifiersListParam, TContext context) { }
        public virtual TReturn VisitAssignmentStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAssignmentStatement assignmentStatementParam, TContext context) { }
        public virtual TReturn VisitAttribute([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAttribute attributeParam, TContext context) { }
        public virtual TReturn VisitAttributeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAttributeList attributeListParam, TContext context) { }
        public virtual TReturn VisitAttributeListOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAttributeListOwner attributeListOwnerParam, TContext context) { }
        public virtual TReturn VisitAttributesOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAttributesOwnerDeclaration attributesOwnerDeclarationParam, TContext context) { }
        public virtual TReturn VisitAwaitExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAwaitExpression awaitExpressionParam, TContext context) { }
        public virtual TReturn VisitAwaitStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IAwaitStatement awaitStatementParam, TContext context) { }
        public virtual TReturn VisitBlock([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IBlock blockParam, TContext context) { }
        public virtual TReturn VisitBlockIfStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IBlockIfStatement blockIfStatementParam, TContext context) { }
        public virtual TReturn VisitCaseClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICaseClause caseClauseParam, TContext context) { }
        public virtual TReturn VisitCaseStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICaseStatement caseStatementParam, TContext context) { }
        public virtual TReturn VisitCastExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICastExpression castExpressionParam, TContext context) { }
        public virtual TReturn VisitCatchStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICatchStatement catchStatementParam, TContext context) { }
        public virtual TReturn VisitCatchVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICatchVariableDeclaration catchVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitCharsetModifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICharsetModifier charsetModifierParam, TContext context) { }
        public virtual TReturn VisitClassBaseClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IClassBaseClause classBaseClauseParam, TContext context) { }
        public virtual TReturn VisitClassBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IClassBody classBodyParam, TContext context) { }
        public virtual TReturn VisitClassDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IClassDeclaration classDeclarationParam, TContext context) { }
        public virtual TReturn VisitClassLikeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IClassLikeDeclaration classLikeDeclarationParam, TContext context) { }
        public virtual TReturn VisitCollectionElementInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICollectionElementInitializer collectionElementInitializerParam, TContext context) { }
        public virtual TReturn VisitCollectionRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclaration collectionRangeVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitCollectionRangeVariableDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ICollectionRangeVariableDeclarationList collectionRangeVariableDeclarationListParam, TContext context) { }
        public virtual TReturn VisitConcatenationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConcatenationExpression concatenationExpressionParam, TContext context) { }
        public virtual TReturn VisitConditionalExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConditionalExpression conditionalExpressionParam, TContext context) { }
        public virtual TReturn VisitConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration constantDeclarationParam, TContext context) { }
        public virtual TReturn VisitConstPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConstPreprocessorDirective constPreprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitConstructorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConstructorDeclaration constructorDeclarationParam, TContext context) { }
        public virtual TReturn VisitContinueStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IContinueStatement continueStatementParam, TContext context) { }
        public virtual TReturn VisitConversionOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IConversionOperatorDeclaration conversionOperatorDeclarationParam, TContext context) { }
        public virtual TReturn VisitDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage declaredTypeUsageParam, TContext context) { }
        public virtual TReturn VisitDelegateDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDelegateDeclaration delegateDeclarationParam, TContext context) { }
        public virtual TReturn VisitDictionaryAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDictionaryAccessExpression dictionaryAccessExpressionParam, TContext context) { }
        public virtual TReturn VisitDistinctQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDistinctQueryOperator distinctQueryOperatorParam, TContext context) { }
        public virtual TReturn VisitDocCommentBlockNode(JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode xmlDoc, TContext context) { }
        public virtual TReturn VisitDoLoopStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IDoLoopStatement doLoopStatementParam, TContext context) { }
        public virtual TReturn VisitElseIfPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IElseIfPreprocessorDirective elseIfPreprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitElseIfStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IElseIfStatement elseIfStatementParam, TContext context) { }
        public virtual TReturn VisitElsePreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IElsePreprocessorDirective elsePreprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitElseStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IElseStatement elseStatementParam, TContext context) { }
        public virtual TReturn VisitEmptyArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEmptyArgument emptyArgumentParam, TContext context) { }
        public virtual TReturn VisitEndExternalSourcePreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEndExternalSourcePreprocessorDirective endExternalSourcePreprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitEndIfPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEndIfPreprocessorDirective endIfPreprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitEndRegionPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEndRegionPreprocessorDirective endRegionPreprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitEndStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEndStatement endStatementParam, TContext context) { }
        public virtual TReturn VisitEnumDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEnumDeclaration enumDeclarationParam, TContext context) { }
        public virtual TReturn VisitEnumMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEnumMemberDeclaration enumMemberDeclarationParam, TContext context) { }
        public virtual TReturn VisitEraseStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEraseStatement eraseStatementParam, TContext context) { }
        public virtual TReturn VisitErrorStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IErrorStatement errorStatementParam, TContext context) { }
        public virtual TReturn VisitEventDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEventDeclaration eventDeclarationParam, TContext context) { }
        public virtual TReturn VisitEventSpecifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IEventSpecifier eventSpecifierParam, TContext context) { }
        public virtual TReturn VisitExitStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExitStatement exitStatementParam, TContext context) { }
        public virtual TReturn VisitExponentiationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExponentiationExpression exponentiationExpressionParam, TContext context) { }
        public virtual TReturn VisitExpressionArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExpressionArgument expressionArgumentParam, TContext context) { }
        public virtual TReturn VisitExpressionRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclaration expressionRangeVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitExpressionRangeVariableDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExpressionRangeVariableDeclarationList expressionRangeVariableDeclarationListParam, TContext context) { }
        public virtual TReturn VisitExpressionStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExpressionStatement expressionStatementParam, TContext context) { }
        public virtual TReturn VisitExternalChecksumPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExternalChecksumPreprocessorDirective externalChecksumPreprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitExternalMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExternalMethodDeclaration externalMethodDeclarationParam, TContext context) { }
        public virtual TReturn VisitExternalSourcePreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IExternalSourcePreprocessorDirective externalSourcePreprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitFinallyStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IFinallyStatement finallyStatementParam, TContext context) { }
        public virtual TReturn VisitForEachStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IForEachStatement forEachStatementParam, TContext context) { }
        public virtual TReturn VisitForStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IForStatement forStatementParam, TContext context) { }
        public virtual TReturn VisitFromQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IFromQueryOperator fromQueryOperatorParam, TContext context) { }
        public virtual TReturn VisitGetTypeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGetTypeExpression getTypeExpressionParam, TContext context) { }
        public virtual TReturn VisitGetXmlNamespaceExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGetXmlNamespaceExpression getXmlNamespaceExpressionParam, TContext context) { }
        public virtual TReturn VisitGotoStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGotoStatement gotoStatementParam, TContext context) { }
        public virtual TReturn VisitGroupByQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGroupByQueryOperator groupByQueryOperatorParam, TContext context) { }
        public virtual TReturn VisitGroupJoinQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IGroupJoinQueryOperator groupJoinQueryOperatorParam, TContext context) { }
        public virtual TReturn VisitHandlesClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IHandlesClause handlesClauseParam, TContext context) { }
        public virtual TReturn VisitIfPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIfPreprocessorDirective ifPreprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitImplementsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImplementsClause implementsClauseParam, TContext context) { }
        public virtual TReturn VisitImportAliasClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportAliasClause importAliasClauseParam, TContext context) { }
        public virtual TReturn VisitImportClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportClause importClauseParam, TContext context) { }
        public virtual TReturn VisitImportDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportDirective importDirectiveParam, TContext context) { }
        public virtual TReturn VisitImportDirectivesSection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportDirectivesSection importDirectivesSectionParam, TContext context) { }
        public virtual TReturn VisitImportNamespaceClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportNamespaceClause importNamespaceClauseParam, TContext context) { }
        public virtual TReturn VisitImportXMLNamespaceClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IImportXMLNamespaceClause importXMLNamespaceClauseParam, TContext context) { }
        public virtual TReturn VisitIndexExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression indexExpressionParam, TContext context) { }
        public virtual TReturn VisitInstanceExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInstanceExpression instanceExpressionParam, TContext context) { }
        public virtual TReturn VisitIntegerDivisionExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIntegerDivisionExpression integerDivisionExpressionParam, TContext context) { }
        public virtual TReturn VisitInterfaceDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInterfaceDeclaration interfaceDeclarationParam, TContext context) { }
        public virtual TReturn VisitInterfaceInheritsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInterfaceInheritsClause interfaceInheritsClauseParam, TContext context) { }
        public virtual TReturn VisitInterfaceMemberSpecifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInterfaceMemberSpecifier interfaceMemberSpecifierParam, TContext context) { }
        public virtual TReturn VisitIntoOfAggregateQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIntoOfAggregateQueryOperator intoOfAggregateQueryOperatorParam, TContext context) { }
        public virtual TReturn VisitInvocationStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IInvocationStatement invocationStatementParam, TContext context) { }
        public virtual TReturn VisitIsExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIsExpression isExpressionParam, TContext context) { }
        public virtual TReturn VisitIsNotExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IIsNotExpression isNotExpressionParam, TContext context) { }
        public virtual TReturn VisitJoinCollectionRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IJoinCollectionRangeVariableDeclaration joinCollectionRangeVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitJoinCondition([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IJoinCondition joinConditionParam, TContext context) { }
        public virtual TReturn VisitJoinQueryConditionsListFake([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryConditionsListFake joinQueryConditionsListFakeParam, TContext context) { }
        public virtual TReturn VisitJoinQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IJoinQueryOperator joinQueryOperatorParam, TContext context) { }
        public virtual TReturn VisitLabelDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILabelDeclaration labelDeclarationParam, TContext context) { }
        public virtual TReturn VisitLabelName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILabelName labelNameParam, TContext context) { }
        public virtual TReturn VisitLabelReferencingStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILabelReferencingStatement labelReferencingStatementParam, TContext context) { }
        public virtual TReturn VisitLabelStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILabelStatement labelStatementParam, TContext context) { }
        public virtual TReturn VisitLambdaExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaExpression lambdaExpressionParam, TContext context) { }
        public virtual TReturn VisitLambdaFunctionExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaFunctionExpression lambdaFunctionExpressionParam, TContext context) { }
        public virtual TReturn VisitLambdaParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaParameterDeclaration lambdaParameterDeclarationParam, TContext context) { }
        public virtual TReturn VisitLambdaSignature([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaSignature lambdaSignatureParam, TContext context) { }
        public virtual TReturn VisitLambdaSubExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILambdaSubExpression lambdaSubExpressionParam, TContext context) { }
        public virtual TReturn VisitLetQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILetQueryOperator letQueryOperatorParam, TContext context) { }
        public virtual TReturn VisitLibraryClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILibraryClause libraryClauseParam, TContext context) { }
        public virtual TReturn VisitLikeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILikeExpression likeExpressionParam, TContext context) { }
        public virtual TReturn VisitLineIfStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatement lineIfStatementParam, TContext context) { }
        public virtual TReturn VisitLineIfStatementBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatementBody lineIfStatementBodyParam, TContext context) { }
        public virtual TReturn VisitLocalDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationList localDeclarationListParam, TContext context) { }
        public virtual TReturn VisitLocalDeclarationStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILocalDeclarationStatement localDeclarationStatementParam, TContext context) { }
        public virtual TReturn VisitLocalVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration localVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitLogicalAndExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILogicalAndExpression logicalAndExpressionParam, TContext context) { }
        public virtual TReturn VisitLogicalNotExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILogicalNotExpression logicalNotExpressionParam, TContext context) { }
        public virtual TReturn VisitLogicalOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILogicalOrExpression logicalOrExpressionParam, TContext context) { }
        public virtual TReturn VisitLogicalXorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILogicalXorExpression logicalXorExpressionParam, TContext context) { }
        public virtual TReturn VisitLoopControlVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILoopControlVariableDeclaration loopControlVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitLoopStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ILoopStatement loopStatementParam, TContext context) { }
        public virtual TReturn VisitMemberAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMemberAccessExpression memberAccessExpressionParam, TContext context) { }
        public virtual TReturn VisitMemberInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMemberInitializer memberInitializerParam, TContext context) { }
        public virtual TReturn VisitMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration methodDeclarationParam, TContext context) { }
        public virtual TReturn VisitMethodDeclarationBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclarationBase methodDeclarationBaseParam, TContext context) { }
        public virtual TReturn VisitMidAssignmentStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMidAssignmentStatement midAssignmentStatementParam, TContext context) { }
        public virtual TReturn VisitModifiersList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IModifiersList modifiersListParam, TContext context) { }
        public virtual TReturn VisitModifiersListOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IModifiersListOwner modifiersListOwnerParam, TContext context) { }
        public virtual TReturn VisitModuleDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IModuleDeclaration moduleDeclarationParam, TContext context) { }
        public virtual TReturn VisitModulusExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IModulusExpression modulusExpressionParam, TContext context) { }
        public virtual TReturn VisitMultipleConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMultipleConstantDeclaration multipleConstantDeclarationParam, TContext context) { }
        public virtual TReturn VisitMultipleVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMultipleVariableDeclaration multipleVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitMultiplicativeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IMultiplicativeExpression multiplicativeExpressionParam, TContext context) { }
        public virtual TReturn VisitNamedArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INamedArgument namedArgumentParam, TContext context) { }
        public virtual TReturn VisitNamespaceMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INamespaceMemberDeclaration namespaceMemberDeclarationParam, TContext context) { }
        public virtual TReturn VisitNamespacePrefixExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INamespacePrefixExpression namespacePrefixExpressionParam, TContext context) { }
        public virtual TReturn VisitNewExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INewExpression newExpressionParam, TContext context) { }
        public virtual TReturn VisitNextClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.INextClause nextClauseParam, TContext context) { }
        public virtual TReturn VisitNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node, TContext context) { }
        public virtual TReturn VisitObjectCollectionInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IObjectCollectionInitializer objectCollectionInitializerParam, TContext context) { }
        public virtual TReturn VisitObjectCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression objectCreationExpressionParam, TContext context) { }
        public virtual TReturn VisitObjectCreationInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationInitializer objectCreationInitializerParam, TContext context) { }
        public virtual TReturn VisitOnErrorSpecialLabel([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOnErrorSpecialLabel onErrorSpecialLabelParam, TContext context) { }
        public virtual TReturn VisitOnErrorStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOnErrorStatement onErrorStatementParam, TContext context) { }
        public virtual TReturn VisitOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOperatorDeclaration operatorDeclarationParam, TContext context) { }
        public virtual TReturn VisitOptionStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOptionStatement optionStatementParam, TContext context) { }
        public virtual TReturn VisitOptionStatementsSection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOptionStatementsSection optionStatementsSectionParam, TContext context) { }
        public virtual TReturn VisitOrderByQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOrderByQueryOperator orderByQueryOperatorParam, TContext context) { }
        public virtual TReturn VisitOrderExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IOrderExpression orderExpressionParam, TContext context) { }
        public virtual TReturn VisitParenthesizedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IParenthesizedExpression parenthesizedExpressionParam, TContext context) { }
        public virtual TReturn VisitPartitionQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPartitionQueryOperator partitionQueryOperatorParam, TContext context) { }
        public virtual TReturn VisitPositionalArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPositionalArgument positionalArgumentParam, TContext context) { }
        public virtual TReturn VisitPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPreprocessorDirective preprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitPrimaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression primaryExpressionParam, TContext context) { }
        public virtual TReturn VisitPropertyDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPropertyDeclaration propertyDeclarationParam, TContext context) { }
        public virtual TReturn VisitPropertyInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IPropertyInitializer propertyInitializerParam, TContext context) { }
        public virtual TReturn VisitQualifiedNamespaceName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName qualifiedNamespaceNameParam, TContext context) { }
        public virtual TReturn VisitQueryAggregatedParameterPlatform([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryAggregatedParameterPlatform queryAggregatedParameterPlatformParam, TContext context) { }
        public virtual TReturn VisitQueryConditionsList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryConditionsList queryConditionsListParam, TContext context) { }
        public virtual TReturn VisitQueryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryExpression queryExpressionParam, TContext context) { }
        public virtual TReturn VisitQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryOperator queryOperatorParam, TContext context) { }
        public virtual TReturn VisitQueryParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryParameter queryParameterParam, TContext context) { }
        public virtual TReturn VisitQueryParameterPlatform([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform queryParameterPlatformParam, TContext context) { }
        public virtual TReturn VisitRaiseEventStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRaiseEventStatement raiseEventStatementParam, TContext context) { }
        public virtual TReturn VisitRedimClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRedimClause redimClauseParam, TContext context) { }
        public virtual TReturn VisitRedimStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRedimStatement redimStatementParam, TContext context) { }
        public virtual TReturn VisitReferenceExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReferenceExpression referenceExpressionParam, TContext context) { }
        public virtual TReturn VisitReferenceName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReferenceName referenceNameParam, TContext context) { }
        public virtual TReturn VisitRegionPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRegionPreprocessorDirective regionPreprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitRegularParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration regularParameterDeclarationParam, TContext context) { }
        public virtual TReturn VisitRegularParameterList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList regularParameterListParam, TContext context) { }
        public virtual TReturn VisitRelationalExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRelationalExpression relationalExpressionParam, TContext context) { }
        public virtual TReturn VisitRemoveHandlerStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IRemoveHandlerStatement removeHandlerStatementParam, TContext context) { }
        public virtual TReturn VisitResumeStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IResumeStatement resumeStatementParam, TContext context) { }
        public virtual TReturn VisitReturnAttributeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReturnAttributeList returnAttributeListParam, TContext context) { }
        public virtual TReturn VisitReturnStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IReturnStatement returnStatementParam, TContext context) { }
        public virtual TReturn VisitSelectQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ISelectQueryOperator selectQueryOperatorParam, TContext context) { }
        public virtual TReturn VisitSelectStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ISelectStatement selectStatementParam, TContext context) { }
        public virtual TReturn VisitShiftExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IShiftExpression shiftExpressionParam, TContext context) { }
        public virtual TReturn VisitSignOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ISignOperatorDeclaration signOperatorDeclarationParam, TContext context) { }
        public virtual TReturn VisitStopStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IStopStatement stopStatementParam, TContext context) { }
        public virtual TReturn VisitStructureDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IStructureDeclaration structureDeclarationParam, TContext context) { }
        public virtual TReturn VisitSyncLockStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ISyncLockStatement syncLockStatementParam, TContext context) { }
        public virtual TReturn VisitThrowStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IThrowStatement throwStatementParam, TContext context) { }
        public virtual TReturn VisitTryStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITryStatement tryStatementParam, TContext context) { }
        public virtual TReturn VisitTypeArgumentList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList typeArgumentListParam, TContext context) { }
        public virtual TReturn VisitTypeImplementsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause typeImplementsClauseParam, TContext context) { }
        public virtual TReturn VisitTypeMemberOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration typeMemberOwnerDeclarationParam, TContext context) { }
        public virtual TReturn VisitTypeOfIsExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeOfIsExpression typeOfIsExpressionParam, TContext context) { }
        public virtual TReturn VisitTypeParameterConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint typeParameterConstraintParam, TContext context) { }
        public virtual TReturn VisitTypeParameterConstraintList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList typeParameterConstraintListParam, TContext context) { }
        public virtual TReturn VisitTypeParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterDeclaration typeParameterDeclarationParam, TContext context) { }
        public virtual TReturn VisitTypeParameterOfMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration typeParameterOfMethodDeclarationParam, TContext context) { }
        public virtual TReturn VisitTypeParameterOfMethodList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodList typeParameterOfMethodListParam, TContext context) { }
        public virtual TReturn VisitTypeParameterOfTypeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration typeParameterOfTypeDeclarationParam, TContext context) { }
        public virtual TReturn VisitTypeParameterOfTypeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList typeParameterOfTypeListParam, TContext context) { }
        public virtual TReturn VisitTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage typeUsageParam, TContext context) { }
        public virtual TReturn VisitUnaryNegationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IUnaryNegationExpression unaryNegationExpressionParam, TContext context) { }
        public virtual TReturn VisitUnknownPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IUnknownPreprocessorDirective unknownPreprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitUsingStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IUsingStatement usingStatementParam, TContext context) { }
        public virtual TReturn VisitUsingVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IUsingVariableDeclaration usingVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration variableDeclarationParam, TContext context) { }
        public virtual TReturn VisitVariableDeclarationList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclarationList variableDeclarationListParam, TContext context) { }
        public virtual TReturn VisitVBArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBArgument vBArgumentParam, TContext context) { }
        public virtual TReturn VisitVBArgumentsOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner vBArgumentsOwnerParam, TContext context) { }
        public virtual TReturn VisitVBBinaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression vBBinaryExpressionParam, TContext context) { }
        public virtual TReturn VisitVBDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration vBDeclarationParam, TContext context) { }
        public virtual TReturn VisitVBExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression vBExpressionParam, TContext context) { }
        public virtual TReturn VisitVBFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBFile vBFileParam, TContext context) { }
        public virtual TReturn VisitVBFunctionDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration vBFunctionDeclarationParam, TContext context) { }
        public virtual TReturn VisitVBIdentifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier vBIdentifierParam, TContext context) { }
        public virtual TReturn VisitVBLiteralExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBLiteralExpression vBLiteralExpressionParam, TContext context) { }
        public virtual TReturn VisitVBLocalVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBLocalVariableDeclaration vBLocalVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitVBModifiersOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration vBModifiersOwnerDeclarationParam, TContext context) { }
        public virtual TReturn VisitVBNamespaceDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration vBNamespaceDeclarationParam, TContext context) { }
        public virtual TReturn VisitVBParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBParameterDeclaration vBParameterDeclarationParam, TContext context) { }
        public virtual TReturn VisitVBParametersOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration vBParametersOwnerDeclarationParam, TContext context) { }
        public virtual TReturn VisitVBStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBStatement vBStatementParam, TContext context) { }
        public virtual TReturn VisitVBTypeAndNamespaceHolderDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBTypeAndNamespaceHolderDeclaration vBTypeAndNamespaceHolderDeclarationParam, TContext context) { }
        public virtual TReturn VisitVBTypeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration vBTypeDeclarationParam, TContext context) { }
        public virtual TReturn VisitVBTypeMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration vBTypeMemberDeclarationParam, TContext context) { }
        public virtual TReturn VisitVBUnaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBUnaryExpression vBUnaryExpressionParam, TContext context) { }
        public virtual TReturn VisitVBXmlAttribute([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlAttribute vBXmlAttributeParam, TContext context) { }
        public virtual TReturn VisitVBXmlCDataSection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlCDataSection vBXmlCDataSectionParam, TContext context) { }
        public virtual TReturn VisitVBXmlComment([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlComment vBXmlCommentParam, TContext context) { }
        public virtual TReturn VisitVBXmlDocument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlDocument vBXmlDocumentParam, TContext context) { }
        public virtual TReturn VisitVBXmlElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement vBXmlElementParam, TContext context) { }
        public virtual TReturn VisitVBXmlElementFooter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementFooter vBXmlElementFooterParam, TContext context) { }
        public virtual TReturn VisitVBXmlElementHeader([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementHeader vBXmlElementHeaderParam, TContext context) { }
        public virtual TReturn VisitVBXmlEmbeddedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression vBXmlEmbeddedExpressionParam, TContext context) { }
        public virtual TReturn VisitVBXmlLiteralExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlLiteralExpression vBXmlLiteralExpressionParam, TContext context) { }
        public virtual TReturn VisitVBXmlMemberAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlMemberAccessExpression vBXmlMemberAccessExpressionParam, TContext context) { }
        public virtual TReturn VisitVBXmlMisc([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlMisc vBXmlMiscParam, TContext context) { }
        public virtual TReturn VisitVBXmlProcessingInstruction([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBXmlProcessingInstruction vBXmlProcessingInstructionParam, TContext context) { }
        public virtual TReturn VisitWhereQueryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IWhereQueryOperator whereQueryOperatorParam, TContext context) { }
        public virtual TReturn VisitWhileStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IWhileStatement whileStatementParam, TContext context) { }
        public virtual TReturn VisitWhileUntilCondition([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IWhileUntilCondition whileUntilConditionParam, TContext context) { }
        public virtual TReturn VisitWithStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IWithStatement withStatementParam, TContext context) { }
        public virtual TReturn VisitYieldStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IYieldStatement yieldStatementParam, TContext context) { }
    }
    public class static TryStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITryStatement GetByCatchStatement(JetBrains.ReSharper.Psi.VB.Tree.ICatchStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITryStatement GetByFinallyStatement(JetBrains.ReSharper.Psi.VB.Tree.IFinallyStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITryStatement GetByTryBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
    }
    public class static TypeArgumentListNavigator
    {
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeArgumentList GetByTypeArgument(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage typeUsage) { }
    }
    public class static TypeImplementsClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeImplementsClause GetByImplementsType(JetBrains.ReSharper.Psi.VB.Tree.IDeclaredTypeUsage param) { }
    }
    public class static TypeMemberOwnerDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeMemberOwnerDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static TypeOfIsExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeOfIsExpression GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeOfIsExpression GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static TypeParameterConstraintListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList GetByConstraint(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint param) { }
    }
    public class static TypeParameterConstraintNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static TypeParameterDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterDeclaration GetByConstraint(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterDeclaration GetByConstraintList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static TypeParameterOfMethodDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration GetByConstraint(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration GetByConstraintList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static TypeParameterOfMethodListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodList GetByTypeParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfMethodDeclaration param) { }
    }
    public class static TypeParameterOfTypeDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration GetByConstraint(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration GetByConstraintList(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static TypeParameterOfTypeListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeList GetByTypeParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration param) { }
    }
    public class static TypeUsageNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage GetByArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage GetByTypeName(JetBrains.ReSharper.Psi.VB.Tree.IReferenceName param) { }
    }
    public class static UnaryNegationExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IUnaryNegationExpression GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static UnknownPreprocessorDirectiveNavigator { }
    public class static UsingStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IUsingStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IUsingStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IUsingStatement GetByVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IUsingVariableDeclaration param) { }
    }
    public class static UsingVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IUsingVariableDeclaration GetByArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IUsingVariableDeclaration GetByCreationExpression(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IUsingVariableDeclaration GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IUsingVariableDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IUsingVariableDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static VariableDeclarationListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclarationList GetByCreationExpression(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclarationList GetByDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclarationList GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclarationList GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static VariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration GetByArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration> GetByCreationExpression(JetBrains.ReSharper.Psi.VB.Tree.IObjectCreationExpression param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration> GetByInitializer(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration> GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static VBArgumentNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBArgument GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
    }
    public class static VBArgumentsOwnerExtentions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner GetArgumentsOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner GetOrCreateArgumentOwner([JetBrains.Annotations.NotNullAttribute()] ref JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
    }
    public class static VBArgumentsOwnerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner GetByArgument(JetBrains.ReSharper.Psi.VB.Tree.IVBArgument param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner GetByArgumentList(JetBrains.ReSharper.Psi.VB.Tree.IArgumentList param) { }
    }
    public class static VBBinaryExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression GetByLeftExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression GetByLeftOperand(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression leftOperand) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression GetByRightExpr(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBBinaryExpression GetByRightOperand(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression rightOperand) { }
    }
    public abstract class VBCompositeNodeType : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType
    {
        protected VBCompositeNodeType(string s, int index) { }
    }
    public class static VBDeclarationNavigator { }
    public class static VBExpressionExtensions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredElement GetInitializedDeclaredElement(this JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public static string GetProjectedIdentifierName(this JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public static bool ProvidesProjectedName(this JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public static TExpression TransformProjectedNameToExplicit<TExpression>(this TExpression expression)
            where TExpression : JetBrains.ReSharper.Psi.VB.Tree.IVBExpression { }
        public static TExpression TransformProjectedNameToImplicit<TExpression>(this TExpression expression)
            where TExpression : JetBrains.ReSharper.Psi.VB.Tree.IVBExpression { }
    }
    public class static VBExpressionNavigator { }
    public class static VBFileExtensions
    {
        public static bool IsExplicitOff(this JetBrains.ReSharper.Psi.VB.Tree.IVBFile file) { }
        public static bool IsInferOff(this JetBrains.ReSharper.Psi.VB.Tree.IVBFile file) { }
        public static bool IsStrictOff(this JetBrains.ReSharper.Psi.VB.Tree.IVBFile file) { }
    }
    public class static VBFileNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFile GetByGlobalAttributes(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFile GetByImport(JetBrains.ReSharper.Psi.VB.Tree.IImportClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFile GetByImportsSection(JetBrains.ReSharper.Psi.VB.Tree.IImportDirectivesSection param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFile GetByNamespaceDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFile GetByOption(JetBrains.ReSharper.Psi.VB.Tree.IOptionStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFile GetByOptionsSection(JetBrains.ReSharper.Psi.VB.Tree.IOptionStatementsSection param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFile GetByTypeDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration param) { }
    }
    public enum VBFileOption
    {
        On = 0,
        Off = 1,
    }
    public class static VBFunctionDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBFunctionDeclaration GetByParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
    }
    public class static VBIdentifierNavigator { }
    public class static VBLiteralExpressionNavigator { }
    public class static VBLocalVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBLocalVariableDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBLocalVariableDeclaration> GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static VBModifiersOwnerDeclarationNavigator
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBModifiersOwnerDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
    }
    public class static VBNamespaceDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration GetByNamespaceDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration GetByQualifiedNamespaceName(JetBrains.ReSharper.Psi.VB.Tree.IQualifiedNamespaceName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration GetByTypeDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration param) { }
    }
    public class static VBParameterDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBParameterDeclaration GetByArrayModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IArrayModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBParameterDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBParameterDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.VB.Tree.ITypeUsage param) { }
    }
    public class static VBParametersOwnerDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBParametersOwnerDeclaration GetByParameterList(JetBrains.ReSharper.Psi.VB.Tree.IRegularParameterList param) { }
    }
    public class static VBStatementExtensions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBStatement GetNextStatementInBlock(this JetBrains.ReSharper.Psi.VB.Tree.IVBStatement statement) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBStatement GetPreviousStatementInBlock(this JetBrains.ReSharper.Psi.VB.Tree.IVBStatement statement) { }
        public static bool TryRemove(this JetBrains.ReSharper.Psi.VB.Tree.IVBStatement statement) { }
    }
    public class static VBStatementNavigator { }
    public class static VBTypeAndNamespaceHolderDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBTypeAndNamespaceHolderDeclaration GetByNamespaceDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVBNamespaceDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBTypeAndNamespaceHolderDeclaration GetByTypeDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration param) { }
    }
    public class static VBTypeDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration GetByAttributeList(JetBrains.ReSharper.Psi.VB.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.VB.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBTypeDeclaration GetByName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
    }
    public class static VBTypeMemberDeclarationNavigator
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IAttribute param) { }
    }
    public class static VBUnaryExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBUnaryExpression GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBUnaryExpression GetByOperand(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression operand) { }
    }
    public class static VBXmlAttributeNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlAttribute GetByEmbeddedAttribute(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression param) { }
    }
    public class static VBXmlCDataSectionNavigator { }
    public class static VBXmlCommentNavigator { }
    public class static VBXmlDocumentNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlDocument GetByXmlDocumentElement(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlDocument GetByXmlDocumentExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression param) { }
    }
    public class static VBXmlElementFooterNavigator { }
    public class static VBXmlElementHeaderNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementHeader GetByAttribute(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementHeader GetByEmbeddedExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression param) { }
    }
    public class static VBXmlElementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement GetByElementFooter(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementFooter param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement GetByElementHeader(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElementHeader param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement GetByEmbeddedExpressio(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement GetByNestedElement(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlElement param) { }
    }
    public class static VBXmlEmbeddedExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlEmbeddedExpression GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static VBXmlLiteralExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlLiteralExpression GetByXmlCData(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlCDataSection param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlLiteralExpression GetByXmlDocument(JetBrains.ReSharper.Psi.VB.Tree.IVBXmlDocument param) { }
    }
    public class static VBXmlMemberAccessExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlMemberAccessExpression GetByAttributeName(JetBrains.ReSharper.Psi.VB.Tree.IVBIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBXmlMemberAccessExpression GetByBaseExpression(JetBrains.ReSharper.Psi.VB.Tree.IPrimaryExpression param) { }
    }
    public class static VBXmlMiscNavigator { }
    public class static VBXmlProcessingInstructionNavigator { }
    public class static WhereQueryOperatorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IWhereQueryOperator GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IQueryParameterPlatform param) { }
    }
    public class static WhileStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IWhileStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IWhileStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static WhileUntilConditionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IWhileUntilCondition GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static WithStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IWithStatement GetByBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IWithStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
    public class static YieldStatementExt
    {
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBDeclaration GetContainingIteratorDeclaration(this JetBrains.ReSharper.Psi.VB.Tree.IYieldStatement yieldStatement) { }
        public static JetBrains.ReSharper.Psi.IType GetIteratorFunctionElementType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.VB.Tree.IYieldStatement yieldStatement) { }
        public static JetBrains.ReSharper.Psi.IType GetIteratorFunctionReturnType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.VB.Tree.IYieldStatement yieldStatement) { }
    }
    public class static YieldStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IYieldStatement GetByExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression param) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Types
{
    
    public interface IVBAnonymousType : JetBrains.ReSharper.Psi.IAnonymousType, JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Impl.DeclaredElements.IVBAnonymousTypeProperty> Properties { get; }
    }
    public interface IVBConstantType : JetBrains.ReSharper.Psi.IExpressionType
    {
        JetBrains.ReSharper.Psi.ConstantValue GetConstantValue();
        JetBrains.ReSharper.Psi.IType GetDefaultType();
        bool IsPureZeroType();
    }
    public interface IVBFunctionType : JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType
    {
        System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ParameterKind>> ParameterTypesAndKinds { get; }
        JetBrains.ReSharper.Psi.IType ReturnType { get; }
        JetBrains.ReSharper.Psi.IDelegate TypeElement { get; }
    }
    public interface IVBInvocationType : JetBrains.ReSharper.Psi.IExpressionType
    {
        JetBrains.ReSharper.Psi.VB.Types.IVBMethodGroupType CreateMethodGroupType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, System.Version languageVersion);
    }
    public interface IVBLambdaExpressionType : JetBrains.ReSharper.Psi.IExpressionType
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IType DeclaredReturnType { get; }
        bool IsAsync { get; }
        bool IsIterator { get; }
        JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode VerificationScope { get; }
        JetBrains.ReSharper.Psi.IType CreateFunctionType();
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.ILambdaParameter> GetImplicitLambdaParameters();
        System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ParameterKind>> GetParameterTypesAndKinds();
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> GetReturnValues();
        bool HasImplicitLambdaParameters();
    }
    public interface IVBMethodGroupType : JetBrains.ReSharper.Psi.IExpressionType
    {
        JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> ResolveWithDelegate(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution delegateSubstitution);
        JetBrains.ReSharper.Psi.IType ReturnTypeWithDelegate(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution delegateSubstitution);
    }
    public interface IVBNothingType : JetBrains.ReSharper.Psi.IExpressionType { }
    public interface IVBTypeConversionRule : JetBrains.ReSharper.Psi.ITypeConversionRule
    {
        bool IsStrictOff();
        JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRuleWithPolicy RuleWithPolicy();
    }
    public interface IVBTypeConversionRuleWithPolicy : JetBrains.ReSharper.Psi.ITypeConversionRule, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule
    {
        bool IsNotLateBoundUsed { get; }
        bool IsOnlyLateBoundUsed { get; }
        bool IsStrictOffConversionUsed { get; }
    }
    public class static VBLambdaExpressionTypeUtil
    {
        public static JetBrains.ReSharper.Psi.IExpressionType InferredResultType(this JetBrains.ReSharper.Psi.VB.Types.IVBLambdaExpressionType lambdaExpressionType, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public static JetBrains.ReSharper.Psi.IExpressionType ReturnType(this JetBrains.ReSharper.Psi.VB.Types.IVBLambdaExpressionType lambdaExpressionType, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
    }
    public class static VBTypeConversionRule
    {
        public static JetBrains.ReSharper.Psi.IExpressionType CreateConstantType(this JetBrains.ReSharper.Psi.ConstantValue constantValue) { }
        public static void Fail(JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule, JetBrains.ReSharper.Psi.IType fromType) { }
        public static JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule GetInstance(bool strictOff) { }
        public static JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule GetTypeConversionRule(this JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType ToITypeWithNothing(this JetBrains.ReSharper.Psi.IExpressionType expressionType, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
    }
}
namespace JetBrains.ReSharper.Psi.VB.Util
{
    
    public class ArgumentsOwnerInvocationClrWrapper : JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper
    {
        protected System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> myArguments;
        public ArgumentsOwnerInvocationClrWrapper(JetBrains.ReSharper.Psi.VB.Tree.IVBArgumentsOwner invocationExpression) { }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> Arguments { get; }
        public JetBrains.ReSharper.Psi.Tree.IArgumentsOwner ArgumentsOwner { get; }
        public JetBrains.ReSharper.Psi.IFunction InvokedFunction { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IFunction> InvokedFunctionCandidates { get; }
        public void AddArgument(JetBrains.ReSharper.Psi.Tree.IExpression newArgumentExpression, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public virtual void ChangeInvokedMethod(JetBrains.ReSharper.Psi.IMethod newFunction) { }
        public virtual void RemoveArgumentAt(int argumentToDeleteIndex) { }
        public void SetArgumentAt(int currentItemIndex, JetBrains.ReSharper.Psi.Tree.IExpression argumentExpression, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    public class static BlockUtil
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IBlock> AllBlocks(this JetBrains.ReSharper.Psi.VB.Tree.IBlockIfStatement ifStatement) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IBlock> AllBlocks(this JetBrains.ReSharper.Psi.VB.Tree.ISelectStatement selStatement) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Tree.IBlock> AllBlocks(this JetBrains.ReSharper.Psi.VB.Tree.ITryStatement tryStatement) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IBlock GetFirstBlock(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement statement) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IBlock GetNextBlock(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement statement) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IBlock GetPreviousBlock(JetBrains.ReSharper.Psi.VB.Tree.IVBStatement statement) { }
    }
    public class static ConditionalExpressionUtil
    {
        public static JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.VB.Util.ConditionalExpressionUtil.TypeErrors> GetNullCoalescingDominantType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IExpressionType leftExpressionType, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IExpressionType rightExpressionType, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public static JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.VB.Util.ConditionalExpressionUtil.TypeErrors> GetTernaryDominantType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IExpressionType thenExpressionType, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IExpressionType elseExpressionType, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public enum TypeErrors
        {
            OK = 0,
            BOTH_CONVERTIONS_EXIST = 1,
            NO_CONVERSION_EXIST = 2,
        }
    }
    public class static ConstraintsUtil
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint> AddClassConstraint(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public static void AddConstraint(this JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterOfTypeDeclaration typeParameter, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint constraintToAdd) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint> AddConstructorConstraint(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint> AddValueConstraint(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public static void RemoveConstraint(JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraintList constraintList, JetBrains.ReSharper.Psi.VB.Tree.ITypeParameterConstraint constraint) { }
    }
    public class FunctionInvocationClrWrapper : JetBrains.ReSharper.Psi.VB.Util.ArgumentsOwnerInvocationClrWrapper
    {
        public FunctionInvocationClrWrapper(JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression invocationExpression) { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> Arguments { get; }
        public override void ChangeInvokedMethod(JetBrains.ReSharper.Psi.IMethod newFunction) { }
        public override void RemoveArgumentAt(int argumentToDeleteIndex) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class FunctionInvocationProvider : JetBrains.ReSharper.Psi.Util.IFunctionInvocationProvider
    {
        public bool ExpressionCanBeReplacedByMethodInvocation(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper GetFunctionInvocationByArgument(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper GetFunctionInvocationByArgumentsOwner(JetBrains.ReSharper.Psi.Tree.IArgumentsOwner argumentsOwner) { }
        public JetBrains.ReSharper.Psi.Tree.IExpression GetNarrowestContainingArgumentExpression(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public bool IsArgumentOfFormatingFunction(JetBrains.ReSharper.Psi.Tree.IExpression argumentExpression) { }
        public bool IsArgumentOfMethodThatHasSimilarFormattingMethod(JetBrains.ReSharper.Psi.Tree.IExpression argumentExpression, out JetBrains.ReSharper.Psi.IMethod properFormattingMethod) { }
        public JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper SurroundWithStaticMethodInvocation(JetBrains.ReSharper.Psi.IFunction method, JetBrains.ReSharper.Psi.Tree.IExpression surroundedExpression, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    public interface IDomainSpecificWithEventsFieldRecongnizer
    {
        bool IsWithEvents(JetBrains.ReSharper.Psi.IField field);
    }
    public class static IndexExpressionUtil
    {
        public static JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IMethod> GetInvokedMethod(JetBrains.ReSharper.Psi.VB.Tree.IIndexExpression expression) { }
    }
    public class static MemberInitializerUtil
    {
        public static JetBrains.ReSharper.Psi.VB.Util.MemberInitializerUtil.InitializerErrorType AnalyseDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext) { }
        public enum InitializerErrorType
        {
            Ok = 0,
            FieldIsReadonly = 1,
            FieldIsStatic = 2,
            PropertyWithParameters = 3,
            PropertyIsReadonly = 4,
            PropertyIsStatic = 5,
            PropertyShouldBeWritable = 6,
            ShouldBeFieldOrProperty = 7,
        }
    }
    public class ReturnTypeCollector : JetBrains.ReSharper.Psi.VB.Tree.TreeNodeVisitor, JetBrains.ReSharper.Psi.IRecursiveElementProcessor
    {
        public ReturnTypeCollector(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public ReturnTypeCollector(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> CollectedTypes { get; }
        public bool ProcessingIsFinished { get; }
        public bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessAfterInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessBeforeInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public override void VisitReturnStatement(JetBrains.ReSharper.Psi.VB.Tree.IReturnStatement returnStatementParam) { }
    }
    public class static StatementUtil
    {
        public static JetBrains.ReSharper.Psi.VB.Tree.IBlockIfStatement ConvertToBlock(JetBrains.ReSharper.Psi.VB.Tree.ILineIfStatement lineIfStatement) { }
        public static T InsertStatement<T, U>(T statement, ref U anchor, bool before)
            where T :  class, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement
            where U :  class, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement { }
        public static T InsertStatement<T>(T statement, JetBrains.ReSharper.Psi.VB.Tree.IVBStatementsRange anchor, bool before)
            where T :  class, JetBrains.ReSharper.Psi.VB.Tree.IVBStatement { }
        public static bool IsMethodBlock(JetBrains.ReSharper.Psi.VB.Tree.IBlock block) { }
    }
    public class static StringLiteralCharacterUtil
    {
        public static string ConvertPresentationToValue(string presentation) { }
        public static string ConvertValueToPresentation(string value) { }
        public static string ConvertValueToPresentationSequence(char value) { }
        public static string ConvertValueToRegularPresentation(string value) { }
        public static string ConvertValueToVerbatimPresentation(string value) { }
        public static bool TryConvertRegularPresentationToValue(string charPresentation, out string result) { }
        public static bool TryConvertVerbatimPresentationToValue(string presentation, out string result) { }
    }
    public class static StringLiteralUtil
    {
        public static string ConvertValueToPresentation(string value) { }
        public static int GetCharPresentationLength(string presentation, int firstCharInPresentationIndex) { }
    }
    public class static TryCastUtil
    {
        public static System.Nullable<bool> IsValidTryCast(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression, JetBrains.ReSharper.Psi.IType targetType) { }
    }
    public class VBCharPresentation
    {
        public VBCharPresentation(string presentation, JetBrains.Util.TextRange rangeInPresentation) { }
        public string Presentation { get; }
        public JetBrains.Util.TextRange RangeInPresentation { get; }
    }
    public class VBCollectionTypeUtil : JetBrains.ReSharper.Psi.Util.CollectionTypeUtil
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType ElementTypeByCollectionType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IProperty> GetCurrentProperty(JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> getEnumerator, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> GetEnumeratorMethod([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> GetMoveNextMethod(JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> getEnumerator, JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode context) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBConcatenationWrapperProvider : JetBrains.ReSharper.Psi.Util.IStringConcatenationWrapperProvider
    {
        public JetBrains.ReSharper.Psi.Util.IStringConcatenationClrWrapper CreateStringConcatenation(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public JetBrains.ReSharper.Psi.Util.IStringConcatenationClrWrapper CreateWidestContainingStringConcatenation(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
    }
    public class static VBDeclaredElementUtil
    {
        public static bool CompareDeclaredElements(this JetBrains.ReSharper.Psi.IDeclaredElement e1, JetBrains.ReSharper.Psi.IDeclaredElement e2) { }
        public static JetBrains.ReSharper.Psi.IDeclaredElement EliminateDelegateInvokeMethod(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static JetBrains.ReSharper.Psi.VB.Util.VBSpecificDeclaredElementType GetVBSpecificElementType(this JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsAsyncMethod(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsAutoPropertyBackingField(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsClass(this JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public static bool IsFunction([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public static bool IsFunctionDelegate([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public static bool IsLValue(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsModule([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public static bool IsProperty(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsSub([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public static bool IsSubDelegate([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public static bool IsValue(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public static bool IsWithEvents(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool OperatorIsLiftable(JetBrains.ReSharper.Psi.IOperator @operator, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class static VBDefaultValueExt
    {
        public static bool CompareTo(this JetBrains.ReSharper.Psi.DefaultValue value, JetBrains.ReSharper.Psi.DefaultValue otherValue) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CreateExpressionByDefaultValueSmart([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.VB.VBElementFactory factory, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.DefaultValue value, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        public static JetBrains.ReSharper.Psi.DefaultValue GetDefaultValue(this JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression, JetBrains.ReSharper.Psi.IType parameterType) { }
        public static JetBrains.ReSharper.Psi.DefaultValue Normalize(this JetBrains.ReSharper.Psi.DefaultValue value) { }
    }
    public class VBEnumUtil
    {
        public static System.Collections.Generic.List<JetBrains.ReSharper.Psi.IField> CalculateEnumMembers(JetBrains.ReSharper.Psi.ConstantValue constantValue, JetBrains.ReSharper.Psi.IEnum @enum) { }
    }
    public class static VBExpressionUtil
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CreateLogicallyNegatedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBStatement GetAnchorStatementVisibleFromAll(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> expressions) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBExpression GetContainingParenthesizedExpression(this JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBExpression GetLargestContainingExpression(this JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBExpression GetOperandThroughParenthesis(this JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public static JetBrains.ReSharper.Psi.IExpressionType GetRuntimeExpressionType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange GetStringLiteralContentTreeRange([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.VB.Tree.IVBLiteralExpression literalExpression) { }
        public static bool IsCondition([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public static bool IsCondition(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
    }
    public class static VBImplicitLineContinuationUtil
    {
        public static bool CanUseImplicitLineContinuationBetween([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode left, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode right) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBLanguageFeatures : JetBrains.ReSharper.Psi.Util.ILanguageFeatures
    {
        public bool AutoPropertiesAreSupported(JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    public class static VBMainMethodUtil
    {
        public static bool CanBeMainMethod(JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration declaration) { }
    }
    public class static VBMultipleDeclarationUtil
    {
        public static JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration CreateCopyInternal(JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration declaration, JetBrains.ReSharper.Psi.Impl.TreeNodeCopyContext context) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration CreateCopyInternal(JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration declaration, JetBrains.ReSharper.Psi.Impl.TreeNodeCopyContext context) { }
        public static void DeleteConstantDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration declaration) { }
        public static void DeleteLocalDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration declaration) { }
        public static void DeleteVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration declaration) { }
        public static void ExtractConstantDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration declaration) { }
        public static void ExtractVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration declaration) { }
        public static void ExtractVariableDeclaration(JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration declaration) { }
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode GetNextComma(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode GetPrevComma(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static void SplitDeclarationAfter(JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration declaration) { }
        public static void SplitDeclarationAfter(JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration declaration) { }
        public static void SplitDeclarationAfter(JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration declaration) { }
        public static void SplitDeclarationBefore(JetBrains.ReSharper.Psi.VB.Tree.IVariableDeclaration declaration) { }
        public static void SplitDeclarationBefore(JetBrains.ReSharper.Psi.VB.Tree.IConstantDeclaration declaration) { }
        public static void SplitDeclarationBefore(JetBrains.ReSharper.Psi.VB.Tree.ILocalVariableDeclaration declaration) { }
    }
    public class static VBOptionsUtil
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.INamespace DefaultNamespace(this JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode element) { }
        public static bool IsExplicitOff(JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode element) { }
        public static bool IsInferOff(JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode element) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.INamespace> PreImportedDirectives(this JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode element) { }
        public static bool StrictOff(this JetBrains.ReSharper.Psi.VB.Tree.IVBTreeNode element) { }
    }
    public class VBOverridesUtil : JetBrains.ReSharper.Psi.Util.OverridesUtil
    {
        public static JetBrains.ReSharper.Psi.Tree.ITreeNode[] AddCallToBase(JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration declaration, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Util.OverridesUtil.ReferenceAnchor, JetBrains.ReSharper.Psi.Resolve.IReference> BuildReferenceMap(JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration classMemberDeclaration) { }
        public static void CallGenericVersion(JetBrains.ReSharper.Psi.VB.Tree.IMethodDeclaration getEnumeratorDeclaration, JetBrains.ReSharper.Psi.OverridableMemberInstance genericMethodInstance) { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBTypeMemberDeclaration OverridableMemberDeclaration(JetBrains.ReSharper.Psi.IOverridableMember member, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, JetBrains.ReSharper.Psi.ITypeElement inheritor, bool addImplements, bool makeAbstract, JetBrains.ReSharper.Psi.Modules.IPsiModule project) { }
    }
    public enum VBSpecificDeclaredElementType
    {
        Class = 0,
        Struct = 1,
        Interface = 2,
        Module = 3,
        Enum = 4,
        SubDelegate = 5,
        FuncDelegate = 6,
        Constructor = 7,
        Func = 8,
        Sub = 9,
        Property = 10,
        Accessor = 11,
        Event = 12,
        SignOperator = 13,
        ConversionOperator = 14,
        Field = 15,
        Constant = 16,
        EnumMember = 17,
        Parameter = 18,
        TypeParameter = 19,
        Label = 20,
        LocalVariable = 21,
        LocalConstant = 22,
        QueryVariable = 23,
        AnonymousMethod = 24,
        AnonymousTypeProperty = 25,
    }
    public class VBStringConcatenationClrWrapper : JetBrains.ReSharper.Psi.Util.IStringConcatenationClrWrapper
    {
        public VBStringConcatenationClrWrapper(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression expression) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> Arguments { get; }
        public JetBrains.ReSharper.Psi.Tree.IExpression Expression { get; }
        protected JetBrains.ReSharper.Psi.VB.Tree.IVBExpression CombineArgumentListToConcatenationExpression(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.VB.Tree.IVBExpression> argumentsChain, JetBrains.ReSharper.Psi.VB.VBElementFactory elementFactory) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IExpression> GetConcatenationArgumentsThatContainValueRange(JetBrains.Util.TextRange range) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> GetConcatenationArgumentsThatContainValueRange(JetBrains.Util.TextRange range, out System.Collections.Generic.IList<> appropriateValueRanges, bool includeNonLiterals) { }
        public System.Collections.Generic.IEnumerable<string> GetWidestConstantValues() { }
        public static JetBrains.ReSharper.Psi.VB.Tree.IVBExpression GetWidestStringConcatenationExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBExpression vbExpression) { }
        public void InsertAtValueIndex(int index, string newValue, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public void RemoveAtValueRange(JetBrains.Util.TextRange range, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public void ReplaceAtValueRange(JetBrains.Util.TextRange range, string newValue, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public void ReplaceInAllLiterals(string oldValue, string newValue, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public void SetArgumentAt(int index, JetBrains.ReSharper.Psi.Tree.IExpression argument, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public void TryMergeArgumentWithNext(int index, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    public class VBStringConcatenationUtil
    {
        public static bool IsConcatenationOperatorExpression(JetBrains.ReSharper.Psi.VB.Tree.IConcatenationExpression concatenationExpression) { }
    }
    public class VBStringLiteralAlterer : JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer
    {
        public JetBrains.ReSharper.Psi.Tree.ILiteralExpression Expression { get; }
        public JetBrains.DocumentModel.DocumentRange LeftQuoteRange { get; }
        public JetBrains.ReSharper.Psi.VB.Tree.IVBLiteralExpression LiteralExpression { get; }
        public JetBrains.ReSharper.Psi.TreeTextRange UnderQuotesRange { get; }
        public string Value { get; }
        public static JetBrains.ReSharper.Psi.VB.Util.VBStringLiteralAlterer Concat(JetBrains.ReSharper.Psi.VB.Util.VBStringLiteralAlterer left, JetBrains.ReSharper.Psi.VB.Util.VBStringLiteralAlterer right, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Util.VBStringLiteralAlterer CreateByLiteralExpression(JetBrains.ReSharper.Psi.VB.Tree.IVBLiteralExpression literalExpression) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Util.VBStringLiteralAlterer CreateByValue([JetBrains.Annotations.NotNullAttribute()] string value, JetBrains.ReSharper.Psi.VB.VBElementFactory elementFactory) { }
        public void Insert(int index, string valueToInsert, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public int PresentationOffsetToValueOffset(int offset) { }
        public void Remove(JetBrains.Util.TextRange range, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public void Replace(string oldValue, string newValue, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public int TreeOffsetToValueOffset(JetBrains.ReSharper.Psi.TreeOffset treeOffset) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.VB.Util.VBStringLiteralAlterer TryCreateByLiteralExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.VB.Tree.IVBLiteralExpression literalExpression) { }
        public JetBrains.DocumentModel.DocumentRange ValueTextRangeToPresentationDocumentRange(JetBrains.Util.TextRange range) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBStringLiteralAltererProvider : JetBrains.ReSharper.Psi.Util.IStringLiteralAltererProvider
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer CreateStringLiteralByExpression(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer CreateStringLiteralByValue(string value, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer TryCreateStringLiteralByExpression(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
    }
    public class static VBTypeUtil
    {
        public static bool CanUseExplicitly(this JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        public static JetBrains.ReSharper.Psi.IType DominantType(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> types, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public static JetBrains.ReSharper.Psi.IType DominantType(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IExpressionType> expressionTypes, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> DominantTypes(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> types, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> DominantTypes(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IExpressionType> expressionTypes, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
        public static JetBrains.ReSharper.Psi.IType DominantTypeWithoutLambdas(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IExpressionType> expressionTypes, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule conversionRule) { }
        public static JetBrains.ReSharper.Psi.IType GetReturnExpressionTypeByFunctionReturnType(JetBrains.ReSharper.Psi.IType type, bool isAsyncFunction, bool isIterator) { }
        public static JetBrains.ReSharper.Psi.IType[] GetTypes(JetBrains.ReSharper.Psi.IExpressionType[] operands) { }
        public static JetBrains.ReSharper.Psi.IType MostEncompassedType(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> types, JetBrains.ReSharper.Psi.VB.Types.IVBTypeConversionRule rule) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.VB.VBLanguage))]
    public class VBTypeUtilLanguageService : JetBrains.ReSharper.Psi.Util.ITypeUtilLanguageService
    {
        public bool CanUseExplicitly(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
    }
}