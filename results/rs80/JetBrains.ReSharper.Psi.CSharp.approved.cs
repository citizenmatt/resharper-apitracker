[assembly: JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute(IconNames=new string[] {
        "CSharpDestructor",
        "CSharpExtension",
        "Csharp",
        "CSharpIndexer"}, IconPackResourceIdentification="JetBrains.ReSharper.Psi.CSharp;component/Resources/PsiCSharpThemedIcons/ThemedIco" +
    "ns.PsiCSharp.Generated.Xaml")]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:shemas-jetbrains-com:ui-application-icons-psi-csharp", "JetBrains.ReSharper.Psi.CSharp.Resources")]

namespace JetBrains.ReSharper.Psi.ControlFlow.CSharp
{
    
    public enum ConstantExpressionValue
    {
        TRUE = 0,
        FALSE = 1,
        NULL = 2,
    }
    public class static CSharpControlFlowBuilder
    {
        public static JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf Build(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration declaration) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf Build(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodExpression expression, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, bool buildExpressions = True) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf Build(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf Build(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousFunctionExpression expression, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, bool buildExpression = True) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf Build(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousFunctionExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf Build(JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaExpression expression, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, bool buildExpression = True) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf Build(JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf Build([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform platform, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf Build([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform platform) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf GetGraf(JetBrains.ReSharper.Psi.Tree.ITreeNode initialPoint) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf GraphFromNode(JetBrains.ReSharper.Psi.Tree.ITreeNode owner) { }
    }
    public enum CSharpControlFlowErrorType
    {
        MISSING_BREAK_IN_SWITCH = 0,
        JUMP_FROM_FINALLY = 1,
        UNRESOLVED_JUMP = 2,
    }
    public class static CSharpControlFlowGrafExtensions
    {
        public static JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowAnalysisResult Inspect(this JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf graf, JetBrains.ReSharper.Psi.ControlFlow.ValueAnalysisMode valueAnalysis) { }
    }
    [System.FlagsAttribute()]
    public enum CSharpControlFlowNullReferenceState
    {
        UNKNOWN = 0,
        NOT_NULL = 1,
        NULL = 2,
        MAY_BE_NULL = 3,
    }
    public class CSharpExitFromFinallyRibInfo
    {
        public JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowRib PassThroughFinally { get; }
    }
    public class CSharpPassThroughFinallyRibInfo
    {
        public JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowRib ExitFromFinallyRib { get; }
        public JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement ExitMultiplexor { get; }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ITryStatement TryStatement { get; }
    }
    public class CumulativeCSharpControlFlowAnalysisResult : JetBrains.Util.dataStructures.ConcurrentDictionary<JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowAnalysisResult> { }
    public interface ICSharpControlFlowAnalysisResult : JetBrains.ReSharper.Psi.ControlFlow.Impl.IControlFlowAnalysisResult
    {
        System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.Tree.ITreeNode> AssignNullToNotNullEntity { get; }
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.ControlFlow.CSharp.ConstantExpressionValue> ConstantConditionExpressions { get; }
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.CSharp.Tree.INullCoalescingExpression, JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpControlFlowNullReferenceState> ConstantConditionNullCoalescingExpression { get; }
        bool HasComplexityOverflow { get; }
        bool HasRecursionOnAllReachableExits { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IIsExpression> HeuristicTrueIsExpressions { get; }
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement> HeuristicUnreachableCode { get; }
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAssignmentExpression> MeaninglessAssignments { get; }
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.CSharp.Tree.INullCoalescingExpression> NullCoalescingOperatorRightOperandIsAlwaysNull { get; }
        System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> PossibleInvalidCastExpressions { get; }
        JetBrains.Util.OneToSetMap<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.Tree.ITreeNode>, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> PossibleMultipleEnumeration { get; }
        System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> PossibleNullReferenceAccess { get; }
        JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpControlFlowNullReferenceState SuggestReturnValueAnnotationAttribute { get; }
        void CalculateKnownSubtypes(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression expression, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> consumer);
        JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpControlFlowNullReferenceState GetExpressionNullReferenceState(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression expression, bool includeWeakNotNull);
        JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpControlFlowNullReferenceState GetVariableStateAt(JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement position, JetBrains.ReSharper.Psi.IDeclaredElement variable);
        bool IsAssignedTypeCouldBePureEnumerable(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Tree.ITreeNode assignment);
        bool IsLambdaKnownToBeExecutedLocally(JetBrains.ReSharper.Psi.Tree.ITreeNode lambda);
    }
    public interface ICSharpControlFlowElement : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement
    {
        bool ExecutesCode { get; }
    }
    public interface ICSharpControlFlowError
    {
        JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpControlFlowErrorType ErrorType { get; }
    }
    public interface ICSharpControlFlowGraf : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowGraf
    {
        System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpControlFlowErrorType> ControlFlowErrors { get; }
        bool HasReachableImplicitReturn { get; }
        JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowRib> ReachableExits { get; }
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement> RedundantJumpStatements { get; }
        JetBrains.ProjectModel.ISolution Solution { get; }
        bool IsJumpStatementMandatoryForSwitch(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement statement);
    }
    public interface ICSharpControlFlowRib : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowRib
    {
        System.Nullable<bool> BooleanCondition { get; }
        JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpExitFromFinallyRibInfo ExitFromFinally { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IUsingStatement> ExitFromUsings { get; }
        System.Nullable<bool> NullCoalescingCondition { get; }
        JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpPassThroughFinallyRibInfo PassThroughFinally { get; }
        JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowElement Source { get; }
        JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowElement Target { get; set; }
    }
    public interface ICSharpControlFlowStatement : JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowElement, JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement Statement { get; }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp
{
    
    public class AnonymousMethodType : JetBrains.ReSharper.Psi.CSharp.Types.IAnonymousFunctionType, JetBrains.ReSharper.Psi.CSharp.Types.IAnonymousMethodType, JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.INonCachableExpressionType
    {
        public AnonymousMethodType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodExpression methodExpression) { }
        public bool HasParametersList { get; }
        public bool HasReturnStatements { get; }
        public bool IsAsync { get; }
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ParameterKind>> ParameterTypesAndKinds { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IExpressionType> ReturnValues { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsReturnTypeConvertibleTo(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public bool IsSignatureConvertibleTo(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.IType ToIType() { }
    }
    public class static ArgumentInfoExtension
    {
        public static JetBrains.ReSharper.Psi.IExpressionType GetExpressionType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo cSharpArgumentInfo) { }
        public static JetBrains.ReSharper.Psi.IType GetImplicitlyConvertedTo<T>(this T element)
            where T : JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode { }
    }
    public abstract class CSharpElementFactory
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration CreateAccessorDeclaration(JetBrains.ReSharper.Psi.AccessorKind kind, bool withBody);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration CreateAccessorDeclaration(string format, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration CreateAnonymousFunctionParameterDeclaration(JetBrains.ReSharper.Psi.IType type, string paramName, bool isParamArray, JetBrains.ReSharper.Psi.ParameterKind kind);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration CreateAnonymousMemberDeclaration(string name, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration CreateAnonymousMemberDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument CreateArgument(JetBrains.ReSharper.Psi.ParameterKind kind, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression arg);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument CreateArgument(JetBrains.ReSharper.Psi.ParameterKind kind, string name, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression arg);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression CreateArrayCreationExpression(JetBrains.ReSharper.Psi.IArrayType arrayType, JetBrains.ReSharper.Psi.CSharp.Tree.IArrayInitializer arrayInitializer);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute CreateAttribute(JetBrains.ReSharper.Psi.IAttributeInstance instance);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute CreateAttribute(JetBrains.ReSharper.Psi.ITypeElement attributeClass, JetBrains.ReSharper.Psi.AttributeValue[] fixedArguments, JetBrains.Util.Pair<, >[] namedArguments);
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute CreateAttribute(JetBrains.ReSharper.Psi.ITypeElement attributeClass) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer CreateBaseConstructorInitializer();
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IBlock CreateBlock(string format, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpCommentNode CreateComment([JetBrains.Annotations.NotNullAttribute()] string text);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration CreateConstDeclaration(JetBrains.ReSharper.Psi.IDeclaredType type, string name, string value);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration CreateConstructorDeclaration();
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IObjectInitializer CreateCreationExpressionInitializer();
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage CreateDeclaredTypeUsageNode(string typeName);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage CreateDeclaredTypeUsageNode(JetBrains.ReSharper.Psi.IDeclaredType type);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration CreateDelegateDeclaration();
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration CreateDestructorDeclaration();
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IDocCommentNode CreateDocComment(string text);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode CreateDocCommentBlock(string text);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IBlock CreateEmptyBlock();
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration CreateEnumMemberDeclaration(string enumMemberName);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration CreateEventDeclaration(JetBrains.ReSharper.Psi.IDeclaredType eventType, string name);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpression([System.ComponentModel.LocalizableAttribute(false)] string format, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpressionAsIs(string format, bool applyCodeFormatter);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpressionAsIs(string format);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpressionByConstantValue(JetBrains.ReSharper.Psi.ConstantValue value, bool safeConstantValueExactType);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpressionByConstantValue(JetBrains.ReSharper.Psi.ConstantValue value);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpressionByDefaultValue(JetBrains.ReSharper.Psi.DefaultValue value);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration CreateFieldDeclaration(JetBrains.ReSharper.Psi.IType type, string name);
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile CreateFile(string format, params object[] args) { }
        [JetBrains.Annotations.NotNullAttribute()]
        protected abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile CreateFileImpl(string test, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration CreateIndexerDeclaration(JetBrains.ReSharper.Psi.IType type);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration CreateLambdaFunctionParameterDeclaration(JetBrains.ReSharper.Psi.IType type, string paramName, JetBrains.ReSharper.Psi.ParameterKind kind);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration CreateNamespaceDeclaration(string name);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer CreateObjectCreationExpressionMemberInitializer(string propertyName, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration CreateOverridableMemberDeclaration(JetBrains.ReSharper.Psi.OverridableMemberInstance baseMember);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration CreateParameterDeclaration(JetBrains.ReSharper.Psi.ParameterKind kind, bool isParametric, bool isVarArg, JetBrains.ReSharper.Psi.IType type, string name, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression defaultValue);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration CreatePropertyDeclaration(JetBrains.ReSharper.Psi.IType type, string name);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause CreateQueryClause(string clause, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform CreateQueryPlatform(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression e);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration CreateRangeVariableDeclaration(string name, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IType type);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression CreateReferenceExpression(string expr, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName CreateReferenceName(string name, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.CSharp.Tree.IStartRegion, JetBrains.ReSharper.Psi.CSharp.Tree.IEndRegion> CreateRegionDirective(string name);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement CreateStatement(string format, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer CreateThisConstructorInitializer();
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration CreateTypeMemberDeclaration(string format, params object[] args);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause CreateTypeParameterConstraintsClause(JetBrains.ReSharper.Psi.ITypeParameter typeParameter, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, string parameterName);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration CreateTypeParameterOfMethodDeclaration(string name);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration CreateTypeParameterOfTypeDeclaration(string name);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage CreateTypeUsageNode(string typeName);
        [JetBrains.Annotations.CanBeNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage CreateTypeUsageNode(JetBrains.ReSharper.Psi.IType type);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective CreateUsingDirective(string format, params object[] args);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective CreateUsingDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.INamespace @namespace);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective CreateUsingDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.INamespace @namespace, [JetBrains.Annotations.CanBeNullAttribute()] string externAlias);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer CreateVariableInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IWhitespaceNode[] CreateWhitespaces([JetBrains.Annotations.NotNullAttribute()] string whitespaces);
        public static JetBrains.ReSharper.Psi.CSharp.CSharpElementFactory GetInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode element, bool applyCodeFormatter = True) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.CSharpElementFactory GetInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool applyCodeFormatter = True, bool throwOnParseError = True) { }
    }
    public class static CSharpExtensionMethods
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.CSharpLanguageLevel GetCSharpLanguageLevel([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static System.Version GetCSharpVersion([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static System.Version GetCSharpVersion([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsCSharp3Supported([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsCSharp3Supported([JetBrains.Annotations.NotNullAttribute()] this System.Version version) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsCSharp4Supported([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsCSharp4Supported([JetBrains.Annotations.NotNullAttribute()] this System.Version version) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsCSharp5Supported([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        [JetBrains.Annotations.PureAttribute()]
        public static bool IsCSharp5Supported([JetBrains.Annotations.NotNullAttribute()] this System.Version version) { }
    }
    [JetBrains.ReSharper.Psi.LanguageDefinitionAttribute("CSHARP", Edition="Csharp")]
    public class CSharpLanguage : JetBrains.ReSharper.Psi.KnownLanguage
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.CSharp.CSharpLanguage Instance;
        public const string Name = "CSHARP";
        protected CSharpLanguage([JetBrains.Annotations.NotNullAttribute()] string name) { }
        protected CSharpLanguage([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] string presentableName) { }
    }
    public enum CSharpLanguageLevel
    {
        Default = 0,
        CSharp20 = 2,
        CSharp30 = 3,
        CSharp40 = 4,
        CSharp50 = 5,
        Latest = 5,
    }
    public class static CSharpMethodGroupTypeUtil
    {
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static bool CheckArgumentTypes(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution delegateSubstitution, JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, bool isExtensionMethod) { }
        public static bool CheckReturnType(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution delegateSubstitution, JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public abstract class CSharpPredefined
    {
        public const string BINARY_ANDALSO = "ShortCircuitAnd";
        public const string BINARY_ORELSE = "ShortCircuitOr";
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryConditionalLogicalAndAlsoBool { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryConditionalLogicalOrElseBool { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryDivisionDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryDivisionDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryDivisionFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryDivisionInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryDivisionLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryDivisionUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryDivisionUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryEqualityBool { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryEqualityDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryEqualityDelegate { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryEqualityDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryEqualityFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryEqualityInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryEqualityLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryEqualityNullable { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryEqualityReference { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryEqualityString { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryEqualityUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryEqualityUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterEqualityDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterEqualityDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterEqualityFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterEqualityInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterEqualityLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterEqualityUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterEqualityUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryGreaterUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryInequalityBool { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryInequalityDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryInequalityDelegate { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryInequalityDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryInequalityFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryInequalityInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryInequalityLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryInequalityNullable { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryInequalityReference { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryInequalityString { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryInequalityUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryInequalityUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLeftShiftInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLeftShiftLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLeftShiftUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLeftShiftUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessEqualityDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessEqualityDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessEqualityFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessEqualityInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessEqualityLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessEqualityUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessEqualityUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLessUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalAndBool { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalAndInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalAndLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalAndUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalAndUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalOrBool { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalOrInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalOrLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalOrUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalOrUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalXorBool { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalXorInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalXorLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalXorUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryLogicalXorUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMinusDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMinusDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMinusFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMinusInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMinusLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMinusUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMinusUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMultiplicationDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMultiplicationDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMultiplicationFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMultiplicationInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMultiplicationLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMultiplicationUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryMultiplicationUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryPlusDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryPlusDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryPlusFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryPlusInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryPlusLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryPlusObjectString { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryPlusStringObject { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryPlusStringString { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryPlusUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryPlusUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryRemainderDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryRemainderDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryRemainderFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryRemainderInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryRemainderLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryRemainderUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryRemainderUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryRightShiftInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryRightShiftLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryRightShiftUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator BinaryRightShiftUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryBitwiseComplementInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryBitwiseComplementLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryBitwiseComplementUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryBitwiseComplementUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryDecrementByte { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryDecrementChar { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryDecrementDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryDecrementDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryDecrementFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryDecrementInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryDecrementLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryDecrementSbyte { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryDecrementShort { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryDecrementUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryDecrementUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryDecrementUshort { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryIncrementByte { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryIncrementChar { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryIncrementDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryIncrementDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryIncrementFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryIncrementInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryIncrementLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryIncrementSbyte { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryIncrementShort { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryIncrementUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryIncrementUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryIncrementUshort { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryLogicalNegation { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryMinusDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryMinusDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryMinusFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryMinusInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryMinusLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryPlusDecimal { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryPlusDouble { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryPlusFloat { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryPlusInt { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryPlusLong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryPlusUint { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator UnaryPlusUlong { get; }
        public abstract JetBrains.ReSharper.Psi.ISignOperator GetBinaryOperator(string name, JetBrains.ReSharper.Psi.IType leftType, JetBrains.ReSharper.Psi.IType rightType);
        public static string GetBinaryOperatorName(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) { }
        public abstract JetBrains.ReSharper.Psi.ISignOperator[] GetBinaryOperators();
        public abstract JetBrains.ReSharper.Psi.ISignOperator[] GetBinaryOperatorsByName(string operatorName);
        public abstract JetBrains.ReSharper.Psi.ISignOperator[] GetDelegateOperators(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        public abstract JetBrains.ReSharper.Psi.ISignOperator[] GetEnumOperators(JetBrains.ReSharper.Psi.IEnum @enum, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        public static JetBrains.ReSharper.Psi.CSharp.CSharpPredefined GetInstance(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public abstract JetBrains.ReSharper.Psi.ISignOperator[] GetPointerOperators(JetBrains.ReSharper.Psi.IPointerType pointerType);
        public abstract JetBrains.ReSharper.Psi.ISignOperator GetUnaryOperator(string name, JetBrains.ReSharper.Psi.IType type);
        public static string GetUnaryOperatorName(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) { }
        public abstract JetBrains.ReSharper.Psi.ISignOperator[] GetUnaryOperators();
        public abstract JetBrains.ReSharper.Psi.ISignOperator[] GetUnaryOperatorsByName(string operatorName);
        public abstract JetBrains.ReSharper.Psi.IProperty Indexer(JetBrains.ReSharper.Psi.IArrayType type, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument> arguments);
        public abstract JetBrains.ReSharper.Psi.IProperty Indexer(JetBrains.ReSharper.Psi.IPointerType type, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argument);
        public abstract bool IsOperatorMeaningfulForUser(JetBrains.ReSharper.Psi.ISignOperator signOperator);
    }
    public class static CSharpPsiSourceFilePropertiesExtension
    {
        public static string[] ParseCompilerIdList(string value) { }
    }
    public class CSharpStatementsRange : JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange, JetBrains.ReSharper.Psi.Tree.IStatementsRange
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.CSharpStatementsRange Empty;
        public CSharpStatementsRange(JetBrains.ReSharper.Psi.ITreeRange treeRange) { }
        public CSharpStatementsRange(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement first, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement last) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IStatement> Statements { get; }
        public JetBrains.ReSharper.Psi.ITreeRange TreeRange { get; }
    }
    public class static CSharpTypeFactory
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateDeclaredType(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName referenceName) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IDeclaredType CreateDeclaredType(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage typeUsage) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType CreateType(string typeStr, JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType CreateType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage typeUsage) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType CreateType(string fullyQualifiedName, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public static JetBrains.ReSharper.Psi.IClrTypeName GetFullyQualifiedNameByKeyword(string keyword) { }
        public static string GetShortNameByTypeKeyword(JetBrains.ReSharper.Psi.Parsing.TokenNodeType typeKeyword) { }
        public static string GetTypeKeyword(JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
        public class KeywordsService : JetBrains.ReSharper.Psi.ITypeKeywordsService
        {
            public System.Collections.Generic.IEnumerable<string> TypeKeywords { get; }
            public string GetFullQualifiedTypeName(string keyword) { }
            public string GetTypeKeyword(JetBrains.ReSharper.Psi.IClrTypeName qualifiedTypeName) { }
            public bool IsDynamicKeyword(string keyword) { }
            public bool IsTypeKeywordReference(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        }
    }
    public class ExternAliasesManager
    {
        public const string GLOBAL_ALIAS_NAME = "global";
        public static JetBrains.ReSharper.Psi.CSharp.DeclaredElements.IExternAlias GetAlias(string name, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.CSharp.DeclaredElements.IExternAlias GetGlobalAlias(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
    }
    public interface ICSharpAnonymousType : JetBrains.ReSharper.Psi.IAnonymousType, JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ICSharpAnonymousTypeProperty> Properties { get; }
    }
    public interface ICSharpArgumentInfo : JetBrains.ReSharper.Psi.IArgumentInfo
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        string ArgumentName { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo Invocation { get; }
        bool IsNamedArgument { get; }
        JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible ManagedConvertible { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITreeNode VerificationScope { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ILambdaParameter> GetImplicitLambdaParameters();
        bool HasImplicitLambdaParameters();
    }
    public interface ICSharpInvocationInfo : JetBrains.ReSharper.Psi.IInvocationInfo
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo ExtensionQualifier { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Resolve.ICSharpInvocationReference Reference { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> TypeArguments { get; }
        string Dump();
    }
    public interface ICSharpPsiSourceFileProperties : JetBrains.ReSharper.Psi.ICustomPsiSourceFileProperties
    {
        bool AllowUnsafeCode { get; }
        bool IsNestedPreImportedNamespaces { get; }
        bool NoStdLib { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string[] SuppressWarnings { get; }
        bool TreatWarningsAsErrors { get; }
        int WarningLevel { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string[] WarningsAsErrors { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        string[] WarningsNotAsErrors { get; }
        bool XmlDocGenerationEnabled { get; }
    }
    public interface ICSharpStatementsRange : JetBrains.ReSharper.Psi.Tree.IStatementsRange { }
    public class static InvocationInfoExtension
    {
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> AllArguments(this JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo invocation, bool isCandidateExtension) { }
    }
    public class static ReSharperControlConstructIDs
    {
        public const string PragmaDisable = "disable";
        public const string PragmaRestore = "restore";
        public const string PragmaWarning = "warning";
        public const string RedundantUsingDirective = "RedundantUsingDirective";
        public static JetBrains.Util.Pair<bool, string> ProcessPragma(string pragmaText) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Caches
{
    
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpAnnotatedMembersCacheProcessor : JetBrains.ReSharper.Psi.Caches.IAnnotatedMembersCacheProcessor
    {
        public void Process(JetBrains.ReSharper.Psi.Tree.IFile file, System.Collections.Generic.ICollection<string> attributeNames, JetBrains.Util.OneToListMap<string, string> context) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.CodeStyle
{
    
    public class CSharpCodeFormattingSettings : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingSettingsBase<JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.CSharpFormatSettingsKey>
    {
        public CSharpCodeFormattingSettings(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.CSharpFormatSettingsKey settings, JetBrains.ReSharper.Psi.CodeStyle.GlobalFormatSettings globalSettings, JetBrains.ReSharper.Psi.CodeStyle.CommonFormatterSettingsKey commonSettings) { }
    }
    public class static CSharpFormatterHelper
    {
        public static void ArrangeThisQualifier([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile file, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.DocumentModel.IRangeMarker rangeMarker) { }
        public static bool ContainsLineBreak(this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static T GetFormatSetting<T>(JetBrains.ReSharper.Psi.Tree.ITreeNode file, System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.CSharpFormatSettingsKey, T>> keyGetter) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IWhitespaceNode> GetLineFeedsTo([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode fromNode, JetBrains.ReSharper.Psi.Tree.ITreeNode toNode) { }
        public static bool HasLineFeedsTo([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode fromNode, JetBrains.ReSharper.Psi.Tree.ITreeNode toNode) { }
        public static void OptimizeImportsAndRefs(this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IRangeMarker rangeMarker, bool optimizeUsings, bool shortenReferences, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public static void OptimizeRefsSafe(this JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IRangeMarker rangeMarker, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public static void ReorderMembers([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.IClassLikeDeclaration declaration) { }
        public static void ReorderMembersRecursively(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration declaration) { }
        public static void ReorderMembersRecursively(this JetBrains.ReSharper.Psi.Tree.ITypeDeclaration declaration) { }
    }
    public class static CSharpMemberOrderDefaultPattern
    {
        public static string DefaultPatternUsingRegions { get; }
        public static string DefaultPatternWithoutRegions { get; }
        public static System.Xml.Schema.XmlSchema XmlSchema { get; }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Settings.CodeStyleSettings), "C# member order pattern")]
    public class CSharpMemberOrderPatternSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute("", "Custom pattern. Use null for default pattern")]
        public string CustomPattern;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpMemberOrderPatternType.WithoutRegions, "Layout type")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpMemberOrderPatternType LayoutType;
    }
    public enum CSharpMemberOrderPatternType
    {
        [System.ComponentModel.DescriptionAttribute("Default layout without regions")]
        WithoutRegions = 0,
        [System.ComponentModel.DescriptionAttribute("Default layout using regions")]
        UsingRegions = 1,
        [System.ComponentModel.DescriptionAttribute("Custom layout")]
        CustomLayout = 2,
    }
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    [JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgraderAttribute()]
    public class CSharpMemberOrderPatternUpgrade : JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.CodeStyleSettingsUpgrade
    {
        public CSharpMemberOrderPatternUpgrade(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected override void DoUpgrade(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Settings.CodeStyleSettings), "C# namespace import")]
    public class CSharpUsingSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Add \'using\' directive to deepest scope")]
        public bool AddImportsToDeepestScope;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Allow using alias directive")]
        public bool AllowAlias;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Allow \'global::\' prefix use")]
        public bool CanUseGlobalAlias;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Keep \'using\' directives on optimization")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, string> KeepImports;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Do not remove non-trivial alias directives")]
        public bool KeepNontrivialAlias;
        [JetBrains.Application.Settings.SettingsIndexedEntryAttribute("Add \'using\' directives on optimization")]
        public JetBrains.Application.Settings.Store.IIndexedEntry<string, string> MandatoryImports;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer fully qualified references")]
        public bool PreferQualifiedReference;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Fully qualify namespace in nested scope \'using\' directive")]
        public bool QualifiedUsingAtNestedScope;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Sort \'using\' directives")]
        public bool SortUsings;
    }
    public class static CSharpUsingSettingsAccessor
    {
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpUsingSettings, bool>> AddImportsToDeepestScope;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpUsingSettings, bool>> AllowAlias;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpUsingSettings, bool>> CanUseGlobalAlias;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpUsingSettings, JetBrains.Application.Settings.Store.IIndexedEntry<string, string>>> KeepImports;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpUsingSettings, bool>> KeepNontrivialAlias;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpUsingSettings, JetBrains.Application.Settings.Store.IIndexedEntry<string, string>>> MandatoryImports;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpUsingSettings, bool>> PreferQualifiedReference;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpUsingSettings, bool>> QualifiedUsingAtNestedScope;
        public static readonly System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpUsingSettings, bool>> SortUsings;
    }
    public interface ICSharpCodeFormatter : JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter
    {
        void Format(JetBrains.ReSharper.Psi.Tree.ITreeNode root, JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFormatProfile profile, JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null);
        void Format(JetBrains.ReSharper.Psi.Tree.ITreeNode firstElement, JetBrains.ReSharper.Psi.Tree.ITreeNode lastElement, JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFormatProfile profile, JetBrains.Application.Progress.IProgressIndicator progressIndicator, JetBrains.Application.Settings.IContextBoundSettingsStore overrideSettingsStore = null);
        void FormatDocComment(JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode docCommentBlock);
        JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFormatProfile GetProfile(JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile);
        void UpdateAccessorOwnerLayout(JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration accessor);
    }
    public interface ICustomIndentHandler
    {
        string Indent(JetBrains.ReSharper.Psi.Tree.ITreeNode node, JetBrains.ReSharper.Psi.CodeStyle.CustomIndentType indentType, JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpCodeFormattingSettings settings);
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings
{
    
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Psi.CodeStyle.CodeFormattingSettingsKey), "Code formatting in C#")]
    public class CSharpFormatSettingsKey
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "First call arguments by \'(\'")]
        public bool ALIGN_FIRST_ARG_BY_PAREN;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "LINQ query")]
        public bool ALIGN_LINQ_QUERY;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Call arguments")]
        public bool ALIGN_MULTILINE_ARGUMENT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Array, object and collection initializer")]
        public bool ALIGN_MULTILINE_ARRAY_AND_OBJECT_INITIALIZER;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Chained binary expressions")]
        public bool ALIGN_MULTILINE_BINARY_EXPRESSIONS_CHAIN;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Chained method calls")]
        public bool ALIGN_MULTILINE_CALLS_CHAIN;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Expression")]
        public bool ALIGN_MULTILINE_EXPRESSION;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "List of base classes and interfaces")]
        public bool ALIGN_MULTILINE_EXTENDS_LIST;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "\"for\" statement header")]
        public bool ALIGN_MULTILINE_FOR_STMT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Method parameters")]
        public bool ALIGN_MULTILINE_PARAMETER;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Multiple declarations")]
        public bool ALIGN_MULTIPLE_DECLARATION;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Type parameter constraints")]
        public bool ALIGN_MULTLINE_TYPE_PARAMETER_CONSTRAINS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Type parameters list")]
        public bool ALIGN_MULTLINE_TYPE_PARAMETER_LIST;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Allow comment after \'{\'")]
        public bool ALLOW_COMMENT_AFTER_LBRACE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle.NEXT_LINE, "Anonymous method declaration")]
        public JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle ANONYMOUS_METHOD_DECLARATION_BRACES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Arrange modifiers in existing code")]
        public bool ARRANGE_MODIFIER_IN_EXISTING_CODE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "After file header comment")]
        public int BLANK_LINES_AFTER_START_COMMENT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "After \"using\" list")]
        public int BLANK_LINES_AFTER_USING_LIST;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Around auto/abstract property/event")]
        public int BLANK_LINES_AROUND_AUTO_PROPERTY;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Around field")]
        public int BLANK_LINES_AROUND_FIELD;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Around method")]
        public int BLANK_LINES_AROUND_INVOCABLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Around namespace")]
        public int BLANK_LINES_AROUND_NAMESPACE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Around property/event")]
        public int BLANK_LINES_AROUND_PROPERTY;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Around region")]
        public int BLANK_LINES_AROUND_REGION;
        [JetBrains.Application.Settings.SettingsEntryAttribute(0, "Around single line auto/abstract property/event")]
        public int BLANK_LINES_AROUND_SINGLE_LINE_AUTO_PROPERTY;
        [JetBrains.Application.Settings.SettingsEntryAttribute(0, "Around single line field")]
        public int BLANK_LINES_AROUND_SINGLE_LINE_FIELD;
        [JetBrains.Application.Settings.SettingsEntryAttribute(0, "Around single line method")]
        public int BLANK_LINES_AROUND_SINGLE_LINE_INVOCABLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(0, "Around single line property/event")]
        public int BLANK_LINES_AROUND_SINGLE_LINE_PROPERTY;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Around type")]
        public int BLANK_LINES_AROUND_TYPE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(0, "Between different \"using\" groups")]
        public int BLANK_LINES_BETWEEN_USING_GROUPS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(0, "Inside namespace")]
        public int BLANK_LINES_INSIDE_NAMESPACE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Inside region")]
        public int BLANK_LINES_INSIDE_REGION;
        [JetBrains.Application.Settings.SettingsEntryAttribute(0, "Inside type")]
        public int BLANK_LINES_INSIDE_TYPE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle.NEXT_LINE, "Block under \"case\" label")]
        public JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle CASE_BLOCK_BRACES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(1, "Continuous line indent multiplier")]
        public int CONTINUOUS_INDENT_MULTIPLIER;
        public static readonly string[] DefaultModifiersOrder;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CodeStyle.EmptyBlockStyle.MULTILINE, "Empty braces formatting")]
        public JetBrains.ReSharper.Psi.CodeStyle.EmptyBlockStyle EMPTY_BLOCK_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Use explicit internal modifier")]
        public bool EXPLICIT_INTERNAL_MODIFIER;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Use explicit private modifier")]
        public bool EXPLICIT_PRIVATE_MODIFIER;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceAttributeStyle.DO_NOT_CHANGE, "Join or separate attributes in section")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceAttributeStyle FORCE_ATTRIBUTE_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Force chop compound condition in \"do\" statement")]
        public bool FORCE_CHOP_COMPOUND_DO_EXPRESSION;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Force chop compound condition in \"if\" statement")]
        public bool FORCE_CHOP_COMPOUND_IF_EXPRESSION;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Force chop compound condition in \"while\" statement")]
        public bool FORCE_CHOP_COMPOUND_WHILE_EXPRESSION;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle.DO_NOT_CHANGE, "Braces in \"fixed\" statement")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle FORCE_FIXED_BRACES_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle.DO_NOT_CHANGE, "Braces in \"for\" statement")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle FORCE_FOR_BRACES_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle.DO_NOT_CHANGE, "Braces in \"foreach\" statement")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle FORCE_FOREACH_BRACES_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle.DO_NOT_CHANGE, "Braces in \"if-else\" statement")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle FORCE_IFELSE_BRACES_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle.DO_NOT_CHANGE, "Braces in \"using\" statement")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle FORCE_USING_BRACES_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle.DO_NOT_CHANGE, "Braces in \"while\" statement")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle FORCE_WHILE_BRACES_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Anonymous method body")]
        public bool INDENT_ANONYMOUS_METHOD_BLOCK;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Indent \"case\" from \"switch\"")]
        public bool INDENT_CASE_FROM_SWITCH;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Indent nested \"fixed\" statements")]
        public bool INDENT_NESTED_FIXED_STMT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Indent nested \"using\" statements")]
        public bool INDENT_NESTED_USINGS_STMT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle.NEXT_LINE, "Array and object initializer")]
        public JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle INITIALIZER_BRACES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle.NEXT_LINE, "Method declaration")]
        public JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle INVOCABLE_DECLARATION_BRACES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(2, "Keep max blank lines in code")]
        public int KEEP_BLANK_LINES_IN_CODE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(2, "Keep max blank lines in declarations")]
        public int KEEP_BLANK_LINES_IN_DECLARATIONS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Keep existing line breaks")]
        public bool KEEP_USER_LINEBREAKS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Line feed at end of file")]
        public bool LINE_FEED_AT_FILE_END;
        [JetBrains.Application.Settings.SettingsEntryAttribute("public protected internal private new abstract virtual override sealed static rea" +
            "donly extern unsafe volatile async", "Modifiers order")]
        public string MODIFIERS_ORDER;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle.NEXT_LINE, "Other")]
        public JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle OTHER_BRACES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place abstract/auto property/indexer/event declaration on single line")]
        public bool PLACE_ABSTRACT_ACCESSORHOLDER_ON_SINGLE_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Place it on single line even when it has attributes on accessors")]
        public bool PLACE_ACCESSOR_WITH_ATTRS_HOLDER_ON_SINGLE_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Place property/indexer/event attribute on same line")]
        public bool PLACE_ACCESSORHOLDER_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place \"catch\" on new line")]
        public bool PLACE_CATCH_ON_NEW_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Place multiline accessor attribute on same line")]
        public bool PLACE_COMPLEX_ACCESSOR_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place constructor initializer on same line")]
        public bool PLACE_CONSTRUCTOR_INITIALIZER_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place \"else\" on new line")]
        public bool PLACE_ELSE_ON_NEW_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place field attribute on same line")]
        public bool PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place \"finally\" on new line")]
        public bool PLACE_FINALLY_ON_NEW_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Place method attribute on same line")]
        public bool PLACE_METHOD_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place singleline accessor attribute on same line")]
        public bool PLACE_SIMPLE_ACCESSOR_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place simple accessor on single line")]
        public bool PLACE_SIMPLE_ACCESSOR_ON_SINGLE_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Place simple property/indexer/event declaration on single line")]
        public bool PLACE_SIMPLE_ACCESSORHOLDER_ON_SINGLE_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place simple anonymous method on single line")]
        public bool PLACE_SIMPLE_ANONYMOUSMETHOD_ON_SINGLE_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place simple array, object and collection on single line")]
        public bool PLACE_SIMPLE_INITIALIZER_ON_SINGLE_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place simple LINQ expression on single line")]
        public bool PLACE_SIMPLE_LINQ_ON_SINGLE_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Place simple method on single line")]
        public bool PLACE_SIMPLE_METHOD_ON_SINGLE_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Place type attribute on same line")]
        public bool PLACE_TYPE_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Place type constraints on same line")]
        public bool PLACE_TYPE_CONSTRAINTS_ON_SAME_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Place \"while\" on new line")]
        public bool PLACE_WHILE_ON_NEW_LINE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ThisQualifierStyle.DO_NOT_USE, "Force \"this.\" qualifier for instance member")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ThisQualifierStyle REDUNDANT_THIS_QUALIFIER_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Remove blank lines after \"{\" and before \"}\" in code")]
        public bool REMOVE_BLANK_LINES_NEAR_BRACES_IN_CODE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Remove blank lines after \"{\" and before \"}\" in declarations")]
        public bool REMOVE_BLANK_LINES_NEAR_BRACES_IN_DECLARATIONS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CodeStyle.SimpleEmbeddedStatementStyle.LINE_BREAK, "Break line in a block with a single statement")]
        public JetBrains.ReSharper.Psi.CodeStyle.SimpleEmbeddedStatementStyle SIMPLE_EMBEDDED_BLOCK_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CodeStyle.SimpleEmbeddedStatementStyle.DO_NOT_CHANGE, "Break line in single embedded statement")]
        public JetBrains.ReSharper.Psi.CodeStyle.SimpleEmbeddedStatementStyle SIMPLE_EMBEDDED_STATEMENT_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Unsafe addressof operator (&)")]
        public bool SPACE_AFTER_AMPERSAND_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Unsafe asterisk operator (*)")]
        public bool SPACE_AFTER_ASTERIK_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "After colon in attribute")]
        public bool SPACE_AFTER_ATTRIBUTE_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "After comma")]
        public bool SPACE_AFTER_COMMA;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "After base types list colon")]
        public bool SPACE_AFTER_EXTENDS_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "After \"for\" semicolon")]
        public bool SPACE_AFTER_FOR_SEMICOLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "After \':\'")]
        public bool SPACE_AFTER_TERNARY_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "After \'?\'")]
        public bool SPACE_AFTER_TERNARY_QUEST;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "After type parameter constraint colon")]
        public bool SPACE_AFTER_TYPE_PARAMETER_CONSTRAINT_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "After type cast parentheses")]
        public bool SPACE_AFTER_TYPECAST_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Additive operators (+,-)")]
        public bool SPACE_AROUND_ADDITIVE_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Around \'=\' in namespace alias directive")]
        public bool SPACE_AROUND_ALIAS_EQ;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Unsafe arrow operator (->)")]
        public bool SPACE_AROUND_ARROW_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Assignment operators (=,+=,...)")]
        public bool SPACE_AROUND_ASSIGNMENT_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Bitwise operators (&,|,^)")]
        public bool SPACE_AROUND_BITWISE_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Around dot")]
        public bool SPACE_AROUND_DOT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Equality operators (==,!=)")]
        public bool SPACE_AROUND_EQUALITY_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Around lambda arrow")]
        public bool SPACE_AROUND_LAMBDA_ARROW;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Logical operators (&&,||)")]
        public bool SPACE_AROUND_LOGICAL_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Multiplicative operators (*,/,%)")]
        public bool SPACE_AROUND_MULTIPLICATIVE_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Null coalescing operator (??)")]
        public bool SPACE_AROUND_NULLCOALESCING_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Relational operators (<,>,<=,>=)")]
        public bool SPACE_AROUND_RELATIONAL_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Shift operators (<<,>>)")]
        public bool SPACE_AROUND_SHIFT_OP;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Array access brackets")]
        public bool SPACE_BEFORE_ARRAY_ACCESS_BRACKETS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before array rank brackets")]
        public bool SPACE_BEFORE_ARRAY_RANK_BRACKETS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before colon in attribute")]
        public bool SPACE_BEFORE_ATTRIBUTE_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "\"catch\" parentheses")]
        public bool SPACE_BEFORE_CATCH_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before colon in \"case\" statement")]
        public bool SPACE_BEFORE_COLON_IN_CASE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before comma")]
        public bool SPACE_BEFORE_COMMA;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Method call empty parentheses")]
        public bool SPACE_BEFORE_EMPTY_METHOD_CALL_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Method declaration empty parentheses")]
        public bool SPACE_BEFORE_EMPTY_METHOD_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Before base types list colon")]
        public bool SPACE_BEFORE_EXTENDS_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "\"fixed\" parentheses")]
        public bool SPACE_BEFORE_FIXED_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "\"for\" parentheses")]
        public bool SPACE_BEFORE_FOR_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before \"for\" semicolon")]
        public bool SPACE_BEFORE_FOR_SEMICOLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "\"foreach\" parentheses")]
        public bool SPACE_BEFORE_FOREACH_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "\"if\" parentheses")]
        public bool SPACE_BEFORE_IF_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "\"lock\" parentheses")]
        public bool SPACE_BEFORE_LOCK_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Method call parentheses")]
        public bool SPACE_BEFORE_METHOD_CALL_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Method declaration parentheses")]
        public bool SPACE_BEFORE_METHOD_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before nullable mark")]
        public bool SPACE_BEFORE_NULLABLE_MARK;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before unsafe pointer declaration")]
        public bool SPACE_BEFORE_POINTER_ASTERIK_DECLARATION;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before semicolon")]
        public bool SPACE_BEFORE_SEMICOLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Before single line accessors block")]
        public bool SPACE_BEFORE_SINGLELINE_ACCESSORHOLDER;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "\"sizeof\" parentheses")]
        public bool SPACE_BEFORE_SIZEOF_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "\"switch\" parentheses")]
        public bool SPACE_BEFORE_SWITCH_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Before \':\'")]
        public bool SPACE_BEFORE_TERNARY_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Before \'?\'")]
        public bool SPACE_BEFORE_TERNARY_QUEST;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Before end of line comment")]
        public bool SPACE_BEFORE_TRAILING_COMMENT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before type argument list angle")]
        public bool SPACE_BEFORE_TYPE_ARGUMENT_ANGLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Before type parameter list angle")]
        public bool SPACE_BEFORE_TYPE_PARAMETER_ANGLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Before type parameter constraint colon")]
        public bool SPACE_BEFORE_TYPE_PARAMETER_CONSTRAINT_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "\"typeof\" parentheses")]
        public bool SPACE_BEFORE_TYPEOF_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "\"using\" parentheses")]
        public bool SPACE_BEFORE_USING_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "\"while\" parentheses")]
        public bool SPACE_BEFORE_WHILE_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Between accessors in single line property/event")]
        public bool SPACE_BETWEEN_ACCESSORS_IN_SINGLELINE_PROPERTY;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Within single line accessor")]
        public bool SPACE_IN_SINGLELINE_ACCESSORHOLDER;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Within single line anonymous method")]
        public bool SPACE_IN_SINGLELINE_ANONYMOUS_METHOD;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Within single line method")]
        public bool SPACE_IN_SINGLELINE_METHOD;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Array access brackets")]
        public bool SPACE_WITHIN_ARRAY_ACCESS_BRACKETS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within array rank brackets")]
        public bool SPACE_WITHIN_ARRAY_RANK_BRACKETS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within array rank empty brackets")]
        public bool SPACE_WITHIN_ARRAY_RANK_EMPTY_BRACKETS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within attribute brackets")]
        public bool SPACE_WITHIN_ATTRIBUTE_BRACKETS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "\"catch\" parentheses")]
        public bool SPACE_WITHIN_CATCH_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Method call empty parentheses")]
        public bool SPACE_WITHIN_EMPTY_METHOD_CALL_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Method declaration empty parentheses")]
        public bool SPACE_WITHIN_EMPTY_METHOD_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "\"fixed\" parentheses")]
        public bool SPACE_WITHIN_FIXED_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "\"for\" parentheses")]
        public bool SPACE_WITHIN_FOR_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "\"foreach\" parentheses")]
        public bool SPACE_WITHIN_FOREACH_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "\"if\" parentheses")]
        public bool SPACE_WITHIN_IF_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "\"lock\" parentheses")]
        public bool SPACE_WITHIN_LOCK_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Method call parentheses")]
        public bool SPACE_WITHIN_METHOD_CALL_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Method declaration parentheses")]
        public bool SPACE_WITHIN_METHOD_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Parentheses")]
        public bool SPACE_WITHIN_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Within single-line initializer braces")]
        public bool SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "\"sizeof\" parentheses")]
        public bool SPACE_WITHIN_SIZEOF_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "\"switch\" parentheses")]
        public bool SPACE_WITHIN_SWITCH_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Type argument angles")]
        public bool SPACE_WITHIN_TYPE_ARGUMENT_ANGLES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Type parameter angles")]
        public bool SPACE_WITHIN_TYPE_PARAMETER_ANGLES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Type cast parentheses")]
        public bool SPACE_WITHIN_TYPECAST_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "\"typeof\" parentheses")]
        public bool SPACE_WITHIN_TYPEOF_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "\"using\" parentheses")]
        public bool SPACE_WITHIN_USING_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "\"while\" parentheses")]
        public bool SPACE_WITHIN_WHILE_PARENTHESES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Space between empty braces")]
        public bool SPACE_WITHING_EMPTY_BRACES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Special \"else if\" treatment")]
        public bool SPECIAL_ELSE_IF_TREATMENT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Don\'t indent comments started at first column")]
        public bool STICK_COMMENT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle.NEXT_LINE, "Type and namespace declaration")]
        public JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle TYPE_DECLARATION_BRACES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer wrap after \"(\" in declaration")]
        public bool WRAP_AFTER_DECLARATION_LPAR;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer wrap after \".\"")]
        public bool WRAP_AFTER_DOT_IN_METHOD_CALLS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer wrap after \"(\" in invocation")]
        public bool WRAP_AFTER_INVOCATION_LPAR;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.WRAP_IF_LONG, "Wrap invocation arguments")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_ARGUMENTS_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.WRAP_IF_LONG, "Wrap array initializer")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_ARRAY_INITIALIZER_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer wrap before operator in binary expression")]
        public bool WRAP_BEFORE_BINARY_OPSIGN;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer wrap before \"(\" in declaration")]
        public bool WRAP_BEFORE_DECLARATION_LPAR;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer wrap before \":\"")]
        public bool WRAP_BEFORE_EXTENDS_COLON;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer wrap before first constraint")]
        public bool WRAP_BEFORE_FIRST_TYPE_PARAMETER_CONSTRAINT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer wrap before \"(\" in invocation")]
        public bool WRAP_BEFORE_INVOCATION_LPAR;
        [JetBrains.Application.Settings.SettingsEntryAttribute(false, "Prefer wrap before type parameters opening angle")]
        public bool WRAP_BEFORE_TYPE_PARAMETER_LANGLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyleSimple.WRAP_IF_LONG, "Wrap chained binary expressions")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyleSimple WRAP_CHAINED_BINARY_EXPRESSIONS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.CHOP_IF_LONG, "Wrap chained method calls")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_CHAINED_METHOD_CALLS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.WRAP_IF_LONG, "Wrap extends/implements list")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_EXTENDS_LIST_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.CHOP_IF_LONG, "Wrap \"for\" statement header")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_FOR_STMT_HEADER_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(120, "Right margin (columns)")]
        public int WRAP_LIMIT;
        [JetBrains.Application.Settings.SettingsEntryAttribute(true, "Wrap long lines")]
        public bool WRAP_LINES;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.CHOP_IF_LONG, "Wrap LINQ expressions")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_LINQ_EXPRESSIONS;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.CHOP_IF_LONG, "Wrap multiple declaration")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_MULTIPLE_DECLARATION_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.CHOP_IF_LONG, "Wrap multiple type parameter constraints")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_MULTIPLE_TYPE_PARAMEER_CONSTRAINTS_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.CHOP_IF_LONG, "Wrap object and collection initializer")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_OBJECT_AND_COLLECTION_INITIALIZER_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.WRAP_IF_LONG, "Wrap formal parameters")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_PARAMETERS_STYLE;
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.CHOP_IF_LONG, "Wrap ternary expression")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_TERNARY_EXPR_STYLE;
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.CSharpFormatSettingsKey Clone() { }
    }
    public enum ForceAttributeStyle
    {
        [System.ComponentModel.DescriptionAttribute("Do not change")]
        DO_NOT_CHANGE = 0,
        [System.ComponentModel.DescriptionAttribute("Join")]
        JOIN = 1,
        [System.ComponentModel.DescriptionAttribute("Separate")]
        SEPARATE = 2,
    }
    public enum ForceBraceStyle
    {
        [System.ComponentModel.DescriptionAttribute("Do not change")]
        DO_NOT_CHANGE = 0,
        [System.ComponentModel.DescriptionAttribute("Remove braces")]
        ALWAYS_REMOVE = 1,
        [System.ComponentModel.DescriptionAttribute("Add braces")]
        ALWAYS_ADD = 2,
        [System.ComponentModel.DescriptionAttribute("Use braces for multiline")]
        ONLY_FOR_MULTILINE = 3,
    }
    public enum ThisQualifierStyle
    {
        [System.ComponentModel.DescriptionAttribute("Use always")]
        ALWAYS_USE = 0,
        [System.ComponentModel.DescriptionAttribute("For fields")]
        USE_FOR_FIELD = 1,
        [System.ComponentModel.DescriptionAttribute("For this class members")]
        USE_FOR_THIS_CLASS = 2,
        [System.ComponentModel.DescriptionAttribute("For fields in this class")]
        USE_FOR_VARIABLES_IN_THIS_CLASS = 3,
        [System.ComponentModel.DescriptionAttribute("Do not use")]
        DO_NOT_USE = 4,
    }
    public enum WrapStyle
    {
        [System.ComponentModel.DescriptionAttribute("Simple wrap")]
        WRAP_IF_LONG = 0,
        [System.ComponentModel.DescriptionAttribute("Chop if long")]
        CHOP_IF_LONG = 1,
        [System.ComponentModel.DescriptionAttribute("Chop always")]
        CHOP_ALWAYS = 2,
    }
    public enum WrapStyleSimple
    {
        [System.ComponentModel.DescriptionAttribute("Simple wrap")]
        WRAP_IF_LONG = 0,
        [System.ComponentModel.DescriptionAttribute("Chop if long")]
        CHOP_IF_LONG = 1,
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.CodeStyle.SettingsUpgrade
{
    
    [JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsAttribute("CSharp")]
    [System.ObsoleteAttribute("Obsolete settings class, see members for new types")]
    public class CSharpCodeStyleSettings : JetBrains.Application.Configuration.IXmlReadable, JetBrains.Application.Configuration.IXmlUpgradable, System.ICloneable
    {
        public CSharpCodeStyleSettings() { }
        [System.ObsoleteAttribute("Deprecated, use CSharpMemberOrderPatternSettings")]
        public string CustomMembersReorderingPatternsObsolete { get; set; }
        [System.ObsoleteAttribute("Deprecated, use CSharpFormatSettingsKey")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.SettingsUpgrade.CSharpFormatSettingsObsolete FormatSettings { get; set; }
        [System.ObsoleteAttribute("Deprecated, use CSharpUsingSettings")]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.SettingsUpgrade.CSharpUsingsSettingsObsolete UsingSettings { get; set; }
        public object Clone() { }
        public JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.NamingSettings60 GetNamingSettings2() { }
        public void ReadFromXml(System.Xml.XmlElement element) { }
    }
    public class CSharpFormatSettingsObsolete : JetBrains.Util.UserDataHolder, JetBrains.Application.Configuration.IXmlReadable
    {
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool ALIGN_FIRST_ARG_BY_PAREN;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool ALIGN_LINQ_QUERY;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool ALIGN_MULTILINE_ARGUMENT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool ALIGN_MULTILINE_ARRAY_AND_OBJECT_INITIALIZER;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool ALIGN_MULTILINE_EXPRESSION;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool ALIGN_MULTILINE_EXTENDS_LIST;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool ALIGN_MULTILINE_FOR_STMT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool ALIGN_MULTILINE_PARAMETER;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool ALIGN_MULTIPLE_DECLARATION;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool ALIGN_MULTLINE_TYPE_PARAMETER_CONSTRAINS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool ALIGN_MULTLINE_TYPE_PARAMETER_LIST;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool ALLOW_COMMENT_AFTER_LBRACE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle.NEXT_LINE)]
        public JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle ANONYMOUS_METHOD_DECLARATION_BRACES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool ARRANGE_MODIFIER_IN_EXISTING_CODE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AFTER_START_COMMENT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AFTER_USING;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AFTER_USING_LIST;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AROUND_FIELD;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AROUND_INVOCABLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AROUND_NAMESPACE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AROUND_REGION;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(0)]
        public int BLANK_LINES_AROUND_SINGLE_LINE_FIELD;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(0)]
        public int BLANK_LINES_AROUND_SINGLE_LINE_INVOCABLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_AROUND_TYPE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(0)]
        public int BLANK_LINES_BEFORE_USING;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(0)]
        public int BLANK_LINES_BETWEEN_USING_GROUPS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int BLANK_LINES_INSIDE_REGION;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle.NEXT_LINE)]
        public JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle CASE_BLOCK_BRACES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(1)]
        public int CONTINUOUS_INDENT_MULTIPLIER;
        public static readonly string[] DefaultModifiersOrder;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CodeStyle.EmptyBlockStyle.MULTILINE)]
        public JetBrains.ReSharper.Psi.CodeStyle.EmptyBlockStyle EMPTY_BLOCK_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool EXPLICIT_INTERNAL_MODIFIER;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool EXPLICIT_PRIVATE_MODIFIER;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceAttributeStyle.DO_NOT_CHANGE)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceAttributeStyle FORCE_ATTRIBUTE_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool FORCE_CHOP_COMPOUND_DO_EXPRESSION;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool FORCE_CHOP_COMPOUND_IF_EXPRESSION;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool FORCE_CHOP_COMPOUND_WHILE_EXPRESSION;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle.DO_NOT_CHANGE)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle FORCE_FIXED_BRACES_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle.DO_NOT_CHANGE)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle FORCE_FOR_BRACES_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle.DO_NOT_CHANGE)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle FORCE_FOREACH_BRACES_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle.DO_NOT_CHANGE)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle FORCE_IFELSE_BRACES_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle.DO_NOT_CHANGE)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle FORCE_USING_BRACES_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle.DO_NOT_CHANGE)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ForceBraceStyle FORCE_WHILE_BRACES_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool INDENT_ANONYMOUS_METHOD_BLOCK;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool INDENT_CASE_FROM_SWITCH;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool INDENT_EMBRACED_INITIALIZER_BLOCK;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool INDENT_NESTED_FIXED_STMT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool INDENT_NESTED_USINGS_STMT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle.NEXT_LINE)]
        public JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle INITIALIZER_BRACES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle.NEXT_LINE)]
        public JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle INVOCABLE_DECLARATION_BRACES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(2)]
        public int KEEP_BLANK_LINES_IN_CODE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(2)]
        public int KEEP_BLANK_LINES_IN_DECLARATIONS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool KEEP_USER_LINEBREAKS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool LINE_FEED_AT_FILE_END;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(null)]
        public string[] MODIFIERS_ORDER;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle.NEXT_LINE)]
        public JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle OTHER_BRACES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool PLACE_ABSTRACT_ACCESSORHOLDER_ON_SINGLE_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PLACE_ACCESSORHOLDER_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool PLACE_CATCH_ON_NEW_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool PLACE_CONSTRUCTOR_INITIALIZER_ON_SAME_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool PLACE_ELSE_ON_NEW_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool PLACE_FINALLY_ON_NEW_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PLACE_METHOD_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool PLACE_SIMPLE_ACCESSOR_ON_SINGLE_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PLACE_SIMPLE_ACCESSORHOLDER_ON_SINGLE_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool PLACE_SIMPLE_ANONYMOUSMETHOD_ON_SINGLE_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool PLACE_SIMPLE_INITIALIZER_ON_SINGLE_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool PLACE_SIMPLE_LINQ_ON_SINGLE_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PLACE_SIMPLE_METHOD_ON_SINGLE_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PLACE_TYPE_ATTRIBUTE_ON_SAME_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool PLACE_TYPE_CONSTRAINTS_ON_SAME_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PLACE_WHILE_ON_NEW_LINE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ThisQualifierStyle.DO_NOT_USE)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ThisQualifierStyle REDUNDANT_THIS_QUALIFIER_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CodeStyle.SimpleEmbeddedStatementStyle.DO_NOT_CHANGE)]
        public JetBrains.ReSharper.Psi.CodeStyle.SimpleEmbeddedStatementStyle SIMPLE_EMBEDDED_STATEMENT_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_AFTER_AMPERSAND_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_AFTER_ASTERIK_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AFTER_ATTRIBUTE_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AFTER_COMMA;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AFTER_EXTENDS_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AFTER_FOR_SEMICOLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AFTER_TERNARY_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AFTER_TERNARY_QUEST;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AFTER_TYPE_PARAMETER_CONSTRAINT_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AFTER_TYPECAST_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_ADDITIVE_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_ALIAS_EQ;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_AROUND_ARROW_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_ASSIGNMENT_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_BITWISE_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_AROUND_DOT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_EQUALITY_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_LAMBDA_ARROW;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_LOGICAL_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_AROUND_MULTIPLICATIVE_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_NULLCOALESCING_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_RELATIONAL_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_AROUND_SHIFT_OP;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_ARRAY_ACCESS_BRACKETS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_ARRAY_CREATION_BRACE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_ARRAY_RANK_BRACKETS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_ATTRIBUTE_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_CATCH_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_COLON_IN_CASE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_COMMA;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_EMPTY_METHOD_CALL_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_EMPTY_METHOD_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_EXTENDS_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_FIXED_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_FOR_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_FOR_SEMICOLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_FOREACH_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_IF_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_LOCK_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_METHOD_CALL_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_METHOD_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_NULLABLE_MARK;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_POINTER_ASTERIK_DECLARATION;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_SEMICOLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_SINGLELINE_ACCESSORHOLDER;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_SIZEOF_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_SWITCH_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_TERNARY_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_TERNARY_QUEST;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_TRAILING_COMMENT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_TYPE_ARGUMENT_ANGLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_BEFORE_TYPE_PARAMETER_ANGLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_TYPE_PARAMETER_CONSTRAINT_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_TYPEOF_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_USING_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BEFORE_WHILE_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_BETWEEN_ACCESSORS_IN_SINGLELINE_PROPERTY;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_IN_SINGLELINE_ACCESSORHOLDER;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_IN_SINGLELINE_ANONYMOUS_METHOD;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPACE_IN_SINGLELINE_METHOD;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_ARRAY_ACCESS_BRACKETS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_ARRAY_RANK_BRACKETS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_ARRAY_RANK_EMPTY_BRACKETS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_ATTRIBUTE_BRACKETS;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_CATCH_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_EMPTY_METHOD_CALL_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_EMPTY_METHOD_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_FIXED_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_FOR_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_FOREACH_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_IF_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_LOCK_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_METHOD_CALL_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_METHOD_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_SIZEOF_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_SWITCH_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_TYPE_ARGUMENT_ANGLES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_TYPE_PARAMETER_ANGLES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_TYPECAST_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_TYPEOF_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_USING_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool SPACE_WITHIN_WHILE_PARENTHESES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SPECIAL_ELSE_IF_TREATMENT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool STICK_COMMENT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle.NEXT_LINE)]
        public JetBrains.ReSharper.Psi.CodeStyle.BraceFormatStyle TYPE_DECLARATION_BRACES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool WRAP_AFTER_BINARY_OPSIGN;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool WRAP_AFTER_DECLARATION_LPAR;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool WRAP_AFTER_INVOCATION_LPAR;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.WRAP_IF_LONG)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_ARGUMENTS_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool WRAP_BEFORE_BINARY_OPSIGN;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool WRAP_BEFORE_DECLARATION_LPAR;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool WRAP_BEFORE_EXTENDS_COLON;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool WRAP_BEFORE_FIRST_TYPE_PARAMETER_CONSTRAINT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool WRAP_BEFORE_INVOCATION_LPAR;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool WRAP_BEFORE_TYPE_PARAMETER_LANGLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.WRAP_IF_LONG)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_EXTENDS_LIST_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.CHOP_IF_LONG)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_FOR_STMT_HEADER_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(120)]
        public int WRAP_LIMIT;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool WRAP_LINES;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.CHOP_IF_LONG)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_MULTIPLE_DECLARATION_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.CHOP_IF_LONG)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_MULTIPLE_TYPE_PARAMEER_CONSTRAINTS_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.CHOP_IF_LONG)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_OBJECT_AND_COLLECTION_INITIALIZER_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.WRAP_IF_LONG)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_PARAMETERS_STYLE;
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle.CHOP_IF_LONG)]
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.WrapStyle WRAP_TERNARY_EXPR_STYLE;
        public CSharpFormatSettingsObsolete() { }
        public JetBrains.ReSharper.Psi.CSharp.CodeStyle.SettingsUpgrade.CSharpFormatSettingsObsolete Clone() { }
        public void ReadFromXml(System.Xml.XmlElement element) { }
        public void WriteToXml(System.Xml.XmlElement element) { }
    }
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    [JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgraderAttribute()]
    public class CSharpFormatSettingsUpgrade : JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.CodeStyleSettingsUpgrade
    {
        public CSharpFormatSettingsUpgrade(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected override void DoUpgrade(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore) { }
    }
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    [JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgraderAttribute()]
    public class CSharpUsingSettingsUpgrade : JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.CodeStyleSettingsUpgrade
    {
        public CSharpUsingSettingsUpgrade(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected override void DoUpgrade(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore) { }
    }
    public class CSharpUsingsSettingsObsolete : JetBrains.Application.Configuration.IXmlReadable
    {
        public CSharpUsingsSettingsObsolete() { }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool AddImportsToDeepestScope { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool AllowAlias { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool CanUseGlobalAlias { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(new string[0])]
        public string[] KeepImports { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool KeepNontrivialAlias { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(new string[0])]
        public string[] MandatoryImports { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool PreferQualifiedReference { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(false)]
        public bool QualifiedUsingAtNestedScope { get; set; }
        [JetBrains.Application.Configuration.XmlExternalizableAttribute(true)]
        public bool SortUsings { get; set; }
        public void ReadFromXml(System.Xml.XmlElement element) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.ConstantValue
{
    
    public abstract class CSharpConstantCalculator
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.ConstantValue.CSharpConstantCalculator Instance { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.ConstantValue CalculateBinaryEnumOperator([JetBrains.Annotations.NotNullAttribute()] string operatorName, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IEnum @enum, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ConstantValue leftValue, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ConstantValue rightValue, bool isChecked);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.ConstantValue CalculateBinaryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ISignOperator binaryOperator, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ConstantValue leftValue, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ConstantValue rightValue, bool isChecked);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.ConstantValue CalculateUnaryOperator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ISignOperator unaryOperator, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ConstantValue value, bool isChecked);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.ConstantValue ToTypeExplicit([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ConstantValue value, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, bool isChecked);
        [JetBrains.Annotations.NotNullAttribute()]
        public abstract JetBrains.ReSharper.Psi.ConstantValue ToTypeImplicit([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ConstantValue value, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type);
    }
    public class static CSharpConstantCalculatorExt
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ConstantValue ToTypeExplicit([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ConstantValue value, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, bool isChecked) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ConstantValue ToTypeImplicit([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.ConstantValue value, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type) { }
    }
    public class static CSharpConstantValueFactory
    {
        public static JetBrains.ReSharper.Psi.ConstantValue CreateBoolValue(bool x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateByteValue(byte x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateCharValue(char x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateDecimalValue(decimal x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateDefaultValue(JetBrains.ReSharper.Psi.IType type) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateDoubleValue(double x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateEnumValue(JetBrains.ReSharper.Psi.IEnum @enum, object value, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateFloatValue(float x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateIntValue(int x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateLongValue(long x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateNullValue(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreatePureNullValue(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateSbyteValue(sbyte x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateShortValue(short x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateStringValue(string x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateUintValue(uint x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateUlongValue(ulong x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.ConstantValue CreateUshortValue(ushort x, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpConstantValueService : JetBrains.ReSharper.Psi.ClrConstantValueService
    {
        public CSharpConstantValueService() { }
        public override JetBrains.ReSharper.Psi.IConstantValuePresenter Presenter { get; }
        public override JetBrains.ReSharper.Psi.ConstantValue GetDefaultValue(JetBrains.ReSharper.Psi.IType type) { }
        public override bool IsLegalConstantType(JetBrains.ReSharper.Psi.IType type) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.ControlFlow
{
    
    public class static ControlFlowUtil
    {
        public static System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IAssignmentExpression> FindJoinableDeclarationsAndAssignments(JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowAnalysisResult controlFlowAnalysisResult, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Tree.IStatement> availableStatements = null) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement JoinDeclarationsAndAssignments(JetBrains.ReSharper.Psi.CSharp.Tree.IAssignmentExpression assignmentExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration variableDeclaration) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.DeclaredElements
{
    
    public interface IAlias : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement { }
    public interface IAnonymousMethod : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParametersOwner { }
    public interface ICSharpAnonymousTypeProperty : JetBrains.ReSharper.Psi.IAnonymousTypeProperty, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner
    {
        JetBrains.ReSharper.Psi.CSharp.ICSharpAnonymousType ContainingType { get; }
    }
    public interface ICSharpLocalVariable : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ILocalVariable, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable
    {
        bool IsImplicitlyTyped { get; }
    }
    public interface IExternAlias : JetBrains.ReSharper.Psi.CSharp.DeclaredElements.IAlias, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement
    {
        bool IsGlobal { get; }
    }
    public interface ILambdaParameter : JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParameter, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable { }
    public interface INamespaceAlias : JetBrains.ReSharper.Psi.CSharp.DeclaredElements.IAlias, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        string ExternAliasName { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.INamespace GetAliasedNamespace();
    }
    public interface IQueryRangeVariable : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryDeclaredElement> RelatedDeclaredElements { get; }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.ExpectedTypes
{
    
    public class ApplicableInvocationCandidate : JetBrains.ReSharper.Psi.ExpectedTypes.InvocationCandidate
    {
        public ApplicableInvocationCandidate(JetBrains.ReSharper.Psi.ExpectedTypes.InvocationCandidate candidate, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> matchResult) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IParameter> MatchedParametersInOrder { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> MatchResult { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IParameter> NotMatchedParameters { get; }
        public JetBrains.ReSharper.Psi.CSharp.ExpectedTypes.ApplicableInvocationCandidate ApplySubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ParameterInstance MatchingParameter(JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo) { }
    }
    public class CSharpConvertibleToWithTypeInference : JetBrains.ReSharper.Psi.ExpectedTypes.ConvertibleToWithTypeInference
    {
        public CSharpConvertibleToWithTypeInference(JetBrains.ReSharper.Psi.IType targetType, bool isExactType, JetBrains.ReSharper.Psi.Resolve.ISubstitution ownerSubstitution, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConstraintForArrayElementType(JetBrains.ReSharper.Psi.IType elementType) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConstraintForDelegateReturnType(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType type) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleToConstraint(JetBrains.ReSharper.Psi.IType type) { }
        public bool Equals(JetBrains.ReSharper.Psi.CSharp.ExpectedTypes.CSharpConvertibleToWithTypeInference other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        protected override bool IsImplicitlyConvertible(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.IType inferredType) { }
        public override string ToString() { }
    }
    public class CSharpExpectedTypeForExpressionAnalyzer
    {
        public CSharpExpectedTypeForExpressionAnalyzer(JetBrains.ReSharper.Psi.CSharp.ExpectedTypes.ICSharpExpectedTypesProvider expectedTypesProvider, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression, JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule typeConversionRule, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeMode mode, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider namingPolicyProvider) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> Calc() { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpExpectedTypesProvider : JetBrains.ReSharper.Psi.CSharp.ExpectedTypes.ICSharpExpectedTypesProvider, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypesProvider
    {
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.Tree.IExpression expression, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeMode mode = 1) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeMode mode = 1) { }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider namingPolicyProvider, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeMode mode = 1) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage typeUsageNode) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage node) { }
    }
    public class static CSharpExpectedTypesUtil
    {
        public static JetBrains.ReSharper.Psi.ExpectedTypes.HeadType GetCommonHeadType(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> expectedTypes) { }
        public static JetBrains.ReSharper.Psi.ExpectedTypes.TailType GetCommonTailType(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> expectedTypes) { }
    }
    public class CSharpExplicitlyConvertibleToConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.ConvertibleToConstraint
    {
        public CSharpExplicitlyConvertibleToConstraint(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public override bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType fromType) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleToConstraint(JetBrains.ReSharper.Psi.IType toType) { }
        protected override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> SolveSubtypingForFrom(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
    public class CSharpHeadType : JetBrains.ReSharper.Psi.ExpectedTypes.HeadType
    {
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.HeadType Await;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.HeadType LBrace;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.HeadType Out;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.HeadType Ref;
        public CSharpHeadType([JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.NotNullAttribute()] string text) { }
    }
    public class CSharpImplicitlyConvertibleFromConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.ConvertibleFromConstraint
    {
        public CSharpImplicitlyConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public override bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType fromType) { }
        public override string ToString() { }
    }
    public class CSharpImplicitlyConvertibleToConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.ConvertibleToConstraint
    {
        public CSharpImplicitlyConvertibleToConstraint(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public override bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleFromConstraint(JetBrains.ReSharper.Psi.IType fromType) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertibleToConstraint(JetBrains.ReSharper.Psi.IType toType) { }
        protected override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> SolveSubtypingForFrom(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
    public class CSharpSuperTypeConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.SuperTypeConstraint
    {
        public CSharpSuperTypeConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertieblFrom(JetBrains.ReSharper.Psi.IType type) { }
        protected override JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint CreateConvertieblTo(JetBrains.ReSharper.Psi.IType type) { }
        public override string ToString() { }
    }
    public sealed class CSharpTailType : JetBrains.ReSharper.Psi.ExpectedTypes.TailType
    {
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType AngularCaretWithin;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType Assignment;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType BracesAndLeaveCaretWithin;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType Colon;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType ColonWithSpaces;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType Comma;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType DoubleColon;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType Parentheses;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType ParenthesesAndLeaveCaretWithin;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType RightAngular;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType RightBrace;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType RightBracket;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType RightParenthesis;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType RightParenthesisWithSemicolon;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType Semicolon;
        public static readonly JetBrains.ReSharper.Psi.ExpectedTypes.TailType Space;
        public override JetBrains.ReSharper.Psi.Parsing.TokenNodeType[] EvaluateTail(JetBrains.ProjectModel.ISolution solution, JetBrains.DocumentModel.IDocument document) { }
    }
    public class ExtensionMethodTypeFilter { }
    public interface ICSharpExpectedTypesProvider : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypesProvider
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeMode mode = 1);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider namingPolicyProvider, JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedTypeMode mode = 1);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage typeUsageNode);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType> GetExpectedTypes(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage node);
    }
    public class InvocationCandidatesEngine
    {
        public InvocationCandidatesEngine(JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo invocation, int argumentIndex, JetBrains.ReSharper.Psi.CSharp.ExpectedTypes.InvocationCandidatesStrategy strategy) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ExpectedTypes.ApplicableInvocationCandidate> ApplicableCandidates { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.InvocationCandidate> Candidates { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ExpectedTypes.ApplicableInvocationCandidate> CandidatesWithMatcher { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ExpectedTypes.InvocationCandidate> NotApplicableCandidates { get; }
        public JetBrains.ReSharper.Psi.ExpectedTypes.InvocationCandidate GetDefaultCandidate() { }
        public int GetDefaultCandidateIndex() { }
    }
    public struct InvocationCandidatesStrategy
    {
        public InvocationCandidatesStrategy(JetBrains.ReSharper.Psi.CSharp.ExpectedTypes.ProcessInvocationArgs typeInference, JetBrains.ReSharper.Psi.CSharp.ExpectedTypes.ProcessInvocationArgs applicability, bool strictArgumentNumber) { }
        public JetBrains.ReSharper.Psi.CSharp.ExpectedTypes.ProcessInvocationArgs Applicability { get; }
        public bool StrictArgumentNumber { get; }
        public JetBrains.ReSharper.Psi.CSharp.ExpectedTypes.ProcessInvocationArgs TypeInference { get; }
    }
    public class ObjectCreationExpressionConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public ObjectCreationExpressionConstraint(JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint baseConstraint) { }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
    public class ParameterInfoFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public ParameterInfoFilter(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class PredefinedOperatorsConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public PredefinedOperatorsConstraint(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> types, JetBrains.ReSharper.Psi.IType defaultType) { }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
    }
    public enum ProcessInvocationArgs
    {
        UP_TO = 0,
        BACK_TO = 1,
        EXCEPT = 2,
        ALL = 3,
        GROUP_BY = 4,
    }
    public class SwitchConditionTypeConstraint : JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint
    {
        public SwitchConditionTypeConstraint(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public SwitchConditionTypeConstraint(JetBrains.ReSharper.Psi.Modules.IPsiModule module, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IExpressionType> types, JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public bool Accepts(JetBrains.ReSharper.Psi.IType type) { }
        public bool AcceptsWithTypeInference(JetBrains.ReSharper.Psi.IType t, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters, out JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution) { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForArrayElementType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType() { }
        public JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint GetConstraintForDelegateReturnType(int parametersCount) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetDefaultTypes() { }
        public JetBrains.ReSharper.Psi.IType[] GetTypesEffectively() { }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ExpectedTypes.IExpectedTypeConstraint> InferTypeArguments(JetBrains.ReSharper.Psi.IType typeToInfer, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferrableTypeParameters) { }
        public override string ToString() { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.ExtensionMethods
{
    
    public class static CSharpExtensionMethodsHelper
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ExtensionMethodAccessibility IsExtensionMethodAccessible(JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, string qualifyingExternAlias, System.Version languageVersion) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.ExtensionMethodAccessibility IsExtensionMethodAccessible(JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Modules.IPsiModule module, string qualifyingExternAlias, System.Version languageVersion) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ResolveErrorType IsExtensionMethodApplicable(JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo extensionArgument, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> typeArguments, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode context) { }
    }
    public abstract class CSharpExtensionMethodsRegistry : JetBrains.ReSharper.Psi.ExtensionMethods.IExtensionMethodRegistry
    {
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery GetAllExtensionMethods(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext);
        public static JetBrains.ReSharper.Psi.CSharp.ExtensionMethods.CSharpExtensionMethodsRegistry GetInstance(JetBrains.ProjectModel.ISolution solution) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Gen
{
    
    public sealed class ErrorMessages
    {
        public static string GetErrorMessage0() { }
        public static string GetErrorMessage1() { }
        public static string GetErrorMessage10() { }
        public static string GetErrorMessage100() { }
        public static string GetErrorMessage101() { }
        public static string GetErrorMessage102() { }
        public static string GetErrorMessage103() { }
        public static string GetErrorMessage104() { }
        public static string GetErrorMessage105() { }
        public static string GetErrorMessage106() { }
        public static string GetErrorMessage107() { }
        public static string GetErrorMessage108() { }
        public static string GetErrorMessage109() { }
        public static string GetErrorMessage11() { }
        public static string GetErrorMessage110() { }
        public static string GetErrorMessage111() { }
        public static string GetErrorMessage112() { }
        public static string GetErrorMessage113() { }
        public static string GetErrorMessage114() { }
        public static string GetErrorMessage115() { }
        public static string GetErrorMessage116() { }
        public static string GetErrorMessage117() { }
        public static string GetErrorMessage118() { }
        public static string GetErrorMessage119() { }
        public static string GetErrorMessage12() { }
        public static string GetErrorMessage120() { }
        public static string GetErrorMessage121() { }
        public static string GetErrorMessage122() { }
        public static string GetErrorMessage123() { }
        public static string GetErrorMessage124() { }
        public static string GetErrorMessage125() { }
        public static string GetErrorMessage126() { }
        public static string GetErrorMessage127() { }
        public static string GetErrorMessage128() { }
        public static string GetErrorMessage129() { }
        public static string GetErrorMessage13() { }
        public static string GetErrorMessage130() { }
        public static string GetErrorMessage131() { }
        public static string GetErrorMessage132() { }
        public static string GetErrorMessage133() { }
        public static string GetErrorMessage134() { }
        public static string GetErrorMessage135() { }
        public static string GetErrorMessage136() { }
        public static string GetErrorMessage137() { }
        public static string GetErrorMessage138() { }
        public static string GetErrorMessage139() { }
        public static string GetErrorMessage14() { }
        public static string GetErrorMessage140() { }
        public static string GetErrorMessage141() { }
        public static string GetErrorMessage142() { }
        public static string GetErrorMessage143() { }
        public static string GetErrorMessage144() { }
        public static string GetErrorMessage145() { }
        public static string GetErrorMessage146() { }
        public static string GetErrorMessage147() { }
        public static string GetErrorMessage148() { }
        public static string GetErrorMessage149() { }
        public static string GetErrorMessage15() { }
        public static string GetErrorMessage150() { }
        public static string GetErrorMessage151() { }
        public static string GetErrorMessage152() { }
        public static string GetErrorMessage153() { }
        public static string GetErrorMessage154() { }
        public static string GetErrorMessage155() { }
        public static string GetErrorMessage156() { }
        public static string GetErrorMessage157() { }
        public static string GetErrorMessage158() { }
        public static string GetErrorMessage159() { }
        public static string GetErrorMessage16() { }
        public static string GetErrorMessage160() { }
        public static string GetErrorMessage161() { }
        public static string GetErrorMessage162() { }
        public static string GetErrorMessage163() { }
        public static string GetErrorMessage164() { }
        public static string GetErrorMessage165() { }
        public static string GetErrorMessage166() { }
        public static string GetErrorMessage167() { }
        public static string GetErrorMessage168() { }
        public static string GetErrorMessage169() { }
        public static string GetErrorMessage17() { }
        public static string GetErrorMessage170() { }
        public static string GetErrorMessage171() { }
        public static string GetErrorMessage172() { }
        public static string GetErrorMessage173() { }
        public static string GetErrorMessage174() { }
        public static string GetErrorMessage175() { }
        public static string GetErrorMessage176() { }
        public static string GetErrorMessage177() { }
        public static string GetErrorMessage178() { }
        public static string GetErrorMessage179() { }
        public static string GetErrorMessage18() { }
        public static string GetErrorMessage180() { }
        public static string GetErrorMessage181() { }
        public static string GetErrorMessage182() { }
        public static string GetErrorMessage183() { }
        public static string GetErrorMessage184() { }
        public static string GetErrorMessage185() { }
        public static string GetErrorMessage186() { }
        public static string GetErrorMessage187() { }
        public static string GetErrorMessage188() { }
        public static string GetErrorMessage189() { }
        public static string GetErrorMessage19() { }
        public static string GetErrorMessage190() { }
        public static string GetErrorMessage191() { }
        public static string GetErrorMessage192() { }
        public static string GetErrorMessage193() { }
        public static string GetErrorMessage194() { }
        public static string GetErrorMessage195() { }
        public static string GetErrorMessage196() { }
        public static string GetErrorMessage197() { }
        public static string GetErrorMessage198() { }
        public static string GetErrorMessage199() { }
        public static string GetErrorMessage2() { }
        public static string GetErrorMessage20() { }
        public static string GetErrorMessage200() { }
        public static string GetErrorMessage201() { }
        public static string GetErrorMessage202() { }
        public static string GetErrorMessage203() { }
        public static string GetErrorMessage204() { }
        public static string GetErrorMessage205() { }
        public static string GetErrorMessage206() { }
        public static string GetErrorMessage207() { }
        public static string GetErrorMessage208() { }
        public static string GetErrorMessage209() { }
        public static string GetErrorMessage21() { }
        public static string GetErrorMessage210() { }
        public static string GetErrorMessage211() { }
        public static string GetErrorMessage212() { }
        public static string GetErrorMessage213() { }
        public static string GetErrorMessage214() { }
        public static string GetErrorMessage215() { }
        public static string GetErrorMessage216() { }
        public static string GetErrorMessage217() { }
        public static string GetErrorMessage218() { }
        public static string GetErrorMessage219() { }
        public static string GetErrorMessage22() { }
        public static string GetErrorMessage220() { }
        public static string GetErrorMessage221() { }
        public static string GetErrorMessage222() { }
        public static string GetErrorMessage223() { }
        public static string GetErrorMessage224() { }
        public static string GetErrorMessage225() { }
        public static string GetErrorMessage226() { }
        public static string GetErrorMessage23() { }
        public static string GetErrorMessage24() { }
        public static string GetErrorMessage25() { }
        public static string GetErrorMessage26() { }
        public static string GetErrorMessage27() { }
        public static string GetErrorMessage28() { }
        public static string GetErrorMessage29() { }
        public static string GetErrorMessage3() { }
        public static string GetErrorMessage30() { }
        public static string GetErrorMessage31() { }
        public static string GetErrorMessage32() { }
        public static string GetErrorMessage33() { }
        public static string GetErrorMessage34() { }
        public static string GetErrorMessage35() { }
        public static string GetErrorMessage36() { }
        public static string GetErrorMessage37() { }
        public static string GetErrorMessage38() { }
        public static string GetErrorMessage39() { }
        public static string GetErrorMessage4() { }
        public static string GetErrorMessage40() { }
        public static string GetErrorMessage41() { }
        public static string GetErrorMessage42() { }
        public static string GetErrorMessage43() { }
        public static string GetErrorMessage44() { }
        public static string GetErrorMessage45() { }
        public static string GetErrorMessage46() { }
        public static string GetErrorMessage47() { }
        public static string GetErrorMessage48() { }
        public static string GetErrorMessage49() { }
        public static string GetErrorMessage5() { }
        public static string GetErrorMessage50() { }
        public static string GetErrorMessage51() { }
        public static string GetErrorMessage52() { }
        public static string GetErrorMessage53() { }
        public static string GetErrorMessage54() { }
        public static string GetErrorMessage55() { }
        public static string GetErrorMessage56() { }
        public static string GetErrorMessage57() { }
        public static string GetErrorMessage58() { }
        public static string GetErrorMessage59() { }
        public static string GetErrorMessage6() { }
        public static string GetErrorMessage60() { }
        public static string GetErrorMessage61() { }
        public static string GetErrorMessage62() { }
        public static string GetErrorMessage63() { }
        public static string GetErrorMessage64() { }
        public static string GetErrorMessage65() { }
        public static string GetErrorMessage66() { }
        public static string GetErrorMessage67() { }
        public static string GetErrorMessage68() { }
        public static string GetErrorMessage69() { }
        public static string GetErrorMessage7() { }
        public static string GetErrorMessage70() { }
        public static string GetErrorMessage71() { }
        public static string GetErrorMessage72() { }
        public static string GetErrorMessage73() { }
        public static string GetErrorMessage74() { }
        public static string GetErrorMessage75() { }
        public static string GetErrorMessage76() { }
        public static string GetErrorMessage77() { }
        public static string GetErrorMessage78() { }
        public static string GetErrorMessage79() { }
        public static string GetErrorMessage8() { }
        public static string GetErrorMessage80() { }
        public static string GetErrorMessage81() { }
        public static string GetErrorMessage82() { }
        public static string GetErrorMessage83() { }
        public static string GetErrorMessage84() { }
        public static string GetErrorMessage85() { }
        public static string GetErrorMessage86() { }
        public static string GetErrorMessage87() { }
        public static string GetErrorMessage88() { }
        public static string GetErrorMessage89() { }
        public static string GetErrorMessage9() { }
        public static string GetErrorMessage90() { }
        public static string GetErrorMessage91() { }
        public static string GetErrorMessage92() { }
        public static string GetErrorMessage93() { }
        public static string GetErrorMessage94() { }
        public static string GetErrorMessage95() { }
        public static string GetErrorMessage96() { }
        public static string GetErrorMessage97() { }
        public static string GetErrorMessage98() { }
        public static string GetErrorMessage99() { }
    }
    public class static TokenBitsets
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_0;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_1;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_10;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_11;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_12;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_13;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_14;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_15;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_16;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_17;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_18;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_19;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_2;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_20;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_21;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_22;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_23;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_24;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_25;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_26;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_27;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_28;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_29;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_3;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_4;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_5;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_6;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_7;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_8;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ElementBitset_9;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST___ArglistExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_accessorDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_accessorDeclarations;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_accessorOwnerDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_additiveExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_anonymousMemberDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_anonymousMethodExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_anonymousMethodParameterDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_anonymousMethodSignature;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_anonymousObjectCreationExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_anonymousObjectInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_arglistParameterDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_argumentList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_argumentListAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_argumentListAux2;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_arrayCreationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_arrayCreationExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_arrayCreationExpressionAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_arrayInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_asExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_assignmentExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_assignmentOperatorAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_attribute;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_attributeArguments;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_attributeList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_attributeSection;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_attributeSectionList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_attributesOwnerDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_awaitExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_baseExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_binaryExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_bitwiseAndExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_bitwiseExclusiveOrExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_bitwiseInclusiveOrExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_block;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_booleanExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_breakStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_castExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_catchClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_catchClauses;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_catchVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_checkedExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_checkedStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_classBody;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_classDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_classLikeDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_classMemberDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_classMemberDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_classMemberDeclarationAux1;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_classMemberDeclarationAuxError;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_collectionElementInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_collectionElementInitializerAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_collectionInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_compilationUnit;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_conditionalAndExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_conditionalOrExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_conditionalTernaryExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_constantDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_constantExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_constructorConstraint;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_constructorDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_constructorDeclarator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_constructorInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_continueStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_conversionOperatorDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_conversionOperatorDeclarator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_creationExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_creationExpressionInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpArgument;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpArgumentsOwner;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpFile;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpFunctionDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpLiteralExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpModifiersOwnerDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpNamespaceDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpParameterDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpParametersOwnerDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpTypeAndNamespaceHolderDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpTypeDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_cSharpTypeMemberDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_declarationOrExpressionOrLabelStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_declarationOrExpressionOrLabelStatementError;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_declarationStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_declaredTypeUsage;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_defaultExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_defineDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_delegateDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_destructorDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_docCRefElement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_docCRefElementAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_docCRefExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_docCRefGenericsLAngle;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_docCRefGenericsRAngle;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_DocCRefIdentifierOrKeyword;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_docCRefParameter;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_docCRefParameterType;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_docCRefParameterTypeName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_docCRefParameterTypeNameAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_docCRefSignature;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_docCRefTypeParameter;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_docCRefTypeParameterList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_doStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_dynamicDeclaredTypeUsage;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_dynamicTypeUsage;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_dynamicTypeUsageOfDeclaredType;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_elementAccessExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_elifDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_elseDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_embeddedStatementAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_embeddedStatementNoIdentifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_emptyStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_endifDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_endRegion;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_enumBase;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_enumBody;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_enumDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_enumMemberDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_enumMemberDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_equalityExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_erroneousBlock;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_errorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_errorElement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_errorHandlingExpressionBeforeRPar;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_errorHandlingExpressionLockStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_errorHandlingTypeUsageBeforeRPar;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_eventAccessorDeclarations;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_eventDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_exceptionDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_explicitLambdaParameterDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_expressionInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_expressionStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_extendsList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_externAliasDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_externAliasDirectivesAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_fakeMethodDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_fakeMethodDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_fieldDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_fieldDeclaratorFull;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_fieldDeclarators;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_finallyClauseAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_floatingPointType;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_forCondition;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_foreachHeader;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_foreachHeaderAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_foreachStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_foreachVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_forHeader;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_forInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_forIterator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_formalParameterList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_forStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_functionBody;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_generalCatchClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_globalAttributeSectionAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_gotoCaseStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_gotoStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_gotoStatementAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_identifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_ifDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_ifStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_implicitLambdaParameterDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_indexerDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_indexerDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_indexerDeclarator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_initializerElement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_integralType;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_interfaceDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_interfaceQualificationOwner;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_invocationExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_isExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_iterationStatementAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_jumpStatementAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_labelDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_labelReferenceElement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_labelStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lambdaExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lambdaParameterDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lambdaParameterDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lambdaSignature;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lineDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lineIndicator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_localConstantDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_localVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_lockStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_memberInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_memberInitializerAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_memberInitializerRightPart;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_memberOwnerBody;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_memberOwnerDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_methodDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_methodHeader;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_modifiersList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multipleConstantDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multipleDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multipleDeclarationMember;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multipleEventDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multipleEventDeclarationTerminator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multipleFieldDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multipleFixedPointerDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multipleLocalConstantDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multipleLocalVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_multiplicativeExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_namespaceBody;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_namespaceErroneousBlock;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_namespaceMemberDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_namespaceOrTypeName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_namespaceOrTypeNameFull;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_neverCallThis;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_nullableTypeMark;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_nullCoalescingExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_numericType;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_objectCreationExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_objectCreationExpressionAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_objectInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_operatorDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_operatorExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_otherStructMemberDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_ownerQualification;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_ownerQualificationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_parameterAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_parameterModifiers;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_parenthesizedExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_postfixOperatorExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_pragmaDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_predefinedDeclaredTypeUsage;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_predefinedTypeExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_predefinedTypeReference;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_predefinedTypeUsage;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_prefixOperatorExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessor;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorAndExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorConditionalSymbol;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorConstant;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorDirectiveAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorEqualityExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorErrorDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorNegation;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorOrExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorParenthesizedExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorPragmaBody;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_preprocessorUnaryExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_primaryExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_propertyAssignment;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_propertyDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryBody;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryClausesHolder;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryContinuation;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryFirstFrom;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryFromClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryGroupClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryJoinClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryLetClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryOrderByClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryOrdering;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryParameterPlatform;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryRangeVariableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_querySelectClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_queryWhereClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_rankSpecifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_referenceConstraint;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_referenceExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_referenceName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_regularParameterDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_regularParameterModifiers;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_relationalExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_resourceAcquisition;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_resourceAcquisitionExpressionsList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_returnStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_selectionStatementAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_shiftExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_signOperatorDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_signOperatorDeclarator;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_signOperatorSign;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_specificCatchClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_startRegion;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_statementAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_structDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_structMemberDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_structMemberDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_switchLabelStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_switchStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_theFMPIDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_theFMPIDeclarationAuxError;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_theFMPIODeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_theFMPIOorIdentifierDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_theMPDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_theMPIDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_thisExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_throwStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_tryStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeArgumentList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeConstraint;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeDeclarationAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeDeclarationAuxError;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeMemberModifier;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeName;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeofExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterConstraint;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterConstraintsClause;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterOfMethodDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterOfMethodList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterOfTypeDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterOfTypeList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeParameterReference;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeUsage;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeUsageInStackAlloc;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_typeUsageOfDeclaredType;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unaryExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unaryOperatorExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_uncheckedExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_uncheckedStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_undefDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unsafeCodeAddressOfExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unsafeCodeFixedPointerDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unsafeCodeFixedPointerInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unsafeCodeFixedStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unsafeCodePointer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unsafeCodePointerAccessExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unsafeCodePointerIndirectionExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unsafeCodeSizeOfExpression;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unsafeCodeStackAllocInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_unsafeCodeUnsafeStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_userDeclaredTypeUsage;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_userTypeUsage;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_usingAliasDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_usingDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_usingDirectiveAux;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_usingDirectiveAuxError;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_usingList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_usingNamespaceDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_usingStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_valueConstraint;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_variableDeclaration;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_variableInitializer;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_variableReference;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_warningAction;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_warningDirective;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_warningList;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_whileStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet FIRST_yieldStatement;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_0;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_1;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_10;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_11;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_12;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_13;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_14;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_15;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_16;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_17;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_18;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_19;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_2;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_20;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_21;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_22;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_23;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_24;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_25;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_26;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_27;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_28;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_29;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_3;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_30;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_31;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_32;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_33;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_34;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_35;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_36;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_37;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_38;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_39;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_4;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_40;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_41;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_42;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_43;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_44;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_45;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_46;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_47;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_48;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_49;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_5;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_50;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_51;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_52;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_53;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_54;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_55;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_56;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_57;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_58;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_59;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_6;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_7;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_8;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TokenBitset_9;
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.GeneratedCode
{
    
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpGeneratedCodeRegionChecker : JetBrains.ReSharper.Psi.GeneratedCode.GeneratedCodeRegionChecker
    {
        protected override JetBrains.ReSharper.Psi.Impl.CodeStyle.IGeneratedCodeRegionDetector CreateDetector(JetBrains.Application.Settings.IContextBoundSettingsStore settingsStore) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle
{
    
    public class CSharpCodeFormattingContext : JetBrains.ReSharper.Psi.Impl.CodeStyle.CodeFormattingContext
    {
        public CSharpCodeFormattingContext(JetBrains.ReSharper.Psi.Impl.CodeStyle.ICodeFormatterImpl codeFormatter, JetBrains.ReSharper.Psi.Tree.ITreeNode firstNode, JetBrains.ReSharper.Psi.Tree.ITreeNode lastNode) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.ICSharpCustomFormattingInfoProvider CustomFormattingInfoProvider { get; }
    }
    public class CSharpFmtStageContext : JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingStageContext
    {
        public CSharpFmtStageContext(JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingRange range, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingStageContext, int> minLineFeedsCalc) { }
        public int MinLineFeeds { get; }
    }
    public class CSharpFormatProfile
    {
        public CSharpFormatProfile(JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFormatProfile.ProfileOptions mask) { }
        public bool DontForceBraces { get; }
        public bool DontForceSingleline { get; }
        public bool DontKeepLinebreaks { get; }
        public bool DontRemoveExtraBlankLines { get; }
        public bool DontWrap { get; }
        public bool ForceDecorateModifiers { get; }
        public bool Format { get; }
        public JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFormatProfile.ProfileOptions Mask { get; }
        [System.FlagsAttribute()]
        public enum ProfileOptions
        {
            None = 0,
            Format = 1,
            ForceDecorateModifiers = 2,
            DontKeepLineBreaks = 4,
            DontForceBraces = 8,
            DontForceSingleline = 8,
            DontRemoveExtraBlankLines = 32,
            DontWrap = 64,
        }
    }
    public class DummyCSharpCustomFormattingInfoProvider : JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.ICSharpCustomFormattingInfoProvider
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.DummyCSharpCustomFormattingInfoProvider Instance;
        public virtual JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpCodeFormattingSettings AdjustFormattingSettings(JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpCodeFormattingSettings settings, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore, JetBrains.Application.Settings.ISettingsOptimization settingsOptimization) { }
        public virtual bool AllowDecoration(JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpCodeFormattingContext context) { }
        public virtual bool CanDeBlock(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock node) { }
        public virtual bool CanModifyInsideNodeRange(JetBrains.ReSharper.Psi.Tree.ITreeNode leftElement, JetBrains.ReSharper.Psi.Tree.ITreeNode rightElement) { }
        public virtual bool CanModifyNode(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public virtual bool CanWrap(JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingStageContext context) { }
        public virtual JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.SpaceType GetBlockSpaceType(JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFmtStageContext context) { }
        public virtual JetBrains.ReSharper.Psi.Tree.ITreeNode GetLChild(JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFmtStageContext context) { }
        public virtual void RunFormatterForEmbeddedLanguages(JetBrains.ReSharper.Psi.Tree.IFile currentFile, JetBrains.ReSharper.Psi.TreeTextRange range, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public virtual JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.SpaceType VisitArgumentList(JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFmtStageContext context) { }
        public virtual JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.SpaceType VisitInvocationExpression(JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFmtStageContext context) { }
    }
    public interface ICSharpCustomFormattingInfoProvider
    {
        JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpCodeFormattingSettings AdjustFormattingSettings(JetBrains.ReSharper.Psi.CSharp.CodeStyle.CSharpCodeFormattingSettings settings, JetBrains.Application.Settings.IContextBoundSettingsStore contextBoundSettingsStore, JetBrains.Application.Settings.ISettingsOptimization settingsOptimization);
        bool AllowDecoration(JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpCodeFormattingContext context);
        bool CanDeBlock(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock node);
        bool CanModifyInsideNodeRange(JetBrains.ReSharper.Psi.Tree.ITreeNode leftElement, JetBrains.ReSharper.Psi.Tree.ITreeNode rightElement);
        bool CanModifyNode(JetBrains.ReSharper.Psi.Tree.ITreeNode element);
        bool CanWrap(JetBrains.ReSharper.Psi.Impl.CodeStyle.FormattingStageContext context);
        JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.SpaceType GetBlockSpaceType(JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFmtStageContext context);
        JetBrains.ReSharper.Psi.Tree.ITreeNode GetLChild(JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFmtStageContext context);
        void RunFormatterForEmbeddedLanguages(JetBrains.ReSharper.Psi.Tree.IFile currentFile, JetBrains.ReSharper.Psi.TreeTextRange range, JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile profile, JetBrains.Application.Progress.IProgressIndicator progressIndicator);
        JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.SpaceType VisitArgumentList(JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFmtStageContext context);
        JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.SpaceType VisitInvocationExpression(JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.CSharpFmtStageContext context);
    }
    public enum SpaceType
    {
        Default = 0,
        NoSpace = 1,
        Horizontal = 2,
        Vertical = 3,
    }
    public class static ThisQualifierUtil
    {
        public static void ArrangeThisQualifiers([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile file, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.DocumentModel.IRangeMarker rangeMarker, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Impl.CodeStyle.IGeneratedCodeRegionDetector regionDetector, JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ThisQualifierStyle settings) { }
        public static bool ThisQualifierNecessaryByStyle([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression expression, JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.ThisQualifierStyle settings) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.MemberReordering
{
    
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=false)]
    public class GroupKeyAttribute : JetBrains.ReSharper.Psi.PsiSharedComponentAttribute
    {
        public GroupKeyAttribute(string name) { }
        public string Name { get; }
    }
    public interface IGroupKey
    {
        bool Compare(JetBrains.ReSharper.Psi.IClrDeclaredElement x, JetBrains.ReSharper.Psi.IClrDeclaredElement y, System.Xml.XmlElement element);
        string MacroValue(JetBrains.ReSharper.Psi.IClrDeclaredElement member, System.Xml.XmlElement element);
    }
    public interface IMatchFunction
    {
        bool Evaluate(System.Xml.XmlElement function, JetBrains.ReSharper.Psi.IClrDeclaredElement element, out int weight);
    }
    public interface ISortKey
    {
        int Compare(JetBrains.ReSharper.Psi.IClrDeclaredElement x, JetBrains.ReSharper.Psi.IClrDeclaredElement y, System.Xml.XmlElement element);
    }
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=false)]
    public class MatchFunctionAttribute : JetBrains.ReSharper.Psi.PsiSharedComponentAttribute
    {
        public MatchFunctionAttribute(string name) { }
        public string Name { get; }
    }
    public class MemberReorderingException : System.Exception
    {
        public MemberReorderingException(string message) { }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class MemberReorderingManager
    {
        public const string NamespacePrefix = "mr:";
        public MemberReorderingManager(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.MemberReordering.IMatchFunction> functions, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.MemberReordering.ISortKey> sortKeys, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.MemberReordering.IGroupKey> groupKeys) { }
        public static JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.MemberReordering.MemberReorderingManager Instance { get; }
        public void ApplyWeigth(System.Xml.XmlElement function, ref int weight) { }
        public bool EvaluateFunction(System.Xml.XmlElement function, JetBrains.ReSharper.Psi.IClrDeclaredElement element, out int weight) { }
        public bool EvaluateSingleInnerFunction(System.Xml.XmlElement container, JetBrains.ReSharper.Psi.IClrDeclaredElement element, out int weight) { }
        public System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.MemberReordering.IMatchFunction, System.Xml.XmlElement>> GetChildren(System.Xml.XmlElement function) { }
        public JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.MemberReordering.IGroupKey GetGroupKey(string name) { }
        public JetBrains.ReSharper.Psi.CSharp.Impl.CodeStyle.MemberReordering.ISortKey GetSortKey(string name) { }
        public System.Xml.XmlElement SelectBestMatch(System.Collections.Generic.IEnumerable<System.Xml.XmlElement> matchContainers, JetBrains.ReSharper.Psi.IClrDeclaredElement element, System.Xml.XmlNamespaceManager namespaceManager) { }
    }
    public class MemberReorderingProcess
    {
        public MemberReorderingProcess([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassLikeDeclaration declaration, [JetBrains.Annotations.NotNullAttribute()] System.Xml.XmlElement patterns, [JetBrains.Annotations.NotNullAttribute()] System.Xml.XmlNamespaceManager namespaceManager) { }
        public void Run() { }
    }
    [JetBrains.Annotations.MeansImplicitUseAttribute()]
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=false)]
    public class SortKeyAttribute : JetBrains.ReSharper.Psi.PsiSharedComponentAttribute
    {
        public SortKeyAttribute(string name) { }
        public string Name { get; }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.Completion
{
    
    public class static CompletionUtil
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable ApplyReferenceExpressionFilters(JetBrains.ReSharper.Psi.Resolve.IAccessContext context, JetBrains.ReSharper.Psi.Tree.ITreeNode element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable ApplyReferenceNameFilters(JetBrains.ReSharper.Psi.Resolve.IAccessContext context, JetBrains.ReSharper.Psi.Tree.ITreeNode element, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable) { }
    }
    public class CSharpStaticCompletionFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolInfoFilter
    {
        public CSharpStaticCompletionFilter(JetBrains.ReSharper.Psi.Resolve.IAccessContext context) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo symbolInfo) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow
{
    
    public struct BitVectorArray
    {
        public BitVectorArray(short items, short bitsPerItem) { }
        [JetBrains.Annotations.PureAttribute()]
        public System.Collections.Generic.IList<int> Bits(int item) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool Clear(int item, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.BitVectorArray result) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool Copy(int from, int to, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.BitVectorArray result) { }
        public override bool Equals(object obj) { }
        [JetBrains.Annotations.PureAttribute()]
        public bool GetBit(int item, int bit) { }
        public override int GetHashCode() { }
        [JetBrains.Annotations.PureAttribute()]
        public bool SetBit(int item, int bit, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.BitVectorArray result) { }
    }
    public class ControlFlowClosureVariableInfo : JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo
    {
        public ControlFlowClosureVariableInfo(JetBrains.ReSharper.Psi.IClrDeclaredElement element, bool isReadOnly, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowAnnotationCache annotationCache) { }
        public override JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue[] InitialNreValue { get; set; }
        public override bool IsWeak { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo> StructFields { get; }
        public override JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.ControlFlowVariableType VariableType { get; }
    }
    public class ControlFlowHistoryCheckPointInfo : JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo
    {
        public ControlFlowHistoryCheckPointInfo(JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement point, JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement validityDomain, JetBrains.ReSharper.Psi.IExpressionType expressionType) { }
        public JetBrains.ReSharper.Psi.IExpressionType ExpressionType { get; }
        public override JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue[] InitialNreValue { get; set; }
        public override bool IsOfNullableType { get; }
        public override bool IsOfValueType { get; }
        public override bool IsWeak { get; }
        public override JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo Parent { get; set; }
        public JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement Point { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo> StructFields { get; }
        public JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement ValidityDomain { get; }
        public override JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.ControlFlowVariableType VariableType { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public bool IsInDomain(JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement element) { }
    }
    public class ControlFlowStrictVariableInfo : JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo
    {
        public ControlFlowStrictVariableInfo(JetBrains.ReSharper.Psi.IClrDeclaredElement element, JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableAccessState initialState, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowAnnotationCache annotationCache, JetBrains.ReSharper.Psi.ControlFlow.ValueAnalysisMode valueAnalysisMode, bool shouldBeAssignedUponExit) { }
        public override JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue[] InitialNreValue { get; set; }
        public override bool IsWeak { get; }
        public override bool ShouldBeAssignedUponExit { get; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo> StructFields { get; }
        public override JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.ControlFlowVariableType VariableType { get; }
        public void AddStructField(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.ControlFlowStrictVariableInfo info) { }
    }
    [System.FlagsAttribute()]
    public enum ControlFlowVariableType
    {
        STRICTLY_CONTROLLED = 1,
        STABLE_VALUE = 2,
    }
    public class ControlFlowWeakVariableInfo : JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo
    {
        public ControlFlowWeakVariableInfo(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression accessExpression, JetBrains.ReSharper.Psi.TypeMemberInstance typeMember, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue initialNreValue) { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression AccessExpression { get; }
        public override JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue[] InitialNreValue { get; set; }
        public bool IsStatic { get; }
        public override bool IsWeak { get; }
        public override JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo Parent { get; set; }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo> StructFields { get; }
        public override JetBrains.ReSharper.Psi.IType Type { get; }
        public override JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.ControlFlowVariableType VariableType { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public class QualifierEqualityComparer : System.Collections.Generic.IEqualityComparer<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression>
        {
            public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.ControlFlowWeakVariableInfo.QualifierEqualityComparer Instance;
            public bool Equals(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression x, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression y) { }
            public int GetHashCode(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
            public bool IsEligble(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        }
    }
    public class CSharpControlFlowAnnotationCache
    {
        public CSharpControlFlowAnnotationCache(JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationsCache annotationsCache) { }
        public virtual JetBrains.ReSharper.Psi.CodeAnnotations.IContractAnnotationFDT GetContractAnnotaion(JetBrains.ReSharper.Psi.IMethod method) { }
        public virtual bool GetInstantHandle(JetBrains.ReSharper.Psi.IParameter parameter) { }
        public virtual bool GetLinqTunnel(JetBrains.ReSharper.Psi.IMethod method) { }
        public virtual bool GetNoEnumeration(JetBrains.ReSharper.Psi.IParameter parameter) { }
        public virtual JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpControlFlowNullReferenceState GetNullableAttributeState(JetBrains.ReSharper.Psi.IAttributesOwner element) { }
        public virtual System.Nullable<JetBrains.Annotations.AssertionConditionType> GetParameterAssertionCondition(JetBrains.ReSharper.Psi.IParameter parameter) { }
        public virtual bool IsAssertionMethod(JetBrains.ReSharper.Psi.IMethod method) { }
        public virtual bool IsTerminatingMethod(JetBrains.ReSharper.Psi.IMethod method) { }
    }
    public class CSharpControlFlowContext : JetBrains.ReSharper.Psi.ControlFlow.Impl.ICommonLanguageControlFlowContext<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo>
    {
        public CSharpControlFlowContext([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContextFactory contextFactory, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableIndex variableIndex, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.TypeCompatibilityCache typeCompatibilityCache, JetBrains.ReSharper.Psi.ControlFlow.ValueAnalysisMode valueAnalysis) { }
        public CSharpControlFlowContext(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext context) { }
        public CSharpControlFlowContext(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext context, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext parent) { }
        public CSharpControlFlowContext(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext> contexts) { }
        public bool IsMemorySnapshotComplexityOverflow { get; set; }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableAccessState this[JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info] { get; set; }
        public int MemorySnapshotHiveCount { get; }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext ParentContext { get; }
        public bool RecursiveAtAllPaths { get; set; }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableIndex VariableIndex { get; }
        public void AddNotTypeSpecification(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, JetBrains.ReSharper.Psi.IType type) { }
        public void AddRecentAccessInClosure(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void AddToRecentAssignmentsList(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void AddToRecentUsagesList(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void AddTypeSpecification(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, JetBrains.ReSharper.Psi.IType type) { }
        public bool CanExpressionBeInState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue value) { }
        public bool CanVariableBeInState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue value) { }
        public bool CanVariableBeOfGivenType(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule typeConversionRule) { }
        public void ClearAllMemoryStates() { }
        public void ClearExpressionType() { }
        public void ClearRecentAccessInClosure(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        public void ClearRecentAssignmentsList(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        public void ClearVariableType(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext Clone() { }
        public void CopyExpressionMemoryStateToVariableState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        public void CopyVariableMemoryStateToVariableState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo from, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo to) { }
        public void CopyVariableNullReferenceStateToExpressionState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo> EnumerateVariables() { }
        public override bool Equals(object obj) { }
        public System.Nullable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue> GetExpressionDefiniteState() { }
        public override int GetHashCode() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.IType> GetKnownSubtypes(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetRecentAccessInClosure(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetRecentAssignmentsList(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> GetTypeSpecification(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.ITreeNode> GetUsagesOfRecentAssignments(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, JetBrains.ReSharper.Psi.Tree.ITreeNode assignment) { }
        public System.Nullable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue> GetVariableDefiniteState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo GetVariableInfo(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public bool IsExpressionDefinitelyInState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue value) { }
        public bool IsVariableDefinitelyInState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue value) { }
        public void MergeMemorySnapshotFrom(bool includeThis, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContextFactory contextFactory, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext> contexts) { }
        public void ResetVariableNreState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, bool clearTypeSpecification = False) { }
        public void SetExpressionMemoryState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue value) { }
        public void SetExpressionMemoryStateToBooleanLogicalNotOperatorResult() { }
        public void SetExpressionMemoryStateToBooleanOperatorResult(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo historyCheckPoint, string opName) { }
        public void SetExpressionMemoryStateToDelegateOperatorResult(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo leftInfo, string opName) { }
        public void SetExpressionMemoryStateToLiftedOperatorResult(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo historyCheckPoint) { }
        public void SetExpressionStateToBothNullAndNonNull() { }
        public void SetExpressionType(JetBrains.ReSharper.Psi.IType type) { }
        public void SetVariableMemoryState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue value) { }
        public void SetVariableMemoryStateToDefinitelyBeNotNull(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        public void SetVariableStateToBothNullAndNonNull(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        public void SplitByExpressionBooleanState(out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext trueContext, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext falseContext) { }
        public void SplitByExpressionNullableState(out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext isNullContext, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext isNotNullContext) { }
        public void SplitByVariableBooleanState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext trueContext, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext falseContext) { }
        public void SplitByVariableCanBeOfGivenType(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, JetBrains.ReSharper.Psi.IType variableType, JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule typeConversionRule, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext canBeOfType, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext cannotBeOfType) { }
        public void SplitByVariableNullableState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext isNullContext, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext isNotNullContext) { }
        public void SplitByVariableToConstantEqualityState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, JetBrains.ReSharper.Psi.ConstantValue constantValue, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext equalsContext, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext notEqualsContext) { }
        public void SplitByVariableToExpressionEqualityState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info, bool booleanEquality, bool objectEquality, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext equalsContext, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext notEqualsContext) { }
        public void SplitByVariableToVariableEqualityState(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info1, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info2, bool booleanEquality, bool objectEquality, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext equalsContext, out JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext notEqualsContext) { }
    }
    public class CSharpControlFlowContextFactory : JetBrains.ReSharper.Psi.ControlFlow.IControlFlowContextFactory<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext>
    {
        public CSharpControlFlowContextFactory(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowGraf controlFlowGraf, JetBrains.ReSharper.Psi.ControlFlow.ValueAnalysisMode valueAnalysisMode) { }
        public virtual JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowAnnotationCache AnnotationCache { get; }
        public virtual JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext InitialContext { get; set; }
        public virtual int MaxNumberOfStatesPerGraf { get; }
        public JetBrains.ReSharper.Psi.ControlFlow.ValueAnalysisMode ValueAnalysisMode { get; }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableIndex VariableIndex { get; }
        public virtual void CheckContextForOverflow(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext context) { }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext CloneContext(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext context) { }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext Merge(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext> contexts) { }
    }
    public class CSharpControlFlowGraf : JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowGraf, JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowGraf, JetBrains.ReSharper.Psi.ControlFlow.IControlFlowGraf
    {
        public CSharpControlFlowGraf([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration declaration, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public CSharpControlFlowGraf(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBlock body, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, bool buildExpression) { }
        public CSharpControlFlowGraf(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression body, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode Body { get; }
        public override JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement BodyElement { get; }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpControlFlowErrorType> ControlFlowErrors { get; }
        public override JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement EntryElement { get; }
        public bool HasReachableImplicitReturn { get; }
        public bool IsInstanceStructContructor { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowRib> ReachableExits { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement> RedundantJumpStatements { get; }
        public JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext ResolveContext { get; }
        public JetBrains.ProjectModel.ISolution Solution { get; }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule TypeConversionRule { get; }
        public void CollectExecutableElements(JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowRib rib, out bool hasExitFromMethod, System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> executableElements, System.Collections.Generic.HashSet<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> visited) { }
        public bool IsJumpStatementMandatoryForSwitch(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement statement) { }
    }
    public class CSharpControlFlowGrafInspector : JetBrains.ReSharper.Psi.ControlFlow.Impl.CommonLanguageControlFlowGrafInspector<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContextFactory, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo>, JetBrains.ReSharper.Psi.ControlFlow.CSharp.ICSharpControlFlowAnalysisResult, JetBrains.ReSharper.Psi.ControlFlow.Impl.IControlFlowAnalysisResult
    {
        public CSharpControlFlowGrafInspector(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowGraf controlFlowGraf, JetBrains.ReSharper.Psi.ControlFlow.ValueAnalysisMode valueAnalysis = 0) { }
        public CSharpControlFlowGrafInspector(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowGraf controlFlowGraf, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContextFactory factory) { }
        public System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.Tree.ITreeNode> AssignNullToNotNullEntity { get; }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.ControlFlow.CSharp.ConstantExpressionValue> ConstantConditionExpressions { get; }
        public System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.CSharp.Tree.INullCoalescingExpression, JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpControlFlowNullReferenceState> ConstantConditionNullCoalescingExpression { get; }
        public bool HasComplexityOverflow { get; }
        public bool HasRecursionOnAllReachableExits { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IIsExpression> HeuristicTrueIsExpressions { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement> HeuristicUnreachableCode { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAssignmentExpression> MeaninglessAssignments { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.CSharp.Tree.INullCoalescingExpression> NullCoalescingOperatorRightOperandIsAlwaysNull { get; }
        public System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> PossibleInvalidCastExpressions { get; }
        public JetBrains.Util.OneToSetMap<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.Tree.ITreeNode>, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> PossibleMultipleEnumeration { get; }
        public System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> PossibleNullReferenceAccess { get; }
        public JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpControlFlowNullReferenceState SuggestReturnValueAnnotationAttribute { get; }
        public override System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IDeclaredElement> UsedExternalVariables { get; }
        public void CalculateKnownSubtypes([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression expression, [JetBrains.Annotations.NotNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> consumer) { }
        public static void ControlFlowElementFinder(JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowElement element, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowElement> result, System.Func<JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowElement, bool> predicate) { }
        protected override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo> EnumerateVariables() { }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo FindVariableInfo(JetBrains.ReSharper.Psi.ILocalVariable variable) { }
        public JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpControlFlowNullReferenceState GetExpressionNullReferenceState(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression expression, bool includeWeakNotNull) { }
        public JetBrains.ReSharper.Psi.ControlFlow.CSharp.CSharpControlFlowNullReferenceState GetVariableStateAt(JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement position, JetBrains.ReSharper.Psi.IDeclaredElement variable) { }
        public override void Inspect() { }
        protected override bool InspectionPass(System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement> sequence) { }
        protected override void InspectLeafElementAndSetContextToExits(JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement element, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext context) { }
        public bool IsAssignedTypeCouldBePureEnumerable(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Tree.ITreeNode assignment) { }
        protected override bool IsForeachVariableDeclaration(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public bool IsLambdaKnownToBeExecutedLocally(JetBrains.ReSharper.Psi.Tree.ITreeNode lambda) { }
        protected override bool ShouldInspectSingleLeaf(JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowElement element) { }
    }
    [System.FlagsAttribute()]
    public enum CSharpControlFlowVariableValue : byte
    {
        UNKNOWN = 1,
        NULL = 2,
        NOT_NULL = 4,
        TRUE = 8,
        FALSE = 16,
        WEAK_MIXIN = 128,
        WEAK_UNKNOWN = 129,
        WEAK_NOT_NULL = 132,
        WEAK_CANBENULL = 131,
    }
    public class static CSharpControlFlowVariableValueExt
    {
        public static bool IsWeak(this JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue value) { }
    }
    public class InitialContextBuilder
    {
        public InitialContextBuilder(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowGraf graf, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode body, JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContextFactory contextFactory, bool checkInstanceStructContructor) { }
        public virtual JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowContext Context { get; }
    }
    public class TypeCompatibilityCache
    {
        public TypeCompatibilityCache(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableIndex index, JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule typeConversionRule) { }
        public bool ExistsTypeWhichIsBoth(System.Collections.Generic.IList<int> it1, System.Collections.Generic.IList<int> it2) { }
        public bool ExistsTypeWhichIsBoth(int it1, int it2) { }
    }
    public class VariableIndex : System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo>, System.Collections.IEnumerable
    {
        public VariableIndex(JetBrains.ReSharper.Psi.ControlFlow.ValueAnalysisMode valueAnalysisMode) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.ControlFlowHistoryCheckPointInfo> AllHistoryCheckPoints { get; }
        public int Count { get; }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.ControlFlowStrictVariableInfo This { get; set; }
        public int TotalTypes { get; }
        public JetBrains.ReSharper.Psi.ControlFlow.ValueAnalysisMode ValueAnalysisMode { get; }
        public void AddType(JetBrains.ReSharper.Psi.IType type) { }
        public void AddVariable(JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo info) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo Find([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo Find(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo FindLocalOrClosureVariable([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public System.Collections.Generic.IEnumerator<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo> GetEnumerator() { }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.ControlFlowHistoryCheckPointInfo GetHistoryCheckPoint(JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement element) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.ControlFlowHistoryCheckPointInfo> GetInvalidatedHistoryCheckPoints(JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement from, JetBrains.ReSharper.Psi.ControlFlow.IControlFlowElement to) { }
        public JetBrains.ReSharper.Psi.IType GetTypeByIndex(int indx) { }
        public int GetTypeIndex(JetBrains.ReSharper.Psi.IType type) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo> HasInQualifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo> HasInQualifier(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
    }
    public abstract class VariableInfo : JetBrains.ReSharper.Psi.ControlFlow.Impl.IControlFlowVariableInfo<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo>
    {
        protected VariableInfo(JetBrains.ReSharper.Psi.IClrDeclaredElement element) { }
        public JetBrains.ReSharper.Psi.IClrDeclaredElement DeclaredElement { get; }
        public int Index { get; set; }
        public JetBrains.ReSharper.Psi.ControlFlow.Impl.ControlFlowVariableAccessState InitialAccessState { get; set; }
        public abstract JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.CSharpControlFlowVariableValue[] InitialNreValue { get; set; }
        public virtual bool IsOfNullableType { get; }
        public virtual bool IsOfValueType { get; }
        public abstract bool IsWeak { get; }
        public virtual JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo Parent { get; set; }
        public virtual bool ShouldBeAssignedUponExit { get; }
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.VariableInfo> StructFields { get; }
        public virtual JetBrains.ReSharper.Psi.IType Type { get; }
        public abstract JetBrains.ReSharper.Psi.CSharp.Impl.ControlFlow.ControlFlowVariableType VariableType { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl
{
    
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class CSharpCodeAnnotationProvider : JetBrains.ReSharper.Psi.CodeAnnotations.ICustomCodeAnnotationProvider
    {
        public System.Nullable<JetBrains.ReSharper.Psi.CodeAnnotations.CodeAnnotationNullableValue> GetNullableAttribute(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
    }
    [JetBrains.ReSharper.Psi.PsiSharedComponentAttribute()]
    public class CSharpDeclaredElementPresenter : JetBrains.ReSharper.Psi.IDeclaredElementPresenter
    {
        public static JetBrains.ReSharper.Psi.CSharp.Impl.CSharpDeclaredElementPresenter Instance { get; }
        public string Format(JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle style, JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, out JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking marking) { }
        public string Format(JetBrains.ReSharper.Psi.ParameterKind parameterKind) { }
        public string Format(JetBrains.ReSharper.Psi.AccessRights accessRights) { }
    }
    public class CSharpDeclaredElementType : JetBrains.ReSharper.Psi.DeclaredElementTypeBase
    {
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType ANONYMOUS_METHOD;
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType EXTERN_ALIAS;
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType NAMESPACE_ALIAS;
        protected override JetBrains.ReSharper.Psi.IDeclaredElementPresenter DefaultPresenter { get; }
        public override bool IsPresentable(JetBrains.ReSharper.Psi.PsiLanguageType language) { }
    }
    public class CSharpElementFactoryImpl : JetBrains.ReSharper.Psi.CSharp.CSharpElementFactory
    {
        public CSharpElementFactoryImpl([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, bool applyCodeFormatter, bool throwOnParseError) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration CreateAccessorDeclaration(JetBrains.ReSharper.Psi.AccessorKind kind, bool withBody) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration CreateAccessorDeclaration(string format, params object[] args) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration CreateAnonymousFunctionParameterDeclaration(JetBrains.ReSharper.Psi.IType type, string paramName, bool isParamArray, JetBrains.ReSharper.Psi.ParameterKind kind) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration CreateAnonymousMemberDeclaration(string name, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration CreateAnonymousMemberDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument CreateArgument(JetBrains.ReSharper.Psi.ParameterKind kind, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression arg) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument CreateArgument(JetBrains.ReSharper.Psi.ParameterKind kind, string name, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression arg) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression CreateArrayCreationExpression(JetBrains.ReSharper.Psi.IArrayType arrayType, JetBrains.ReSharper.Psi.CSharp.Tree.IArrayInitializer arrayInitializer) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute CreateAttribute(JetBrains.ReSharper.Psi.IAttributeInstance instance) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute CreateAttribute(JetBrains.ReSharper.Psi.ITypeElement attributeClass, JetBrains.ReSharper.Psi.AttributeValue[] fixedArguments, JetBrains.Util.Pair<, >[] namedArguments) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer CreateBaseConstructorInitializer() { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IBlock CreateBlock(string format, params object[] args) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpCommentNode CreateComment(string text) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration CreateConstDeclaration(JetBrains.ReSharper.Psi.IDeclaredType type, string name, string value) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration CreateConstructorDeclaration() { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IObjectInitializer CreateCreationExpressionInitializer() { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage CreateDeclaredTypeUsageNode(string typeName) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage CreateDeclaredTypeUsageNode(JetBrains.ReSharper.Psi.IDeclaredType type) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration CreateDelegateDeclaration() { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration CreateDestructorDeclaration() { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IDocCommentNode CreateDocComment(string text) { }
        public override JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode CreateDocCommentBlock(string text) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IBlock CreateEmptyBlock() { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration CreateEnumMemberDeclaration(string enumMemberName) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration CreateEventDeclaration(JetBrains.ReSharper.Psi.IDeclaredType eventType, string name) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpression(string format, params object[] args) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpressionAsIs(string format, bool applyCodeFormatter) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpressionAsIs(string format) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpressionByConstantValue(JetBrains.ReSharper.Psi.ConstantValue value) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpressionByConstantValue(JetBrains.ReSharper.Psi.ConstantValue value, bool safeConstantValueExactType) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpressionByDefaultValue(JetBrains.ReSharper.Psi.DefaultValue value) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration CreateFieldDeclaration(JetBrains.ReSharper.Psi.IType type, string name) { }
        protected override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile CreateFileImpl(string text, params object[] args) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration CreateIndexerDeclaration(JetBrains.ReSharper.Psi.IType type) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration CreateLambdaFunctionParameterDeclaration(JetBrains.ReSharper.Psi.IType type, string paramName, JetBrains.ReSharper.Psi.ParameterKind kind) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration CreateNamespaceDeclaration(string name) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer CreateObjectCreationExpressionMemberInitializer(string propertyName, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration CreateOverridableMemberDeclaration(JetBrains.ReSharper.Psi.OverridableMemberInstance baseMember) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration CreateParameterDeclaration(JetBrains.ReSharper.Psi.ParameterKind kind, bool isParametric, bool isVarArg, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] string name, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression defaultValue) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration CreatePropertyDeclaration(JetBrains.ReSharper.Psi.IType type, string name) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause CreateQueryClause(string clause, params object[] args) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform CreateQueryPlatform(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression e) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration CreateRangeVariableDeclaration(string name, JetBrains.ReSharper.Psi.IType type) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression CreateReferenceExpression(string expr, params object[] args) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName CreateReferenceName(string name, params object[] args) { }
        public override JetBrains.Util.JetTuple<JetBrains.ReSharper.Psi.CSharp.Tree.IStartRegion, JetBrains.ReSharper.Psi.CSharp.Tree.IEndRegion> CreateRegionDirective(string name) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement CreateStatement(string format, params object[] args) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer CreateThisConstructorInitializer() { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration CreateTypeMemberDeclaration(string format, params object[] args) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause CreateTypeParameterConstraintsClause(JetBrains.ReSharper.Psi.ITypeParameter typeParameter, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, string parameterName) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration CreateTypeParameterOfMethodDeclaration(string name) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration CreateTypeParameterOfTypeDeclaration(string name) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage CreateTypeUsageNode([JetBrains.Annotations.NotNullAttribute()] string typeName) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage CreateTypeUsageNode(JetBrains.ReSharper.Psi.IType type) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective CreateUsingDirective(string format, params object[] args) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective CreateUsingDirective(JetBrains.ReSharper.Psi.INamespace @namespace) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective CreateUsingDirective(JetBrains.ReSharper.Psi.INamespace @namespace, string externAlias) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer CreateVariableInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IWhitespaceNode[] CreateWhitespaces(string whitespaces) { }
    }
    public class static CSharpImplUtil
    {
        public static bool ContainsYieldStatement(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static System.Collections.Generic.IList<TElement> DeclaredElements<TElement, TDeclaration>(System.Collections.Generic.IList<TDeclaration> declarations)
            where TElement :  class, JetBrains.ReSharper.Psi.IDeclaredElement
            where TDeclaration : JetBrains.ReSharper.Psi.Tree.IDeclaration { }
        public static string DeclaredName(JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification ownerQualificationNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier identifier) { }
        public static string DeclaredName(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier identifier) { }
        public static JetBrains.ReSharper.Psi.IAttributeInstance GetAttributeInstance(this JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute attribute) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> attributes) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> attributes, JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration> GetClassMemberDeclarations(JetBrains.ReSharper.Psi.Tree.ITreeNode firstChild) { }
        public static JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode GetDocCommentBlock(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration declaration) { }
        public static JetBrains.ReSharper.Psi.TreeTextRange GetNameRange(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier identifier) { }
        public static bool HasAttributeInstance(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> attributes, JetBrains.ReSharper.Psi.IClrTypeName clrName) { }
        public static string MakeClrName(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration declaration) { }
        public static string MakeSafeName(string name) { }
        public static string MakeSafeQualifiedName(string name) { }
        public static void ReplaceIdentifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier node, [JetBrains.Annotations.NotNullAttribute()] string name) { }
        public static void ReplaceIdentifier(JetBrains.ReSharper.Psi.Tree.ITreeNode parent, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier node, [JetBrains.Annotations.NotNullAttribute()] string name) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetInterfaceQualificationReference(JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner owner, JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName qualification) { }
    }
    public class static CSharpInvocableSignatureComparer
    {
        public static readonly JetBrains.ReSharper.Psi.ISignatureComparer Overload;
        public static readonly JetBrains.ReSharper.Psi.ISignatureComparer Override;
    }
    [JetBrains.ProjectModel.ProjectComponentAttribute(ProjectKinds=JetBrains.ProjectModel.ProjectKind.UNSUPPORTED | JetBrains.ProjectModel.ProjectKind.REGULAR_PROJECT | JetBrains.ProjectModel.ProjectKind.WEB_SITE)]
    public class CSharpLanguageLevelProjectProperty : JetBrains.ReSharper.Psi.Impl.SimpleLanguageLevelPropertyBase<JetBrains.ReSharper.Psi.CSharp.Impl.CSharpLanguageProjectSettings, JetBrains.ReSharper.Psi.CSharp.CSharpLanguageLevel>
    {
        public CSharpLanguageLevelProjectProperty(JetBrains.DataFlow.Lifetime lifetime, JetBrains.ProjectModel.IProject project, JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.ProjectModel.Transaction.IProjectModelBatchChangeManager projectModelBatchChangeManager, JetBrains.Application.IShellLocks locks, JetBrains.ProjectModel.Settings.Store.ProjectSettings projectSettings) { }
        protected override System.Linq.Expressions.Expression<System.Func<JetBrains.ReSharper.Psi.CSharp.Impl.CSharpLanguageProjectSettings, JetBrains.ReSharper.Psi.CSharp.CSharpLanguageLevel>> Expression { get; }
        protected override string PropertyName { get; }
        protected override JetBrains.ReSharper.Psi.CSharp.CSharpLanguageLevel GetDefaultLanguageLevel() { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Impl.CSharpLanguageLevelProjectProperty TryGetInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProject project) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Impl.CSharpLanguageLevelProjectProperty TryGetInstance(JetBrains.ProjectModel.IProjectFile projectFile) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Settings.CodeInspectionSettings), "C# language settings")]
    public class CSharpLanguageProjectSettings
    {
        [JetBrains.Application.Settings.SettingsEntryAttribute(JetBrains.ReSharper.Psi.CSharp.CSharpLanguageLevel.Default, "C# language level")]
        public JetBrains.ReSharper.Psi.CSharp.CSharpLanguageLevel LanguageLevel;
    }
    [JetBrains.ProjectModel.Settings.Upgrade.ProjectSettingsUpgraderAttribute()]
    public class CSharpLanguageProjectSettingsUpgrader : JetBrains.Application.Configuration.IXmlReadable, JetBrains.Application.Configuration.Upgrade.ISettingsUpgrader, JetBrains.ProjectModel.Settings.Upgrade.IProjectSettingsUpgrader
    {
        public void Upgrade(JetBrains.Application.Configuration.IComponentSettingsProvider legacySettingsProvider, JetBrains.Application.Settings.IContextBoundSettingsStore boundSettingsStore, JetBrains.DataFlow.Lifetime upgradeLifetime) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpLanguageService : JetBrains.ReSharper.Psi.LanguageService
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet PREPROCESSOR_TOKENS;
        public CSharpLanguageService(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage language, JetBrains.ReSharper.Psi.IConstantValueService constantValueService, JetBrains.ReSharper.Psi.CSharp.CodeStyle.ICSharpCodeFormatter codeFormatter, JetBrains.Application.Settings.ISettingsStore settingsStore, JetBrains.ReSharper.Psi.Util.CommonIdentifierIntern commonIdentifierIntern) { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ILanguageCacheProvider CacheProvider { get; }
        public override JetBrains.ReSharper.Psi.CodeStyle.ICodeFormatter CodeFormatter { get; }
        public override JetBrains.ReSharper.Psi.IDeclaredElementPresenter DeclaredElementPresenter { get; }
        public override bool IsCaseSensitive { get; }
        public override bool SupportTypeMemberCache { get; }
        [System.ObsoleteAttribute("Context information is necessary for correct conversions. Usa language dependent " +
            "extension method \'GetTypeConversionRule\' from corresponding tree node.")]
        public override JetBrains.ReSharper.Psi.ITypeConversionRule TypeConversionRule { get; }
        public override JetBrains.ReSharper.Psi.ITypePresenter TypePresenter { get; }
        public override bool CanContainCachableDeclarations(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public override JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T> CreateElementPointer<T>(T declaredElement)
            where T : JetBrains.ReSharper.Psi.IDeclaredElement { }
        public override JetBrains.ReSharper.Psi.Parsing.ILexer CreateFilteringLexer(JetBrains.ReSharper.Psi.Parsing.ILexer lexer) { }
        public override JetBrains.ReSharper.Psi.Parsing.IParser CreateParser(JetBrains.ReSharper.Psi.Parsing.ILexer lexer, JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.CSharp.Parsing.ICSharpParser CreateParser(JetBrains.ReSharper.Psi.Parsing.ILexer lexer, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.PreProcessingDirective> defines) { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.IReferenceContextCodec CreateReferenceContextCodec() { }
        public override System.Collections.Generic.IEnumerable<string> EnumerateParserCapabilities() { }
        public override JetBrains.ReSharper.Psi.Parsing.ILexerFactory GetPrimaryLexerFactory() { }
        public override JetBrains.ReSharper.Psi.ReferenceAccessType GetReferenceAccessType(JetBrains.ReSharper.Psi.IDeclaredElement target, JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        public override JetBrains.ReSharper.Psi.PreProcessingDirectivesInFile GetUsedConditionalSymbols(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public override bool IsTypeMemberVisible(JetBrains.ReSharper.Psi.ITypeMember member) { }
        public override bool IsValidName(JetBrains.ReSharper.Psi.DeclaredElementType elementType, string name) { }
        public override void OptimizeImportsAndRefs(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.DocumentModel.IRangeMarker rangeMarker, bool optimizeUsings, bool shortenReferences, JetBrains.Application.Progress.IProgressIndicator progressIndicator) { }
        public override JetBrains.ReSharper.Psi.Tree.ITreeNode ParseUsingCapability(string text, string capability, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    [JetBrains.ProjectModel.ProjectFileTypeAttribute(typeof(JetBrains.ProjectModel.CSharpProjectFileType))]
    public class CSharpProjectFileCustomPsiPropertiesProvider : JetBrains.ReSharper.Psi.IProjectFileCustomPsiPropertiesProvider
    {
        public T GetCustomProperties<T>(JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public class Properties : JetBrains.ReSharper.Psi.CSharp.Impl.CSharpProjectFileCustomPsiPropertiesProvider.PropertiesBase
        {
            public Properties([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.IProjectFile projectFile) { }
            protected override JetBrains.ProjectModel.Properties.CSharp.ICSharpProjectConfiguration GetConfiguration() { }
            protected override JetBrains.ProjectModel.IProject GetProject() { }
        }
        public abstract class PropertiesBase : JetBrains.ReSharper.Psi.CSharp.ICSharpPsiSourceFileProperties, JetBrains.ReSharper.Psi.ICustomPsiSourceFileProperties
        {
            public bool AllowUnsafeCode { get; }
            public virtual bool IsNestedPreImportedNamespaces { get; }
            public bool NoStdLib { get; }
            public string[] SuppressWarnings { get; }
            public bool TreatWarningsAsErrors { get; }
            public int WarningLevel { get; }
            public string[] WarningsAsErrors { get; }
            public string[] WarningsNotAsErrors { get; }
            public bool XmlDocGenerationEnabled { get; }
            [JetBrains.Annotations.CanBeNullAttribute()]
            protected abstract JetBrains.ProjectModel.Properties.CSharp.ICSharpProjectConfiguration GetConfiguration();
            [JetBrains.Annotations.CanBeNullAttribute()]
            protected abstract JetBrains.ProjectModel.IProject GetProject();
        }
    }
    [JetBrains.ProjectModel.ProjectFileTypeAttribute(typeof(JetBrains.ProjectModel.CSharpProjectFileType))]
    public class CSharpProjectFileLanguageService : JetBrains.ReSharper.Psi.IProjectFileLanguageService
    {
        public CSharpProjectFileLanguageService(JetBrains.ProjectModel.CSharpProjectFileType csharpProjectFileType) { }
        public JetBrains.UI.Icons.IconId Icon { get; }
        public JetBrains.ProjectModel.ProjectFileType LanguageType { get; }
        public JetBrains.ReSharper.Psi.Parsing.ILexerFactory GetMixedLexerFactory(JetBrains.ProjectModel.ISolution solution, JetBrains.Text.IBuffer buffer, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile = null) { }
        public JetBrains.ReSharper.Psi.PreProcessingDirective[] GetPreprocessorDefines(JetBrains.ProjectModel.IProject project) { }
        public JetBrains.ReSharper.Psi.PsiLanguageType GetPsiLanguageType(JetBrains.ProjectModel.IProjectFile projectFile) { }
        public JetBrains.ReSharper.Psi.PsiLanguageType GetPsiLanguageType(JetBrains.ProjectModel.ProjectFileType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiSourceFileProperties GetPsiProperties(JetBrains.ProjectModel.IProjectFile projectFile, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
    }
    public class static CSharpReferenceBindingUtil
    {
        public static JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference BindQueryReferenceTo(JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference reference, JetBrains.ReSharper.Psi.IClrDeclaredElement target) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference BindQueryReferenceTo(JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference reference, JetBrains.ReSharper.Psi.IClrDeclaredElement target, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable BindReferenceTo(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference, JetBrains.ReSharper.Psi.IClrDeclaredElement element) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable BindReferenceTo(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IClrDeclaredElement> elements) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable BindReferenceTo(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference, JetBrains.ReSharper.Psi.IClrDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable BindReferenceTo(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.DeclaredElementInstance> elements) { }
        public static void BindSignature(JetBrains.ReSharper.Psi.Resolve.IReference reference, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument> invocationArguments, JetBrains.ReSharper.Psi.IParametersOwner target, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static JetBrains.ReSharper.Psi.Resolve.IReference BindToIndexer(JetBrains.ReSharper.Psi.Resolve.IReference reference, JetBrains.ReSharper.Psi.IProperty target, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static JetBrains.ReSharper.Psi.Resolve.IReference BindUsingDirectiveReferenceTo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.INamespace @namespace) { }
        public static T FakeBindTo<T>(T reference, JetBrains.ReSharper.Psi.IDeclaredElement element, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution)
            where T : JetBrains.ReSharper.Psi.Resolve.IReference { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration GetImportScope(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable ReplaceReferenceElement(JetBrains.ReSharper.Psi.Tree.ITreeNode element, string refto, bool keepExistingTypeArguments) { }
        public static string SuggestShortReferenceName(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference, JetBrains.ReSharper.Psi.IClrDeclaredElement target) { }
    }
    public class static CSharpSharedImplUtil
    {
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration AddAccessorDeclarationAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration parent, JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration anchor) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration AddAccessorDeclarationBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration parent, JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration anchor) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute AddAttributeAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration parent, JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute attribute, JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute anchor) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute AddAttributeBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration parent, JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute attribute, JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute anchor) { }
        public static T AddListItemAfter<T>(JetBrains.ReSharper.Psi.Tree.ITreeNode holder, short listRole, short elementRole, JetBrains.ReSharper.Psi.Parsing.TokenNodeType separator, T element, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static T AddListItemBefore<T>(JetBrains.ReSharper.Psi.Tree.ITreeNode holder, short listRole, short elementRole, JetBrains.ReSharper.Psi.Parsing.TokenNodeType separator, T element, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor)
            where T : JetBrains.ReSharper.Psi.Tree.ITreeNode { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration AddTypeParameterOfTypeAfter(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration typeDeclaration, short listChildRole, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration anchor) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration AddTypeParameterOfTypeBefore(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration typeDeclaration, short listChildRole, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration anchor) { }
        public static string GetQualifiedName(JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
        public static void RemoveAccessorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration parent, JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration param) { }
        public static void RemoveAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration declaration, JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute attribute) { }
        public static void RemoveListItem(JetBrains.ReSharper.Psi.Tree.ITreeNode holder, short listRole, short elementRole, short sepRole, JetBrains.ReSharper.Psi.Tree.ITreeNode item) { }
        public static void RemoveListItemAndEmptyList(JetBrains.ReSharper.Psi.Tree.ITreeNode holder, short listRole, short elementRole, short sepRole, JetBrains.ReSharper.Psi.Tree.ITreeNode item) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IBlock SetFunctionBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration func, JetBrains.ReSharper.Psi.CSharp.Tree.IBlock body) { }
    }
    public class CSharpTypeConversionRule : JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule, JetBrains.ReSharper.Psi.ITypeConversionRule
    {
        [JetBrains.Annotations.NotNullAttribute()]
        [System.ObsoleteAttribute("Construct rule for module")]
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule Instance;
        public CSharpTypeConversionRule(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public JetBrains.ReSharper.Psi.IType BestCommonType<T>(System.Collections.Generic.ICollection<T> types)
            where T : JetBrains.ReSharper.Psi.IExpressionType { }
        public bool CheckArrayCovariance(JetBrains.ReSharper.Psi.IArrayType fromArrayType, JetBrains.ReSharper.Psi.IArrayType toArrayType, bool isImplicit) { }
        public bool ClrIsImplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool ExplicitReferenceConversionExist(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool ImplicitNumericConversionExist(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool ImplicitReferenceConversionExist(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsBoxingConversion(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsExplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsImplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
        public bool IsUnboxingConversion(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to) { }
    }
    public class static CSharpTypeConversionRuleExtension
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule GetTypeConversionRule([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
    }
    public class DeclarationsRange : JetBrains.ReSharper.Psi.IDeclarationsRange
    {
        public DeclarationsRange(JetBrains.ReSharper.Psi.ITreeRange treeRange) { }
        public JetBrains.ReSharper.Psi.Tree.IDeclaration[] Declarations { get; }
        public JetBrains.ReSharper.Psi.ITreeRange TreeRange { get; }
    }
    public class DelegateEqualityOperator : JetBrains.ReSharper.Psi.Impl.PredefinedOperator, JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.ICSharpSpecialApplicabilityOperator, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOperator, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ISignOperator, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public DelegateEqualityOperator(JetBrains.ReSharper.Psi.PredefinedType predefined, string name) { }
        public JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate IsApplicable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> argumentTypes, out JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.CandidateWithResolveContext candidate) { }
        public bool IsApplicable(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> argumentTypes) { }
    }
    public class DelegatePredefinedOperator : JetBrains.ReSharper.Psi.Impl.PredefinedOperator
    {
        public DelegatePredefinedOperator(JetBrains.ReSharper.Psi.IDelegate @delegate, string name, JetBrains.ReSharper.Psi.IType type, int parameterNumber) { }
        public DelegatePredefinedOperator(JetBrains.ReSharper.Psi.IDelegate @delegate, string name, JetBrains.ReSharper.Psi.IType returnType, params JetBrains.ReSharper.Psi.IType[] parameterTypes) { }
        public JetBrains.ReSharper.Psi.IDelegate Delegate { get; }
    }
    public interface ICSharpTypeConversionRule : JetBrains.ReSharper.Psi.ITypeConversionRule
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        JetBrains.ReSharper.Psi.IType BestCommonType<T>(System.Collections.Generic.ICollection<T> types)
            where T : JetBrains.ReSharper.Psi.IExpressionType;
        [JetBrains.Annotations.PureAttribute()]
        bool CheckArrayCovariance(JetBrains.ReSharper.Psi.IArrayType fromArrayType, JetBrains.ReSharper.Psi.IArrayType toArrayType, bool isImplicit);
        [JetBrains.Annotations.PureAttribute()]
        bool ClrIsImplicitlyConvertiblePredefined(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to);
        [JetBrains.Annotations.PureAttribute()]
        bool ExplicitReferenceConversionExist(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to);
        [JetBrains.Annotations.PureAttribute()]
        bool ImplicitNumericConversionExist(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to);
        [JetBrains.Annotations.PureAttribute()]
        bool ImplicitReferenceConversionExist(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to);
        [JetBrains.Annotations.PureAttribute()]
        bool IsBoxingConversion(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to);
        [JetBrains.Annotations.PureAttribute()]
        bool IsUnboxingConversion(JetBrains.ReSharper.Psi.IType from, JetBrains.ReSharper.Psi.IType to);
    }
    public class LiftedOperator : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOperator, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ISignOperator, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public LiftedOperator(JetBrains.ReSharper.Psi.ISignOperator @operator) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.ISignOperator GetBaseOperator { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsExtern { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
        public override string ToString() { }
    }
    public class static ModifiersUtil
    {
        public static System.Collections.Generic.Dictionary<string, string[]> ParsedModifiersCache;
        public static int CompareModifierOrder(JetBrains.ReSharper.Psi.Tree.ITokenNode mod1, JetBrains.ReSharper.Psi.Tree.ITokenNode mod2, JetBrains.ReSharper.Psi.CSharp.CodeStyle.FormatSettings.CSharpFormatSettingsKey cSharpFormatSettingsKey) { }
        public static bool GetAbstract(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.AccessRights GetAccessRightsModifiers(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList node) { }
        public static JetBrains.ReSharper.Psi.AccessRights GetAccessRightsModifiers(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static bool GetAsync(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.MemberDecoration GetDecoration(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.MemberDecoration GetDecoration(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList node) { }
        public static JetBrains.ReSharper.Psi.AccessRights GetDefaultAccessRights(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static bool GetExtern(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static bool GetNew(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static bool GetOverridable(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static bool GetOverride(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static bool GetPartial(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static bool GetReadonly(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static bool GetSealed(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static JetBrains.ReSharper.Psi.AccessRights GetSemanticAccessRights(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static bool GetStatic(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static bool GetUnsafe(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static bool GetVirtual(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static bool GetVolatile(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node) { }
        public static bool HasAccessRightsModifiers(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static void SetAbstract(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, bool value) { }
        public static void SetAccessRights(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.AccessRights rights) { }
        public static void SetAccessRightsModifiers(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, JetBrains.ReSharper.Psi.AccessRights rights) { }
        public static void SetAsync(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, bool value) { }
        public static void SetExtern(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, bool value) { }
        public static void SetNew(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, bool value) { }
        public static void SetOverride(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, bool value) { }
        public static void SetPartial(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, bool value) { }
        public static void SetReadonly(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, bool value) { }
        public static void SetSealed(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, bool value) { }
        public static void SetStatic(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, bool value) { }
        public static void SetUnsafe(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, bool value) { }
        public static void SetVirtual(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, bool value) { }
        public static void SetVolatile(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner node, bool value) { }
    }
    public class static MultipleDeclarationUtil
    {
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember AddDeclaratorAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration root, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember param, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember anchor) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember AddDeclaratorBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration root, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember param, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember anchor) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember CreateCopyInternalImpl(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember decl, JetBrains.ReSharper.Psi.Impl.TreeNodeCopyContext context) { }
        public static void ExtractDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember decl) { }
        public static void RemoveDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember decl) { }
        public static void SplitDeclarationAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember decl) { }
        public static void SplitDeclarationBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember decl) { }
    }
    public class NullableEqualityOperator : JetBrains.ReSharper.Psi.Impl.PredefinedOperator, JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.ICSharpSpecialApplicabilityOperator, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOperator, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ISignOperator, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public bool IsApplicable(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> argumentTypes) { }
        public JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate IsApplicable(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> argumentTypes, out JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.CandidateWithResolveContext candidate) { }
    }
    public class static UsingUtil
    {
        public static readonly JetBrains.ReSharper.Psi.TreeNodeMarker SaveImportListPositionMarker;
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective AddImportAfter(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration scope, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective param, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor = null) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective AddImportBefore(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration scope, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective param, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor = null) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective AddImportTo(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration scope, JetBrains.ReSharper.Psi.INamespace @namespace) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective AddImportTo(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration scope, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective directive, bool saveUsingListPosition = False) { }
        public static bool CheckAlreadyImported(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration scope, JetBrains.ReSharper.Psi.INamespace @namespace, string externAlias = null) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingAliasDirective FindAliasTo(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration scope, JetBrains.ReSharper.Psi.INamespace ns) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingAliasDirective FindAliasTo(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration scope, JetBrains.ReSharper.Psi.ITypeElement typeElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static System.Collections.Generic.List<JetBrains.ReSharper.Psi.CSharp.Impl.UsingUtil.Conflict> GetImportConflicts(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration scope, JetBrains.ReSharper.Psi.INamespace ns) { }
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Resolve.IReference> GetUsingDirectiveUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective usingDirective) { }
        public static System.Collections.Generic.IDictionary<JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.IReference>> GetUsingDirectiveUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile file) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective GetUsingOf(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference) { }
        public static bool IsTrivialAlias(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingAliasDirective directive) { }
        public static void RemoveImport(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective param) { }
        public static void RemoveImport(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration scope, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective param) { }
        public static void RemoveUnusedImports(JetBrains.DocumentModel.IDocument document, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration scope) { }
        public class Conflict
        {
            public readonly JetBrains.ReSharper.Psi.Tree.ITreeNode Element;
            [JetBrains.Annotations.NotNullAttribute()]
            public readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo OriginalResolve;
            public readonly JetBrains.ReSharper.Psi.Resolve.IReference Reference;
            [JetBrains.Annotations.CanBeNullAttribute()]
            public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveOnConflict;
            public Conflict(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.Resolve.IReference reference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo originalResolve) { }
            [JetBrains.Annotations.NotNullAttribute()]
            public JetBrains.ReSharper.Psi.IDeclaredElement OriginalResolveDeclaredElement { get; }
        }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.CustomHandlers
{
    
    public interface ICSharpCustomModificationHandler
    {
        bool CanRemoveUsing(JetBrains.DocumentModel.IDocument document, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective usingDirective);
        bool CanUseAliases();
        JetBrains.ReSharper.Psi.Tree.ITreeNode FixupAnchorForAddingTypeMember(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.Tree.IFile generatedFile, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, bool willInsertBefore, JetBrains.ReSharper.Psi.Tree.ITreeNode classDeclaration);
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock GetMethodBodyVisibleForUser(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration method);
        string GetSpecialMethodType(JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle presenter, JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective HandleAddImport(JetBrains.ReSharper.Psi.IPsiServices psiServices, System.Func<JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective> action, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode generatedAnchor, bool before, JetBrains.ReSharper.Psi.Tree.IFile generatedFile);
        JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange HandleAddStatementsRange(JetBrains.ReSharper.Psi.IPsiServices psiServices, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange> addAction, JetBrains.ReSharper.Psi.CSharp.Tree.IBlock block, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor, bool before, bool strict);
        JetBrains.ReSharper.Psi.Tree.ITreeNode HandleAddTypeMember(JetBrains.ReSharper.Psi.IPsiServices psiServices, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode> action, JetBrains.ReSharper.Psi.Tree.IFile generatedFile);
        void HandleChangeExpressionInStatement(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.Tree.IStatement statement, System.Action changeAction);
        JetBrains.ReSharper.Psi.ITreeRange HandleChangeStatements(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.ITreeRange rangeBeforeChange, System.Func<JetBrains.ReSharper.Psi.ITreeRange> changeAction, bool strict);
        void HandleRemoveImport(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration scope, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective usingDirective, System.Action action);
        void HandleRemoveStatementsRange(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.ITreeRange treeRange, System.Action action);
        void HandleRemoveTypeMember(JetBrains.ReSharper.Psi.IPsiServices psiServices, JetBrains.ReSharper.Psi.Tree.ITreeNode node, System.Action action);
        JetBrains.ReSharper.Psi.Tree.ITreeNode HandleSuperClassChange(JetBrains.ReSharper.Psi.IPsiServices psiServices, System.Func<JetBrains.ReSharper.Psi.Tree.ITreeNode> action, JetBrains.ReSharper.Psi.Tree.ITreeNode classDeclaration);
        bool IsToAddImportsToDeepestScope([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode context);
        bool PreferQualifiedReference(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference);
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.DocComments
{
    
    public class CSharpDocCommentElementFactory : JetBrains.ReSharper.Psi.Xml.XmlDocComments.ClrDocCommentElementFactoryImpl
    {
        public CSharpDocCommentElementFactory(JetBrains.ReSharper.Psi.Xml.XmlDocComments.IDocCommentXmlPsi xmlPsi) { }
        protected override JetBrains.Util.Key<object> XmlResolveKey { get; }
    }
    [JetBrains.ReSharper.Psi.LanguageDefinitionAttribute("CSHARP_XMLDOC", Edition="Csharp")]
    public class CSharpXmlDocLanguage : JetBrains.ReSharper.Psi.Xml.XmlDocComments.XmlDocLanguage
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.DocComments.CSharpXmlDocLanguage Instance;
        public const string Name = "CSHARP_XMLDOC";
        public CSharpXmlDocLanguage() { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.Occurrences
{
    
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpOccerrencesFinder : JetBrains.ReSharper.Psi.Impl.Search.Occurences.OccurrencesFinderImplBase
    {
        public override bool CompareLeafNodex(JetBrains.ReSharper.Psi.Tree.ITreeNode node1, JetBrains.ReSharper.Psi.Tree.ITreeNode node2) { }
        public override JetBrains.ReSharper.Psi.IDeclaredElement GetOriginalElement(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.Query
{
    
    public class ExtensionQueryInfo : JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.SimpleArgumentInfoBase
    {
        public ExtensionQueryInfo(JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo invocation, JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference extensionReference) { }
        public override bool IsExtension { get; }
        public override bool Equals(object obj) { }
        public override JetBrains.DocumentModel.DocumentRange GetDocumentRange() { }
        public override JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override int GetHashCode() { }
        public override bool IsValid() { }
    }
    public interface IQueryAnonymousType : JetBrains.ReSharper.Psi.CSharp.ICSharpAnonymousType, JetBrains.ReSharper.Psi.IAnonymousType, JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.IType
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryAnonymousTypeProperty> QueryProperties { get; }
    }
    public class QueryVariable : JetBrains.ReSharper.Psi.CSharp.Impl.Query.QueryVariableBase
    {
        public QueryVariable(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration declaration, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform platform) { }
        public QueryVariable(JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause element, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration declaration) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration Declaration { get; }
        public override bool IsTransparent { get; }
        public override string ShortName { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public abstract class QueryVariableBase : JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ILambdaParameter, JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryDeclaredElement, JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedVariableImpl, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParameter, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable
    {
        protected QueryVariableBase(JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode queryClause) { }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.IParametersOwner ContainingParametersOwner { get; }
        public abstract JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration Declaration { get; }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode Element { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsOptional { get; }
        public bool IsParameterArray { get; }
        public abstract bool IsTransparent { get; }
        public bool IsValueVariable { get; }
        public bool IsVarArg { get; }
        public JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public abstract string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public JetBrains.ReSharper.Psi.IType CalculateType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        protected bool Equals(JetBrains.ReSharper.Psi.CSharp.Impl.Query.QueryVariableBase queryVariableBase) { }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DefaultValue GetDefaultValue() { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
    }
    public class QueryVariableElementPointer<T> : JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer<T>
        where T : JetBrains.ReSharper.Psi.IDeclaredElement
    {
        public QueryVariableElementPointer(JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable queryVariable) { }
        public JetBrains.ReSharper.Psi.IPsiServices PsiServices { get; }
        public T FindDeclaredElement() { }
    }
    public class TransparentVariable : JetBrains.ReSharper.Psi.CSharp.Impl.Query.QueryVariableBase, JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ILambdaParameter, JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryDeclaredElement, JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable, JetBrains.ReSharper.Psi.CSharp.Tree.Query.ITransparentVariable, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParameter, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable
    {
        public TransparentVariable(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform platform, JetBrains.ReSharper.Psi.CSharp.Tree.Query.Scheme scheme) { }
        public TransparentVariable(JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause element, JetBrains.ReSharper.Psi.CSharp.Tree.Query.Scheme scheme) { }
        public override JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration Declaration { get; }
        public override bool IsTransparent { get; }
        public JetBrains.ReSharper.Psi.CSharp.Tree.Query.Scheme Scheme { get; }
        public override string ShortName { get; }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.Resolve
{
    
    public class BadArgumentInfo : JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.SimpleArgumentInfoBase
    {
        public BadArgumentInfo(JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo invocation) { }
        public override bool IsExtension { get; }
        public override bool Equals(object obj) { }
        public override JetBrains.DocumentModel.DocumentRange GetDocumentRange() { }
        public override JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override int GetHashCode() { }
    }
    public class CSharpOperatorResolver
    {
        public CSharpOperatorResolver(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Modules.IPsiModule module, string name, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context, bool circularOperatorForm = False) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate> GetApplicableUserDefinedOperators(string name, out System.Collections.Generic.IList<> candidates) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetOperatorsSymbolTable() { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve() { }
    }
    public class static CSharpResolveUtil
    {
        public static readonly JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] NonQualifiedRefrenceExpressionPreFilters;
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable AddExternAliases(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.CSharp.DeclaredElements.IExternAlias globalAlias, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective> externAliases, int level) { }
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable AddImportedSymbols(JetBrains.ReSharper.Psi.Modules.IPsiModule module, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective> imports, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.INamespace> defaultImports, int level, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable AddNamespaceSymbols([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective directive, JetBrains.ReSharper.Psi.INamespace @namespace, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context, int level) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo ChangeResolveErrorType(this JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo originalInfo, JetBrains.ReSharper.Psi.Resolve.ResolveErrorType errorType) { }
        public static JetBrains.ReSharper.Psi.Resolve.Refers DynamicRefersEvaluator(JetBrains.ReSharper.Psi.Resolve.IResolveResult result, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, System.Func<JetBrains.ReSharper.Psi.Resolve.Refers> pureDynamicEvaluator) { }
        public static JetBrains.ReSharper.Psi.Resolve.Refers DynamicRefersEvaluator(JetBrains.ReSharper.Psi.Resolve.ILateBoundReference reference, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredElement element, System.Func<JetBrains.ReSharper.Psi.Resolve.Refers> pureDynamicEvaluator) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo GetCSharpResolveResult(this JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable, string name) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.INamespace> GetDefaultImports(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile file, bool isTopLevel) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.IReference GetReferenceQualifiedByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public static JetBrains.ReSharper.Psi.IType GetType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.IClrDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective GetUsing(this JetBrains.ReSharper.Psi.Resolve.ISymbolInfo symbolInfo) { }
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] InvocationFilters(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element, string name, JetBrains.ReSharper.Psi.Resolve.IAccessContext context, int typeParametersNumber) { }
        public static bool IsEnclosingLocalVariable(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Tree.ITreeNode element, bool checkForImplicitlyTyped) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string ReferenceName(string identifierName) { }
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] ReferenceNameResolveFilters(string name, bool canBeAttribute, JetBrains.ReSharper.Psi.Resolve.ISymbolFilter accessRightsFilter, JetBrains.ReSharper.Psi.Tree.ITypeArgumentsOwnerElement owner, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, [JetBrains.Annotations.CanBeNullAttribute()] string qualifyingAlias) { }
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveConstructor([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISymbolTable table, JetBrains.ReSharper.Psi.Resolve.IAccessContext context, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, System.Version languageVersion, JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule typeConversionRule, bool isConstructorInitializer) { }
        public static bool ShouldApplyEmbeddedComInteropTypeRule([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeMember typeMember, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Modules.IPsiModule> fSourceModule) { }
        public static bool ShouldApplyEmbeddedComInteropTypeRule(this JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult, [JetBrains.Annotations.NotNullAttribute()] System.Func<JetBrains.ReSharper.Psi.Modules.IPsiModule> fSourceModule) { }
    }
    public class static CSharpSymbolInfoExt
    {
        public static bool IsExtensionMethod(this JetBrains.ReSharper.Psi.Resolve.ISymbolInfo info) { }
    }
    public class ExpressionArgumentInfo : JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedConvertibleImpl, JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible
    {
        public ExpressionArgumentInfo([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo invocation, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public string ArgumentName { get; }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Expression { get; }
        public JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo Invocation { get; }
        public bool IsExtension { get; }
        public bool IsNamedArgument { get; }
        public JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        public JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible ManagedConvertible { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> MatchingParameter { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode VerificationScope { get; }
        public JetBrains.ReSharper.Psi.IType CalculateImplicitlyConvertedTo(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override bool Equals(object obj) { }
        public JetBrains.DocumentModel.DocumentRange GetDocumentRange() { }
        public JetBrains.ReSharper.Psi.IExpressionType GetExpressionType() { }
        public JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ILambdaParameter> GetImplicitLambdaParameters() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool HasImplicitLambdaParameters() { }
        public bool IsValid() { }
    }
    public class ExtensionArgumentInfo : JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.SimpleArgumentInfoBase
    {
        public ExtensionArgumentInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo invocation, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Expression { get; }
        public override bool IsExtension { get; }
        public override bool Equals(object obj) { }
        public override JetBrains.DocumentModel.DocumentRange GetDocumentRange() { }
        public override JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override int GetHashCode() { }
        public override bool IsValid() { }
    }
    public class ExtensionMethodsSymbolTableBuilder
    {
        public ExtensionMethodsSymbolTableBuilder(JetBrains.ReSharper.Psi.Tree.ITreeNode element, JetBrains.ReSharper.Psi.IType type) { }
        public void AddSolutionAnalysisDependencies(string shortName) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.ISymbolTable> EnumerateExtensionMethods(string shortName) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable GetExtensionMethods() { }
        public bool HasExtensionMethod(string shortName) { }
    }
    public class Invocation
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.IAccessContext AccessContext { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public System.Func<System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo>, JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IArgumentsMatcher> ArgumentsMatcherCreator { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Tree.ITreeNode Context { get; set; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo ExtensionArgument { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public string Name { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.ISymbolFilter[] PreInvocationFilters { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext ResolveContext { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.Resolve.ISymbolTable SymbolTable { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> TypeArguments { get; set; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve() { }
    }
    public class static LambdaUtil
    {
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ILambdaParameter> GetImplicitLambdaParameters(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public static JetBrains.ReSharper.Psi.IType GetLambdaParameterMultitype(JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.ReSharper.Psi.IType targetDelegateType, int parameterIndex, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public static bool HasImplicitLambdaParameters(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
    }
    public class MethodChooser
    {
        public MethodChooser(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.MethodGroupResolveResult methodGroup, JetBrains.ReSharper.Psi.Resolve.ResolveErrorType preResolveError, string shortName, JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo extensionArgument, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> typeArguments, JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        public string MethodShortName { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Choose(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Choose(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool HasApplicableMethod(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public bool IsValid() { }
    }
    public class MethodGroupResolveResult : JetBrains.ReSharper.Psi.Resolve.IResolveResult
    {
        public MethodGroupResolveResult(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> candidates, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> candidateSubstitutions) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> Candidates { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> CandidateSubstitutions { get; }
        public JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        public bool IsEmpty { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Substitution { get; }
        public string Dump() { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution candidateSubstitution) { }
    }
    public class static OverloadResolutionUtil
    {
        public static System.Collections.Generic.List<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable, JetBrains.ReSharper.Psi.IType>> BuildAssumptions(JetBrains.ReSharper.Psi.Modules.IPsiModule module, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> parameterTypes, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ILambdaParameter> implicitLambdaParameters) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> GetParameterTypesFromDelegate(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class PropertyOrClassPartialResult : JetBrains.ReSharper.Psi.Resolve.ResolveResult
    {
        public PropertyOrClassPartialResult(JetBrains.ReSharper.Psi.IDeclaredElement variable, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo classResult) { }
        public JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo GetClassResult() { }
        public JetBrains.ReSharper.Psi.Resolve.IResolveResult GetVariableResult() { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution candidateSubstitution) { }
    }
    public abstract class SimpleArgumentInfoBase : JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Managed.IManagedConvertibleImpl, JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible
    {
        protected SimpleArgumentInfoBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo invocation) { }
        public string ArgumentName { get; }
        public JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo Invocation { get; }
        public abstract bool IsExtension { get; }
        public bool IsNamedArgument { get; }
        public JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        public JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible ManagedConvertible { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> MatchingParameter { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode VerificationScope { get; }
        public JetBrains.ReSharper.Psi.IType CalculateImplicitlyConvertedTo(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public override bool Equals(object obj) { }
        public abstract JetBrains.DocumentModel.DocumentRange GetDocumentRange();
        public JetBrains.ReSharper.Psi.IExpressionType GetExpressionType() { }
        public abstract JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ILambdaParameter> GetImplicitLambdaParameters() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool HasImplicitLambdaParameters() { }
        public virtual bool IsValid() { }
    }
    public class TypeArgumentInfo : JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo, JetBrains.ReSharper.Psi.IArgumentInfo
    {
        public TypeArgumentInfo([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType parameterType, JetBrains.ReSharper.Psi.ParameterKind parameterKind, bool isExtension) { }
        public string ArgumentName { get; }
        public JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo Invocation { get; }
        public bool IsExtension { get; }
        public bool IsNamedArgument { get; }
        public JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        public JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConvertible ManagedConvertible { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter> MatchingParameter { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule PsiModule { get; }
        public JetBrains.ReSharper.Psi.Tree.ITreeNode VerificationScope { get; }
        public JetBrains.DocumentModel.DocumentRange GetDocumentRange() { }
        public JetBrains.ReSharper.Psi.IExpressionType GetExpressionType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public JetBrains.ReSharper.Psi.IExpressionType GetExpressionType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ILambdaParameter> GetImplicitLambdaParameters() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool HasImplicitLambdaParameters() { }
        public bool IsValid() { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.ExtensionMethods
{
    
    [JetBrains.ReSharper.Psi.PsiComponentAttribute()]
    public class CSharpExtensionMethodsRegistryImpl : JetBrains.ReSharper.Psi.CSharp.ExtensionMethods.CSharpExtensionMethodsRegistry
    {
        public CSharpExtensionMethodsRegistryImpl(JetBrains.ReSharper.Psi.Caches.ISymbolCache symbolCache) { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Caches2.ExtensionMethods.Queries.IExtensionMethodsQuery GetAllExtensionMethods(JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
    }
    public class static CSharpExtensionMethodsUtil
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.INamespace> AllExtensionMethodsNamespaces(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static System.Collections.Generic.IList<System.Collections.Generic.IList<System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.INamespace, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective>>> AllExtensionMethodsProviders(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.ExtensionMethods.CSharpExtensionMethodsUtil.MethodInstance> EnumerateExtensionMethods(string name, JetBrains.ReSharper.Psi.IType qualifierType, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        public static bool ExtensionMethodsExists(string shortName, JetBrains.ProjectModel.ISolution solution, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext context) { }
        public struct MethodInstance
        {
            public MethodInstance(JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective usingDirective) { }
            public JetBrains.ReSharper.Psi.IMethod Method { get; }
            public JetBrains.ReSharper.Psi.Resolve.ISubstitution Substitution { get; }
            public JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective UsingDirective { get; }
        }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters
{
    
    public class CSharpAttributeFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public CSharpAttributeFilter(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class CSharpAutoPropertyBackingFieldFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.CSharpAutoPropertyBackingFieldFilter Instance;
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class CSharpConstructorAccessRightsFilter : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.AccessRightsFilter
    {
        public CSharpConstructorAccessRightsFilter(JetBrains.ReSharper.Psi.Resolve.IAccessContext context) { }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class CSharpDestructorsFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.CSharpDestructorsFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class CSharpMemberFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.CSharpMemberFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class CSharpMethodGroupConvertibleFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public CSharpMethodGroupConvertibleFilter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IDelegate> expectedType, System.Version languageVersion) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class CSharpTypeOrNamespaceFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.CSharpTypeOrNamespaceFilter INSTANCE;
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class CSharpValidNamesFilter : JetBrains.ReSharper.Psi.Resolve.ValidNamesFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.CSharpValidNamesFilter INSTANCE;
    }
    public class EliminateIndexerFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.EliminateIndexerFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class EnumInitializerFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public EnumInitializerFilter(JetBrains.ReSharper.Psi.IEnum @enum) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class EventOrBackingFieldFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public EventOrBackingFieldFilter(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression accessExpression) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo FindBackingField(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo FindEvent(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class ExactAttributeNameFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolInfoFilter
    {
        public ExactAttributeNameFilter(string name) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo datum) { }
    }
    public class ExcludeParametersFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.ExcludeParametersFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class ExplicitTypeArgumentsFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public ExplicitTypeArgumentsFilter(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> typeArguments) { }
        public ExplicitTypeArgumentsFilter(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> typeArguments, System.Func<JetBrains.ReSharper.Psi.ITypeParametersOwner, bool> elementAccepted) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class ExternAliasFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolInfoFilter
    {
        public ExternAliasFilter(JetBrains.ReSharper.Psi.Modules.IPsiModule module, [JetBrains.Annotations.CanBeNullAttribute()] string qualifiyingAliasName) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo symbolInfo) { }
    }
    public abstract class GenericSimpleFilter<T>
    
    {
        public abstract JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public virtual bool MustRun { get; }
        public abstract bool Accepts(T candidate);
        public System.Collections.Generic.IList<T> FilterArray(System.Collections.Generic.IList<T> data) { }
    }
    public class ImportedElementsForUnqualifiedReferenceExpressionFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public ImportedElementsForUnqualifiedReferenceExpressionFilter(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression referenceExpression) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class IndexedPropertyWithAllOptionalParametersFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.IndexedPropertyWithAllOptionalParametersFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public sealed class IsAliasFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.IsAliasFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class IsCSharpPropertyFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.IsCSharpPropertyFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public sealed class IsGlobalAliasFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.IsGlobalAliasFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class IsNamedElementFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.IsNamedElementFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class IsSignOperatorFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.IsSignOperatorFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class MemberInitializerFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public MemberInitializerFilter(JetBrains.ReSharper.Psi.ReferenceAccessType accessType, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class MemberInitializerKindFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public MemberInitializerKindFilter(JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class MethodAmbuigityFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.MethodAmbuigityFilter INSTANCE;
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class OperatorHalfApplicableFilter : JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.GenericSimpleFilter<JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.CandidateWithResolveContext>
    {
        public OperatorHalfApplicableFilter(JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.CandidateWithResolveContext candidate) { }
    }
    public class PredefinedTypesFilter : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public PredefinedTypesFilter(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> datas) { }
    }
    public class PropertyBetterThanIndexedProperty : JetBrains.ReSharper.Psi.Resolve.ISymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.PropertyBetterThanIndexedProperty INSTANCE;
        public JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public JetBrains.ReSharper.Psi.Resolve.FilterRunType RunType { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> FilterArray(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> data) { }
    }
    public class ReferenceExpressionMemberFilter : JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.CSharpMemberFilter
    {
        public ReferenceExpressionMemberFilter(System.Version version) { }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class UnnamedElementsFilter : JetBrains.ReSharper.Psi.Resolve.SimpleSymbolFilter
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Filters.UnnamedElementsFilter INSTANCE;
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool Accepts(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
    }
    public class UseLocalVariableBeforeDeclarationFilter : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Filters.UseLocalVariableBeforeDeclarationFilterBase
    {
        public UseLocalVariableBeforeDeclarationFilter(JetBrains.ReSharper.Psi.Tree.ITreeNode usage) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        protected override bool IsCaseSensitive { get; }
        protected override JetBrains.ReSharper.Psi.Tree.ITreeNode GetDeclarationNode(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        protected override bool UsedBeforeDeclaration(JetBrains.ReSharper.Psi.Tree.ITreeNode declaration) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Verification
{
    
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class AccessorAvailabilityVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public static readonly object GETTER;
        public static readonly object SETTER;
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class AsExpressionVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class AssignmentTypeCompatibilityVerifier : JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Verification.TypeCompatibilityVerifier
    {
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public override object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class AwaitExpressionVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class CastExpressionVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class ConditionalTernaryExpressionVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class ConditionExpressionVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class ExtensionMethodsAvailabilityVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class ForeachStatementVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class ImplicitVariableDeclarationVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class InvocationResolveVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class LockStatementVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class ParenthesizeLambdaExpressionIsNotVoidVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class ReferenceExpressionResolveVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class SatisfyConstaintsVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    public abstract class TypeCompatibilityVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        protected static readonly object NOT_NULL;
        public abstract System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        protected static object Check(JetBrains.ReSharper.Psi.IType leftType, JetBrains.ReSharper.Psi.IExpressionType rightType, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode node) { }
        public abstract object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element);
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class UsingStatementVerifier : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.IVerifier
    {
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
    [JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.Verification.VerifierAttribute()]
    public class VariableDeclarationTypeCompatibilityVerifier : JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.Verification.TypeCompatibilityVerifier
    {
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType> Nodes { get; }
        public override object Verify(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.Tree
{
    
    public class static ChildRole
    {
        public const short CSHARP_ARGUMENT = 31;
        public const short CSHARP_ATTRIBUTES = 37;
        public const short CSHARP_BASE = 18;
        public const short CSHARP_BLOCK = 3;
        public const short CSHARP_BODY = 23;
        public const short CSHARP_COLON = 16;
        public const short CSHARP_COMMA = 12;
        public const short CSHARP_CONSTANT_EXPRESSION = 36;
        public const short CSHARP_DOT = 14;
        public const short CSHARP_DOUBLE_COLON = 15;
        public const short CSHARP_ELSE = 25;
        public const short CSHARP_EQ = 26;
        public const short CSHARP_INITIALIZER = 35;
        public const short CSHARP_KEYWORD = 39;
        public const short CSHARP_LABEL_NAME = 2;
        public const short CSHARP_LABEL_REFERENCE = 28;
        public const short CSHARP_LANGLE = 10;
        public const short CSHARP_LBRACE = 4;
        public const short CSHARP_LBRACKET = 8;
        public const short CSHARP_LPAR = 6;
        public const short CSHARP_NAME = 1;
        public const short CSHARP_NAMESPACE_REFERENCE = 29;
        public const short CSHARP_OP1 = 32;
        public const short CSHARP_OP2 = 33;
        public const short CSHARP_OP3 = 34;
        public const short CSHARP_OPERAND_TYPE = 22;
        public const short CSHARP_PARAMETER = 30;
        public const short CSHARP_QUALIFIER = 38;
        public const short CSHARP_QUEST = 17;
        public const short CSHARP_RANGLE = 11;
        public const short CSHARP_RBRACE = 5;
        public const short CSHARP_RBRACKET = 9;
        public const short CSHARP_REFERENCE = 27;
        public const short CSHARP_RPAR = 7;
        public const short CSHARP_SEMICOLON = 19;
        public const short CSHARP_SEMICOLON2 = 20;
        public const short CSHARP_THEN = 24;
        public const short CSHARP_TILDE = 13;
        public const short CSHARP_TYPE = 21;
        public const short LAST = 100;
        public const short NONE = 0;
    }
    public abstract class CSharpCompositeElement : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public override JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public virtual void Accept(JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor visitor) { }
        public virtual void Accept<TContext>(JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor<TContext> visitor, TContext context) { }
        public virtual TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context) { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration GetContainingNamespaceDeclaration() { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement GetContainingStatement() { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration GetContainingTypeDeclaration() { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration GetContainingTypeMemberDeclaration() { }
    }
    public abstract class CSharpFileElement : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.FileElementBase
    {
        public abstract void Accept(JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor visitor);
        public abstract void Accept<TContext>(JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor<TContext> visitor, TContext context);
        public abstract TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context);
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration GetContainingNamespaceDeclaration() { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement GetContainingStatement() { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration GetContainingTypeDeclaration() { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration GetContainingTypeMemberDeclaration() { }
    }
    public class CSharpGenericToken : JetBrains.ReSharper.Psi.CSharp.Impl.Tree.CSharpTokenBase
    {
        public CSharpGenericToken(JetBrains.ReSharper.Psi.Parsing.TokenNodeType nodeType, string text) { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType NodeType { get; }
        public override string GetText() { }
        public override int GetTextLength() { }
    }
    public abstract class CSharpTokenBase : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.LeafElementBase, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITokenNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        public override JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
        public virtual void Accept(JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor visitor) { }
        public virtual void Accept<TContext>(JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor<TContext> visitor, TContext context) { }
        public virtual TResult Accept<TContext, TResult>(JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor<TContext, TResult> visitor, TContext context) { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration GetContainingNamespaceDeclaration() { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration GetContainingTypeDeclaration() { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration GetContainingTypeMemberDeclaration() { }
        public override System.Text.StringBuilder GetText(System.Text.StringBuilder to) { }
        public override JetBrains.Text.IBuffer GetTextAsBuffer() { }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType GetTokenType() { }
        public override string ToString() { }
    }
    public class static ElementBitsets
    {
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ACCESSOR_OWNER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet ATTRIBUTES_OWNER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet BINARY_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet C_SHARP_ARGUMENTS_OWNER_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet C_SHARP_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet C_SHARP_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet C_SHARP_FUNCTION_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet C_SHARP_MODIFIERS_OWNER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet C_SHARP_PARAMETER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet C_SHARP_PARAMETERS_OWNER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet C_SHARP_STATEMENT_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet C_SHARP_TYPE_AND_NAMESPACE_HOLDER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet C_SHARP_TYPE_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet C_SHARP_TYPE_MEMBER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet CATCH_CLAUSE_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet CLASS_LIKE_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet CLASS_MEMBER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet CREATION_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet CREATION_EXPRESSION_INITIALIZER_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet DECLARED_TYPE_USAGE_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet INITIALIZER_ELEMENT_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet INTERFACE_QUALIFICATION_OWNER_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet MEMBER_OWNER_BODY_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet MEMBER_OWNER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet MULTIPLE_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet MULTIPLE_DECLARATION_MEMBER_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet OPERATOR_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet OPERATOR_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet PREPROCESSOR_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet PREPROCESSOR_DIRECTIVE_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet PREPROCESSOR_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet PREPROCESSOR_UNARY_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet PRIMARY_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet QUERY_CLAUSE_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet QUERY_CLAUSES_HOLDER_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TYPE_PARAMETER_CONSTRAINT_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TYPE_PARAMETER_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TYPE_USAGE_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet UNARY_EXPRESSION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet USING_DIRECTIVE_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet VARIABLE_DECLARATION_BIT_SET;
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet VARIABLE_INITIALIZER_BIT_SET;
    }
    public abstract class ElementType
    {
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ___ARGLIST_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType _ERROR_ELEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeType _IDENTIFIER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ACCESSOR_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ADDITIVE_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ANONYMOUS_MEMBER_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ANONYMOUS_METHOD_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ANONYMOUS_METHOD_PARAMETER_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ANONYMOUS_METHOD_SIGNATURE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ANONYMOUS_OBJECT_CREATION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ANONYMOUS_OBJECT_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ARGLIST_PARAMETER_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ARGUMENT_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ARRAY_CREATION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ARRAY_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType AS_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ASSIGNMENT_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ATTRIBUTE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ATTRIBUTE_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ATTRIBUTE_SECTION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ATTRIBUTE_SECTION_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType AWAIT_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BASE_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BITWISE_AND_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BITWISE_EXCLUSIVE_OR_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BITWISE_INCLUSIVE_OR_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BLOCK;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType BREAK_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType C_SHARP_ARGUMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType C_SHARP_FILE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType C_SHARP_LITERAL_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType C_SHARP_NAMESPACE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CAST_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CATCH_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CHECKED_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CHECKED_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CLASS_BODY;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CLASS_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType COLLECTION_ELEMENT_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType COLLECTION_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONDITIONAL_AND_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONDITIONAL_OR_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONDITIONAL_TERNARY_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONSTANT_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONSTRUCTOR_CONSTRAINT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONSTRUCTOR_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONSTRUCTOR_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONTINUE_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType CONVERSION_OPERATOR_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DECLARATION_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DEFAULT_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DEFINE_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DELEGATE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DESTRUCTOR_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DO_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DOC_C_REF_ELEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DOC_C_REF_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DOC_C_REF_PARAMETER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DOC_C_REF_PARAMETER_TYPE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DOC_C_REF_PARAMETER_TYPE_NAME;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DOC_C_REF_SIGNATURE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DOC_C_REF_TYPE_PARAMETER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DOC_C_REF_TYPE_PARAMETER_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DYNAMIC_DECLARED_TYPE_USAGE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType DYNAMIC_TYPE_USAGE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ELEMENT_ACCESS_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ELIF_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ELSE_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EMPTY_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType END_REGION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ENDIF_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ENUM_BASE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ENUM_BODY;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ENUM_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ENUM_MEMBER_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EQUALITY_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ERROR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType ERROR_ELEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EVENT_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXPRESSION_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXPRESSION_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXTENDS_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType EXTERN_ALIAS_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FIELD_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FOR_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FOR_ITERATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FOR_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FOREACH_HEADER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FOREACH_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FOREACH_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType FORMAL_PARAMETER_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType GENERAL_CATCH_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType GOTO_CASE_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType GOTO_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IF_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IF_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INDEXER_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INTERFACE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType INVOCATION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType IS_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LABEL_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LABEL_REFERENCE_ELEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LABEL_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LAMBDA_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LAMBDA_PARAMETER_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LAMBDA_SIGNATURE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LINE_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LINE_INDICATOR;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LOCAL_CONSTANT_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LOCAL_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType LOCK_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MEMBER_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType METHOD_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MODIFIERS_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MULTIPLE_CONSTANT_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MULTIPLE_EVENT_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MULTIPLE_FIELD_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MULTIPLE_LOCAL_CONSTANT_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MULTIPLE_LOCAL_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType MULTIPLICATIVE_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType NAMESPACE_BODY;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType NULL_COALESCING_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType NULLABLE_TYPE_MARK;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType OBJECT_CREATION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType OBJECT_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType OWNER_QUALIFICATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PARENTHESIZED_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType POSTFIX_OPERATOR_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PRAGMA_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREDEFINED_DECLARED_TYPE_USAGE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREDEFINED_TYPE_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREDEFINED_TYPE_REFERENCE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREDEFINED_TYPE_USAGE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREFIX_OPERATOR_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREPROCESSOR_AND_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREPROCESSOR_CONDITIONAL_SYMBOL;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREPROCESSOR_CONSTANT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREPROCESSOR_EQUALITY_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREPROCESSOR_ERROR_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREPROCESSOR_NEGATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREPROCESSOR_OR_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREPROCESSOR_PARENTHESIZED_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PREPROCESSOR_PRAGMA_BODY;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PROPERTY_ASSIGNMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType PROPERTY_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_CONTINUATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_FIRST_FROM;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_FROM_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_GROUP_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_JOIN_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_LET_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_ORDER_BY_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_ORDERING;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_PARAMETER_PLATFORM;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_RANGE_VARIABLE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_SELECT_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType QUERY_WHERE_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RANK_SPECIFIER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType REFERENCE_CONSTRAINT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType REFERENCE_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType REFERENCE_NAME;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType REGULAR_PARAMETER_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RELATIONAL_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RESOURCE_ACQUISITION_EXPRESSIONS_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType RETURN_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType SHIFT_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType SIGN_OPERATOR_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType SPECIFIC_CATCH_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType START_REGION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType STRUCT_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType SWITCH_LABEL_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType SWITCH_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType THIS_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType THROW_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TRY_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_ARGUMENT_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_CONSTRAINT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_CONSTRAINTS_CLAUSE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_OF_METHOD_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_OF_METHOD_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_OF_TYPE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_OF_TYPE_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPE_PARAMETER_REFERENCE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType TYPEOF_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNARY_OPERATOR_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNCHECKED_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNCHECKED_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNDEF_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNSAFE_CODE_ADDRESS_OF_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNSAFE_CODE_FIXED_POINTER_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNSAFE_CODE_FIXED_POINTER_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNSAFE_CODE_FIXED_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNSAFE_CODE_POINTER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNSAFE_CODE_POINTER_ACCESS_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNSAFE_CODE_POINTER_INDIRECTION_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNSAFE_CODE_SIZE_OF_EXPRESSION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNSAFE_CODE_STACK_ALLOC_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType UNSAFE_CODE_UNSAFE_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType USER_DECLARED_TYPE_USAGE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType USER_TYPE_USAGE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType USING_ALIAS_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType USING_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType USING_NAMESPACE_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType USING_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType VALUE_CONSTRAINT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType WARNING_ACTION;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType WARNING_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType WARNING_LIST;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType WHILE_STATEMENT;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType YIELD_STATEMENT;
    }
    public interface ICSharpHashableDeclaration : JetBrains.ReSharper.Psi.Dependencies.IHashableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Impl.Tree.ICSharpHashableDeclaration> Children { get; }
        bool IsInternal { get; }
        JetBrains.ReSharper.Psi.Dependencies.IHashableEntityInfo[] CalcAllHashes(string parentQualifiedName, out string qualifiedName);
    }
    public class PsiGeneratedGetterTestUtil : JetBrains.ReSharper.Psi.Parsing.PsiGetterTestUtil { }
    public abstract class TokenType
    {
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType @__ARGLIST_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ABSTRACT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ALIAS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AND;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ANDAND;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ANDEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ARROW;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASCENDING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASTERISK;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASTERISKEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASYNC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AWAIT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BAD_CHARACTER;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BASE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BOOL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BREAK_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BYTE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CASE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CATCH_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CHAR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CHARACTER_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CHECKED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CLASS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType COLON;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType COMMA;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CONST_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CONTINUE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DECIMAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DEFAULT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DELEGATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DESCENDING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DIV;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DIVEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DOT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DOUBLE_COLON;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DOUBLE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DOUBLE_QUEST;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DYNAMIC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ELSE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ENUM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EQEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EQUALS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EVENT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EXCL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EXPLICIT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EXTERN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FALSE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FINALLY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FIXED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FLOAT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FLOAT_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FOR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FOREACH_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FROM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GOTO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GROUP_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GTGT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GTGTEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IDENTIFIER;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IMPLICIT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTEGER_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTERFACE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTERNAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType JOIN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LAMBDA_ARROW;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LBRACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LBRACKET;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LET_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LOCK_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LONG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LPARENTH;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LTLT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LTLTEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MINUS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MINUSEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MINUSMINUS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NAMESPACE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NEW_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NULL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OBJECT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ON_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OPERATOR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ORDERBY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OREQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OROR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OUT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OVERRIDE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PARAMS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PARTIAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PERC;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PERCEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PLUS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PLUSEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PLUSPLUS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_AND;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_BAD_CHARACTER;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_BAD_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_COMMA;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_CONDITIONAL_SYMBOL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_DEC_DIGITS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_DEFAULT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_DEFINE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_ELIF_SECTION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_ELSE_SECTION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_END_REGION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_ENDIF;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_EQU;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_ERROR_DIAGNOSTIC;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_FALSE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_FILENAME;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_HIDDEN;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_IF_SECTION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_LINE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_LPAR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_MESSAGE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_NEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_NOT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_OR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_PRAGMA;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_RPAR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_SHARP;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_SKIPPED_LINE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_START_REGION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_TRUE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_UNDEF_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_WARNING_DIAGNOSTIC;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PRIVATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PROTECTED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PUBLIC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType QUEST;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RBRACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RBRACKET;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType READONLY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType REF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RETURN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RPARENTH;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SBYTE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SEALED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SELECT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SEMICOLON;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SHORT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SIZEOF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STACKALLOC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STATIC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STRING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STRING_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STRUCT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SWITCH_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType THIS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType THROW_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TILDE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TRUE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TRY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPEOF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType UINT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ULONG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType UNCHECKED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType UNSAFE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType USHORT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType USING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType VAR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType VIRTUAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType VOID_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType VOLATILE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WHERE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WHILE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XOR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XOREQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType YIELD_KEYWORD;
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.Types
{
    
    public class ConstantType : JetBrains.ReSharper.Psi.CSharp.Types.ICSharpConstantType, JetBrains.ReSharper.Psi.IExpressionType
    {
        public ConstantType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ConstantValue value, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule module, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public JetBrains.ReSharper.Psi.ConstantValue ConstantValue { get; }
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public override int GetHashCode() { }
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule, out JetBrains.ReSharper.Psi.IConversionOperator @operator) { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule, out JetBrains.ReSharper.Psi.IConversionOperator @operator) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsNullType() { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.IType ToIType() { }
    }
    public abstract class CSharpMethodGroupTypeBase : JetBrains.ReSharper.Psi.CSharp.Types.IMethodGroupType, JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.INonCachableExpressionType
    {
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public abstract string MethodShortName { get; }
        public abstract JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        protected abstract JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> ChooseSingleMethod(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, out bool isExtension, out JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo info);
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public abstract JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        protected abstract bool ImplicitConversionExists(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        public bool IsApplicableTo(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public abstract bool IsValid();
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments);
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        public JetBrains.ReSharper.Psi.IType ToIType() { }
    }
    public class static CSharpMethodGroupTypeFactory
    {
        public static JetBrains.ReSharper.Psi.CSharp.Types.IMethodGroupType Create(JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, JetBrains.ReSharper.Psi.IType extensionQualifierType, System.Version languageVersion) { }
        public static JetBrains.ReSharper.Psi.CSharp.Types.IMethodGroupType Create(JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> method, JetBrains.ReSharper.Psi.IType extensionQualifierType, System.Version languageVersion) { }
        public static JetBrains.ReSharper.Psi.CSharp.Types.IMethodGroupType Create(JetBrains.ReSharper.Psi.CSharp.Impl.Resolve.MethodChooser chooser) { }
        public static JetBrains.ReSharper.Psi.CSharp.Types.IMethodGroupType CreateFull(JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> method, JetBrains.ReSharper.Psi.IType extensionQualifierType, JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
    }
    public class DynamicExpressionType : JetBrains.ReSharper.Psi.CSharp.Types.IDynamicExpressionType, JetBrains.ReSharper.Psi.IExpressionType
    {
        public const string PresentableName = "dynamic";
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.IType ToIType() { }
    }
    public class EventType : JetBrains.ReSharper.Psi.IExpressionType
    {
        public EventType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IEvent @event) { }
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.IType ToIType() { }
    }
    public abstract class LambdaExpressionTypeBase : JetBrains.ReSharper.Psi.CSharp.Types.IAnonymousFunctionType, JetBrains.ReSharper.Psi.CSharp.Types.ILambdaExpressionType, JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.INonCachableExpressionType
    {
        protected readonly JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext myResolveContext;
        protected LambdaExpressionTypeBase(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ILambdaParameter> parameters) { }
        public bool HasParametersList { get; }
        protected abstract bool IsAsync { get; }
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        public System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ParameterKind>> ParameterTypesAndKinds { get; }
        public abstract JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IExpressionType> ReturnValues { get; }
        protected System.Collections.Generic.List<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ParameterKind>> CalculateParameterTypes() { }
        protected abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> CalculateReturnTypes(out bool implicitReturnIsReachable, out bool isPossibleStatement);
        protected void CalculateTypes() { }
        public bool Equals(JetBrains.ReSharper.Psi.CSharp.Impl.Types.LambdaExpressionTypeBase other) { }
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsReturnTypeConvertibleTo(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution delegateSubstitution) { }
        public bool IsSignatureConvertibleTo(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution delegateSubstitution) { }
        public virtual bool IsValid() { }
        public JetBrains.ReSharper.Psi.IType ToIType() { }
    }
    public class LambdaExpressionTypeForBlock : JetBrains.ReSharper.Psi.CSharp.Impl.Types.LambdaExpressionTypeBase
    {
        protected override bool IsAsync { get; }
        public override JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        protected override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> CalculateReturnTypes(out bool implicitReturnIsReachable, out bool isPossibleStatement) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override bool IsValid() { }
    }
    public class LambdaExpressionTypeForExpression : JetBrains.ReSharper.Psi.CSharp.Impl.Types.LambdaExpressionTypeBase
    {
        protected override bool IsAsync { get; }
        public override JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        protected override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> CalculateReturnTypes(out bool implicitReturnIsReachable, out bool isPossibleStatement) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override bool IsValid() { }
    }
    public class NullType : JetBrains.ReSharper.Psi.CSharp.Types.ICSharpConstantType, JetBrains.ReSharper.Psi.IExpressionType
    {
        public NullType(JetBrains.ReSharper.Psi.Tree.ILiteralExpression expression) { }
        public JetBrains.ReSharper.Psi.ConstantValue ConstantValue { get; }
        public bool IsResolved { get; }
        public bool IsUnknown { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType GetDefaultType() { }
        public string GetLongPresentableName(JetBrains.ReSharper.Psi.PsiLanguageType languageType) { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule, out JetBrains.ReSharper.Psi.IConversionOperator @operator) { }
        public bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule, out JetBrains.ReSharper.Psi.IConversionOperator @operator) { }
        public bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule) { }
        public bool IsNullType() { }
        public bool IsValid() { }
        public JetBrains.ReSharper.Psi.IType ToIType() { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport
{
    
    public class CSharpParameterOfUnresolvedMethod : JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.ICSharpParameterOfUnresolvedMethod, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParameter, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IUnresolvedDeclaredElement
    {
        public CSharpParameterOfUnresolvedMethod(JetBrains.ReSharper.Psi.IParametersOwner owner, JetBrains.ReSharper.Psi.IType type, string shortName, JetBrains.ReSharper.Psi.ParameterKind kind, bool hasName) { }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.IParametersOwner ContainingParametersOwner { get; }
        public bool HasName { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsDynamic { get; }
        public bool IsOptional { get; }
        public bool IsParameterArray { get; }
        public bool IsValueVariable { get; }
        public bool IsVarArg { get; }
        public JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; set; }
        public bool Equals(JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.CSharpParameterOfUnresolvedMethod other) { }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DefaultValue GetDefaultValue() { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
    }
    public class CSharpUnresolvedConstructor : JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.ICSharpUnresolvedConstructor, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstructor, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IUnresolvedDeclaredElement, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public CSharpUnresolvedConstructor(string shortName, JetBrains.ReSharper.Psi.Tree.ITreeNode element, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument> arguments) { }
        public CSharpUnresolvedConstructor(string shortName, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsDefault { get; }
        public bool IsDynamic { get; }
        public bool IsExtern { get; }
        public bool IsImplicit { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.ICSharpParameterOfUnresolvedMethod> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        public bool Equals(JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.CSharpUnresolvedConstructor other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
    }
    public class CSharpUnresolvedElementPresenter : JetBrains.ReSharper.Psi.IDeclaredElementPresenter
    {
        public string Format(JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle style, JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, out JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking marking) { }
        public string Format(JetBrains.ReSharper.Psi.ParameterKind parameterKind) { }
        public string Format(JetBrains.ReSharper.Psi.AccessRights accessRights) { }
    }
    public class CSharpUnresolvedField : JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.ICSharpUnresolvedField, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IField, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IUnresolvedDeclaredElement, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public CSharpUnresolvedField(string shortName, JetBrains.ReSharper.Psi.Tree.ITreeNode element, bool isStatic, bool isDynamic) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CaseSensistiveName { get; }
        public JetBrains.ReSharper.Psi.ConstantValue ConstantValue { get; }
        public System.Nullable<int> FixedBufferSize { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsConstant { get; }
        public bool IsDynamic { get; }
        public bool IsEnumMember { get; }
        public bool IsExtern { get; }
        public bool IsField { get; }
        public bool IsOverride { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public JetBrains.ReSharper.Psi.IType Type { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
    }
    public class CSharpUnresolvedFieldType : JetBrains.ReSharper.Psi.DeclaredElementTypeBase
    {
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType DynamicField;
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType UnresolvedField;
        public CSharpUnresolvedFieldType(string name, JetBrains.UI.Icons.IconId imageName) { }
        protected override JetBrains.ReSharper.Psi.IDeclaredElementPresenter DefaultPresenter { get; }
    }
    public class CSharpUnresolvedMethod : JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.ICSharpUnresolvedMethod, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IMethod, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IUnresolvedDeclaredElement, JetBrains.ReSharper.Psi.IXmlDocIdOwner
    {
        public CSharpUnresolvedMethod(string shortName, JetBrains.ReSharper.Psi.Tree.ITreeNode element, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument> arguments, bool isDynamic) { }
        public CSharpUnresolvedMethod(string shortName, JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public JetBrains.ReSharper.Psi.AccessibilityDomain AccessibilityDomain { get; }
        public bool CanBeImplicitImplementation { get; }
        public bool CaseSensistiveName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExplicitImplementation> ExplicitImplementations { get; }
        public JetBrains.ReSharper.Psi.MemberHidePolicy HidePolicy { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsAbstract { get; }
        public bool IsDynamic { get; }
        public bool IsExplicitImplementation { get; }
        public bool IsExtensionMethod { get; }
        public bool IsExtern { get; }
        public bool IsIterator { get; }
        public bool IsOverride { get; }
        public bool IsPredefined { get; }
        public bool IsReadonly { get; }
        public bool IsSealed { get; }
        public bool IsStatic { get; }
        public bool IsUnsafe { get; }
        public bool IsVarArg { get; }
        public bool IsVirtual { get; }
        public bool IsVolatile { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.ICSharpParameterOfUnresolvedMethod> Parameters { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.IType ReturnType { get; }
        public JetBrains.ReSharper.Psi.IAttributesSet ReturnTypeAttributes { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public string XMLDocId { get; }
        public System.Nullable<JetBrains.ReSharper.Psi.Dependencies.Hash> CalcHash() { }
        public bool Equals(JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.CSharpUnresolvedMethod other) { }
        public override bool Equals(object obj) { }
        public JetBrains.ReSharper.Psi.AccessRights GetAccessRights() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.TypeMemberInstance> GetHiddenMembers() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration> GetParametersOwnerDeclarations() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.InvocableSignature GetSignature(JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
    }
    public class CSharpUnresolvedMethodType : JetBrains.ReSharper.Psi.DeclaredElementTypeBase
    {
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType DynamicMethod;
        public static readonly JetBrains.ReSharper.Psi.DeclaredElementType UnresolvedMethod;
        public CSharpUnresolvedMethodType(string name, JetBrains.UI.Icons.IconId imageName) { }
        protected override JetBrains.ReSharper.Psi.IDeclaredElementPresenter DefaultPresenter { get; }
    }
    public class CSharpUnresolvedTypeElement : JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.ICSharpUnresolvedTypeElement, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IUnresolvedDeclaredElement
    {
        public CSharpUnresolvedTypeElement(string shortName, JetBrains.ReSharper.Psi.Tree.ITreeNode element, int typeParametersNumber) { }
        public bool CaseSensistiveName { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IConstructor> Constructors { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IEvent> Events { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution IdSubstitution { get; }
        public bool IsDynamic { get; }
        public System.Collections.Generic.IEnumerable<string> MemberNames { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IMethod> Methods { get; }
        public JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeElement> NestedTypes { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IOperator> Operators { get; }
        public JetBrains.ReSharper.Psi.PsiLanguageType PresentationLanguage { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IProperty> Properties { get; }
        public JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext ResolveContext { get; }
        public string ShortName { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> TypeParameters { get; }
        public int TypeParametersNumber { get; }
        public bool Equals(JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.CSharpUnresolvedTypeElement other) { }
        public override bool Equals(object obj) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(bool inherit) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IAttributeInstance> GetAttributeInstances(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public virtual JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
        public JetBrains.ReSharper.Psi.INamespace GetContainingNamespace() { }
        public JetBrains.ReSharper.Psi.ITypeElement GetContainingType() { }
        public JetBrains.ReSharper.Psi.ITypeMember GetContainingTypeMember() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarations() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IDeclaration> GetDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public JetBrains.ReSharper.Psi.DeclaredElementType GetElementType() { }
        public override int GetHashCode() { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.ITypeMember> GetMembers() { }
        public JetBrains.ReSharper.Psi.IPsiServices GetPsiServices() { }
        public JetBrains.ReSharper.Psi.IPsiSourceFile GetSingleOrDefaultSourceFile() { }
        public JetBrains.Util.DataStructures.HybridCollection<JetBrains.ReSharper.Psi.IPsiSourceFile> GetSourceFiles() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredType> GetSuperTypes() { }
        public System.Xml.XmlNode GetXMLDescriptionSummary(bool inherit) { }
        public System.Xml.XmlNode GetXMLDoc(bool inherit) { }
        public bool HasAttributeInstance(JetBrains.ReSharper.Psi.IClrTypeName clrName, bool inherit) { }
        public bool HasDeclarationsIn(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile) { }
        public bool IsSynthetic() { }
        public bool IsValid() { }
    }
    public class CSharpUnresolvedTypeParameter : JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.CSharpUnresolvedTypeElement, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.ITypeParametersOwner
    {
        public CSharpUnresolvedTypeParameter(string shortName, JetBrains.ReSharper.Psi.Tree.ITreeNode element, int typeParametersNumber, int index, JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.CSharpUnresolvedTypeElement unresolvedTypeElement) { }
        public bool HasDefaultConstructor { get; }
        public int Index { get; }
        public bool IsClassType { get; }
        public bool IsValueType { get; }
        public JetBrains.ReSharper.Psi.ITypeParametersOwner Owner { get; }
        public JetBrains.ReSharper.Psi.IMethod OwnerMethod { get; }
        public JetBrains.ReSharper.Psi.ITypeElement OwnerType { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IType> TypeConstraints { get; }
        public JetBrains.ReSharper.Psi.TypeParameterVariance Variance { get; }
        public override JetBrains.ReSharper.Psi.IClrTypeName GetClrName() { }
    }
    public interface ICSharpParameterOfUnresolvedMethod : JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParameter, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IUnresolvedDeclaredElement
    {
        bool HasName { get; }
    }
    public interface ICSharpUnresolvedConstructor : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstructor, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.IUnresolvedDeclaredElement, JetBrains.ReSharper.Psi.IXmlDocIdOwner { }
    public interface ICSharpUnresolvedField : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IField, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.IUnresolvedDeclaredElement, JetBrains.ReSharper.Psi.IXmlDocIdOwner { }
    public interface ICSharpUnresolvedMethod : JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IFunction, JetBrains.ReSharper.Psi.IMethod, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.IOverridableMember, JetBrains.ReSharper.Psi.IParametersOwner, JetBrains.ReSharper.Psi.ITypeMember, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IUnresolvedDeclaredElement, JetBrains.ReSharper.Psi.IXmlDocIdOwner { }
    public interface ICSharpUnresolvedTypeElement : JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeElement, JetBrains.ReSharper.Psi.ITypeParametersOwner, JetBrains.ReSharper.Psi.IUnresolvedDeclaredElement { }
    public class UnresolvedElementsUtil
    {
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Impl.UnresolvedSupport.ICSharpParameterOfUnresolvedMethod> CreateParameters(JetBrains.ReSharper.Psi.IParametersOwner owner, System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument> arguments) { }
    }
    public class static UnresolvedSymbolTableUtil
    {
        public static System.Collections.Generic.IEnumerable<string> CollectUnresolvedNames(JetBrains.ReSharper.Psi.Tree.ITreeNode context, System.Func<JetBrains.ReSharper.Psi.IDeclaredElement, bool> filter) { }
        public static JetBrains.ReSharper.Psi.Resolve.ISymbolTable PopulateSymbolTable(JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable qualifiableReference) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Naming
{
    
    public class CSharpNameCompletionUtil : JetBrains.ReSharper.Psi.Naming.Extentions.NameCompletionUtil
    {
        public static System.Collections.Generic.IList<string> SuggestNamesOfIdentifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier identifier, [JetBrains.Annotations.NotNullAttribute()] string prefix) { }
    }
    public class NameComparer<T> : System.Collections.Generic.IComparer<T>
    
    {
        public NameComparer(bool longerNamesFirst) { }
        public int Compare(T x, T y) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Naming2
{
    
    [JetBrains.ReSharper.Psi.Naming.Elements.NamedElementsBagAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpElementKindOfElementType : JetBrains.ReSharper.Psi.Naming.Elements.ElementKindOfElementType
    {
        [JetBrains.Annotations.UsedImplicitlyAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind ASYNC_METHOD;
        [JetBrains.Annotations.UsedImplicitlyAttribute()]
        public static readonly JetBrains.ReSharper.Psi.Naming.Elements.IElementKind LAMBDA_PARAMETER;
        protected CSharpElementKindOfElementType([JetBrains.Annotations.NotNullAttribute()] string name, string presentableName, System.Func<JetBrains.ReSharper.Psi.IDeclaredElement, bool> isApplicable) { }
        public override JetBrains.ReSharper.Psi.PsiLanguageType Language { get; }
    }
    [JetBrains.ReSharper.Psi.Naming.Interfaces.NamingConsistencyCheckerAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public sealed class CSharpNamingConsistencyChecker : JetBrains.ReSharper.Psi.Naming.Impl.ClrNamingConsistencyCheckerBase
    {
        protected override bool IsException(string canonicalName) { }
        protected override bool IsUnnamedElement(JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
    }
    public class CSharpNamingPolicyProvider : JetBrains.ReSharper.Psi.Naming.Settings.ClrPolicyProviderBase<JetBrains.ReSharper.Psi.CSharp.Naming2.CSharpNamingSettings>
    {
        public CSharpNamingPolicyProvider(JetBrains.ReSharper.Psi.PsiLanguageType language, JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.Application.Settings.IContextBoundSettingsStore settings) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpNamingPolicyProviderFactory : JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProviderFactory
    {
        public CSharpNamingPolicyProviderFactory(JetBrains.ReSharper.Psi.PsiLanguageType language) { }
        public JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider CreatePolicyProvider(JetBrains.ReSharper.Psi.IPsiSourceFile sourceFile, JetBrains.Application.Settings.IContextBoundSettingsStore settingsStore) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpNamingService : JetBrains.ReSharper.Psi.Naming.Impl.ClrNamingLanguageServiceBase
    {
        public CSharpNamingService(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage language, JetBrains.ReSharper.Psi.CSharp.ExpectedTypes.ICSharpExpectedTypesProvider expectedTypesProvider) { }
        protected virtual System.Collections.Generic.ICollection<string> ReservedNames { get; }
        protected override JetBrains.ReSharper.Psi.Naming.Impl.NameRoot GetAbbreviation(JetBrains.ReSharper.Psi.Naming.Impl.NameRoot root) { }
        public override JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind GetScopeKind(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        protected override bool IsLocalDeclaration(JetBrains.ReSharper.Psi.Tree.IDeclaration declaration) { }
        protected virtual bool IsMangled(string name) { }
        public override string MangleNameIfNecessary(string name) { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SuggestRoots(JetBrains.ReSharper.Psi.Tree.ITreeNode element, bool useExpectedTypes, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        public override System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Naming.Impl.NameRoot> SuggestRoots(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Naming.Interfaces.INamingPolicyProvider policyProvider) { }
        protected override string Unmangle(string name) { }
    }
    [JetBrains.Application.Settings.SettingsKeyAttribute(typeof(JetBrains.ReSharper.Psi.Naming.Settings.NamingSettings), "C# naming settings")]
    public class CSharpNamingSettings : JetBrains.ReSharper.Psi.Naming.Settings.ClrLanguageNamingSettingsKeyBase { }
}
namespace JetBrains.ReSharper.Psi.CSharp.Naming2.Upgrade
{
    
    [JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute()]
    [JetBrains.ProjectModel.Settings.Upgrade.SolutionSettingsUpgraderAttribute()]
    public class CSharpNamingSettingsUpgrader : JetBrains.ReSharper.Psi.Naming.Settings.Upgrade.ClrNamingSettingsUpgrade<JetBrains.ReSharper.Psi.CSharp.Naming2.CSharpNamingSettings>
    {
        public CSharpNamingSettingsUpgrader(JetBrains.Application.Parts.IPartsCatalogueSet partsSet, JetBrains.ProjectModel.ISolution solution = null) { }
        protected override JetBrains.ReSharper.Psi.Naming.Interfaces.INamingSettings GetSpecificSettings(JetBrains.ReSharper.Psi.CodeStyle.SettingsUpgrade.CodeStyleSettingsObsolete codeStyleSettings) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Parsing
{
    
    public class CSharpLexer : JetBrains.ReSharper.Psi.CSharp.Parsing.CSharpLexerGenerated
    {
        public CSharpLexer(JetBrains.Text.IBuffer buffer) { }
        public override JetBrains.ReSharper.Psi.Parsing.TokenNodeType _locateToken() { }
        public static JetBrains.ReSharper.Psi.Parsing.TokenNodeType GetKeyword(string str) { }
        public static bool IsContextSensitiveKeyword(string str) { }
        public static bool IsKeyword(string str) { }
        public static bool IsWhitespace(string s) { }
    }
    public class CSharpLexerGenerated : JetBrains.ReSharper.Psi.Parsing.IIncrementalLexer, JetBrains.ReSharper.Psi.Parsing.ILexer, JetBrains.ReSharper.Psi.Parsing.ILexer<JetBrains.ReSharper.Psi.CSharp.Parsing.CSharpLexerState>, JetBrains.ReSharper.Psi.Parsing.ILexerEx
    {
        protected static readonly JetBrains.ReSharper.Psi.Parsing.LexerDictionary<JetBrains.ReSharper.Psi.Parsing.TokenNodeType> keywords;
        protected const int PPDIGITS = 3;
        protected const int PPMESSAGE = 4;
        protected const int PPSHARP = 1;
        protected const int PPSYMBOL = 2;
        protected const int YYINITIAL = 0;
        public CSharpLexerGenerated(JetBrains.Text.IBuffer buffer) { }
        public CSharpLexerGenerated(JetBrains.Text.IBuffer buffer, int startOffset, int endOffset) { }
        public JetBrains.Text.IBuffer Buffer { get; }
        protected int BufferEnd { set; }
        protected int BufferIndex { get; set; }
        protected int BufferStart { get; set; }
        public JetBrains.ReSharper.Psi.CSharp.Parsing.CSharpLexerState CurrentPosition { get; set; }
        public int EOFPos { get; }
        public int LexemIndent { get; }
        public uint LexerStateEx { get; }
        protected int LexicalState { get; }
        public int TokenEnd { get; }
        public int TokenStart { get; }
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType TokenType { get; }
        public virtual JetBrains.ReSharper.Psi.Parsing.TokenNodeType _locateToken() { }
        public void Advance() { }
        public void Start() { }
        public void Start(int startOffset, int endOffset, uint state) { }
    }
    public struct CSharpLexerState
    {
        public JetBrains.ReSharper.Psi.Parsing.TokenNodeType currTokenType;
        public int yy_buffer_end;
        public int yy_buffer_index;
        public int yy_buffer_start;
        public int yy_lexical_state;
    }
    public class static CSharpTokenType
    {
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType @__ARGLIST_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ABSTRACT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ALIAS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AND;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ANDAND;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ANDEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ARROW;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASCENDING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASTERISK;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASTERISKEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ASYNC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType AWAIT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BAD_CHARACTER;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BASE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BOOL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BREAK_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType BYTE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType C_STYLE_COMMENT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CASE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CATCH_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CHAMELEON;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CHAR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CHARACTER_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CHECKED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CLASS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType COLON;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType COMMA;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CONST_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType CONTINUE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DECIMAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DEFAULT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DELEGATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DESCENDING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DIV;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DIVEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DOT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DOUBLE_COLON;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DOUBLE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DOUBLE_QUEST;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType DYNAMIC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ELSE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType END_OF_LINE_COMMENT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ENUM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EOF;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EQEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EQUALS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EVENT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EXCL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EXPLICIT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType EXTERN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FALSE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FINALLY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FIXED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FLOAT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FLOAT_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FOR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FOREACH_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType FROM_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GOTO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GROUP_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GTGT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType GTGTEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IDENTIFIER;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet IDENTIFIER_KEYWORDS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IMPLICIT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTEGER_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTERFACE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTERNAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType INTO_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType IS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType JOIN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet KEYWORDS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LAMBDA_ARROW;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LBRACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LBRACKET;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LET_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet LITERALS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LOCK_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LONG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LPARENTH;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LTLT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType LTLTEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MINUS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MINUSEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType MINUSMINUS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NAMESPACE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NEW_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NEW_LINE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType NULL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OBJECT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ON_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OPERATOR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ORDERBY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OREQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OROR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OUT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType OVERRIDE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PARAMS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PARTIAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PERC;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PERCEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PLUS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PLUSEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PLUSPLUS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_AND;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_BAD_CHARACTER;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_BAD_DIRECTIVE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_COMMA;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_CONDITIONAL_SYMBOL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_DEC_DIGITS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_DEFAULT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_DEFINE_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_ELIF_SECTION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_ELSE_SECTION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_END_REGION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_ENDIF;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_EQU;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_ERROR_DIAGNOSTIC;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_FALSE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_FILENAME;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_HIDDEN;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_IF_SECTION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_LINE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_LPAR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_MESSAGE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_NEQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_NOT;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_OR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_PRAGMA;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_RPAR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_SHARP;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_SKIPPED_LINE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_START_REGION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_TRUE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_UNDEF_DECLARATION;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PP_WARNING_DIAGNOSTIC;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet PREPROCESSOR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PRIVATE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PROTECTED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType PUBLIC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType QUEST;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RBRACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RBRACKET;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType READONLY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType REF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RETURN_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType RPARENTH;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SBYTE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SEALED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SELECT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SEMICOLON;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SHORT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SIZEOF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STACKALLOC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STATIC_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STRING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STRING_LITERAL;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType STRUCT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType SWITCH_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType THIS_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType THROW_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TILDE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TRUE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TRY_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.NodeTypeSet TYPE_KEYWORDS;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType TYPEOF_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType UINT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType ULONG_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType UNCHECKED_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType UNSAFE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType USHORT_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType USING_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType VAR_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType VIRTUAL_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType VOID_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType VOLATILE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WHERE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WHILE_KEYWORD;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType WHITE_SPACE;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XOR;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType XOREQ;
        public static readonly JetBrains.ReSharper.Psi.Parsing.TokenNodeType YIELD_KEYWORD;
    }
    public interface ICSharpParser : JetBrains.ReSharper.Psi.Parsing.IParser
    {
        System.Func<JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement> BoundToBufferChameleonStrategy { get; }
        System.Func<JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement> ExpandChameleons { set; }
        System.Func<JetBrains.ReSharper.Psi.TreeTextRange, JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement> OpenChameleonStrategy { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock ParseCodeBlock();
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression ParseExpression();
        new JetBrains.ReSharper.Psi.Tree.IFile ParseFile();
        JetBrains.ReSharper.Psi.Tree.ITreeNode ParseMemberDeclaration();
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement ParseStatement();
    }
    public interface ICSharpTokenNodeType : JetBrains.ReSharper.Psi.Parsing.ITokenNodeType { }
    public class static ParserMessages
    {
        public const string IDS__DOC_C_REF_IDENTIFIER_OR_KEYWORD = "identifier";
        public const string IDS__IDENTIFIER = "identifier";
        public const string IDS_ARGLIST_PARAMETER_DECLARATION = "parameter declaration";
        public const string IDS_ARRAY_CREATION_AUX = "expression";
        public const string IDS_ASSIGNMENT_OPERATOR_AUX = "expression";
        public const string IDS_ATTRIBUTE_SECTION = "attribute section";
        public const string IDS_BINARY_EXPRESSION = "expression";
        public const string IDS_BLOCK = "method body";
        public const string IDS_C_SHARP_ARGUMENT = "argument";
        public const string IDS_C_SHARP_EXPRESSION = "expression";
        public const string IDS_C_SHARP_LITERAL_EXPRESSION = "expression";
        public const string IDS_C_SHARP_TYPE_DECLARATION = "type declaration";
        public const string IDS_CLASS_LIKE_DECLARATION = "type declaration";
        public const string IDS_CLASS_MEMBER_DECLARATION_AUX = "type member declaration";
        public const string IDS_CLASS_MEMBER_DECLARATION_AUX1 = "type member declaration";
        public const string IDS_COLLECTION_ELEMENT_INITIALIZER = "expression";
        public const string IDS_CREATION_EXPRESSION = "expression";
        public const string IDS_CREATION_EXPRESSION_INITIALIZER = "initializer";
        public const string IDS_DECLARATION_OR_EXPRESSION_OR_LABEL_STATEMENT = "statement";
        public const string IDS_DECLARATION_STATEMENT = "statement";
        public const string IDS_DECLARED_TYPE_USAGE = "usage of type";
        public const string IDS_DOC_C_REF_ELEMENT_AUX = "identifier";
        public const string IDS_DOC_C_REF_GENERICS_L_ANGLE = "\'<\'";
        public const string IDS_DOC_C_REF_GENERICS_R_ANGLE = "\'>\'";
        public const string IDS_EMBEDDED_STATEMENT_NO_IDENTIFIER = "statement";
        public const string IDS_EXCEPTION_DECLARATION_AUX = "exception variable declaration";
        public const string IDS_EXPECTED_SYMBOL = "{0} expected";
        public const string IDS_EXPECTED_TWO_SYMBOLS = "{0} or {1} expected";
        public const string IDS_FLOATING_POINT_TYPE = "!?!?";
        public const string IDS_FOR_INITIALIZER = "!?!?";
        public const string IDS_FOREACH_VARIABLE_DECLARATION = "foreach variable declaration";
        public const string IDS_FUNCTION_BODY = "method body";
        public const string IDS_GOTO_CASE_STATEMENT = "statement";
        public const string IDS_GOTO_STATEMENT = "statement";
        public const string IDS_INITIALIZER_ELEMENT = "initializer";
        public const string IDS_INTEGRAL_TYPE = "!?!?";
        public const string IDS_ITERATION_STATEMENT_AUX = "statement";
        public const string IDS_JUMP_STATEMENT_AUX = "statement";
        public const string IDS_LAMBDA_PARAMETER_DECLARATION = "lambda parameter";
        public const string IDS_LAMBDA_SIGNATURE = "lambda signature";
        public const string IDS_LINE_INDICATOR = "Conditional symbol";
        public const string IDS_MEMBER_INITIALIZER_RIGHT_PART = "expression";
        public const string IDS_MEMBER_OWNER_DECLARATION = "type declaration";
        public const string IDS_MODIFIERS_LIST = "!?!?";
        public const string IDS_NAMESPACE_MEMBER_DECLARATION_AUX = "namespace member declaration";
        public const string IDS_NUMERIC_TYPE = "!?!?";
        public const string IDS_PREDEFINED_TYPE_REFERENCE = "usage of predefined type";
        public const string IDS_PREPROCESSOR_CONSTANT = "Conditional symbol";
        public const string IDS_PREPROCESSOR_DIRECTIVE = "Conditional symbol";
        public const string IDS_PREPROCESSOR_EXPRESSION = "Conditional symbol";
        public const string IDS_PREPROCESSOR_UNARY_EXPRESSION = "Conditional symbol";
        public const string IDS_PRIMARY_EXPRESSION = "expression";
        public const string IDS_PROPERTY_ASSIGNMENT = "expression";
        public const string IDS_QUERY_GROUP_CLAUSE = "\'group\' clause";
        public const string IDS_QUERY_SELECT_CLAUSE = "\'select\' clause";
        public const string IDS_RANK_SPECIFIER = "!?!?";
        public const string IDS_REGULAR_PARAMETER_DECLARATION = "parameter declaration";
        public const string IDS_REGULAR_PARAMETER_MODIFIERS = "parameter modifier";
        public const string IDS_RESOURCE_ACQUISITION = "declaration or expression list";
        public const string IDS_SELECTION_STATEMENT_AUX = "statement";
        public const string IDS_SIGN_OPERATOR_SIGN = "valid operator sign";
        public const string IDS_STATEMENT_AUX = "statement";
        public const string IDS_STRUCT_MEMBER_DECLARATION = "type member declaration";
        public const string IDS_SWITCH_LABEL_STATEMENT = "statement";
        public const string IDS_THE_F_M_P_I_OOR_IDENTIFIER_DECLARATION_AUX = "type member declaration";
        public const string IDS_THE_M_P_DECLARATION_AUX = "type member declaration";
        public const string IDS_THE_M_P_I_DECLARATION_AUX = "type member declaration";
        public const string IDS_TYPE_DECLARATION_AUX = "type declaration";
        public const string IDS_TYPE_MEMBER_MODIFIER = "modifier";
        public const string IDS_TYPE_PARAMETER_CONSTRAINT = "type parameter constraint";
        public const string IDS_TYPE_USAGE = "usage of type";
        public const string IDS_UNARY_EXPRESSION = "expression";
        public const string IDS_UNEXPECTED_EOF = "Unexpected end of file";
        public const string IDS_UNEXPECTED_TOKEN = "Unexpected token";
        public const string IDS_VARIABLE_INITIALIZER = "initializer";
        public static string GetExpectedMessage(string expectedSymbol) { }
        public static string GetExpectedMessage(string firstExpectedSymbol, string secondExpectedSymbol) { }
        public static string GetString(string id) { }
        public static string GetUnexpectedEofMessage() { }
        public static string GetUnexpectedTokenMessage() { }
    }
    public class static SyntheticComments
    {
        public const string SystemEndComment = "/*__RESHARPER__*/";
        public static bool IsSyntheticNonStickyComment(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Resolve
{
    
    public class CSharpImplicitBaseConstructorInvocationReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ImplicitBaseConstructorInvocationReference
    {
        public CSharpImplicitBaseConstructorInvocationReference(JetBrains.ReSharper.Psi.Tree.IDeclaration ownerElement, JetBrains.ReSharper.Psi.IClass baseClass) { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
    }
    public class CSharpResolveErrorType : JetBrains.ReSharper.Psi.Resolve.ResolveErrorType
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType CONDITIONAL_LOGIC_OPERATOR_TYPES_MISMATCH;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType EMPTY_NAMESPACE;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType INCORRECT_AWAITABLE_PATTERN;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType INCORRECT_INVOCABLE_USE;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType INCORRECT_METHOD_GROUP_RETURN_TYPE;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType INCORRECT_SIGNATURE_IN_DOCCOMMENT;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType INDEXED_PROPERTY_WITHOUT_ARGUMENTS;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType IS_NOT_ALIAS;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType METHOD_GROUP_INVALID_CONTEXT;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType NOT_RESOLVED_TEXT_REFERENCE;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType NOT_VARIABLE_IN_INITIALIZER;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType OPERATOR_IS_NOT_APPLICABLE;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType PARAMETER_NOT_VALID_HERE;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType TRUE_FALSE_OPERATOR_MISSED;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.CSharpResolveErrorType USE_LOCAL_BEFORE_DECLARATION;
    }
    public class static CSharpResolveInfoFactory
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo Create(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective> usingDirectives, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo Create(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective usingDirective, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
    }
    public class static CSharpResolveResultExtensions
    {
        public static JetBrains.ReSharper.Psi.Resolve.IResolveResult CreateSimpleResolveResult(this JetBrains.ReSharper.Psi.Resolve.IResolveResult @this) { }
        public static bool IsEventSubscription(this JetBrains.ReSharper.Psi.Resolve.IResolveResult @this) { }
        public static bool IsLateBound(this JetBrains.ReSharper.Psi.Resolve.IResolveResult @this) { }
    }
    public class EventSubscriptionResolveResult : JetBrains.ReSharper.Psi.Resolve.ResolveResult
    {
        public EventSubscriptionResolveResult(JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution candidateSubstitution) { }
    }
    public interface ICSharpDocCommentReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IDocCommentReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.Tree.ICommentNode CommentNode { get; set; }
        JetBrains.ReSharper.Psi.TreeOffset LocalOffset { get; set; }
        JetBrains.ReSharper.Psi.TreeTextRange GetSignatureRange();
    }
    public interface ICSharpInvocationReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo Invocation { get; }
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> GetCandidates();
        bool ShouldInferTypeArguments();
    }
    public interface IResolveInfoWithUsings : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo
    {
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective> UsingDirectives { get; }
    }
    public interface IResolvePatcher
    {
        JetBrains.ReSharper.Psi.IType PatchLocalVariableType(JetBrains.ReSharper.Psi.ILocalVariable loaclVariable, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.Resolve.IResolveResult PatchResolve(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName referenceName, out JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo errorType);
        JetBrains.ReSharper.Psi.Resolve.ISymbolTable PatchSymbolTable(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName referenceName);
    }
    public class LiftedResolveResult : JetBrains.ReSharper.Psi.Resolve.ResolveResult
    {
        public LiftedResolveResult(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, bool isDeclaredElementLifted) { }
        public LiftedResolveResult(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IDeclaredElement> candidates, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> substitutions, System.Collections.Generic.IList<bool> isCandidateLifted) { }
        public JetBrains.ReSharper.Psi.ISignOperator[] LiftedCandidates { get; }
        public JetBrains.ReSharper.Psi.ISignOperator LiftedOperator { get; }
        public static JetBrains.ReSharper.Psi.Resolve.IResolveResult Create(JetBrains.ReSharper.Psi.Resolve.IResolveResult resolveResult) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner>> GetLiftedParametersOwners() { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceDeclaredElement(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public override JetBrains.ReSharper.Psi.Resolve.IResolveResult ReplaceSubstitution(JetBrains.ReSharper.Psi.Resolve.ISubstitution candidateSubstitution) { }
    }
    public class static ResolveInfoWithUsingsExtension
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static string GetExternAliasName(this JetBrains.ReSharper.Psi.CSharp.Resolve.IResolveInfoWithUsings info) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution
{
    
    public class ApplicableCandidate : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ICandidate
    {
        public ApplicableCandidate(JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.CandidateWithResolveContext candidate, bool hasInconvertibleImplicitLambdas) { }
        public JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        public bool HasInconvertibleImplicitLambdas { get; }
        public bool IsDynamicDispatch { get; }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> MatchResult { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo OriginalSymbolInfo { get; }
        public JetBrains.ReSharper.Psi.IParametersOwner ParametersOwner { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> ParametersOwnerInstance { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution ParametersOwnerSubstitution { get; }
        public JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Substitution { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ArgumentMatchWithType> MatchResultWithTypes() { }
    }
    public struct ArgumentMatchWithType
    {
        public ArgumentMatchWithType(JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch match, JetBrains.ReSharper.Psi.IExpressionType argumentType, JetBrains.ReSharper.Psi.IType parameterType) { }
        public JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo Argument { get; }
        public JetBrains.ReSharper.Psi.IExpressionType ArgumentType { get; }
        public JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ExpandedKind Expanded { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.IParameter Parameter { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public JetBrains.ReSharper.Psi.IType ParameterType { get; }
    }
    public class BackToArgumentMatcher : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IArgumentsMatcher
    {
        public BackToArgumentMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, int argumentIndex) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> Match(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
    }
    public class static BetterFunctionMemberSelector
    {
        public static int ExplicitArgumentsIsBetter(JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate candidate1, JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate candidate2) { }
        public static int HasBetterConversion(JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate candidate1, JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate candidate2, bool isOperatorPromotion = False) { }
        public static int IsBetterConversion(JetBrains.ReSharper.Psi.IType type1, JetBrains.ReSharper.Psi.IType type2, JetBrains.ReSharper.Psi.IExpressionType typeToConvert1, JetBrains.ReSharper.Psi.IExpressionType typeToConvert2, bool isOperatorPromotion = False) { }
        public static int IsBetterFunctionMember(JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate candidate1, JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate candidate2) { }
        public static int MoreSpecificParameterTypes(JetBrains.ReSharper.Psi.IParametersOwner method1, JetBrains.ReSharper.Psi.IParametersOwner method2) { }
        public static int NonExpandedIsBetter(JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate candidate1, JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate candidate2) { }
        public static int NonGenericIsBetter(JetBrains.ReSharper.Psi.IParametersOwner method1, JetBrains.ReSharper.Psi.IParametersOwner method2) { }
    }
    public class Candidate : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ICandidate
    {
        public Candidate(JetBrains.ReSharper.Psi.IParametersOwner parametersOwner, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public Candidate(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo symbolInfo, JetBrains.ReSharper.Psi.IParametersOwner parametersOwner, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, bool parametersOwnerChanged) { }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo OriginalSymbolInfo { get; }
        public JetBrains.ReSharper.Psi.IParametersOwner ParametersOwner { get; }
        public bool ParametersOwnerChanged { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> ParametersOwnerInstance { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution ParametersOwnerSubstitution { get; }
    }
    public class CandidateWithResolveContext : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ICandidate
    {
        public CandidateWithResolveContext(JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.InferedCandidate candidate, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public JetBrains.ReSharper.Psi.IDeclaredElement DeclaredElement { get; }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> DynamicTypeParameters { get; }
        public bool IsDynamicDispatch { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> MatchResult { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo OriginalSymbolInfo { get; }
        public JetBrains.ReSharper.Psi.IParametersOwner ParametersOwner { get; }
        public bool ParametersOwnerChanged { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> ParametersOwnerInstance { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution ParametersOwnerSubstitution { get; }
        public JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext ResolveContext { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution Substitution { get; }
        public System.Collections.Generic.List<JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ArgumentMatchWithType> MatchResultWithTypes() { }
    }
    public class ExceptArgumentMatcher : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IArgumentsMatcher
    {
        public ExceptArgumentMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, int argumentIndex) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> Match(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
    }
    public class GroupByArgumentMatcher : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IArgumentsMatcher
    {
        public GroupByArgumentMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, int argumentIndex) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> Match(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
    }
    public interface IArgumentsMatcher
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> Match(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters);
    }
    public interface ICandidate
    {
        JetBrains.ReSharper.Psi.Resolve.ISymbolInfo OriginalSymbolInfo { get; }
        JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> ParametersOwnerInstance { get; }
    }
    public class InferedCandidate : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ICandidate
    {
        public InferedCandidate(JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.MatchedCandidate candidate, JetBrains.ReSharper.Psi.Resolve.ISubstitution inferedSubstitution, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> dynamicTypeParameters) { }
        public System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> DynamicTypeParameters { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution InferedSubstitution { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> MatchResult { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo OriginalSymbolInfo { get; }
        public JetBrains.ReSharper.Psi.IParametersOwner ParametersOwner { get; }
        public bool ParametersOwnerChanged { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> ParametersOwnerInstance { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution ParametersOwnerSubstitution { get; }
    }
    public interface IOverloadResolutionData
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; }
        int ArgumentsCount { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IArgumentsMatcher ArgumentsMatcher { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> ExplicitTypeParameterValues { get; }
        System.Version LanguageVersion { get; }
        bool ShouldInferTypeParameters { get; }
        bool StrictTypeInference { get; }
        JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule TypeConversionRule { get; }
    }
    public interface ITypeParameterValuator
    {
        bool IsImplicit { get; }
        JetBrains.ReSharper.Psi.Resolve.ISubstitution InferImplicitTypeParameterValues(JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Resolve.ISubstitution originalSubstitution);
        JetBrains.ReSharper.Psi.Resolve.ISubstitution SubstituteExplicitTypeParameterValues(JetBrains.ReSharper.Psi.IMethod method, JetBrains.ReSharper.Psi.Resolve.ISubstitution originalSubstitution);
    }
    public class MatchedCandidate : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ICandidate
    {
        public MatchedCandidate(JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.Candidate candidate, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> matches) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> MatchResult { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISymbolInfo OriginalSymbolInfo { get; }
        public JetBrains.ReSharper.Psi.IParametersOwner ParametersOwner { get; }
        public bool ParametersOwnerChanged { get; }
        public JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner> ParametersOwnerInstance { get; }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution ParametersOwnerSubstitution { get; }
    }
    public class MethodChooserArgumentsMatcher : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IArgumentsMatcher
    {
        public MethodChooserArgumentsMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> Match(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
    }
    public class NonStrictMatcher : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IArgumentsMatcher
    {
        public NonStrictMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> Match(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
    }
    public class NoOverloadResolution : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.OverloadResolutionResult
    {
        public NoOverloadResolution(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo result) { }
        public override JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public override bool IsEmpty { get; }
        public override bool IsFinalResult { get; }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CommitResolveResult() { }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo GetResolveResult() { }
    }
    public class OperatorArgumentsMatcher : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IArgumentsMatcher
    {
        public OperatorArgumentsMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> Match(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
    }
    public class OverloadResolutionData : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IOverloadResolutionData
    {
        public OverloadResolutionData() { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; }
        public int ArgumentsCount { get; }
        public JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IArgumentsMatcher ArgumentsMatcher { get; set; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> ExplicitTypeParameterValues { get; set; }
        public System.Version LanguageVersion { get; set; }
        public bool ShouldInferTypeParameters { get; set; }
        public bool StrictTypeInference { get; set; }
        public JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule TypeConversionRule { get; set; }
    }
    public class static OverloadResolutionDataExtensions
    {
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> DynamicTypeParameters(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> matchResult, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static bool IsCSharp3Supported(this JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IOverloadResolutionData data) { }
        public static bool IsCSharp4Supported(this JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IOverloadResolutionData data) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ArgumentMatchWithType> MatchResultWithTypes(this System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> matchResult, JetBrains.ReSharper.Psi.Resolve.ISubstitution parametersOwnerSubstitution, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static bool ProcessWithTypes(this System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> matches, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, [JetBrains.Annotations.InstantHandleAttribute()] JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ParameterProcessor processor) { }
    }
    public class OverloadResolutionEngine
    {
        public OverloadResolutionEngine(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IOverloadResolutionData data) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate> CheckFullyApplicability(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate> candidates) { }
        public JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate GetApplicableCandidateAfterTypeInference(JetBrains.ReSharper.Psi.IParametersOwner parametersOwner, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.JetHashSet<JetBrains.ReSharper.Psi.ITypeParameter> dynamicTypeParameters, out JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.CandidateWithResolveContext candidateWithResolveContext) { }
        public bool IsApplicable(JetBrains.ReSharper.Psi.IParametersOwner parametersOwner, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public bool IsApplicableAfterTypeInference(JetBrains.ReSharper.Psi.IParametersOwner parametersOwner, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> matchResult, [JetBrains.Annotations.CanBeNullAttribute()] System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> dynamicTypeParameters) { }
        public JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.OverloadResolutionResult ResolveOverloads(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISymbolInfo> invocables) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate> Verify(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ApplicableCandidate> candidates) { }
    }
    public abstract class OverloadResolutionResult
    {
        public abstract JetBrains.ReSharper.Psi.Resolve.ResolveErrorType ErrorType { get; }
        public abstract bool IsEmpty { get; }
        public abstract bool IsFinalResult { get; }
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CommitResolveResult();
        public abstract JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo GetResolveResult();
    }
    public abstract class OverloadResolutionResultBase : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.OverloadResolutionResult
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        protected readonly JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ITypeParameterValuator myTypeParameterValuator;
        protected OverloadResolutionResultBase([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ITypeParameterValuator typeParameterValues) { }
        public override bool IsEmpty { get; }
        public override bool IsFinalResult { get; }
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CommitResolveResult() { }
        protected virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CreateResolveResult(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.DeclaredElementInstance> candidates, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
        protected virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CreateResolveResult(JetBrains.ReSharper.Psi.DeclaredElementInstance candidate, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
        protected abstract System.Collections.Generic.IList<JetBrains.ReSharper.Psi.DeclaredElementInstance> GetCandidates();
        public override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo GetResolveResult() { }
    }
    public abstract class OverloadResolutionResultImpl<T> : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.OverloadResolutionResultBase
        where T : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ICandidate
    {
        protected OverloadResolutionResultImpl(System.Collections.Generic.IList<T> candidates, JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.ITypeParameterValuator typeParameterValues) { }
        protected System.Collections.Generic.IList<T> Candidates { get; }
        protected override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CreateResolveResult(JetBrains.ReSharper.Psi.DeclaredElementInstance candidate, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
        protected override JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo CreateResolveResult(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.DeclaredElementInstance> candidates, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IResolveInfo resolveInfo) { }
    }
    public delegate bool ParameterProcessor(JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentType, JetBrains.ReSharper.Psi.IType parameterType, JetBrains.ReSharper.Psi.ParameterKind parameterKind, bool checkingParamsArray);
    public class ResolveArgumentsMatcher : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IArgumentsMatcher
    {
        public ResolveArgumentsMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, System.Version languageVersion) { }
        public ResolveArgumentsMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, bool strict, System.Version languageVersion) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> Match(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
    }
    public class UpToArgumentMatcher : JetBrains.ReSharper.Psi.CSharp.Resolve.OverloadResolution.IArgumentsMatcher
    {
        public UpToArgumentMatcher(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, int argumentIndex) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> Arguments { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> Match(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Resolve.TypeInference
{
    
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpTypeInferenceBoundsSolver : JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceBoundsSolver
    {
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Resolve.ISubstitution> Solve(System.Collections.Generic.IList<JetBrains.Util.OneToSetMap<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound>> typeBounds, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public JetBrains.ReSharper.Psi.Resolve.ISubstitution SolveLikeResolve(System.Collections.Generic.IList<JetBrains.Util.OneToSetMap<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound>> typeBounds, System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpTypeInferenceMatcher : JetBrains.ReSharper.Psi.Resolve.TypeInference.CLRTypeInferenceMatcher
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Resolve.TypeInference.CSharpTypeInferenceMatcher Instance;
    }
    public class static CSharpTypeInferenceUtil
    {
        public static bool InferFromSimpleArgument(this JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo @this, JetBrains.ReSharper.Psi.IExpressionType expressionType, JetBrains.ReSharper.Psi.IType parameterType, JetBrains.ReSharper.Psi.Resolve.TypeInference.ITypeInferenceConsumer consumer) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.Resolve.ISubstitution InferTypes(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, JetBrains.ReSharper.Psi.IParametersOwner parametersOwner, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.ITypeParameter> inferableTypeParameters, System.Version languageVersion, JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule typeConversionRule) { }
        public static JetBrains.ReSharper.Psi.IType SolveTypeInferenceBounds(this System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.Resolve.TypeInference.TypeInferenceBound> bounds, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Resources
{
    
    public sealed class PsiCSharpThemedIcons
    {
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.CSharp;component/Resources/PsiCSharpThemedIcons/ThemedIco" +
            "ns.PsiCSharp.Generated.Xaml", 2, "Csharp")]
        public sealed class Csharp : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.CSharp;component/Resources/PsiCSharpThemedIcons/ThemedIco" +
            "ns.PsiCSharp.Generated.Xaml", 0, "CSharpDestructor")]
        public sealed class CSharpDestructor : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.CSharp;component/Resources/PsiCSharpThemedIcons/ThemedIco" +
            "ns.PsiCSharp.Generated.Xaml", 1, "CSharpExtension")]
        public sealed class CSharpExtension : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
        [JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute("JetBrains.ReSharper.Psi.CSharp;component/Resources/PsiCSharpThemedIcons/ThemedIco" +
            "ns.PsiCSharp.Generated.Xaml", 3, "CSharpIndexer")]
        public sealed class CSharpIndexer : JetBrains.UI.Icons.CompiledIcons.CompiledIconClass
        {
            public static JetBrains.UI.Icons.IconId Id;
        }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Tree
{
    
    public class static __ArglistExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.I__ArglistExpression GetByArgument(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.I__ArglistExpression GetByArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList param) { }
    }
    public class static AccessorDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration GetByOwnModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
    }
    public class static AccessorOwnerDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration GetByAccessorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration param) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration GetByInterfaceQualification(JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration GetByInterfaceQualificationReference(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration> GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
    }
    public class static AdditiveExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAdditiveExpression GetByLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAdditiveExpression GetByRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static AnonymousMemberDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static AnonymousMethodExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodExpression GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodExpression GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodExpression GetBySignatureNode(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodSignature param) { }
    }
    public class static AnonymousMethodParameterDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration GetByDefaultValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static AnonymousMethodSignatureNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodSignature GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration param) { }
    }
    public class static AnonymousObjectCreationExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousObjectCreationExpression GetByAnonymousInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousObjectInitializer param) { }
    }
    public class static AnonymousObjectInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousObjectInitializer GetByMemberInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration param) { }
    }
    public class static ArglistParameterDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IArglistParameterDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
    }
    public class static ArgumentListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList GetByArgument(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument param) { }
    }
    public class static ArrayCreationExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression GetByArrayInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IArrayInitializer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression GetByCreatedTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression GetByDim(JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression GetByDimInit(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression GetByNullableMark(JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression GetByPointerMark(JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression GetByTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
    }
    public class static ArrayInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IArrayInitializer GetByElementInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer param) { }
    }
    public class static AsExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAsExpression GetByOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAsExpression GetByScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAsExpression GetByTypeOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static AssignmentExpressionExt
    {
        public static bool IsEventSubscription([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.IAssignmentExpression assignmentExpression) { }
        public static bool IsEventSubscription([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.IAssignmentExpression assignmentExpression, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
    }
    public class static AssignmentExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAssignmentExpression GetByDest(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAssignmentExpression GetBySource(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public enum AssignmentType
    {
        INVALID = 0,
        EQ = 1,
        PLUSEQ = 2,
        MINUSEQ = 3,
        ASTERISKEQ = 4,
        DIVEQ = 5,
        PERCEQ = 6,
        ANDEQ = 7,
        OREQ = 8,
        XOREQ = 9,
        LTLTEQ = 10,
        GTGTEQ = 11,
    }
    public class static AttributeListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeList GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
    }
    public class static AttributeNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute GetByArgument(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute GetByConstructorArgumentExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute GetByName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute GetByPropertyAssignment(JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyAssignment param) { }
    }
    public class static AttributeSectionListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList GetBySection(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSection param) { }
    }
    public class static AttributeSectionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSection GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSection GetByAttributeList(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSection GetByTarget(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static AttributesOwnerDeclarationNavigator
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
    }
    public enum AttributeTarget
    {
        None = 0,
        Assembly = 1,
        Module = 2,
        Event = 3,
        Field = 4,
        Method = 5,
        Param = 6,
        Property = 7,
        Return = 8,
        Type = 9,
        Typevar = 10,
        Unknown = 11,
    }
    public class static AttributeTargetUtil
    {
        public static JetBrains.ReSharper.Psi.CSharp.Tree.AttributeTarget FromKeyword(string keyword) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static string GetKeyword(this JetBrains.ReSharper.Psi.CSharp.Tree.AttributeTarget target) { }
    }
    public class static AwaitExpressionExt
    {
        public static bool IsUnderAsyncDeclaration(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode node) { }
    }
    public class static AwaitExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAwaitExpression GetByTask(JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression param) { }
    }
    public class static BaseExpressionNavigator { }
    public class static BinaryExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression GetByLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression GetByRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static BitwiseAndExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseAndExpression GetByLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseAndExpression GetByRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static BitwiseExclusiveOrExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseExclusiveOrExpression GetByLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseExclusiveOrExpression GetByRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static BitwiseInclusiveOrExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseInclusiveOrExpression GetByLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseInclusiveOrExpression GetByRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static BlockNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IBlock GetByStatement(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param) { }
    }
    public class static BreakStatementNavigator { }
    public class static CastExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICastExpression GetByOp(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICastExpression GetByOp(JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICastExpression GetByScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICastExpression GetByTargetType(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static CatchClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
    }
    public class static CatchVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICatchVariableDeclaration GetByDeclaredTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICatchVariableDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICatchVariableDeclaration GetByScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
    }
    public class static CheckedExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICheckedExpression GetByOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static CheckedStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICheckedStatement GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
    }
    public class static ClassBodyNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody GetByConstantDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody GetByConstructor(JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody GetByDestructor(JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody GetByEventDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleEventDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody GetByFieldDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleFieldDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody GetByIndexer(JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody GetByMethod(JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody GetByOperator(JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody GetByPropertie(JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody GetByTypeDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration param) { }
    }
    public class static ClassDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByConstantDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByConstructorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByDestructorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByEventDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByExtendsList(JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByFieldDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByIndexerDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByInheritedTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByMethodDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByNestedTypeDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByOperatorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByPropertyDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByTypeParameter(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByTypeParameterConstraint(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByTypeParameterConstraintsClause(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList param) { }
    }
    public class static ClassLikeDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByEventDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration param) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IClassLikeDeclaration GetByExtendsList(JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList extendsList) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByIndexerDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByMethodDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByNestedTypeDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByPropertyDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByTypeParameter(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByTypeParameterConstraintsClause(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList param) { }
    }
    public class static ClassMemberDeclarationNavigator
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration> GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
    }
    public class static CollectionElementInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer GetByArgument(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument param) { }
    }
    public class static CollectionInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionInitializer GetByElementInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer param) { }
    }
    public enum CommentType : byte
    {
        END_OF_LINE_COMMENT = 0,
        MULTILINE_COMMENT = 1,
        DOC_COMMENT = 2,
    }
    public class static ConditionalAndExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalAndExpression GetByLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalAndExpression GetByRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static ConditionalOrExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalOrExpression GetByLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalOrExpression GetByRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static ConditionalTernaryExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalTernaryExpression GetByConditionOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalTernaryExpression GetByElseResult(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalTernaryExpression GetByThenResult(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static ConstantDeclarationNavigator
    {
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration> GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration> GetByScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration> GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration GetByValueExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static ConstructorConstraintNavigator { }
    public class static ConstructorDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration GetByInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration GetByName(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration GetByParams(JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList param) { }
    }
    public enum ConstructorInitializerKind
    {
        THIS = 0,
        BASE = 1,
        UNKNOWN = 2,
    }
    public class static ConstructorInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer GetByArgument(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer GetByArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList param) { }
    }
    public class static ContinueStatementNavigator { }
    public class static ConversionOperatorDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConversionOperatorDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConversionOperatorDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConversionOperatorDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConversionOperatorDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConversionOperatorDeclaration GetByParams(JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IConversionOperatorDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static CreationExpressionInitializerNavigator
    {
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer GetByInitializerElement(JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement initializerElement) { }
    }
    public class static CreationExpressionNavigator
    {
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpression GetByInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer initializer) { }
    }
    public abstract class CShapCompositeNodeType : JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeNodeType
    {
        protected CShapCompositeNodeType(string s, int index) { }
    }
    public class static CSharpArgumentNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument GetByValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static CSharpArgumentsOwnerExtentions
    {
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner GetArgumentsOwner(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
    }
    public class static CSharpArgumentsOwnerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner GetByArgument(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument param) { }
    }
    public class static CSharpDeclarationNavigator { }
    public class static CSharpExpressionNavigator { }
    public class static CSharpFileNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile GetByExternAliase(JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile GetByImport(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile GetByImportsList(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile GetByNamespaceDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile GetByNamespaceDeclarationNode(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile GetBySection(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSection param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile GetByTypeDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration param) { }
    }
    public class static CSharpFunctionDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
    }
    public class static CSharpLiteralExpressionNavigator { }
    public class static CSharpModifiersOwnerDeclarationNavigator
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
    }
    public class static CSharpNamespaceDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.INamespaceBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration GetByExternAliase(JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration GetByImport(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration GetByImportsList(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration GetByNamespaceDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration GetByNamespaceQualification(JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration GetByTypeDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration param) { }
    }
    public class static CSharpParameterDeclarationNavigator { }
    public class static CSharpParametersOwnerDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByParams(JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList param) { }
    }
    public class static CSharpStatementExtensions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement GetNextStatementInBlock(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement statement) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement GetPreviousStatementInBlock(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement statement) { }
        public static void RemoveOrReplaceByEmptyStatement(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement statement) { }
    }
    public class static CSharpStatementNavigator { }
    public class static CSharpTypeAndNamespaceHolderDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration GetByExternAliase(JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration GetByImport(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration GetByImportsList(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration GetByNamespaceDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration GetByTypeDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration param) { }
    }
    public class static CSharpTypeDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByTypeParameter(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByTypeParameterConstraintsClause(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList param) { }
    }
    public class static CSharpTypeMemberDeclarationNavigator
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
    }
    public class static DeclarationStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDeclarationStatement GetByConstantDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ILocalConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDeclarationStatement GetByDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDeclarationStatement GetByVariableDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration param) { }
    }
    public class static DeclaredTypeUsageNavigator { }
    public class static DefaultExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDefaultExpression GetByTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static DefineDirectiveNavigator { }
    public class static DelegateDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration GetByParams(JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration GetByTypeParameter(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration GetByTypeParameterConstraint(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration GetByTypeParameterConstraintsClause(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static DestructorDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration GetByParams(JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList param) { }
    }
    public class static DocCommentBlockNodeNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDocCommentBlockNode GetByDocCommentNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCommentNode docCommentNode) { }
    }
    public class static DocCRefElementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement GetByQualifier(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement GetBySignature(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefSignature param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement GetByTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameterList param) { }
    }
    public class static DocCRefExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefExpression GetByElement(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement param) { }
    }
    public class static DocCRefParameterNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameter GetByParameterType(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType param) { }
    }
    public class static DocCRefParameterTypeNameNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName GetByQualifier(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName GetByTypeArgument(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType param) { }
    }
    public class static DocCRefParameterTypeNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType GetByArrayRank(JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType GetByNullableMark(JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType GetByPointerMark(JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType GetByTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName param) { }
    }
    public class static DocCRefSignatureNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefSignature GetByParameter(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameter param) { }
    }
    public class static DocCRefTypeParameterListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameterList GetByTypeParameter(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameter param) { }
    }
    public class static DocCRefTypeParameterNavigator { }
    public class static DoStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDoStatement GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDoStatement GetByCondition(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static DynamicDeclaredTypeUsageNavigator { }
    public class static DynamicTypeUsageNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDynamicTypeUsage GetByArrayRank(JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDynamicTypeUsage GetByNullableMark(JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IDynamicTypeUsage GetByPointerMark(JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer param) { }
    }
    public class static ElementAccessExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IElementAccessExpression GetByArgument(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IElementAccessExpression GetByArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IElementAccessExpression GetByOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IElementAccessExpression GetByOperand(JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression param) { }
    }
    public class static ElifDirectiveNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IElifDirective GetByCondition(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param) { }
    }
    public class static ElseDirectiveNavigator { }
    public class static EmptyStatementNavigator { }
    public class static EndifDirectiveNavigator { }
    public class static EndRegionNavigator { }
    public class static EnumBaseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumBase GetByUnderlyingType(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param) { }
    }
    public class static EnumBodyNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumBody GetByMember(JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration param) { }
    }
    public class static EnumDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration GetByEnumBody(JetBrains.ReSharper.Psi.CSharp.Tree.IEnumBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration GetByEnumMemberDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration GetByTypeParameter(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration GetByTypeParameterConstraint(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration GetByTypeParameterConstraintsClause(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration GetByUnderlyingTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param) { }
    }
    public class static EnumMemberDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration GetByValueExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static EqualityExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEqualityExpression GetByLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEqualityExpression GetByRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public enum EqualityExpressionType
    {
        EQEQ = 0,
        NE = 1,
    }
    public class static ErrorDirectiveNavigator { }
    public class static EventDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration GetByAccessorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration> GetByDelegateName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration> GetByDelegateTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration GetByInitial(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration GetByInterfaceQualification(JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration GetByInterfaceQualificationReference(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration> GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static ExpressionInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IExpressionInitializer GetByValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static ExpressionStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IExpressionStatement GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static ExtendsListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList GetByExtendedInterface(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param) { }
    }
    public class static ExternAliasDirectiveNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static FieldDeclarationNavigator
    {
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration> GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration GetByFixedBufferSizeExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration GetByInitial(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration> GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration> GetByScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration> GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static ForeachHeaderNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForeachHeader GetByCollection(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForeachHeader GetByIteratorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration param) { }
    }
    public class static ForeachStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForeachStatement GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForeachStatement GetByCollection(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForeachStatement GetByIteratorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration param) { }
    }
    public class static ForeachVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration GetByScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static ForInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForInitializer GetByDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForInitializer GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static ForIteratorNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForIterator GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static FormalParameterListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration param) { }
    }
    public class static ForStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForStatement GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForStatement GetByCondition(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForStatement GetByInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IForInitializer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForStatement GetByInitializerDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForStatement GetByInitializerExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForStatement GetByIteratorExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IForStatement GetByIterators(JetBrains.ReSharper.Psi.CSharp.Tree.IForIterator param) { }
    }
    public class static GeneralCatchClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IGeneralCatchClause GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
    }
    public class static GotoCaseStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IGotoCaseStatement GetByValueExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static GotoStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IGotoStatement GetByTarget(JetBrains.ReSharper.Psi.CSharp.Tree.ILabelReferenceElement param) { }
    }
    public interface I__ArglistExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ArglistKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList ArgumentList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument> Arguments { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument> ArgumentsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList SetArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList param);
    }
    public interface IAccessorDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.AccessorKind Kind { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList OwnModifiersList { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList SetOwnModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param);
    }
    public interface IAccessorOwnerDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration> AccessorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration> AccessorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration AddAccessorDeclarationAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration AddAccessorDeclarationBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration anchor);
        void RemoveAccessorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration param);
    }
    public interface IAdditiveExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IAnonymousFunctionExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        bool IsAsync { get; }
        JetBrains.ReSharper.Psi.IType ReturnType { get; }
        JetBrains.ReSharper.Psi.IType GetReturnType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
    }
    public interface IAnonymousMemberDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Expression { get; }
        bool IsProjectionInitializer { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Operator { get; }
        JetBrains.ReSharper.Psi.Resolve.IReference ReferenceToProperty { get; }
        string GetName();
        JetBrains.DocumentModel.DocumentRange GetNameDocumentRange();
        JetBrains.ReSharper.Psi.TreeTextRange GetNameTextRange();
        JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration ReplaceBy(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration newMember);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        void SetName(string name);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
    }
    public interface IAnonymousMethodExpression : JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousFunctionExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsyncKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock Body { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode DelegateKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration> ParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration> ParameterDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodSignature SignatureNode { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration AddParameterDeclarationAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration AddParameterDeclarationBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration anchor);
        void RemoveParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration param);
        void SetAsync(bool value);
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodSignature SetSignatureNode(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodSignature param);
    }
    public interface IAnonymousMethodParameterDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IParameterDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression DefaultValue { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Mode { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ParamsKeyword { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetDefaultValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        void SetKind(JetBrains.ReSharper.Psi.ParameterKind kind);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IAnonymousMethodSignature : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration> ParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration> ParameterDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
    }
    public interface IAnonymousObjectCreationExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousObjectInitializer AnonymousInitializer { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.AnonymousTypeDescriptor> GetTypeDescriptor(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.AnonymousTypeDescriptor> GetTypeDescriptor();
        JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousObjectInitializer SetAnonymousInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousObjectInitializer param);
    }
    public interface IAnonymousObjectInitializer : JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration> MemberInitializers { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration> MemberInitializersEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration AddMemberInitializerAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration AddMemberInitializerBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration anchor);
        void RemoveMemberInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration param);
    }
    public interface IArglistParameterDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IParameterDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ArglistKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> AttributesEnumerable { get; }
    }
    public interface IArgumentList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument> Arguments { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument> ArgumentsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
    }
    public interface IArrayCreationExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IArrayInitializer ArrayInitializer { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage CreatedTypeUsage { get; }
        int[] Dimensions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> DimInits { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> DimInitsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier> Dims { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier> DimsEnumerable { get; }
        bool IsImplicitlyTypedArray { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBracket { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark NullableMark { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer> PointerMarks { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer> PointerMarksEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBracket { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> Sizes { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName TypeName { get; }
        JetBrains.ReSharper.Psi.IType GetElementType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.IType GetElementType();
        JetBrains.ReSharper.Psi.CSharp.Tree.IArrayInitializer SetArrayInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IArrayInitializer param);
        void SetArrayType(JetBrains.ReSharper.Psi.IArrayType arrayType);
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage SetCreatedTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param);
        void SetImplicitType();
        JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark SetNullableMark(JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
    }
    public interface IArrayInitializer : JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer> ElementInitializers { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer> ElementInitializersEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer AddElementInitializerAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer param, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer AddElementInitializerBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer param, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer anchor);
        JetBrains.ReSharper.Psi.IType GetElementType(bool strict);
        JetBrains.ReSharper.Psi.IType GetElementType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, bool strict);
        void RemoveElementInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer param);
    }
    public interface IAsExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Operand { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OperatorSign { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ScalarTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeOperand { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IAssignmentExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.AssignmentType AssignmentType { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Dest { get; }
        bool IsCompoundAssignment { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Source { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetDest(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetSource(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IAttribute : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Tree.IArgumentsOwner, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> ConstructorArgumentExpressions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> ConstructorArgumentExpressionsEnumerable { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference ConstructorReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName Name { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyAssignment> PropertyAssignments { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyAssignment> PropertyAssignmentsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.AttributeTarget Target { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference TypeReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
        void SetTarget(JetBrains.ReSharper.Psi.CSharp.Tree.AttributeTarget target);
    }
    public interface IAttributeList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> AttributesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute AddAttributeAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param, JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute AddAttributeBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param, JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute anchor);
        void RemoveAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param);
    }
    public interface IAttributeSection : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeList AttributeList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> AttributesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Colon { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBracket { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBracket { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier Target { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeList SetAttributeList(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetTarget(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
    }
    public interface IAttributeSectionList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> AttributesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSection> Sections { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSection> SectionsEnumerable { get; }
    }
    public interface IAttributesOwnerDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> AttributesEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute AddAttributeAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param, JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute AddAttributeBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param, JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute anchor);
        void RemoveAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param);
    }
    public interface IAwaitExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference AwaiterGetResultReference { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference AwaiterIsCompletedReference { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference AwaiterOnCompletedReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode AwaitKeyword { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference GetAwaiterReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression Task { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression SetTask(JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression param);
    }
    public interface IBaseExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Base { get; }
    }
    public interface IBinaryExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression LeftOperand { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression RightOperand { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IBitwiseAndExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IBitwiseExclusiveOrExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IBitwiseInclusiveOrExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IBlock : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.ILabel[] Labels { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement> Statements { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement> StatementsEnumerable { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        TStatement AddStatementAfter<TStatement>([JetBrains.Annotations.NotNullAttribute()] TStatement param, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement anchor)
            where TStatement :  class, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement;
        [JetBrains.Annotations.NotNullAttribute()]
        TStatement AddStatementAfterRange<TStatement>([JetBrains.Annotations.NotNullAttribute()] TStatement param, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange anchor)
            where TStatement :  class, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement;
        [JetBrains.Annotations.NotNullAttribute()]
        TStatement AddStatementBefore<TStatement>([JetBrains.Annotations.NotNullAttribute()] TStatement param, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement anchor)
            where TStatement :  class, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement;
        [JetBrains.Annotations.NotNullAttribute()]
        TStatement AddStatementBeforeRange<TStatement>([JetBrains.Annotations.NotNullAttribute()] TStatement param, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange anchor)
            where TStatement :  class, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement;
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange AddStatementsRangeAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange range, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement anchor);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange AddStatementsRangeAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange range, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange anchor);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange AddStatementsRangeBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange range, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement anchor);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange AddStatementsRangeBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange range, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange anchor);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange GetAllStatementsRange();
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange GetStatementsRange(JetBrains.ReSharper.Psi.TreeTextRange treeTextRange);
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange GetStatementsRange([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement first, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement last);
        void RemoveStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param);
        void RemoveStatementsRange([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange range);
    }
    public interface IBreakStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode BreakKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
    }
    public interface ICastExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression Op { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ScalarTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TargetType { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression SetOp(JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTargetType(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface ICatchClause : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock Body { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode CatchKeyword { get; }
        JetBrains.ReSharper.Psi.IDeclaredType ExceptionType { get; }
        T ReplaceBy<T>(T clause)
            where T : JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause;
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param);
    }
    public interface ICatchVariableDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.ILocalVariable DeclaredElement { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage DeclaredTypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ScalarTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage SetDeclaredTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
    }
    public interface ICheckedExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode CheckedKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Operand { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface ICheckedStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock Body { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode CheckedKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param);
    }
    public interface IClassBody : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerBody, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleConstantDeclaration> ConstantDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleConstantDeclaration> ConstantDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration> Constructors { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration> ConstructorsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration> Destructors { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration> DestructorsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleEventDeclaration> EventDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleEventDeclaration> EventDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleFieldDeclaration> FieldDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleFieldDeclaration> FieldDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration> Indexers { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration> IndexersEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration> Methods { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration> MethodsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration> Operators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration> OperatorsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration> Properties { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration> PropertiesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration> TypeDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration> TypeDeclarationsEnumerable { get; }
    }
    public interface IClassDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassLikeDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.CSharp.Tree.IProperTypeDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationWithRangeContainer, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ClassKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration> ConstantDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration> ConstantDeclarationsEnumerable { get; }
        new JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration> ConstructorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration> ConstructorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration> DestructorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration> DestructorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList ExtendsList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration> FieldDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration> FieldDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage> InheritedTypeUsages { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage> InheritedTypeUsagesEnumerable { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        new JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration> OperatorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration> OperatorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> TypeParameterConstraints { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> TypeParameterConstraintsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList SetExtendsList(JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList param);
        void SetSuperClass(JetBrains.ReSharper.Psi.IDeclaredType classType);
    }
    public interface IClassLikeDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.CSharp.Tree.IProperTypeDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationWithRangeContainer, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody Body { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration> ClassMemberDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration> ConstructorDeclarations { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        new JetBrains.ReSharper.Psi.ITypeElement DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration> EventDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration> EventDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration> IndexerDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration> IndexerDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration> MethodDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration> MethodDeclarationsEnumerable { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration> NestedTypeDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration> NestedTypeDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration> OperatorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration> PropertyDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration> PropertyDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage> SuperTypeUsageNodes { get; }
        T AddClassMemberDeclaration<T>(T param)
            where T : JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration;
        T AddClassMemberDeclarationAfter<T>(T param, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration anchor)
            where T : JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration;
        T AddClassMemberDeclarationBefore<T>(T param, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration anchor)
            where T : JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration;
        void AddSuperInterface(JetBrains.ReSharper.Psi.IDeclaredType interfaceType, bool before);
        T InsertAtSpecificPosition<T>(T param, JetBrains.ReSharper.Psi.Tree.ITreeNode anchor)
            where T : JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration;
        void RemoveClassMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration param);
        void RemoveSuperInterface(JetBrains.ReSharper.Psi.IDeclaredType interfaceType);
        T ReplaceClassMemberDeclaration<T>(JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration oldDeclaration, T newDeclaration)
            where T : JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration;
        JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody param);
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList SetModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param);
    }
    public interface IClassMemberDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList SetModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param);
    }
    public interface ICollectionElementInitializer : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Tree.IArgumentsOwner, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
    }
    public interface ICollectionInitializer : JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer> ElementInitializers { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer> ElementInitializersEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer AddElementInitializerAfter(JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer param, JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer AddElementInitializerBefore(JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer param, JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer anchor);
        void RemoveElementInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer param);
    }
    public interface IConditionalAndExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IConditionalOrExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IConditionalTernaryExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Colon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression ConditionOperand { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression ElseResult { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Question { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression ThenResult { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetConditionOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetElseResult(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetThenResult(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IConstantDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AssignmentSign { get; }
        JetBrains.ReSharper.Psi.IField DeclaredElement { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ScalarTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression ValueExpression { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetValueExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IConstructorConstraint : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NewKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
    }
    public interface IConstructorDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParametersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IConstructor DeclaredElement { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer Initializer { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier Name { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer SetInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetName(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
    }
    public interface IConstructorInitializer : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Tree.IArgumentsOwner, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList ArgumentList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Colon { get; }
        JetBrains.ReSharper.Psi.IDeclaredType ConstructedType { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Instance { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ConstructorInitializerKind Kind { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList SetArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList param);
    }
    public interface IContinueStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ContinueKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
    }
    public interface IConversionOperatorDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParametersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        new JetBrains.ReSharper.Psi.IFunction DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Modifier { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
    }
    public interface ICreationExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage CreatedTypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer Initializer { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NewKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark NullableMark { get; }
        JetBrains.ReSharper.Psi.IType ExplicitType();
    }
    public interface ICreationExpressionInitializer : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.IType ConstructedType { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement> InitializerElements { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
    }
    public interface ICSharpArgument : JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.Tree.IArgument, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Colon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList ContainingArgumentList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Mode { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference ParameterNameReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Value { get; }
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new bool IsValid();
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument ReplaceBy(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument argument);
        void SetArgumentName(string name);
        void SetKind(JetBrains.ReSharper.Psi.ParameterKind parameterKind);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface ICSharpArgumentsOwner : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Tree.IArgumentsOwner, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument> Arguments { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument> ArgumentsEnumerable { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.ITokenNode> Delimeters { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBound { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBound { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument AddArgumentAfter(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument param, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument AddArgumentBefore(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument param, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument anchor);
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new bool IsValid();
        void RemoveArgument(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument param);
    }
    public interface ICSharpCommentNode : JetBrains.ReSharper.Psi.Tree.IComment, JetBrains.ReSharper.Psi.Tree.ICommentNode, JetBrains.ReSharper.Psi.Tree.ITokenNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.CommentType CommentType { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpCommentNode ReplaceBy(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpCommentNode commentNode);
    }
    public interface ICSharpDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
    }
    public interface ICSharpDocCommentBlockNode : JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Xml.XmlDocComments.IDocCommentBlockNodeWithPsi<JetBrains.ReSharper.Psi.Xml.XmlDocComments.IDocCommentXmlPsi, JetBrains.ReSharper.Psi.CSharp.Tree.IDocCommentNode> { }
    public interface ICSharpExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        bool IsClassifiedAsVariable { get; }
        bool IsLValue { get; }
        JetBrains.ReSharper.Psi.Tree.ExpressionAccessType GetAccessType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression GetContainingExpression();
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement GetContainingStatement();
        [JetBrains.Annotations.NotNullAttribute()]
        TExpression ReplaceBy<TExpression>([JetBrains.Annotations.NotNullAttribute()] TExpression expr)
            where TExpression :  class, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression;
    }
    public interface ICSharpFile : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.Tree.IFile, JetBrains.ReSharper.Psi.Tree.INamespaceDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeAndNamespaceHolderDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute> AttributesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration> NamespaceDeclarationNodes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration> NamespaceDeclarationNodesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSection> Sections { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSection> SectionsEnumerable { get; }
        void AddAttribueBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute attribute, JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute tag);
        JetBrains.ReSharper.Psi.PreProcessingDirectivesInFile GetPreprocessorConditionals();
        void RemoveAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute attribute);
    }
    public interface ICSharpFunctionDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock Body { get; }
        new JetBrains.ReSharper.Psi.IFunction DeclaredElement { get; }
        bool IsAsync { get; }
        bool IsIterator { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param);
    }
    public interface ICSharpIdentifier : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IIdentifier, JetBrains.ReSharper.Psi.Tree.ITokenNode, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface ICSharpLiteralExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ILiteralExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        new JetBrains.ReSharper.Psi.Tree.ITokenNode Literal { get; }
    }
    public interface ICSharpModifiersOwnerDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
    }
    public interface ICSharpNamespaceDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.INamespaceDeclaration, JetBrains.ReSharper.Psi.Tree.INamespaceDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeAndNamespaceHolderDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.INamespaceBody Body { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration ContainingNamespace { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NamespaceKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification NamespaceQualification { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        string ShortName { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration AddNamespaceDeclarationAfter(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration anchor);
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration AddNamespaceDeclarationBefore(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration anchor);
        System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.INamespace> GetDeclaredNamespaces();
        new void RemoveNamespaceDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration ReplaceBy(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration declaration);
        JetBrains.ReSharper.Psi.CSharp.Tree.INamespaceBody SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.INamespaceBody param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification SetNamespaceQualification(JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification param);
    }
    public interface ICSharpParameterDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IParameterDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        T ReplaceBy<T>(T declaration)
            where T : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration;
    }
    public interface ICSharpParametersOwnerDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IParametersOwner DeclaredElement { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration> ParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration> ParameterDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList Params { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration AddParameterDeclarationAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration AddParameterDeclarationBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration anchor);
        void RemoveParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList SetModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList SetParams(JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList param);
    }
    public interface ICSharpStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        bool IsEmbeddedStatement { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement GetContainingStatement();
        [JetBrains.Annotations.NotNullAttribute()]
        TStatement ReplaceBy<TStatement>([JetBrains.Annotations.NotNullAttribute()] TStatement stmt)
            where TStatement :  class, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement;
    }
    public interface ICSharpTreeNode : JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        void Accept(JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor visitor);
        void Accept<TContext>(JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor<TContext> visitor, TContext context);
        TReturn Accept<TContext, TReturn>(JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor<TContext, TReturn> visitor, TContext context);
        [JetBrains.Annotations.PureAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration GetContainingNamespaceDeclaration();
        [JetBrains.Annotations.PureAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration GetContainingTypeDeclaration();
        [JetBrains.Annotations.PureAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration GetContainingTypeMemberDeclaration();
    }
    public interface ICSharpTypeAndNamespaceHolderDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.Tree.INamespaceDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeAndNamespaceHolderDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration ContainingTypeAndNamespaceHolder { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective> ExternAliases { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective> ExternAliasesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective> Imports { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective> ImportsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList ImportsList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration> NamespaceDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration> NamespaceDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration> TypeDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration> TypeDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective AddImport(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective param, bool saveUsingListPosition = False);
        JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective AddImportAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective param, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective AddImportBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective param, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration AddNamespaceDeclarationAfter(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration AddNamespaceDeclarationBefore(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration AddTypeDeclarationAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration param, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration AddTypeDeclarationBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration param, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration anchor);
        void RemoveImport(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective param);
        void RemoveNamespaceDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration param);
        void RemoveTypeDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList SetImportsList(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList param);
    }
    public interface ICSharpTypeDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        new JetBrains.ReSharper.Psi.ITypeElement DeclaredElement { get; }
        bool IsPartial { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration> MemberDeclarations { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration OwnerNamespaceDeclaration { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause> TypeParameterConstraintsClauses { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause> TypeParameterConstraintsClausesEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList TypeParameterList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration> TypeParameters { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration> TypeParametersEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration AddTypeParameterAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration AddTypeParameterBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause AddTypeParameterConstraintsClauseAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause AddTypeParameterConstraintsClauseBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause anchor);
        void RemoveTypeParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param);
        void RemoveTypeParameterConstraintsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param);
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList SetModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        void SetPartial(bool value);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList SetTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList param);
    }
    public interface ICSharpTypeMemberDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        new JetBrains.ReSharper.Psi.ITypeMember DeclaredElement { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration GetContainingTypeDeclaration();
    }
    public interface IDeclarationStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalConstantDeclaration> ConstantDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalConstantDeclaration> ConstantDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration Declaration { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration> VariableDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration> VariableDeclarationsEnumerable { get; }
        void RemoveConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILocalConstantDeclaration param);
        void RemoveVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration SetDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration param);
    }
    public interface IDeclaredTypeUsage : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IDefaultExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IDefineDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode SymbolIdentifier { get; }
        string SymbolName { get; }
    }
    public interface IDelegateDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParametersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.CSharp.Tree.IProperTypeDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IDelegate DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Keyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.IType ReturnType { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> TypeParameterConstraints { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> TypeParameterConstraintsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IDestructorDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        new JetBrains.ReSharper.Psi.IFunction DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList Params { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Tilde { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList SetParams(JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList param);
    }
    public interface IDocCommentNode : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpCommentNode, JetBrains.ReSharper.Psi.Tree.IComment, JetBrains.ReSharper.Psi.Tree.ICommentNode, JetBrains.ReSharper.Psi.Tree.ITokenNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCommentNode ReplaceBy(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCommentNode docCommentNode);
    }
    public interface IDocCRefElement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ExplicitKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ImplicitKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Name { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OperatorKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OperatorSign { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement Qualifier { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefSignature Signature { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ThisKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameterList TypeParameterList { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement SetQualifier(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefSignature SetSignature(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefSignature param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameterList SetTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameterList param);
    }
    public interface IDocCRefExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement Element { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement SetElement(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement param);
    }
    public interface IDocCRefParameter : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode OutKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType ParameterType { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RefKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType SetParameterType(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType param);
    }
    public interface IDocCRefParameterType : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier> ArrayRanks { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier> ArrayRanksEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark NullableMark { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer> PointerMarks { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer> PointerMarksEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName TypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark SetNullableMark(JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName SetTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName param);
    }
    public interface IDocCRefParameterTypeName : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Name { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName Qualifier { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType> TypeArguments { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType> TypeArgumentsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName SetQualifier(JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName param);
    }
    public interface IDocCRefSignature : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameter> Parameters { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameter> ParametersEnumerable { get; }
    }
    public interface IDocCRefTypeParameter : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Name { get; }
    }
    public interface IDocCRefTypeParameterList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameter> TypeParameters { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameter> TypeParametersEnumerable { get; }
    }
    public interface IDoStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement Body { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Condition { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode DoKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode WhileKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetCondition(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IDynamicDeclaredTypeUsage : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode DynamicKeyword { get; }
    }
    public interface IDynamicTypeUsage : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode DynamicKeyword { get; }
    }
    public interface IElementAccessExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IArgumentsOwner, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList ArgumentList { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IElementAccessExpressionReference ElementAccessReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBracket { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression Operand { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBracket { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList SetArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression SetOperand(JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression param);
    }
    public interface IElementAccessExpressionReference : JetBrains.ReSharper.Psi.CSharp.Resolve.ICSharpInvocationReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
    {
        bool IsPassThrough { get; }
    }
    public interface IElifDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression Condition { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression SetCondition(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param);
    }
    public interface IElseDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IEmptyStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
    }
    public interface IEndifDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IEndRegion : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Message { get; }
        string Name { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IStartRegion StartRegion { get; }
    }
    public interface IEnumBase : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Colon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage UnderlyingType { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage SetUnderlyingType(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param);
    }
    public interface IEnumBody : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerBody, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration> Members { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration> MembersEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration Owner { get; }
    }
    public interface IEnumDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.CSharp.Tree.IProperTypeDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationWithRangeContainer, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IEnum DeclaredElement { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IEnumBody EnumBody { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration> EnumMemberDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration> EnumMemberDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Keyword { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> TypeParameterConstraints { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> TypeParameterConstraintsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage UnderlyingTypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration AddEnumMemberDeclarationAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration AddEnumMemberDeclarationBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration anchor);
        JetBrains.ReSharper.Psi.IType GetUnderlyingType();
        void RemoveEnumMemberDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IEnumBody SetEnumBody(JetBrains.ReSharper.Psi.CSharp.Tree.IEnumBody param);
        void SetUnderlyingType(JetBrains.ReSharper.Psi.IDeclaredType declaredType);
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage SetUnderlyingTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param);
    }
    public interface IEnumMemberDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration DeclaringEnum { get; }
        JetBrains.ReSharper.Psi.IField EnumMember { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EquivalenceOp { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration PreviousDeclaration { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression ValueExpression { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetValueExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IEqualityExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.EqualityExpressionType EqualityType { get; }
    }
    public interface IErrorDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Message { get; }
    }
    public interface IEventDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IEvent DeclaredElement { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName DelegateName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage DelegateTypeUsage { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EquivalenceSign { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer Initial { get; }
        bool IsFieldLikeEvent { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetDelegateName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage SetDelegateTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer SetInitial(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer param);
    }
    public interface IExpressionInitializer : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Value { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IExpressionStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IExtendsList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Colon { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage> ExtendedInterfaces { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage> ExtendedInterfacesEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage AddExtendedInterfaceAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param, JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage AddExtendedInterfaceBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param, JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage anchor);
        void RemoveExtendedInterface(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param);
    }
    public interface IExternAliasDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AliasKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Keyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
    }
    public class static IfDirectiveNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIfDirective GetByCondition(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param) { }
    }
    public interface IFieldDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IField DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EquivalenceSign { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression FixedBufferSizeExpression { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer Initial { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBracket { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBracket { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ScalarTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetFixedBufferSizeExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer SetInitial(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IForeachHeader : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Collection { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode InKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration IteratorDeclaration { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetCollection(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration SetIteratorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration param);
    }
    public interface IForeachStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement Body { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Collection { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IForeachStatementReference CurrentReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ForeachKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IForeachStatementReference GetEnumeratorReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration IteratorDeclaration { get; }
        string IteratorName { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IForeachStatementReference MoveNextReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetCollection(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration SetIteratorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration param);
    }
    public interface IForeachStatementReference : JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder { }
    public interface IForeachVariableDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.ILocalVariable DeclaredElement { get; }
        bool IsVar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ScalarTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode VarKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
        void SetVar();
    }
    public interface IForInitializer : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration Declaration { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> Expressions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> ExpressionsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration SetDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration param);
    }
    public interface IForIterator : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> Expressions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> ExpressionsEnumerable { get; }
    }
    public interface IFormalParameterList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration> ParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration> ParameterDeclarationsEnumerable { get; }
    }
    public interface IForStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement Body { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Condition { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ForKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IForInitializer Initializer { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration> InitializerDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration> InitializerDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> InitializerExpressions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> InitializerExpressionsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> IteratorExpressions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> IteratorExpressionsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IForIterator Iterators { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon1 { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon2 { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression AddInitializerExpressionAfter(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression AddInitializerExpressionBefore(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression anchor);
        void RemoveInitializerDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration param);
        void RemoveInitializerExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        void RemoveIteratorExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetCondition(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IForInitializer SetInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IForInitializer param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IForIterator SetIterators(JetBrains.ReSharper.Psi.CSharp.Tree.IForIterator param);
    }
    public class static IfStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIfStatement GetByCondition(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIfStatement GetByElse(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIfStatement GetByThen(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param) { }
    }
    public interface IGeneralCatchClause : JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IGotoCaseStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode CaseKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode DefaultKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode GotoKeyword { get; }
        bool IsGotoDefault { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression ValueExpression { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ISwitchLabelStatement ResolveLabel(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetValueExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IGotoStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode GotoKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ILabelReferenceElement Target { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ILabelReferenceElement SetTarget(JetBrains.ReSharper.Psi.CSharp.Tree.ILabelReferenceElement param);
    }
    public interface IIfDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression Condition { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression SetCondition(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param);
    }
    public interface IIfStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Condition { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement Else { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ElseKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IfKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement Then { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetCondition(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement SetElse(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement SetThen(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param);
    }
    public interface IInactivePreprocessorBranch : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IIndexerDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParametersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IProperty DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBracket { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBracket { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ThisKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IInitializerElement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IInterfaceDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassLikeDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.CSharp.Tree.IProperTypeDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationWithRangeContainer, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList ExtendedInterfaces { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage> ExtendedInterfaceUsages { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage> ExtendedInterfaceUsagesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode InterfaceKeyword { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList SetExtendedInterfaces(JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList param);
    }
    public interface IInterfaceQualificationOwner : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification InterfaceQualification { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName InterfaceQualificationReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification SetInterfaceQualification(JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetInterfaceQualificationReference(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
    }
    public interface IInvocationExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IArgumentsOwner, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList ArgumentList { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IInvocationExpressionReference InvocationExpressionReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression InvokedExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList SetArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression SetInvokedExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression param);
    }
    public interface IInvocationExpressionReference : JetBrains.ReSharper.Psi.CSharp.Resolve.ICSharpInvocationReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
    {
        bool IsPassThrough { get; }
    }
    public interface IIsExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.IType IsType { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Operand { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OperatorSign { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeOperand { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface ILabelDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
    }
    public interface ILabelReferenceElement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
    }
    public interface ILabelStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Colon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ILabelDeclaration Label { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ILabelDeclaration SetLabel(JetBrains.ReSharper.Psi.CSharp.Tree.ILabelDeclaration param);
    }
    public interface ILambdaExpression : JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousFunctionExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AsyncKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock BodyBlock { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression BodyExpression { get; }
        bool HasImplicitlyTypedParameters { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LambdaArrow { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration> ParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration> ParameterDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaSignature Signature { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration AddParameterDeclarationAfter(JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration AddParameterDeclarationBefore(JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration anchor);
        void RemoveParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration param);
        void RemoveSignatureParenthesesIfRedundant();
        void SetAsync(bool value);
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock SetBodyBlock(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetBodyExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaSignature SetSignature(JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaSignature param);
    }
    public interface ILambdaParameterDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IParameterDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ILambdaParameter DeclaredElement { get; }
        bool IsExplicitlyTyped { get; }
        bool IsImplicitlyTyped { get; }
        JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Mode { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ParamsKeyword { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface ILambdaSignature : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration> ParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration> ParameterDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
    }
    public interface ILineDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ILineIndicator LineIndicator { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ILineIndicator SetLineIndicator(JetBrains.ReSharper.Psi.CSharp.Tree.ILineIndicator param);
    }
    public interface ILineIndicator : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Default { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Hidden { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LineDigits { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Name { get; }
    }
    public interface ILocalConstantDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AssignmentSign { get; }
        JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ICSharpLocalVariable DeclaredElement { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ScalarTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression ValueExpression { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetValueExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface ILocalVariableDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AssignmentSign { get; }
        JetBrains.ReSharper.Psi.ILocalVariable DeclaredElement { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer Initial { get; }
        bool IsVar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ScalarTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer SetInitial(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
        void SetVar();
    }
    public interface ILockStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement Body { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LockKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Monitor { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetMonitor(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IMemberInitializer : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Expression { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer Initializer { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Operator { get; }
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer SetInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer param);
        void SetMemberName(string name);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
    }
    public interface IMemberOwnerBody : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
    }
    public interface IMemberOwnerDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.CSharp.Tree.IProperTypeDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        new JetBrains.ReSharper.Psi.ITypeElement DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        new JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration> MemberDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
    }
    public interface IMethodDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParametersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList AttributeSectionList { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IMethod DeclaredElement { get; }
        bool IsExtensionMethod { get; }
        bool IsPartial { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> TypeParameterConstraints { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause> TypeParameterConstraintsClauses { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause> TypeParameterConstraintsClausesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> TypeParameterConstraintsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration> TypeParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration> TypeParameterDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodList TypeParameterList { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration AddTypeParameterAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration AddTypeParameterBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause AddTypeParameterConstraintsClauseAfter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause AddTypeParameterConstraintsClauseBefore([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause anchor);
        void RemoveTypeParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration param);
        void RemoveTypeParameterConstraintsClause(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param);
        void SetAsync(bool isAsync);
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList SetAttributeSectionList(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList param);
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList SetModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        void SetPartial(bool isPartial);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodList SetTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IModifiersList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Modifiers { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> ModifiersEnumerable { get; }
        void AddModifier(JetBrains.ReSharper.Psi.Tree.ITokenNode modifierNode);
        bool HasModifier(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tType);
        void RemoveModifier(JetBrains.ReSharper.Psi.Tree.ITokenNode modifierNode);
    }
    public interface IModifiersListOwner : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList SetModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param);
    }
    public interface IMultipleConstantDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ConstKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList SetAttributes(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList SetModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IMultipleDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember> Declarators { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember> DeclaratorsEnumerable { get; }
    }
    public interface IMultipleDeclarationMember : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration MultipleDeclaration { get; }
    }
    public interface IMultipleEventDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Commas { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommasEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage DeclaredTypeUsage { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EventKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList SetAttributes(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage SetDeclaredTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList SetModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param);
    }
    public interface IMultipleFieldDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList Attributes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList SetAttributes(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList SetModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IMultipleLocalConstantDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ConstKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IMultipleLocalVariableDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        bool IsVar { get; }
        JetBrains.ReSharper.Psi.Tree.ITreeNode TypeDesignator { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode VarKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember AddDeclaratorAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember param, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember AddDeclaratorBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember param, JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember anchor);
        JetBrains.DocumentModel.DocumentRange GetTypeRange();
        void RemoveDeclarator(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
        void SetVar();
    }
    public interface IMultiplicativeExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface INamespaceBody : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList ImportsList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBrace { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration NamespaceDeclaration { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration> NamespaceDeclarationNodes { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration> NamespaceDeclarationNodesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBrace { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList SetImportsList(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList param);
    }
    public class static IndexerDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration GetByAccessorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration GetByInterfaceQualification(JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration GetByInterfaceQualificationReference(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration GetByParams(JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static InitializerElementNavigator { }
    public class static InterfaceDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByEventDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByExtendedInterfaces(JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByExtendedInterfaceUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByIndexerDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByMethodDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByNestedTypeDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByPropertyDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByTypeParameter(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByTypeParameterConstraintsClause(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList param) { }
    }
    public class static InterfaceQualificationOwnerExtensions
    {
        public static string GetDeclaredShortName([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner owner) { }
        public static void SetInterfaceQualificationReference([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner owner, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IDeclaredType type) { }
    }
    public class static InterfaceQualificationOwnerNavigator
    {
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner> GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner GetByInterfaceQualification(JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner GetByInterfaceQualificationReference(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner> GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
    }
    public interface INullableTypeMark : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Quest { get; }
    }
    public interface INullCoalescingExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public class static InvocationExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInvocationExpression GetByArgument(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInvocationExpression GetByArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInvocationExpression GetByInvokedExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInvocationExpression GetByInvokedExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression param) { }
    }
    public interface IObjectCreationExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IArgumentsOwner, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList ArgumentList { get; }
        JetBrains.ReSharper.Psi.Resolve.IReference ConstructorReference { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage CreatedTypeUsage { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer Initializer { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark NullableMark { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName TypeName { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference TypeReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList SetArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage SetCreatedTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer SetInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer param);
        JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark SetNullableMark(JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
    }
    public interface IObjectInitializer : JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer> MemberInitializers { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer> MemberInitializersEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer AddMemberInitializerAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer param, JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer AddMemberInitializerBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer param, JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer anchor);
        void RemoveMemberInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer param);
    }
    public interface IOperatorDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParametersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        new JetBrains.ReSharper.Psi.IFunction DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OperatorKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IOperatorExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> OperatorOperands { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorReference OperatorReference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OperatorSign { get; }
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        new bool IsValid();
    }
    public interface IOperatorReference : JetBrains.ReSharper.Psi.CSharp.Resolve.ICSharpInvocationReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder { }
    public interface IOwnerQualification : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Dot { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName Qualifier { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetQualifier(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
    }
    public interface IParenthesizedExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IPostfixOperatorExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression Operand { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.PostfixOperatorType PostfixOperatorType { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression SetOperand(JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression param);
    }
    public interface IPragmaDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Message { get; }
    }
    public interface IPredefinedDeclaredTypeUsage : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference PredefinedTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference SetPredefinedTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference param);
    }
    public interface IPredefinedTypeExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference PredefinedTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference SetPredefinedTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference param);
    }
    public interface IPredefinedTypeReference : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TypeKeyword { get; }
    }
    public interface IPredefinedTypeUsage : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference ScalarPredefinedTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference SetScalarPredefinedTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference param);
    }
    public interface IPrefixOperatorExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression Operand { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.PrefixOperatorType PrefixOperatorType { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression SetOperand(JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression param);
    }
    public interface IPreprocessor : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IPreprocessorAndExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression LeftOp { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OpSign { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression RightOp { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression SetLeftOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression SetRightOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param);
    }
    public interface IPreprocessorConditionalSymbol : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorUnaryExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        string Name { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NameIdentifier { get; }
    }
    public interface IPreprocessorConstant : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorUnaryExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Value { get; }
    }
    public interface IPreprocessorDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Directive { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.PreprocessorDirectiveKind Kind { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode NumberSign { get; }
    }
    public interface IPreprocessorEqualityExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression LeftOp { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OpSign { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression RightOp { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression SetLeftOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression SetRightOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param);
    }
    public interface IPreprocessorErrorDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode EndOfLine { get; }
    }
    public interface IPreprocessorExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IPreprocessorNegation : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorUnaryExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorUnaryExpression Op { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OpSign { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorUnaryExpression SetOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorUnaryExpression param);
    }
    public interface IPreprocessorOrExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression LeftOp { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OpSign { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression RightOp { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression SetLeftOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression SetRightOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param);
    }
    public interface IPreprocessorParenthesizedExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorUnaryExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression Op { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression SetOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param);
    }
    public interface IPreprocessorPragmaBody : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IPreprocessorUnaryExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IPrimaryExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IPropertyAssignment : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute ContainingAttribute { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Operator { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier PropertyNameIdentifier { get; }
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Source { get; }
        void SetName(string name);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetPropertyNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetSource(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IPropertyDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IProperty DeclaredElement { get; }
        bool IsAuto { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ScalarTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IProperTypeDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        new JetBrains.ReSharper.Psi.ITypeElement DeclaredElement { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IClassLikeDeclaration GetContainingClassLikeDeclaration();
    }
    public interface IQueryCastReference : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Resolve.ICSharpInvocationReference, JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedOnePhaseReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder { }
    public interface IQueryCastReferenceProvider : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryCastReference CastReference { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.IType CastType { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Keyword { get; }
    }
    public interface IQueryClause : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode FirstKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.IGeneratedQueryArgument GeneratedArgument { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause NextClause { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform> Platforms { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause PreviousClause { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference> QueryReferences { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.QueryKind GetKind();
    }
    public interface IQueryClausesHolder : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause> Clauses { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause> ClausesEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClausesHolder Next { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClausesHolder Previous { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause AddQueryClauseAfter(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause queryClause, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause tag);
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause AddQueryClauseBefore(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause clause, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause tag);
        void RemoveQueryClause(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause clause);
    }
    public interface IQueryContinuation : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClausesHolder, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration Declaration { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IntoKeyword { get; }
        string Name { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration SetDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration param);
    }
    public interface IQueryExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClausesHolder, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IQueryContinuation> Continuations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IQueryContinuation> ContinuationsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFirstFrom From { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.IScheme GetScheme(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause clause);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable> GetVariables(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform platform);
        void RemoveContinuation(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryContinuation continuation);
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFirstFrom SetFrom(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFirstFrom param);
    }
    public interface IQueryFirstFrom : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryCastReferenceProvider, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration Declaration { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode FromKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode InKeyword { get; }
        string Name { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Resolve.IReference GetReferenceQualifiedByExpression();
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration SetDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IQueryFromClause : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryCastReferenceProvider, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration Declaration { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode FromKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode InKeyword { get; }
        string Name { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryChainReference SelectReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration SetDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform SetExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IQueryGroupClause : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ByKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform Criteria { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode GroupKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference GroupReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform Subject { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform SetCriteria(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform SetSubject(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param);
    }
    public interface IQueryJoinClause : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryCastReferenceProvider, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform EqualsExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqualsKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression InExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode InKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration IntoDeclaration { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode IntoKeyword { get; }
        string IntoName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration JoinDeclaration { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode JoinKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryChainReference JoinReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform OnExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OnKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        string VariableName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform SetEqualsExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetInExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration SetIntoDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration SetJoinDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform SetOnExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IQueryLetClause : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration Declaration { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LetKeyword { get; }
        string Name { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference SelectReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Impl.Query.IQueryAnonymousType GetAnonymousType();
        JetBrains.ReSharper.Psi.CSharp.Impl.Query.IQueryAnonymousType GetAnonymousType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryAnonymousTypeProperty> GetGeneratedProperties();
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration SetDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform SetExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param);
    }
    public interface IQueryOrderByClause : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OrderByKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IQueryOrdering> Orderings { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IQueryOrdering> OrderingsEnumerable { get; }
    }
    public interface IQueryOrdering : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AscendingKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode DescendingKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform Expression { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference Reference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform SetExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param);
    }
    public interface IQueryParameterPlatform : JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IScope, JetBrains.ReSharper.Psi.IArgumentInfo, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.IType LambdaReturnType { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Value { get; }
        JetBrains.ReSharper.Psi.IType GetLambdaReturnType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        new JetBrains.ReSharper.Psi.IPsiServices GetPsiServices();
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable> GetVariables();
        new bool IsValid();
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IQueryRangeVariableDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.DeclaredElements.IQueryRangeVariable DeclaredElement { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.QueryDeclarationKind GetKind();
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
    }
    public interface IQuerySelectClause : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode SelectKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference SelectReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform SetExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param);
    }
    public interface IQueryWhereClause : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode WhereKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference WhereReference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform SetExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param);
    }
    public interface IRankSpecifier : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Commas { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommasEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBracket { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBracket { get; }
    }
    public interface IReferenceConstraint : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Keyword { get; }
    }
    public interface IReferenceExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeArgumentsOwnerElement
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument ContainerArgument { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.Tree.ITokenNode Delimiter { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression QualifierExpression { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpressionReference Reference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList TypeArgumentList { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetQualifierExpression([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList SetTypeArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList param);
        void SetTypeArguments(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> typeArguments);
    }
    public interface IReferenceExpressionReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.Resolve.ICompleteableReference, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedTwoPhaseReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveAsUnqualified(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable);
    }
    public interface IReferenceName : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeArgumentsOwnerElement
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression ContainingArrayCreationExpression { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute ContainingAttribute { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IObjectCreationExpression ContainingCreationExpression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Delimiter { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        string QualifiedName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName Qualifier { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceNameReference Reference { get; }
        string ShortName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList TypeArgumentList { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ReplaceBy(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName name);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetQualifier(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName newQuilifier);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList SetTypeArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList param);
    }
    public interface IReferenceNameReference : JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveAsUnqualified(JetBrains.ReSharper.Psi.Resolve.ISymbolTable symbolTable);
    }
    public interface IRegularParameterDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IParameterDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression DefaultValue { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EqSign { get; }
        bool IsOptional { get; }
        bool IsParameterArray { get; }
        JetBrains.ReSharper.Psi.ParameterKind Kind { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Mode { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ParamsKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ScalarTypeName { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ThisKeyword { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetDefaultValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        void SetKind(JetBrains.ReSharper.Psi.ParameterKind kind);
        void SetParamArray(bool addParamArray);
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
        void SetThis(bool addThis);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IRelationalExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IResourceAcquisitionExpressionsList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> Expressions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> ExpressionsEnumerable { get; }
    }
    public interface IReturnStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode ReturnKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Value { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public class static IsExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIsExpression GetByOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IIsExpression GetByTypeOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public interface IShiftExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface ISignOperatorDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParametersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IFunctionDeclaration, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IParametersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        new JetBrains.ReSharper.Psi.IFunction DeclaredElement { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OperatorSign { get; }
    }
    public interface ISpecificCatchClause : JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage DeclaredTypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICatchVariableDeclaration ExceptionDeclaration { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage ExceptionTypeUsage { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        void SetCaughtType(JetBrains.ReSharper.Psi.IType type);
        JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage SetDeclaredTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICatchVariableDeclaration SetExceptionDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICatchVariableDeclaration param);
    }
    public interface IStartRegion : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IEndRegion EndRegion { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Message { get; }
        string Name { get; }
    }
    public interface IStructDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassLikeDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersListOwner, JetBrains.ReSharper.Psi.CSharp.Tree.IProperTypeDeclaration, JetBrains.ReSharper.Psi.IAccessRightsOwner, JetBrains.ReSharper.Psi.IDeclarationsRangeContainer, JetBrains.ReSharper.Psi.IModifiersOwner, JetBrains.ReSharper.Psi.Tree.IAccessRightsOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode, JetBrains.ReSharper.Psi.Tree.IModifiersOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeDeclaration, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationHolder, JetBrains.ReSharper.Psi.Tree.ITypeDeclarationWithRangeContainer, JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration> ConstantDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration> ConstantDeclarationsEnumerable { get; }
        new JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration> ConstructorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration> ConstructorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration> FieldDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration> FieldDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList ImplementedInterfacesList { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage> ImplementedInterfaceUsages { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage> ImplementedInterfaceUsagesEnumerable { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList ModifiersList { get; }
        new JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration> OperatorDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration> OperatorDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode StructKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> TypeParameterConstraints { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> TypeParameterConstraintsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList SetImplementedInterfacesList(JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList param);
    }
    public interface ISwitchLabelStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Colon { get; }
        bool IsDefault { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Keyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression ValueExpression { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetValueExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface ISwitchStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock Block { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Condition { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode SwitchKeyword { get; }
        JetBrains.ReSharper.Psi.IType GetGoverningType();
        JetBrains.ReSharper.Psi.IType GetGoverningType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock SetBlock(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetCondition(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IThisExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode This { get; }
    }
    public interface IThrowStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Exception { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ThrowKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetException(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface ITryStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause> Catches { get; }
        bool CatchesAllExceptions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause> CatchesEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock FinallyBlock { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode FinallyKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock Try { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TryKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause AddCatchClause(JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause clause);
        void RemoveCatchClause(JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause clause);
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock SetFinallyBlock(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock SetTry(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param);
    }
    public interface ITypeArgumentList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Commas { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommasEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LAngle { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RAngle { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage> TypeArgumentNodes { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IType> TypeArguments { get; }
        void RemoveTypeArgument(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage typeNode);
        void SetTypeArguments(JetBrains.ReSharper.Psi.IType[] types);
        void SetTypeArguments(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage[] typeNodes);
    }
    public interface ITypeConstraint : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.IType Constraint { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        void SetType(JetBrains.ReSharper.Psi.IType type);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface ITypeofExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.NotNullAttribute()]
        JetBrains.ReSharper.Psi.IType ArgumentType { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeName { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode TypeofKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface ITypeParameterConstraint : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface ITypeParameterConstraintsClause : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Colon { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> Constraints { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> ConstraintsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterReference TypeParameter { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode WhereKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeConstraint AddTypeConstraintAfter(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeConstraint param, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeConstraint anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeConstraint AddTypeConstraintBefore(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeConstraint param, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeConstraint anchor);
        T AddTypeParameterConstraint<T>(T param)
            where T :  class, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint;
        void RemoveTypeParameterConstraint(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterReference SetTypeParameter(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterReference param);
    }
    public interface ITypeParameterDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.ITypeParameter DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode InKeyword { get; }
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OutKeyword { get; }
        JetBrains.ReSharper.Psi.TypeParameterVariance Variance { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause GetConstraintsClause();
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        void SetVariance(JetBrains.ReSharper.Psi.TypeParameterVariance variance);
    }
    public interface ITypeParameterOfMethodDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration MethodDeclaration { get; }
    }
    public interface ITypeParameterOfMethodList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LAngle { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RAngle { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration> TypeParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration> TypeParameterDeclarationsEnumerable { get; }
    }
    public interface ITypeParameterOfTypeDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode { }
    public interface ITypeParameterOfTypeList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LAngle { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RAngle { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration> TypeParameterDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration> TypeParameterDeclarationsEnumerable { get; }
    }
    public interface ITypeParameterReference : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        string Name { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.Resolve.IReference Reference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
    }
    public interface ITypeUsage : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier> ArrayRanks { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier> ArrayRanksEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark NullableMark { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer> PointerMarks { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer> PointerMarksEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage ReplaceBy(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage typeUsageNode);
        JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark SetNullableMark(JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark param);
    }
    public interface IUnaryExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IUnaryOperatorExpression : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression Operand { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.UnaryOperatorType UnaryOperatorType { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression SetOperand(JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression param);
    }
    public interface IUncheckedExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Operand { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode UncheckedKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IUncheckedStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock Body { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode UncheckedKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param);
    }
    public interface IUndefDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode SymbolIdentifier { get; }
        string SymbolName { get; }
    }
    public interface IUnsafeCodeAddressOfExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Address { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression Operand { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression SetOperand(JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression param);
    }
    public interface IUnsafeCodeFixedPointerDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.IInitializerOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.ILocalVariable DeclaredElement { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedStatement DeclaringFixedStatement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EquivalenceOp { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer Initial { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ScalarTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer SetInitial(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IUnsafeCodeFixedPointerInitializer : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode AddressOp { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Value { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IUnsafeCodeFixedStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement Body { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.Tree.ITokenNode> Comma { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.Tree.ITokenNode> CommaEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode FixedKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerDeclaration> PointerDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerDeclaration> PointerDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IUnsafeCodePointer : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Sign { get; }
    }
    public interface IUnsafeCodePointerAccessExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeArgumentsOwnerElement
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode OperatorSign { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression PointerExpression { get; }
        JetBrains.ReSharper.Psi.Resolve.Managed.IManagedTwoPhaseReference Reference { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList TypeArgumentList { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression SetPointerExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList SetTypeArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList param);
    }
    public interface IUnsafeCodePointerIndirectionExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Indirection { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression Operand { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression SetOperand(JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression param);
    }
    public interface IUnsafeCodeSizeOfExpression : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression, JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression, JetBrains.ReSharper.Psi.IConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedConstantValueOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedExpression, JetBrains.ReSharper.Psi.Tree.IExpression, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage Operand { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode SizeofKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IUnsafeCodeStackAllocInitializer : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement, JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression DimExpr { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LBracket { get; }
        JetBrains.ReSharper.Psi.IType PointerType { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RBracket { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode StackallocKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage TypeUsage { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetDimExpr(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
        void SetPointerType(JetBrains.ReSharper.Psi.IPointerType type);
        JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage SetTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param);
    }
    public interface IUnsafeCodeUnsafeStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock Body { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode UnsafeKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IBlock SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param);
    }
    public interface IUserDeclaredTypeUsage : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName TypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
    }
    public interface IUserTypeUsage : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ScalarTypeName { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
    }
    public interface IUsingAliasDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier Alias { get; }
        string AliasName { get; }
        JetBrains.ReSharper.Psi.CSharp.DeclaredElements.INamespaceAlias DeclaredElement { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode EquivalenceSign { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetAlias(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
    }
    public interface IUsingDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName ImportedSymbolName { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode UsingKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName SetImportedSymbolName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param);
    }
    public interface IUsingList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective> ExternAliases { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective> ExternAliasesEnumerable { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective> Imports { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective> ImportsEnumerable { get; }
    }
    public interface IUsingNamespaceDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        JetBrains.ReSharper.Psi.INamespace ImportedNamespace { get; }
    }
    public interface IUsingStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement Body { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration Declaration { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> Expressions { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> ExpressionsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.IResourceAcquisitionExpressionsList ExpressionsList { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode UsingKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration> VariableDeclarations { get; }
        JetBrains.ReSharper.Psi.Tree.TreeNodeEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration> VariableDeclarationsEnumerable { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration AddVariableDeclarationAfter(JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration anchor);
        JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration AddVariableDeclarationBefore(JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration param, JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration anchor);
        void RemoveVariableDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param);
        JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration SetDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression);
        JetBrains.ReSharper.Psi.CSharp.Tree.IResourceAcquisitionExpressionsList SetExpressionsList(JetBrains.ReSharper.Psi.CSharp.Tree.IResourceAcquisitionExpressionsList param);
    }
    public interface IValueConstraint : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Keyword { get; }
    }
    public interface IVariableDeclaration : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IDeclaration, JetBrains.ReSharper.Psi.Tree.ITreeNode, JetBrains.ReSharper.Psi.Tree.ITypeOwnerDeclaration, JetBrains.ReSharper.Psi.Tree.IXmlDocOwnerTreeNode
    {
        new JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier NameIdentifier { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier SetNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param);
    }
    public interface IVariableInitializer : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IWarningAction : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IWarningDirective : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode Message { get; }
    }
    public interface IWarningList : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor, JetBrains.ReSharper.Psi.Tree.ITreeNode { }
    public interface IWhileStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement Body { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Condition { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode LPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode RPar { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode WhileKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement SetBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param);
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetCondition(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public interface IWhitespaceNode : JetBrains.ReSharper.Psi.Tree.ITokenNode, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        bool IsNewLine { get; }
    }
    public interface IYieldStatement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode, JetBrains.ReSharper.Psi.Tree.IStatement, JetBrains.ReSharper.Psi.Tree.ITreeNode
    {
        JetBrains.ReSharper.Psi.Tree.ITokenNode BreakKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression Expression { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode ReturnKeyword { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode Semicolon { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.YieldStatementType StatementType { get; }
        JetBrains.ReSharper.Psi.Tree.ITokenNode YieldKeyword { get; }
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression SetExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param);
    }
    public class static LabelDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILabelDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static LabelReferenceElementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILabelReferenceElement GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static LabelStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILabelStatement GetByLabel(JetBrains.ReSharper.Psi.CSharp.Tree.ILabelDeclaration param) { }
    }
    public class static LambdaExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaExpression GetByBodyBlock(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaExpression GetByBodyExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaExpression GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaExpression GetBySignature(JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaSignature param) { }
    }
    public class static LambdaParameterDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static LambdaSignatureNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaSignature GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration param) { }
    }
    public class static LineDirectiveNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILineDirective GetByLineIndicator(JetBrains.ReSharper.Psi.CSharp.Tree.ILineIndicator param) { }
    }
    public class static LineIndicatorNavigator { }
    public class static LocalConstantDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILocalConstantDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalConstantDeclaration> GetByScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalConstantDeclaration> GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILocalConstantDeclaration GetByValueExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static LocalVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration GetByInitial(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration> GetByScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration> GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static LockStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILockStatement GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ILockStatement GetByMonitor(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static MemberInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer GetByInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static MemberOwnerBodyNavigator { }
    public class static MemberOwnerDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByTypeParameter(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByTypeParameterConstraintsClause(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList param) { }
    }
    public class static MethodDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByAttributeSectionList(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByInterfaceQualification(JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByInterfaceQualificationReference(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByParams(JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByTypeParameterConstraint(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByTypeParameterConstraintsClause(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByTypeParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static ModifiersListNavigator { }
    public class static MultipleConstantDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleConstantDeclaration GetByAttributes(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleConstantDeclaration GetByDeclarator(JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleConstantDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleConstantDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static MultipleDeclarationMemberNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static MultipleDeclarationNavigator { }
    public class static MultipleEventDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleEventDeclaration GetByAttributes(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleEventDeclaration GetByDeclarator(JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleEventDeclaration GetByDeclaredTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleEventDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
    }
    public class static MultipleFieldDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleFieldDeclaration GetByAttributes(JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleFieldDeclaration GetByDeclarator(JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleFieldDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleFieldDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static MultipleLocalConstantDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalConstantDeclaration GetByDeclarator(JetBrains.ReSharper.Psi.CSharp.Tree.ILocalConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalConstantDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static MultipleLocalVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration GetByDeclarator(JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static MultiplicativeExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultiplicativeExpression GetByLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IMultiplicativeExpression GetByRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static NamespaceBodyNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.INamespaceBody GetByImportsList(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.INamespaceBody GetByNamespaceDeclarationNode(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration param) { }
    }
    public class static NullableTypeMarkNavigator { }
    public class static NullCoalescingExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.INullCoalescingExpression GetByLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.INullCoalescingExpression GetByRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static ObjectCreationExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IObjectCreationExpression GetByArgument(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IObjectCreationExpression GetByArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IObjectCreationExpression GetByCreatedTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IObjectCreationExpression GetByInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IObjectCreationExpression GetByNullableMark(JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IObjectCreationExpression GetByReference(JetBrains.ReSharper.Psi.Resolve.IReference reference) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IObjectCreationExpression GetByTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
    }
    public class static ObjectInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IObjectInitializer GetByMemberInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer param) { }
    }
    public class static OperatorDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration GetByParams(JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static OperatorExpressionNavigator { }
    public class static OwnerQualificationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification GetByQualifier(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
    }
    public class static ParenthesizedExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IParenthesizedExpression GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static PostfixOperatorExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPostfixOperatorExpression GetByOperand(JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression param) { }
    }
    public enum PostfixOperatorType
    {
        INVALID = 0,
        PLUSPLUS = 1,
        MINUSMINUS = 2,
    }
    public class static PragmaDirectiveNavigator { }
    public class static PredefinedDeclaredTypeUsageNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedDeclaredTypeUsage GetByPredefinedTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference param) { }
    }
    public class static PredefinedTypeExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeExpression GetByPredefinedTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference param) { }
    }
    public class static PredefinedTypeReferenceNavigator { }
    public class static PredefinedTypeUsageNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeUsage GetByArrayRank(JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeUsage GetByNullableMark(JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeUsage GetByPointerMark(JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeUsage GetByScalarPredefinedTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference param) { }
    }
    public class static PrefixOperatorExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPrefixOperatorExpression GetByOperand(JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression param) { }
    }
    public enum PrefixOperatorType
    {
        INVALID = 0,
        PLUSPLUS = 1,
        MINUSMINUS = 2,
    }
    public class static PreprocessorAndExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorAndExpression GetByLeftOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorAndExpression GetByRightOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param) { }
    }
    public class static PreprocessorConditionalSymbolNavigator { }
    public class static PreprocessorConstantNavigator { }
    public enum PreprocessorDirectiveKind
    {
        INVALID = 0,
        DEFINE = 1,
        UNDEF = 2,
        ERROR = 3,
        WARNING = 4,
        IF = 5,
        ELIF = 6,
        ELSE = 7,
        ENDIF = 8,
        LINE = 9,
        REGION = 10,
        ENDREGION = 11,
        PRAGMA = 12,
    }
    public class static PreprocessorDirectiveNavigator { }
    public class static PreprocessorEqualityExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorEqualityExpression GetByLeftOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorEqualityExpression GetByRightOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param) { }
    }
    public class static PreprocessorErrorDirectiveNavigator { }
    public class static PreprocessorExpressionNavigator { }
    public class static PreprocessorNavigator { }
    public class static PreprocessorNegationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorNegation GetByOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorUnaryExpression param) { }
    }
    public class static PreprocessorOrExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorOrExpression GetByLeftOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorOrExpression GetByRightOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param) { }
    }
    public class static PreprocessorParenthesizedExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorParenthesizedExpression GetByOp(JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression param) { }
    }
    public class static PreprocessorPragmaBodyNavigator { }
    public class static PreprocessorUnaryExpressionNavigator { }
    public class static PrimaryExpressionNavigator { }
    public class static PropertyAssignmentNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyAssignment GetByPropertyNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyAssignment GetBySource(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static PropertyDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration GetByAccessorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration GetByInterfaceQualification(JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration GetByInterfaceQualificationReference(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration GetByScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static QueryClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause GetByPlatform([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform platform) { }
    }
    public class static QueryClausesHolderNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClausesHolder GetByClause(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause param) { }
    }
    public class static QueryContinuationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryContinuation GetByClause(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryContinuation GetByDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration param) { }
    }
    public enum QueryDeclarationKind
    {
        NOTHING = 0,
        FIRST_FROM = 1,
        FROM = 2,
        JOIN = 3,
        JOIN_INTO = 4,
        LET = 5,
        INTO = 6,
    }
    public class static QueryExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryExpression GetByClause(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause param) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryExpression GetByClauseThroughInto(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause clause) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryExpression GetByContinuation(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryContinuation param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryExpression GetByFrom(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFirstFrom param) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryExpression GetByPlatform(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform platform) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression GetQualifierExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause clause) { }
    }
    public class static QueryFirstFromNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFirstFrom GetByDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFirstFrom GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFirstFrom GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static QueryFromClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFromClause GetByDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFromClause GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFromClause GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static QueryGroupClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryGroupClause GetByCriteria(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryGroupClause GetBySubject(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param) { }
    }
    public class static QueryJoinClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryJoinClause GetByEqualsExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryJoinClause GetByInExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryJoinClause GetByIntoDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryJoinClause GetByJoinDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryJoinClause GetByOnExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryJoinClause GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public enum QueryKind
    {
        FROM = 0,
        FROM_SELECT = 1,
        LET = 2,
        WHERE = 3,
        JOIN = 4,
        JOIN_SELECT = 5,
        JOIN_INTO = 6,
        JOIN_INTO_SELECT = 7,
        ORDERBY = 8,
        SELECT = 9,
        SELECT_EMPTY = 10,
        GROUPBY = 11,
        GROUPBY_SHORT = 12,
    }
    public class static QueryLetClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryLetClause GetByDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryLetClause GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param) { }
    }
    public class static QueryOrderByClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryOrderByClause GetByOrdering(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryOrdering param) { }
    }
    public class static QueryOrderingNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryOrdering GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param) { }
    }
    public class static QueryParameterPlatformNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform GetByValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static QueryRangeVariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static QuerySelectClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQuerySelectClause GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param) { }
    }
    public class static QueryWhereClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IQueryWhereClause GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform param) { }
    }
    public class static RankSpecifierNavigator { }
    public class static ReferenceConstraintNavigator { }
    public class static ReferenceExpressionExtensions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression GetExtensionQualifier(this JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression referenceExpression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetExtensionQualifierType(this JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression referenceExpression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetExtensionQualifierType(this JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression referenceExpression, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static bool IsExtensionMethod(this JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression referenceExpression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static string QualifyingAliasName(this JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpressionReference reference, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
    }
    public class static ReferenceExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression GetByQualifierExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expr) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression GetByTypeArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList param) { }
    }
    public class static ReferenceNameNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName GetByQualifier(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName node) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName GetByTypeArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList param) { }
    }
    public class static ReferenceNameReferenceExtension
    {
        public static string GetExternAliasName(this JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceNameReference reference) { }
    }
    public class static RegularParameterDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IRegularParameterDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IRegularParameterDeclaration GetByDefaultValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IRegularParameterDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IRegularParameterDeclaration GetByScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IRegularParameterDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static RelationalExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IRelationalExpression GetByLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IRelationalExpression GetByRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static ResourceAcquisitionExpressionsListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IResourceAcquisitionExpressionsList GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static ReturnStatementExtentions
    {
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration FindReturnOwner(this JetBrains.ReSharper.Psi.CSharp.Tree.IReturnStatement returnStatement) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration FindReturnOwner(this JetBrains.ReSharper.Psi.CSharp.Tree.IYieldStatement yieldStatement) { }
    }
    public class static ReturnStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IReturnStatement GetByValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static ShiftExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IShiftExpression GetByLeftOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IShiftExpression GetByRightOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static SignOperatorDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ISignOperatorDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ISignOperatorDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ISignOperatorDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ISignOperatorDeclaration GetByParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ISignOperatorDeclaration GetByParams(JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ISignOperatorDeclaration GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static SpecificCatchClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ISpecificCatchClause GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ISpecificCatchClause GetByDeclaredTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ISpecificCatchClause GetByExceptionDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICatchVariableDeclaration param) { }
    }
    public class static StartRegionNavigator { }
    public class static StructDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByConstantDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByConstructorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByEventDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByFieldDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByImplementedInterfacesList(JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByImplementedInterfaceUsage(JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByIndexerDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByMethodDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByModifiersList(JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByNestedTypeDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByOperatorDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByPropertyDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByTypeParameter(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByTypeParameterConstraint(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByTypeParameterConstraintsClause(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration GetByTypeParameterList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList param) { }
    }
    public class static SwitchLabelStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ISwitchLabelStatement GetByValueExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static SwitchStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ISwitchStatement GetByBlock(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ISwitchStatement GetByCondition(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static ThisExpressionNavigator { }
    public class static ThrowStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IThrowStatement GetByException(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public abstract class TreeNodeVisitor
    {
        public virtual void Visit__ArglistExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.I__ArglistExpression @__ArglistExpressionParam) { }
        public virtual void VisitAccessorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration accessorDeclarationParam) { }
        public virtual void VisitAccessorOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration accessorOwnerDeclarationParam) { }
        public virtual void VisitAdditiveExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAdditiveExpression additiveExpressionParam) { }
        public virtual void VisitAnonymousMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration anonymousMemberDeclarationParam) { }
        public virtual void VisitAnonymousMethodExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodExpression anonymousMethodExpressionParam) { }
        public virtual void VisitAnonymousMethodParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration anonymousMethodParameterDeclarationParam) { }
        public virtual void VisitAnonymousMethodSignature([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodSignature anonymousMethodSignatureParam) { }
        public virtual void VisitAnonymousObjectCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousObjectCreationExpression anonymousObjectCreationExpressionParam) { }
        public virtual void VisitAnonymousObjectInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousObjectInitializer anonymousObjectInitializerParam) { }
        public virtual void VisitArglistParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArglistParameterDeclaration arglistParameterDeclarationParam) { }
        public virtual void VisitArgumentList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList argumentListParam) { }
        public virtual void VisitArrayCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression arrayCreationExpressionParam) { }
        public virtual void VisitArrayInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArrayInitializer arrayInitializerParam) { }
        public virtual void VisitAsExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAsExpression asExpressionParam) { }
        public virtual void VisitAssignmentExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAssignmentExpression assignmentExpressionParam) { }
        public virtual void VisitAttribute([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute attributeParam) { }
        public virtual void VisitAttributeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeList attributeListParam) { }
        public virtual void VisitAttributeSection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSection attributeSectionParam) { }
        public virtual void VisitAttributeSectionList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList attributeSectionListParam) { }
        public virtual void VisitAttributesOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration attributesOwnerDeclarationParam) { }
        public virtual void VisitAwaitExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAwaitExpression awaitExpressionParam) { }
        public virtual void VisitBaseExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBaseExpression baseExpressionParam) { }
        public virtual void VisitBinaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression binaryExpressionParam) { }
        public virtual void VisitBitwiseAndExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseAndExpression bitwiseAndExpressionParam) { }
        public virtual void VisitBitwiseExclusiveOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseExclusiveOrExpression bitwiseExclusiveOrExpressionParam) { }
        public virtual void VisitBitwiseInclusiveOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseInclusiveOrExpression bitwiseInclusiveOrExpressionParam) { }
        public virtual void VisitBlock([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBlock blockParam) { }
        public virtual void VisitBreakStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBreakStatement breakStatementParam) { }
        public virtual void VisitCastExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICastExpression castExpressionParam) { }
        public virtual void VisitCatchClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause catchClauseParam) { }
        public virtual void VisitCatchVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICatchVariableDeclaration catchVariableDeclarationParam) { }
        public virtual void VisitCheckedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICheckedExpression checkedExpressionParam) { }
        public virtual void VisitCheckedStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICheckedStatement checkedStatementParam) { }
        public virtual void VisitClassBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody classBodyParam) { }
        public virtual void VisitClassDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration classDeclarationParam) { }
        public virtual void VisitClassLikeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassLikeDeclaration classLikeDeclarationParam) { }
        public virtual void VisitClassMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration classMemberDeclarationParam) { }
        public virtual void VisitCollectionElementInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer collectionElementInitializerParam) { }
        public virtual void VisitCollectionInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionInitializer collectionInitializerParam) { }
        public virtual void VisitConditionalAndExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalAndExpression conditionalAndExpressionParam) { }
        public virtual void VisitConditionalOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalOrExpression conditionalOrExpressionParam) { }
        public virtual void VisitConditionalTernaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalTernaryExpression conditionalTernaryExpressionParam) { }
        public virtual void VisitConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration constantDeclarationParam) { }
        public virtual void VisitConstructorConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorConstraint constructorConstraintParam) { }
        public virtual void VisitConstructorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration constructorDeclarationParam) { }
        public virtual void VisitConstructorInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer constructorInitializerParam) { }
        public virtual void VisitContinueStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IContinueStatement continueStatementParam) { }
        public virtual void VisitConversionOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConversionOperatorDeclaration conversionOperatorDeclarationParam) { }
        public virtual void VisitCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpression creationExpressionParam) { }
        public virtual void VisitCreationExpressionInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer creationExpressionInitializerParam) { }
        public virtual void VisitCSharpArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument cSharpArgumentParam) { }
        public virtual void VisitCSharpArgumentsOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner cSharpArgumentsOwnerParam) { }
        public virtual void VisitCSharpDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration cSharpDeclarationParam) { }
        public virtual void VisitCSharpExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression cSharpExpressionParam) { }
        public virtual void VisitCSharpFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile cSharpFileParam) { }
        public virtual void VisitCSharpFunctionDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration cSharpFunctionDeclarationParam) { }
        public virtual void VisitCSharpLiteralExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpLiteralExpression cSharpLiteralExpressionParam) { }
        public virtual void VisitCSharpModifiersOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration cSharpModifiersOwnerDeclarationParam) { }
        public virtual void VisitCSharpNamespaceDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration cSharpNamespaceDeclarationParam) { }
        public virtual void VisitCSharpParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration cSharpParameterDeclarationParam) { }
        public virtual void VisitCSharpParametersOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParametersOwnerDeclaration cSharpParametersOwnerDeclarationParam) { }
        public virtual void VisitCSharpStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement cSharpStatementParam) { }
        public virtual void VisitCSharpTypeAndNamespaceHolderDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration cSharpTypeAndNamespaceHolderDeclarationParam) { }
        public virtual void VisitCSharpTypeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration cSharpTypeDeclarationParam) { }
        public virtual void VisitCSharpTypeMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration cSharpTypeMemberDeclarationParam) { }
        public virtual void VisitDeclarationStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDeclarationStatement declarationStatementParam) { }
        public virtual void VisitDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage declaredTypeUsageParam) { }
        public virtual void VisitDefaultExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDefaultExpression defaultExpressionParam) { }
        public virtual void VisitDefineDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDefineDirective defineDirectiveParam) { }
        public virtual void VisitDelegateDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration delegateDeclarationParam) { }
        public virtual void VisitDestructorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration destructorDeclarationParam) { }
        public virtual void VisitDocCommentBlockNode(JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode xmlDoc) { }
        public virtual void VisitDocCRefElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement docCRefElementParam) { }
        public virtual void VisitDocCRefExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefExpression docCRefExpressionParam) { }
        public virtual void VisitDocCRefParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameter docCRefParameterParam) { }
        public virtual void VisitDocCRefParameterType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType docCRefParameterTypeParam) { }
        public virtual void VisitDocCRefParameterTypeName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName docCRefParameterTypeNameParam) { }
        public virtual void VisitDocCRefSignature([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefSignature docCRefSignatureParam) { }
        public virtual void VisitDocCRefTypeParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameter docCRefTypeParameterParam) { }
        public virtual void VisitDocCRefTypeParameterList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameterList docCRefTypeParameterListParam) { }
        public virtual void VisitDoStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDoStatement doStatementParam) { }
        public virtual void VisitDynamicDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDynamicDeclaredTypeUsage dynamicDeclaredTypeUsageParam) { }
        public virtual void VisitDynamicTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDynamicTypeUsage dynamicTypeUsageParam) { }
        public virtual void VisitElementAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IElementAccessExpression elementAccessExpressionParam) { }
        public virtual void VisitElifDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IElifDirective elifDirectiveParam) { }
        public virtual void VisitElseDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IElseDirective elseDirectiveParam) { }
        public virtual void VisitEmptyStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEmptyStatement emptyStatementParam) { }
        public virtual void VisitEndifDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEndifDirective endifDirectiveParam) { }
        public virtual void VisitEndRegion([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEndRegion endRegionParam) { }
        public virtual void VisitEnumBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEnumBase enumBaseParam) { }
        public virtual void VisitEnumBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEnumBody enumBodyParam) { }
        public virtual void VisitEnumDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration enumDeclarationParam) { }
        public virtual void VisitEnumMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration enumMemberDeclarationParam) { }
        public virtual void VisitEqualityExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEqualityExpression equalityExpressionParam) { }
        public virtual void VisitErrorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IErrorDirective errorDirectiveParam) { }
        public virtual void VisitEventDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration eventDeclarationParam) { }
        public virtual void VisitExpressionInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IExpressionInitializer expressionInitializerParam) { }
        public virtual void VisitExpressionStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IExpressionStatement expressionStatementParam) { }
        public virtual void VisitExtendsList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList extendsListParam) { }
        public virtual void VisitExternAliasDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective externAliasDirectiveParam) { }
        public virtual void VisitFieldDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration fieldDeclarationParam) { }
        public virtual void VisitForeachHeader([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForeachHeader foreachHeaderParam) { }
        public virtual void VisitForeachStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForeachStatement foreachStatementParam) { }
        public virtual void VisitForeachVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration foreachVariableDeclarationParam) { }
        public virtual void VisitForInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForInitializer forInitializerParam) { }
        public virtual void VisitForIterator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForIterator forIteratorParam) { }
        public virtual void VisitFormalParameterList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList formalParameterListParam) { }
        public virtual void VisitForStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForStatement forStatementParam) { }
        public virtual void VisitGeneralCatchClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IGeneralCatchClause generalCatchClauseParam) { }
        public virtual void VisitGotoCaseStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IGotoCaseStatement gotoCaseStatementParam) { }
        public virtual void VisitGotoStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IGotoStatement gotoStatementParam) { }
        public virtual void VisitIfDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IIfDirective ifDirectiveParam) { }
        public virtual void VisitIfStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IIfStatement ifStatementParam) { }
        public virtual void VisitInactivePreprocessorBranchNode(JetBrains.ReSharper.Psi.CSharp.Tree.IInactivePreprocessorBranch inactivePreprocessorBranchNode) { }
        public virtual void VisitIndexerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration indexerDeclarationParam) { }
        public virtual void VisitInitializerElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement initializerElementParam) { }
        public virtual void VisitInterfaceDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration interfaceDeclarationParam) { }
        public virtual void VisitInterfaceQualificationOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner interfaceQualificationOwnerParam) { }
        public virtual void VisitInvocationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IInvocationExpression invocationExpressionParam) { }
        public virtual void VisitIsExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IIsExpression isExpressionParam) { }
        public virtual void VisitLabelDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILabelDeclaration labelDeclarationParam) { }
        public virtual void VisitLabelReferenceElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILabelReferenceElement labelReferenceElementParam) { }
        public virtual void VisitLabelStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILabelStatement labelStatementParam) { }
        public virtual void VisitLambdaExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaExpression lambdaExpressionParam) { }
        public virtual void VisitLambdaParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration lambdaParameterDeclarationParam) { }
        public virtual void VisitLambdaSignature([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaSignature lambdaSignatureParam) { }
        public virtual void VisitLineDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILineDirective lineDirectiveParam) { }
        public virtual void VisitLineIndicator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILineIndicator lineIndicatorParam) { }
        public virtual void VisitLocalConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILocalConstantDeclaration localConstantDeclarationParam) { }
        public virtual void VisitLocalVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration localVariableDeclarationParam) { }
        public virtual void VisitLockStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILockStatement lockStatementParam) { }
        public virtual void VisitMemberInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer memberInitializerParam) { }
        public virtual void VisitMemberOwnerBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerBody memberOwnerBodyParam) { }
        public virtual void VisitMemberOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerDeclaration memberOwnerDeclarationParam) { }
        public virtual void VisitMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration methodDeclarationParam) { }
        public virtual void VisitModifiersList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList modifiersListParam) { }
        public virtual void VisitMultipleConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleConstantDeclaration multipleConstantDeclarationParam) { }
        public virtual void VisitMultipleDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration multipleDeclarationParam) { }
        public virtual void VisitMultipleDeclarationMember([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember multipleDeclarationMemberParam) { }
        public virtual void VisitMultipleEventDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleEventDeclaration multipleEventDeclarationParam) { }
        public virtual void VisitMultipleFieldDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleFieldDeclaration multipleFieldDeclarationParam) { }
        public virtual void VisitMultipleLocalConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalConstantDeclaration multipleLocalConstantDeclarationParam) { }
        public virtual void VisitMultipleLocalVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration multipleLocalVariableDeclarationParam) { }
        public virtual void VisitMultiplicativeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultiplicativeExpression multiplicativeExpressionParam) { }
        public virtual void VisitNamespaceBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.INamespaceBody namespaceBodyParam) { }
        public virtual void VisitNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public virtual void VisitNullableTypeMark([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark nullableTypeMarkParam) { }
        public virtual void VisitNullCoalescingExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.INullCoalescingExpression nullCoalescingExpressionParam) { }
        public virtual void VisitObjectCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IObjectCreationExpression objectCreationExpressionParam) { }
        public virtual void VisitObjectInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IObjectInitializer objectInitializerParam) { }
        public virtual void VisitOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration operatorDeclarationParam) { }
        public virtual void VisitOperatorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression operatorExpressionParam) { }
        public virtual void VisitOwnerQualification([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification ownerQualificationParam) { }
        public virtual void VisitParenthesizedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IParenthesizedExpression parenthesizedExpressionParam) { }
        public virtual void VisitPostfixOperatorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPostfixOperatorExpression postfixOperatorExpressionParam) { }
        public virtual void VisitPragmaDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPragmaDirective pragmaDirectiveParam) { }
        public virtual void VisitPredefinedDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedDeclaredTypeUsage predefinedDeclaredTypeUsageParam) { }
        public virtual void VisitPredefinedTypeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeExpression predefinedTypeExpressionParam) { }
        public virtual void VisitPredefinedTypeReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference predefinedTypeReferenceParam) { }
        public virtual void VisitPredefinedTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeUsage predefinedTypeUsageParam) { }
        public virtual void VisitPrefixOperatorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPrefixOperatorExpression prefixOperatorExpressionParam) { }
        public virtual void VisitPreprocessor([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor preprocessorParam) { }
        public virtual void VisitPreprocessorAndExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorAndExpression preprocessorAndExpressionParam) { }
        public virtual void VisitPreprocessorConditionalSymbol([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorConditionalSymbol preprocessorConditionalSymbolParam) { }
        public virtual void VisitPreprocessorConstant([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorConstant preprocessorConstantParam) { }
        public virtual void VisitPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective preprocessorDirectiveParam) { }
        public virtual void VisitPreprocessorEqualityExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorEqualityExpression preprocessorEqualityExpressionParam) { }
        public virtual void VisitPreprocessorErrorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorErrorDirective preprocessorErrorDirectiveParam) { }
        public virtual void VisitPreprocessorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression preprocessorExpressionParam) { }
        public virtual void VisitPreprocessorNegation([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorNegation preprocessorNegationParam) { }
        public virtual void VisitPreprocessorOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorOrExpression preprocessorOrExpressionParam) { }
        public virtual void VisitPreprocessorParenthesizedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorParenthesizedExpression preprocessorParenthesizedExpressionParam) { }
        public virtual void VisitPreprocessorPragmaBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorPragmaBody preprocessorPragmaBodyParam) { }
        public virtual void VisitPreprocessorUnaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorUnaryExpression preprocessorUnaryExpressionParam) { }
        public virtual void VisitPrimaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression primaryExpressionParam) { }
        public virtual void VisitPropertyAssignment([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyAssignment propertyAssignmentParam) { }
        public virtual void VisitPropertyDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration propertyDeclarationParam) { }
        public virtual void VisitQueryClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause queryClauseParam) { }
        public virtual void VisitQueryClausesHolder([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClausesHolder queryClausesHolderParam) { }
        public virtual void VisitQueryContinuation([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryContinuation queryContinuationParam) { }
        public virtual void VisitQueryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryExpression queryExpressionParam) { }
        public virtual void VisitQueryFirstFrom([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFirstFrom queryFirstFromParam) { }
        public virtual void VisitQueryFromClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFromClause queryFromClauseParam) { }
        public virtual void VisitQueryGroupClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryGroupClause queryGroupClauseParam) { }
        public virtual void VisitQueryJoinClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryJoinClause queryJoinClauseParam) { }
        public virtual void VisitQueryLetClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryLetClause queryLetClauseParam) { }
        public virtual void VisitQueryOrderByClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryOrderByClause queryOrderByClauseParam) { }
        public virtual void VisitQueryOrdering([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryOrdering queryOrderingParam) { }
        public virtual void VisitQueryParameterPlatform([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform queryParameterPlatformParam) { }
        public virtual void VisitQueryRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration queryRangeVariableDeclarationParam) { }
        public virtual void VisitQuerySelectClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQuerySelectClause querySelectClauseParam) { }
        public virtual void VisitQueryWhereClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryWhereClause queryWhereClauseParam) { }
        public virtual void VisitRankSpecifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier rankSpecifierParam) { }
        public virtual void VisitReferenceConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceConstraint referenceConstraintParam) { }
        public virtual void VisitReferenceExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression referenceExpressionParam) { }
        public virtual void VisitReferenceName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName referenceNameParam) { }
        public virtual void VisitRegularParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IRegularParameterDeclaration regularParameterDeclarationParam) { }
        public virtual void VisitRelationalExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IRelationalExpression relationalExpressionParam) { }
        public virtual void VisitResourceAcquisitionExpressionsList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IResourceAcquisitionExpressionsList resourceAcquisitionExpressionsListParam) { }
        public virtual void VisitReturnStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReturnStatement returnStatementParam) { }
        public virtual void VisitShiftExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IShiftExpression shiftExpressionParam) { }
        public virtual void VisitSignOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ISignOperatorDeclaration signOperatorDeclarationParam) { }
        public virtual void VisitSpecificCatchClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ISpecificCatchClause specificCatchClauseParam) { }
        public virtual void VisitStartRegion([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IStartRegion startRegionParam) { }
        public virtual void VisitStructDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration structDeclarationParam) { }
        public virtual void VisitSwitchLabelStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ISwitchLabelStatement switchLabelStatementParam) { }
        public virtual void VisitSwitchStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ISwitchStatement switchStatementParam) { }
        public virtual void VisitThisExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IThisExpression thisExpressionParam) { }
        public virtual void VisitThrowStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IThrowStatement throwStatementParam) { }
        public virtual void VisitTryStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITryStatement tryStatementParam) { }
        public virtual void VisitTypeArgumentList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList typeArgumentListParam) { }
        public virtual void VisitTypeConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeConstraint typeConstraintParam) { }
        public virtual void VisitTypeofExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeofExpression typeofExpressionParam) { }
        public virtual void VisitTypeParameterConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint typeParameterConstraintParam) { }
        public virtual void VisitTypeParameterConstraintsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause typeParameterConstraintsClauseParam) { }
        public virtual void VisitTypeParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterDeclaration typeParameterDeclarationParam) { }
        public virtual void VisitTypeParameterOfMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration typeParameterOfMethodDeclarationParam) { }
        public virtual void VisitTypeParameterOfMethodList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodList typeParameterOfMethodListParam) { }
        public virtual void VisitTypeParameterOfTypeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration typeParameterOfTypeDeclarationParam) { }
        public virtual void VisitTypeParameterOfTypeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList typeParameterOfTypeListParam) { }
        public virtual void VisitTypeParameterReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterReference typeParameterReferenceParam) { }
        public virtual void VisitTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage typeUsageParam) { }
        public virtual void VisitUnaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression unaryExpressionParam) { }
        public virtual void VisitUnaryOperatorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryOperatorExpression unaryOperatorExpressionParam) { }
        public virtual void VisitUncheckedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUncheckedExpression uncheckedExpressionParam) { }
        public virtual void VisitUncheckedStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUncheckedStatement uncheckedStatementParam) { }
        public virtual void VisitUndefDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUndefDirective undefDirectiveParam) { }
        public virtual void VisitUnsafeCodeAddressOfExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeAddressOfExpression unsafeCodeAddressOfExpressionParam) { }
        public virtual void VisitUnsafeCodeFixedPointerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerDeclaration unsafeCodeFixedPointerDeclarationParam) { }
        public virtual void VisitUnsafeCodeFixedPointerInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerInitializer unsafeCodeFixedPointerInitializerParam) { }
        public virtual void VisitUnsafeCodeFixedStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedStatement unsafeCodeFixedStatementParam) { }
        public virtual void VisitUnsafeCodePointer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer unsafeCodePointerParam) { }
        public virtual void VisitUnsafeCodePointerAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointerAccessExpression unsafeCodePointerAccessExpressionParam) { }
        public virtual void VisitUnsafeCodePointerIndirectionExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointerIndirectionExpression unsafeCodePointerIndirectionExpressionParam) { }
        public virtual void VisitUnsafeCodeSizeOfExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeSizeOfExpression unsafeCodeSizeOfExpressionParam) { }
        public virtual void VisitUnsafeCodeStackAllocInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeStackAllocInitializer unsafeCodeStackAllocInitializerParam) { }
        public virtual void VisitUnsafeCodeUnsafeStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeUnsafeStatement unsafeCodeUnsafeStatementParam) { }
        public virtual void VisitUserDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUserDeclaredTypeUsage userDeclaredTypeUsageParam) { }
        public virtual void VisitUserTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUserTypeUsage userTypeUsageParam) { }
        public virtual void VisitUsingAliasDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingAliasDirective usingAliasDirectiveParam) { }
        public virtual void VisitUsingDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective usingDirectiveParam) { }
        public virtual void VisitUsingList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList usingListParam) { }
        public virtual void VisitUsingNamespaceDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingNamespaceDirective usingNamespaceDirectiveParam) { }
        public virtual void VisitUsingStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingStatement usingStatementParam) { }
        public virtual void VisitValueConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IValueConstraint valueConstraintParam) { }
        public virtual void VisitVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration variableDeclarationParam) { }
        public virtual void VisitVariableInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer variableInitializerParam) { }
        public virtual void VisitWarningAction([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IWarningAction warningActionParam) { }
        public virtual void VisitWarningDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IWarningDirective warningDirectiveParam) { }
        public virtual void VisitWarningList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IWarningList warningListParam) { }
        public virtual void VisitWhileStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IWhileStatement whileStatementParam) { }
        public virtual void VisitYieldStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IYieldStatement yieldStatementParam) { }
    }
    public abstract class TreeNodeVisitor<TContext>
    
    {
        public virtual void Visit__ArglistExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.I__ArglistExpression @__ArglistExpressionParam, TContext context) { }
        public virtual void VisitAccessorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration accessorDeclarationParam, TContext context) { }
        public virtual void VisitAccessorOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration accessorOwnerDeclarationParam, TContext context) { }
        public virtual void VisitAdditiveExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAdditiveExpression additiveExpressionParam, TContext context) { }
        public virtual void VisitAnonymousMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration anonymousMemberDeclarationParam, TContext context) { }
        public virtual void VisitAnonymousMethodExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodExpression anonymousMethodExpressionParam, TContext context) { }
        public virtual void VisitAnonymousMethodParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration anonymousMethodParameterDeclarationParam, TContext context) { }
        public virtual void VisitAnonymousMethodSignature([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodSignature anonymousMethodSignatureParam, TContext context) { }
        public virtual void VisitAnonymousObjectCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousObjectCreationExpression anonymousObjectCreationExpressionParam, TContext context) { }
        public virtual void VisitAnonymousObjectInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousObjectInitializer anonymousObjectInitializerParam, TContext context) { }
        public virtual void VisitArglistParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArglistParameterDeclaration arglistParameterDeclarationParam, TContext context) { }
        public virtual void VisitArgumentList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList argumentListParam, TContext context) { }
        public virtual void VisitArrayCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression arrayCreationExpressionParam, TContext context) { }
        public virtual void VisitArrayInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArrayInitializer arrayInitializerParam, TContext context) { }
        public virtual void VisitAsExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAsExpression asExpressionParam, TContext context) { }
        public virtual void VisitAssignmentExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAssignmentExpression assignmentExpressionParam, TContext context) { }
        public virtual void VisitAttribute([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute attributeParam, TContext context) { }
        public virtual void VisitAttributeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeList attributeListParam, TContext context) { }
        public virtual void VisitAttributeSection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSection attributeSectionParam, TContext context) { }
        public virtual void VisitAttributeSectionList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList attributeSectionListParam, TContext context) { }
        public virtual void VisitAttributesOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration attributesOwnerDeclarationParam, TContext context) { }
        public virtual void VisitAwaitExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAwaitExpression awaitExpressionParam, TContext context) { }
        public virtual void VisitBaseExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBaseExpression baseExpressionParam, TContext context) { }
        public virtual void VisitBinaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression binaryExpressionParam, TContext context) { }
        public virtual void VisitBitwiseAndExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseAndExpression bitwiseAndExpressionParam, TContext context) { }
        public virtual void VisitBitwiseExclusiveOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseExclusiveOrExpression bitwiseExclusiveOrExpressionParam, TContext context) { }
        public virtual void VisitBitwiseInclusiveOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseInclusiveOrExpression bitwiseInclusiveOrExpressionParam, TContext context) { }
        public virtual void VisitBlock([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBlock blockParam, TContext context) { }
        public virtual void VisitBreakStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBreakStatement breakStatementParam, TContext context) { }
        public virtual void VisitCastExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICastExpression castExpressionParam, TContext context) { }
        public virtual void VisitCatchClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause catchClauseParam, TContext context) { }
        public virtual void VisitCatchVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICatchVariableDeclaration catchVariableDeclarationParam, TContext context) { }
        public virtual void VisitCheckedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICheckedExpression checkedExpressionParam, TContext context) { }
        public virtual void VisitCheckedStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICheckedStatement checkedStatementParam, TContext context) { }
        public virtual void VisitClassBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody classBodyParam, TContext context) { }
        public virtual void VisitClassDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration classDeclarationParam, TContext context) { }
        public virtual void VisitClassLikeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassLikeDeclaration classLikeDeclarationParam, TContext context) { }
        public virtual void VisitClassMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration classMemberDeclarationParam, TContext context) { }
        public virtual void VisitCollectionElementInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer collectionElementInitializerParam, TContext context) { }
        public virtual void VisitCollectionInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionInitializer collectionInitializerParam, TContext context) { }
        public virtual void VisitConditionalAndExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalAndExpression conditionalAndExpressionParam, TContext context) { }
        public virtual void VisitConditionalOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalOrExpression conditionalOrExpressionParam, TContext context) { }
        public virtual void VisitConditionalTernaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalTernaryExpression conditionalTernaryExpressionParam, TContext context) { }
        public virtual void VisitConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration constantDeclarationParam, TContext context) { }
        public virtual void VisitConstructorConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorConstraint constructorConstraintParam, TContext context) { }
        public virtual void VisitConstructorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration constructorDeclarationParam, TContext context) { }
        public virtual void VisitConstructorInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer constructorInitializerParam, TContext context) { }
        public virtual void VisitContinueStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IContinueStatement continueStatementParam, TContext context) { }
        public virtual void VisitConversionOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConversionOperatorDeclaration conversionOperatorDeclarationParam, TContext context) { }
        public virtual void VisitCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpression creationExpressionParam, TContext context) { }
        public virtual void VisitCreationExpressionInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer creationExpressionInitializerParam, TContext context) { }
        public virtual void VisitCSharpArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument cSharpArgumentParam, TContext context) { }
        public virtual void VisitCSharpArgumentsOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner cSharpArgumentsOwnerParam, TContext context) { }
        public virtual void VisitCSharpDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration cSharpDeclarationParam, TContext context) { }
        public virtual void VisitCSharpExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression cSharpExpressionParam, TContext context) { }
        public virtual void VisitCSharpFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile cSharpFileParam, TContext context) { }
        public virtual void VisitCSharpFunctionDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration cSharpFunctionDeclarationParam, TContext context) { }
        public virtual void VisitCSharpLiteralExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpLiteralExpression cSharpLiteralExpressionParam, TContext context) { }
        public virtual void VisitCSharpModifiersOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration cSharpModifiersOwnerDeclarationParam, TContext context) { }
        public virtual void VisitCSharpNamespaceDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration cSharpNamespaceDeclarationParam, TContext context) { }
        public virtual void VisitCSharpParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration cSharpParameterDeclarationParam, TContext context) { }
        public virtual void VisitCSharpParametersOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParametersOwnerDeclaration cSharpParametersOwnerDeclarationParam, TContext context) { }
        public virtual void VisitCSharpStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement cSharpStatementParam, TContext context) { }
        public virtual void VisitCSharpTypeAndNamespaceHolderDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration cSharpTypeAndNamespaceHolderDeclarationParam, TContext context) { }
        public virtual void VisitCSharpTypeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration cSharpTypeDeclarationParam, TContext context) { }
        public virtual void VisitCSharpTypeMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration cSharpTypeMemberDeclarationParam, TContext context) { }
        public virtual void VisitDeclarationStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDeclarationStatement declarationStatementParam, TContext context) { }
        public virtual void VisitDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage declaredTypeUsageParam, TContext context) { }
        public virtual void VisitDefaultExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDefaultExpression defaultExpressionParam, TContext context) { }
        public virtual void VisitDefineDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDefineDirective defineDirectiveParam, TContext context) { }
        public virtual void VisitDelegateDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration delegateDeclarationParam, TContext context) { }
        public virtual void VisitDestructorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration destructorDeclarationParam, TContext context) { }
        public virtual void VisitDocCommentBlockNode(JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode xmlDoc, TContext context) { }
        public virtual void VisitDocCRefElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement docCRefElementParam, TContext context) { }
        public virtual void VisitDocCRefExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefExpression docCRefExpressionParam, TContext context) { }
        public virtual void VisitDocCRefParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameter docCRefParameterParam, TContext context) { }
        public virtual void VisitDocCRefParameterType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType docCRefParameterTypeParam, TContext context) { }
        public virtual void VisitDocCRefParameterTypeName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName docCRefParameterTypeNameParam, TContext context) { }
        public virtual void VisitDocCRefSignature([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefSignature docCRefSignatureParam, TContext context) { }
        public virtual void VisitDocCRefTypeParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameter docCRefTypeParameterParam, TContext context) { }
        public virtual void VisitDocCRefTypeParameterList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameterList docCRefTypeParameterListParam, TContext context) { }
        public virtual void VisitDoStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDoStatement doStatementParam, TContext context) { }
        public virtual void VisitDynamicDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDynamicDeclaredTypeUsage dynamicDeclaredTypeUsageParam, TContext context) { }
        public virtual void VisitDynamicTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDynamicTypeUsage dynamicTypeUsageParam, TContext context) { }
        public virtual void VisitElementAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IElementAccessExpression elementAccessExpressionParam, TContext context) { }
        public virtual void VisitElifDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IElifDirective elifDirectiveParam, TContext context) { }
        public virtual void VisitElseDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IElseDirective elseDirectiveParam, TContext context) { }
        public virtual void VisitEmptyStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEmptyStatement emptyStatementParam, TContext context) { }
        public virtual void VisitEndifDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEndifDirective endifDirectiveParam, TContext context) { }
        public virtual void VisitEndRegion([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEndRegion endRegionParam, TContext context) { }
        public virtual void VisitEnumBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEnumBase enumBaseParam, TContext context) { }
        public virtual void VisitEnumBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEnumBody enumBodyParam, TContext context) { }
        public virtual void VisitEnumDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration enumDeclarationParam, TContext context) { }
        public virtual void VisitEnumMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration enumMemberDeclarationParam, TContext context) { }
        public virtual void VisitEqualityExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEqualityExpression equalityExpressionParam, TContext context) { }
        public virtual void VisitErrorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IErrorDirective errorDirectiveParam, TContext context) { }
        public virtual void VisitEventDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration eventDeclarationParam, TContext context) { }
        public virtual void VisitExpressionInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IExpressionInitializer expressionInitializerParam, TContext context) { }
        public virtual void VisitExpressionStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IExpressionStatement expressionStatementParam, TContext context) { }
        public virtual void VisitExtendsList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList extendsListParam, TContext context) { }
        public virtual void VisitExternAliasDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective externAliasDirectiveParam, TContext context) { }
        public virtual void VisitFieldDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration fieldDeclarationParam, TContext context) { }
        public virtual void VisitForeachHeader([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForeachHeader foreachHeaderParam, TContext context) { }
        public virtual void VisitForeachStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForeachStatement foreachStatementParam, TContext context) { }
        public virtual void VisitForeachVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration foreachVariableDeclarationParam, TContext context) { }
        public virtual void VisitForInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForInitializer forInitializerParam, TContext context) { }
        public virtual void VisitForIterator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForIterator forIteratorParam, TContext context) { }
        public virtual void VisitFormalParameterList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList formalParameterListParam, TContext context) { }
        public virtual void VisitForStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForStatement forStatementParam, TContext context) { }
        public virtual void VisitGeneralCatchClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IGeneralCatchClause generalCatchClauseParam, TContext context) { }
        public virtual void VisitGotoCaseStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IGotoCaseStatement gotoCaseStatementParam, TContext context) { }
        public virtual void VisitGotoStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IGotoStatement gotoStatementParam, TContext context) { }
        public virtual void VisitIfDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IIfDirective ifDirectiveParam, TContext context) { }
        public virtual void VisitIfStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IIfStatement ifStatementParam, TContext context) { }
        public virtual void VisitIndexerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration indexerDeclarationParam, TContext context) { }
        public virtual void VisitInitializerElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement initializerElementParam, TContext context) { }
        public virtual void VisitInterfaceDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration interfaceDeclarationParam, TContext context) { }
        public virtual void VisitInterfaceQualificationOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner interfaceQualificationOwnerParam, TContext context) { }
        public virtual void VisitInvocationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IInvocationExpression invocationExpressionParam, TContext context) { }
        public virtual void VisitIsExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IIsExpression isExpressionParam, TContext context) { }
        public virtual void VisitLabelDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILabelDeclaration labelDeclarationParam, TContext context) { }
        public virtual void VisitLabelReferenceElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILabelReferenceElement labelReferenceElementParam, TContext context) { }
        public virtual void VisitLabelStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILabelStatement labelStatementParam, TContext context) { }
        public virtual void VisitLambdaExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaExpression lambdaExpressionParam, TContext context) { }
        public virtual void VisitLambdaParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration lambdaParameterDeclarationParam, TContext context) { }
        public virtual void VisitLambdaSignature([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaSignature lambdaSignatureParam, TContext context) { }
        public virtual void VisitLineDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILineDirective lineDirectiveParam, TContext context) { }
        public virtual void VisitLineIndicator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILineIndicator lineIndicatorParam, TContext context) { }
        public virtual void VisitLocalConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILocalConstantDeclaration localConstantDeclarationParam, TContext context) { }
        public virtual void VisitLocalVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration localVariableDeclarationParam, TContext context) { }
        public virtual void VisitLockStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILockStatement lockStatementParam, TContext context) { }
        public virtual void VisitMemberInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer memberInitializerParam, TContext context) { }
        public virtual void VisitMemberOwnerBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerBody memberOwnerBodyParam, TContext context) { }
        public virtual void VisitMemberOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerDeclaration memberOwnerDeclarationParam, TContext context) { }
        public virtual void VisitMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration methodDeclarationParam, TContext context) { }
        public virtual void VisitModifiersList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList modifiersListParam, TContext context) { }
        public virtual void VisitMultipleConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleConstantDeclaration multipleConstantDeclarationParam, TContext context) { }
        public virtual void VisitMultipleDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration multipleDeclarationParam, TContext context) { }
        public virtual void VisitMultipleDeclarationMember([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember multipleDeclarationMemberParam, TContext context) { }
        public virtual void VisitMultipleEventDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleEventDeclaration multipleEventDeclarationParam, TContext context) { }
        public virtual void VisitMultipleFieldDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleFieldDeclaration multipleFieldDeclarationParam, TContext context) { }
        public virtual void VisitMultipleLocalConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalConstantDeclaration multipleLocalConstantDeclarationParam, TContext context) { }
        public virtual void VisitMultipleLocalVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration multipleLocalVariableDeclarationParam, TContext context) { }
        public virtual void VisitMultiplicativeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultiplicativeExpression multiplicativeExpressionParam, TContext context) { }
        public virtual void VisitNamespaceBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.INamespaceBody namespaceBodyParam, TContext context) { }
        public virtual void VisitNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node, TContext context) { }
        public virtual void VisitNullableTypeMark([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark nullableTypeMarkParam, TContext context) { }
        public virtual void VisitNullCoalescingExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.INullCoalescingExpression nullCoalescingExpressionParam, TContext context) { }
        public virtual void VisitObjectCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IObjectCreationExpression objectCreationExpressionParam, TContext context) { }
        public virtual void VisitObjectInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IObjectInitializer objectInitializerParam, TContext context) { }
        public virtual void VisitOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration operatorDeclarationParam, TContext context) { }
        public virtual void VisitOperatorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression operatorExpressionParam, TContext context) { }
        public virtual void VisitOwnerQualification([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification ownerQualificationParam, TContext context) { }
        public virtual void VisitParenthesizedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IParenthesizedExpression parenthesizedExpressionParam, TContext context) { }
        public virtual void VisitPostfixOperatorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPostfixOperatorExpression postfixOperatorExpressionParam, TContext context) { }
        public virtual void VisitPragmaDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPragmaDirective pragmaDirectiveParam, TContext context) { }
        public virtual void VisitPredefinedDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedDeclaredTypeUsage predefinedDeclaredTypeUsageParam, TContext context) { }
        public virtual void VisitPredefinedTypeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeExpression predefinedTypeExpressionParam, TContext context) { }
        public virtual void VisitPredefinedTypeReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference predefinedTypeReferenceParam, TContext context) { }
        public virtual void VisitPredefinedTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeUsage predefinedTypeUsageParam, TContext context) { }
        public virtual void VisitPrefixOperatorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPrefixOperatorExpression prefixOperatorExpressionParam, TContext context) { }
        public virtual void VisitPreprocessor([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor preprocessorParam, TContext context) { }
        public virtual void VisitPreprocessorAndExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorAndExpression preprocessorAndExpressionParam, TContext context) { }
        public virtual void VisitPreprocessorConditionalSymbol([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorConditionalSymbol preprocessorConditionalSymbolParam, TContext context) { }
        public virtual void VisitPreprocessorConstant([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorConstant preprocessorConstantParam, TContext context) { }
        public virtual void VisitPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective preprocessorDirectiveParam, TContext context) { }
        public virtual void VisitPreprocessorEqualityExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorEqualityExpression preprocessorEqualityExpressionParam, TContext context) { }
        public virtual void VisitPreprocessorErrorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorErrorDirective preprocessorErrorDirectiveParam, TContext context) { }
        public virtual void VisitPreprocessorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression preprocessorExpressionParam, TContext context) { }
        public virtual void VisitPreprocessorNegation([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorNegation preprocessorNegationParam, TContext context) { }
        public virtual void VisitPreprocessorOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorOrExpression preprocessorOrExpressionParam, TContext context) { }
        public virtual void VisitPreprocessorParenthesizedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorParenthesizedExpression preprocessorParenthesizedExpressionParam, TContext context) { }
        public virtual void VisitPreprocessorPragmaBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorPragmaBody preprocessorPragmaBodyParam, TContext context) { }
        public virtual void VisitPreprocessorUnaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorUnaryExpression preprocessorUnaryExpressionParam, TContext context) { }
        public virtual void VisitPrimaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression primaryExpressionParam, TContext context) { }
        public virtual void VisitPropertyAssignment([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyAssignment propertyAssignmentParam, TContext context) { }
        public virtual void VisitPropertyDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration propertyDeclarationParam, TContext context) { }
        public virtual void VisitQueryClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause queryClauseParam, TContext context) { }
        public virtual void VisitQueryClausesHolder([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClausesHolder queryClausesHolderParam, TContext context) { }
        public virtual void VisitQueryContinuation([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryContinuation queryContinuationParam, TContext context) { }
        public virtual void VisitQueryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryExpression queryExpressionParam, TContext context) { }
        public virtual void VisitQueryFirstFrom([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFirstFrom queryFirstFromParam, TContext context) { }
        public virtual void VisitQueryFromClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFromClause queryFromClauseParam, TContext context) { }
        public virtual void VisitQueryGroupClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryGroupClause queryGroupClauseParam, TContext context) { }
        public virtual void VisitQueryJoinClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryJoinClause queryJoinClauseParam, TContext context) { }
        public virtual void VisitQueryLetClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryLetClause queryLetClauseParam, TContext context) { }
        public virtual void VisitQueryOrderByClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryOrderByClause queryOrderByClauseParam, TContext context) { }
        public virtual void VisitQueryOrdering([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryOrdering queryOrderingParam, TContext context) { }
        public virtual void VisitQueryParameterPlatform([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform queryParameterPlatformParam, TContext context) { }
        public virtual void VisitQueryRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration queryRangeVariableDeclarationParam, TContext context) { }
        public virtual void VisitQuerySelectClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQuerySelectClause querySelectClauseParam, TContext context) { }
        public virtual void VisitQueryWhereClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryWhereClause queryWhereClauseParam, TContext context) { }
        public virtual void VisitRankSpecifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier rankSpecifierParam, TContext context) { }
        public virtual void VisitReferenceConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceConstraint referenceConstraintParam, TContext context) { }
        public virtual void VisitReferenceExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression referenceExpressionParam, TContext context) { }
        public virtual void VisitReferenceName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName referenceNameParam, TContext context) { }
        public virtual void VisitRegularParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IRegularParameterDeclaration regularParameterDeclarationParam, TContext context) { }
        public virtual void VisitRelationalExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IRelationalExpression relationalExpressionParam, TContext context) { }
        public virtual void VisitResourceAcquisitionExpressionsList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IResourceAcquisitionExpressionsList resourceAcquisitionExpressionsListParam, TContext context) { }
        public virtual void VisitReturnStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReturnStatement returnStatementParam, TContext context) { }
        public virtual void VisitShiftExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IShiftExpression shiftExpressionParam, TContext context) { }
        public virtual void VisitSignOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ISignOperatorDeclaration signOperatorDeclarationParam, TContext context) { }
        public virtual void VisitSpecificCatchClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ISpecificCatchClause specificCatchClauseParam, TContext context) { }
        public virtual void VisitStartRegion([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IStartRegion startRegionParam, TContext context) { }
        public virtual void VisitStructDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration structDeclarationParam, TContext context) { }
        public virtual void VisitSwitchLabelStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ISwitchLabelStatement switchLabelStatementParam, TContext context) { }
        public virtual void VisitSwitchStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ISwitchStatement switchStatementParam, TContext context) { }
        public virtual void VisitThisExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IThisExpression thisExpressionParam, TContext context) { }
        public virtual void VisitThrowStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IThrowStatement throwStatementParam, TContext context) { }
        public virtual void VisitTryStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITryStatement tryStatementParam, TContext context) { }
        public virtual void VisitTypeArgumentList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList typeArgumentListParam, TContext context) { }
        public virtual void VisitTypeConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeConstraint typeConstraintParam, TContext context) { }
        public virtual void VisitTypeofExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeofExpression typeofExpressionParam, TContext context) { }
        public virtual void VisitTypeParameterConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint typeParameterConstraintParam, TContext context) { }
        public virtual void VisitTypeParameterConstraintsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause typeParameterConstraintsClauseParam, TContext context) { }
        public virtual void VisitTypeParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterDeclaration typeParameterDeclarationParam, TContext context) { }
        public virtual void VisitTypeParameterOfMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration typeParameterOfMethodDeclarationParam, TContext context) { }
        public virtual void VisitTypeParameterOfMethodList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodList typeParameterOfMethodListParam, TContext context) { }
        public virtual void VisitTypeParameterOfTypeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration typeParameterOfTypeDeclarationParam, TContext context) { }
        public virtual void VisitTypeParameterOfTypeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList typeParameterOfTypeListParam, TContext context) { }
        public virtual void VisitTypeParameterReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterReference typeParameterReferenceParam, TContext context) { }
        public virtual void VisitTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage typeUsageParam, TContext context) { }
        public virtual void VisitUnaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression unaryExpressionParam, TContext context) { }
        public virtual void VisitUnaryOperatorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryOperatorExpression unaryOperatorExpressionParam, TContext context) { }
        public virtual void VisitUncheckedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUncheckedExpression uncheckedExpressionParam, TContext context) { }
        public virtual void VisitUncheckedStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUncheckedStatement uncheckedStatementParam, TContext context) { }
        public virtual void VisitUndefDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUndefDirective undefDirectiveParam, TContext context) { }
        public virtual void VisitUnsafeCodeAddressOfExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeAddressOfExpression unsafeCodeAddressOfExpressionParam, TContext context) { }
        public virtual void VisitUnsafeCodeFixedPointerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerDeclaration unsafeCodeFixedPointerDeclarationParam, TContext context) { }
        public virtual void VisitUnsafeCodeFixedPointerInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerInitializer unsafeCodeFixedPointerInitializerParam, TContext context) { }
        public virtual void VisitUnsafeCodeFixedStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedStatement unsafeCodeFixedStatementParam, TContext context) { }
        public virtual void VisitUnsafeCodePointer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer unsafeCodePointerParam, TContext context) { }
        public virtual void VisitUnsafeCodePointerAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointerAccessExpression unsafeCodePointerAccessExpressionParam, TContext context) { }
        public virtual void VisitUnsafeCodePointerIndirectionExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointerIndirectionExpression unsafeCodePointerIndirectionExpressionParam, TContext context) { }
        public virtual void VisitUnsafeCodeSizeOfExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeSizeOfExpression unsafeCodeSizeOfExpressionParam, TContext context) { }
        public virtual void VisitUnsafeCodeStackAllocInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeStackAllocInitializer unsafeCodeStackAllocInitializerParam, TContext context) { }
        public virtual void VisitUnsafeCodeUnsafeStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeUnsafeStatement unsafeCodeUnsafeStatementParam, TContext context) { }
        public virtual void VisitUserDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUserDeclaredTypeUsage userDeclaredTypeUsageParam, TContext context) { }
        public virtual void VisitUserTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUserTypeUsage userTypeUsageParam, TContext context) { }
        public virtual void VisitUsingAliasDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingAliasDirective usingAliasDirectiveParam, TContext context) { }
        public virtual void VisitUsingDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective usingDirectiveParam, TContext context) { }
        public virtual void VisitUsingList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList usingListParam, TContext context) { }
        public virtual void VisitUsingNamespaceDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingNamespaceDirective usingNamespaceDirectiveParam, TContext context) { }
        public virtual void VisitUsingStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingStatement usingStatementParam, TContext context) { }
        public virtual void VisitValueConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IValueConstraint valueConstraintParam, TContext context) { }
        public virtual void VisitVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration variableDeclarationParam, TContext context) { }
        public virtual void VisitVariableInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer variableInitializerParam, TContext context) { }
        public virtual void VisitWarningAction([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IWarningAction warningActionParam, TContext context) { }
        public virtual void VisitWarningDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IWarningDirective warningDirectiveParam, TContext context) { }
        public virtual void VisitWarningList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IWarningList warningListParam, TContext context) { }
        public virtual void VisitWhileStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IWhileStatement whileStatementParam, TContext context) { }
        public virtual void VisitYieldStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IYieldStatement yieldStatementParam, TContext context) { }
    }
    public abstract class TreeNodeVisitor<TContext, TReturn>
    
    
    {
        public virtual TReturn Visit__ArglistExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.I__ArglistExpression @__ArglistExpressionParam, TContext context) { }
        public virtual TReturn VisitAccessorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorDeclaration accessorDeclarationParam, TContext context) { }
        public virtual TReturn VisitAccessorOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAccessorOwnerDeclaration accessorOwnerDeclarationParam, TContext context) { }
        public virtual TReturn VisitAdditiveExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAdditiveExpression additiveExpressionParam, TContext context) { }
        public virtual TReturn VisitAnonymousMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMemberDeclaration anonymousMemberDeclarationParam, TContext context) { }
        public virtual TReturn VisitAnonymousMethodExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodExpression anonymousMethodExpressionParam, TContext context) { }
        public virtual TReturn VisitAnonymousMethodParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodParameterDeclaration anonymousMethodParameterDeclarationParam, TContext context) { }
        public virtual TReturn VisitAnonymousMethodSignature([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousMethodSignature anonymousMethodSignatureParam, TContext context) { }
        public virtual TReturn VisitAnonymousObjectCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousObjectCreationExpression anonymousObjectCreationExpressionParam, TContext context) { }
        public virtual TReturn VisitAnonymousObjectInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAnonymousObjectInitializer anonymousObjectInitializerParam, TContext context) { }
        public virtual TReturn VisitArglistParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArglistParameterDeclaration arglistParameterDeclarationParam, TContext context) { }
        public virtual TReturn VisitArgumentList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArgumentList argumentListParam, TContext context) { }
        public virtual TReturn VisitArrayCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression arrayCreationExpressionParam, TContext context) { }
        public virtual TReturn VisitArrayInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArrayInitializer arrayInitializerParam, TContext context) { }
        public virtual TReturn VisitAsExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAsExpression asExpressionParam, TContext context) { }
        public virtual TReturn VisitAssignmentExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAssignmentExpression assignmentExpressionParam, TContext context) { }
        public virtual TReturn VisitAttribute([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute attributeParam, TContext context) { }
        public virtual TReturn VisitAttributeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeList attributeListParam, TContext context) { }
        public virtual TReturn VisitAttributeSection([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSection attributeSectionParam, TContext context) { }
        public virtual TReturn VisitAttributeSectionList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttributeSectionList attributeSectionListParam, TContext context) { }
        public virtual TReturn VisitAttributesOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAttributesOwnerDeclaration attributesOwnerDeclarationParam, TContext context) { }
        public virtual TReturn VisitAwaitExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IAwaitExpression awaitExpressionParam, TContext context) { }
        public virtual TReturn VisitBaseExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBaseExpression baseExpressionParam, TContext context) { }
        public virtual TReturn VisitBinaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBinaryExpression binaryExpressionParam, TContext context) { }
        public virtual TReturn VisitBitwiseAndExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseAndExpression bitwiseAndExpressionParam, TContext context) { }
        public virtual TReturn VisitBitwiseExclusiveOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseExclusiveOrExpression bitwiseExclusiveOrExpressionParam, TContext context) { }
        public virtual TReturn VisitBitwiseInclusiveOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBitwiseInclusiveOrExpression bitwiseInclusiveOrExpressionParam, TContext context) { }
        public virtual TReturn VisitBlock([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBlock blockParam, TContext context) { }
        public virtual TReturn VisitBreakStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IBreakStatement breakStatementParam, TContext context) { }
        public virtual TReturn VisitCastExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICastExpression castExpressionParam, TContext context) { }
        public virtual TReturn VisitCatchClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause catchClauseParam, TContext context) { }
        public virtual TReturn VisitCatchVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICatchVariableDeclaration catchVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitCheckedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICheckedExpression checkedExpressionParam, TContext context) { }
        public virtual TReturn VisitCheckedStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICheckedStatement checkedStatementParam, TContext context) { }
        public virtual TReturn VisitClassBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassBody classBodyParam, TContext context) { }
        public virtual TReturn VisitClassDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassDeclaration classDeclarationParam, TContext context) { }
        public virtual TReturn VisitClassLikeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassLikeDeclaration classLikeDeclarationParam, TContext context) { }
        public virtual TReturn VisitClassMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration classMemberDeclarationParam, TContext context) { }
        public virtual TReturn VisitCollectionElementInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionElementInitializer collectionElementInitializerParam, TContext context) { }
        public virtual TReturn VisitCollectionInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICollectionInitializer collectionInitializerParam, TContext context) { }
        public virtual TReturn VisitConditionalAndExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalAndExpression conditionalAndExpressionParam, TContext context) { }
        public virtual TReturn VisitConditionalOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalOrExpression conditionalOrExpressionParam, TContext context) { }
        public virtual TReturn VisitConditionalTernaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConditionalTernaryExpression conditionalTernaryExpressionParam, TContext context) { }
        public virtual TReturn VisitConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConstantDeclaration constantDeclarationParam, TContext context) { }
        public virtual TReturn VisitConstructorConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorConstraint constructorConstraintParam, TContext context) { }
        public virtual TReturn VisitConstructorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorDeclaration constructorDeclarationParam, TContext context) { }
        public virtual TReturn VisitConstructorInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConstructorInitializer constructorInitializerParam, TContext context) { }
        public virtual TReturn VisitContinueStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IContinueStatement continueStatementParam, TContext context) { }
        public virtual TReturn VisitConversionOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IConversionOperatorDeclaration conversionOperatorDeclarationParam, TContext context) { }
        public virtual TReturn VisitCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpression creationExpressionParam, TContext context) { }
        public virtual TReturn VisitCreationExpressionInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICreationExpressionInitializer creationExpressionInitializerParam, TContext context) { }
        public virtual TReturn VisitCSharpArgument([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument cSharpArgumentParam, TContext context) { }
        public virtual TReturn VisitCSharpArgumentsOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner cSharpArgumentsOwnerParam, TContext context) { }
        public virtual TReturn VisitCSharpDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration cSharpDeclarationParam, TContext context) { }
        public virtual TReturn VisitCSharpExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression cSharpExpressionParam, TContext context) { }
        public virtual TReturn VisitCSharpFile([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFile cSharpFileParam, TContext context) { }
        public virtual TReturn VisitCSharpFunctionDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration cSharpFunctionDeclarationParam, TContext context) { }
        public virtual TReturn VisitCSharpLiteralExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpLiteralExpression cSharpLiteralExpressionParam, TContext context) { }
        public virtual TReturn VisitCSharpModifiersOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpModifiersOwnerDeclaration cSharpModifiersOwnerDeclarationParam, TContext context) { }
        public virtual TReturn VisitCSharpNamespaceDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpNamespaceDeclaration cSharpNamespaceDeclarationParam, TContext context) { }
        public virtual TReturn VisitCSharpParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParameterDeclaration cSharpParameterDeclarationParam, TContext context) { }
        public virtual TReturn VisitCSharpParametersOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpParametersOwnerDeclaration cSharpParametersOwnerDeclarationParam, TContext context) { }
        public virtual TReturn VisitCSharpStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement cSharpStatementParam, TContext context) { }
        public virtual TReturn VisitCSharpTypeAndNamespaceHolderDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeAndNamespaceHolderDeclaration cSharpTypeAndNamespaceHolderDeclarationParam, TContext context) { }
        public virtual TReturn VisitCSharpTypeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeDeclaration cSharpTypeDeclarationParam, TContext context) { }
        public virtual TReturn VisitCSharpTypeMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTypeMemberDeclaration cSharpTypeMemberDeclarationParam, TContext context) { }
        public virtual TReturn VisitDeclarationStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDeclarationStatement declarationStatementParam, TContext context) { }
        public virtual TReturn VisitDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDeclaredTypeUsage declaredTypeUsageParam, TContext context) { }
        public virtual TReturn VisitDefaultExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDefaultExpression defaultExpressionParam, TContext context) { }
        public virtual TReturn VisitDefineDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDefineDirective defineDirectiveParam, TContext context) { }
        public virtual TReturn VisitDelegateDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDelegateDeclaration delegateDeclarationParam, TContext context) { }
        public virtual TReturn VisitDestructorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDestructorDeclaration destructorDeclarationParam, TContext context) { }
        public virtual TReturn VisitDocCommentBlockNode(JetBrains.ReSharper.Psi.Tree.IDocCommentBlockNode xmlDoc, TContext context) { }
        public virtual TReturn VisitDocCRefElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefElement docCRefElementParam, TContext context) { }
        public virtual TReturn VisitDocCRefExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefExpression docCRefExpressionParam, TContext context) { }
        public virtual TReturn VisitDocCRefParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameter docCRefParameterParam, TContext context) { }
        public virtual TReturn VisitDocCRefParameterType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterType docCRefParameterTypeParam, TContext context) { }
        public virtual TReturn VisitDocCRefParameterTypeName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefParameterTypeName docCRefParameterTypeNameParam, TContext context) { }
        public virtual TReturn VisitDocCRefSignature([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefSignature docCRefSignatureParam, TContext context) { }
        public virtual TReturn VisitDocCRefTypeParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameter docCRefTypeParameterParam, TContext context) { }
        public virtual TReturn VisitDocCRefTypeParameterList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDocCRefTypeParameterList docCRefTypeParameterListParam, TContext context) { }
        public virtual TReturn VisitDoStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDoStatement doStatementParam, TContext context) { }
        public virtual TReturn VisitDynamicDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDynamicDeclaredTypeUsage dynamicDeclaredTypeUsageParam, TContext context) { }
        public virtual TReturn VisitDynamicTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IDynamicTypeUsage dynamicTypeUsageParam, TContext context) { }
        public virtual TReturn VisitElementAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IElementAccessExpression elementAccessExpressionParam, TContext context) { }
        public virtual TReturn VisitElifDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IElifDirective elifDirectiveParam, TContext context) { }
        public virtual TReturn VisitElseDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IElseDirective elseDirectiveParam, TContext context) { }
        public virtual TReturn VisitEmptyStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEmptyStatement emptyStatementParam, TContext context) { }
        public virtual TReturn VisitEndifDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEndifDirective endifDirectiveParam, TContext context) { }
        public virtual TReturn VisitEndRegion([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEndRegion endRegionParam, TContext context) { }
        public virtual TReturn VisitEnumBase([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEnumBase enumBaseParam, TContext context) { }
        public virtual TReturn VisitEnumBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEnumBody enumBodyParam, TContext context) { }
        public virtual TReturn VisitEnumDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEnumDeclaration enumDeclarationParam, TContext context) { }
        public virtual TReturn VisitEnumMemberDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEnumMemberDeclaration enumMemberDeclarationParam, TContext context) { }
        public virtual TReturn VisitEqualityExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEqualityExpression equalityExpressionParam, TContext context) { }
        public virtual TReturn VisitErrorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IErrorDirective errorDirectiveParam, TContext context) { }
        public virtual TReturn VisitEventDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IEventDeclaration eventDeclarationParam, TContext context) { }
        public virtual TReturn VisitExpressionInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IExpressionInitializer expressionInitializerParam, TContext context) { }
        public virtual TReturn VisitExpressionStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IExpressionStatement expressionStatementParam, TContext context) { }
        public virtual TReturn VisitExtendsList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IExtendsList extendsListParam, TContext context) { }
        public virtual TReturn VisitExternAliasDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective externAliasDirectiveParam, TContext context) { }
        public virtual TReturn VisitFieldDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IFieldDeclaration fieldDeclarationParam, TContext context) { }
        public virtual TReturn VisitForeachHeader([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForeachHeader foreachHeaderParam, TContext context) { }
        public virtual TReturn VisitForeachStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForeachStatement foreachStatementParam, TContext context) { }
        public virtual TReturn VisitForeachVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForeachVariableDeclaration foreachVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitForInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForInitializer forInitializerParam, TContext context) { }
        public virtual TReturn VisitForIterator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForIterator forIteratorParam, TContext context) { }
        public virtual TReturn VisitFormalParameterList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IFormalParameterList formalParameterListParam, TContext context) { }
        public virtual TReturn VisitForStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IForStatement forStatementParam, TContext context) { }
        public virtual TReturn VisitGeneralCatchClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IGeneralCatchClause generalCatchClauseParam, TContext context) { }
        public virtual TReturn VisitGotoCaseStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IGotoCaseStatement gotoCaseStatementParam, TContext context) { }
        public virtual TReturn VisitGotoStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IGotoStatement gotoStatementParam, TContext context) { }
        public virtual TReturn VisitIfDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IIfDirective ifDirectiveParam, TContext context) { }
        public virtual TReturn VisitIfStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IIfStatement ifStatementParam, TContext context) { }
        public virtual TReturn VisitIndexerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IIndexerDeclaration indexerDeclarationParam, TContext context) { }
        public virtual TReturn VisitInitializerElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IInitializerElement initializerElementParam, TContext context) { }
        public virtual TReturn VisitInterfaceDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceDeclaration interfaceDeclarationParam, TContext context) { }
        public virtual TReturn VisitInterfaceQualificationOwner([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IInterfaceQualificationOwner interfaceQualificationOwnerParam, TContext context) { }
        public virtual TReturn VisitInvocationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IInvocationExpression invocationExpressionParam, TContext context) { }
        public virtual TReturn VisitIsExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IIsExpression isExpressionParam, TContext context) { }
        public virtual TReturn VisitLabelDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILabelDeclaration labelDeclarationParam, TContext context) { }
        public virtual TReturn VisitLabelReferenceElement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILabelReferenceElement labelReferenceElementParam, TContext context) { }
        public virtual TReturn VisitLabelStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILabelStatement labelStatementParam, TContext context) { }
        public virtual TReturn VisitLambdaExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaExpression lambdaExpressionParam, TContext context) { }
        public virtual TReturn VisitLambdaParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaParameterDeclaration lambdaParameterDeclarationParam, TContext context) { }
        public virtual TReturn VisitLambdaSignature([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILambdaSignature lambdaSignatureParam, TContext context) { }
        public virtual TReturn VisitLineDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILineDirective lineDirectiveParam, TContext context) { }
        public virtual TReturn VisitLineIndicator([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILineIndicator lineIndicatorParam, TContext context) { }
        public virtual TReturn VisitLocalConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILocalConstantDeclaration localConstantDeclarationParam, TContext context) { }
        public virtual TReturn VisitLocalVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration localVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitLockStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ILockStatement lockStatementParam, TContext context) { }
        public virtual TReturn VisitMemberInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMemberInitializer memberInitializerParam, TContext context) { }
        public virtual TReturn VisitMemberOwnerBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerBody memberOwnerBodyParam, TContext context) { }
        public virtual TReturn VisitMemberOwnerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMemberOwnerDeclaration memberOwnerDeclarationParam, TContext context) { }
        public virtual TReturn VisitMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration methodDeclarationParam, TContext context) { }
        public virtual TReturn VisitModifiersList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IModifiersList modifiersListParam, TContext context) { }
        public virtual TReturn VisitMultipleConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleConstantDeclaration multipleConstantDeclarationParam, TContext context) { }
        public virtual TReturn VisitMultipleDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclaration multipleDeclarationParam, TContext context) { }
        public virtual TReturn VisitMultipleDeclarationMember([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleDeclarationMember multipleDeclarationMemberParam, TContext context) { }
        public virtual TReturn VisitMultipleEventDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleEventDeclaration multipleEventDeclarationParam, TContext context) { }
        public virtual TReturn VisitMultipleFieldDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleFieldDeclaration multipleFieldDeclarationParam, TContext context) { }
        public virtual TReturn VisitMultipleLocalConstantDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalConstantDeclaration multipleLocalConstantDeclarationParam, TContext context) { }
        public virtual TReturn VisitMultipleLocalVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration multipleLocalVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitMultiplicativeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IMultiplicativeExpression multiplicativeExpressionParam, TContext context) { }
        public virtual TReturn VisitNamespaceBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.INamespaceBody namespaceBodyParam, TContext context) { }
        public virtual TReturn VisitNode([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode node, TContext context) { }
        public virtual TReturn VisitNullableTypeMark([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark nullableTypeMarkParam, TContext context) { }
        public virtual TReturn VisitNullCoalescingExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.INullCoalescingExpression nullCoalescingExpressionParam, TContext context) { }
        public virtual TReturn VisitObjectCreationExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IObjectCreationExpression objectCreationExpressionParam, TContext context) { }
        public virtual TReturn VisitObjectInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IObjectInitializer objectInitializerParam, TContext context) { }
        public virtual TReturn VisitOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorDeclaration operatorDeclarationParam, TContext context) { }
        public virtual TReturn VisitOperatorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression operatorExpressionParam, TContext context) { }
        public virtual TReturn VisitOwnerQualification([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IOwnerQualification ownerQualificationParam, TContext context) { }
        public virtual TReturn VisitParenthesizedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IParenthesizedExpression parenthesizedExpressionParam, TContext context) { }
        public virtual TReturn VisitPostfixOperatorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPostfixOperatorExpression postfixOperatorExpressionParam, TContext context) { }
        public virtual TReturn VisitPragmaDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPragmaDirective pragmaDirectiveParam, TContext context) { }
        public virtual TReturn VisitPredefinedDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedDeclaredTypeUsage predefinedDeclaredTypeUsageParam, TContext context) { }
        public virtual TReturn VisitPredefinedTypeExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeExpression predefinedTypeExpressionParam, TContext context) { }
        public virtual TReturn VisitPredefinedTypeReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeReference predefinedTypeReferenceParam, TContext context) { }
        public virtual TReturn VisitPredefinedTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPredefinedTypeUsage predefinedTypeUsageParam, TContext context) { }
        public virtual TReturn VisitPrefixOperatorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPrefixOperatorExpression prefixOperatorExpressionParam, TContext context) { }
        public virtual TReturn VisitPreprocessor([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessor preprocessorParam, TContext context) { }
        public virtual TReturn VisitPreprocessorAndExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorAndExpression preprocessorAndExpressionParam, TContext context) { }
        public virtual TReturn VisitPreprocessorConditionalSymbol([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorConditionalSymbol preprocessorConditionalSymbolParam, TContext context) { }
        public virtual TReturn VisitPreprocessorConstant([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorConstant preprocessorConstantParam, TContext context) { }
        public virtual TReturn VisitPreprocessorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorDirective preprocessorDirectiveParam, TContext context) { }
        public virtual TReturn VisitPreprocessorEqualityExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorEqualityExpression preprocessorEqualityExpressionParam, TContext context) { }
        public virtual TReturn VisitPreprocessorErrorDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorErrorDirective preprocessorErrorDirectiveParam, TContext context) { }
        public virtual TReturn VisitPreprocessorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorExpression preprocessorExpressionParam, TContext context) { }
        public virtual TReturn VisitPreprocessorNegation([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorNegation preprocessorNegationParam, TContext context) { }
        public virtual TReturn VisitPreprocessorOrExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorOrExpression preprocessorOrExpressionParam, TContext context) { }
        public virtual TReturn VisitPreprocessorParenthesizedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorParenthesizedExpression preprocessorParenthesizedExpressionParam, TContext context) { }
        public virtual TReturn VisitPreprocessorPragmaBody([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorPragmaBody preprocessorPragmaBodyParam, TContext context) { }
        public virtual TReturn VisitPreprocessorUnaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPreprocessorUnaryExpression preprocessorUnaryExpressionParam, TContext context) { }
        public virtual TReturn VisitPrimaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression primaryExpressionParam, TContext context) { }
        public virtual TReturn VisitPropertyAssignment([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyAssignment propertyAssignmentParam, TContext context) { }
        public virtual TReturn VisitPropertyDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IPropertyDeclaration propertyDeclarationParam, TContext context) { }
        public virtual TReturn VisitQueryClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause queryClauseParam, TContext context) { }
        public virtual TReturn VisitQueryClausesHolder([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClausesHolder queryClausesHolderParam, TContext context) { }
        public virtual TReturn VisitQueryContinuation([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryContinuation queryContinuationParam, TContext context) { }
        public virtual TReturn VisitQueryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryExpression queryExpressionParam, TContext context) { }
        public virtual TReturn VisitQueryFirstFrom([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFirstFrom queryFirstFromParam, TContext context) { }
        public virtual TReturn VisitQueryFromClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryFromClause queryFromClauseParam, TContext context) { }
        public virtual TReturn VisitQueryGroupClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryGroupClause queryGroupClauseParam, TContext context) { }
        public virtual TReturn VisitQueryJoinClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryJoinClause queryJoinClauseParam, TContext context) { }
        public virtual TReturn VisitQueryLetClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryLetClause queryLetClauseParam, TContext context) { }
        public virtual TReturn VisitQueryOrderByClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryOrderByClause queryOrderByClauseParam, TContext context) { }
        public virtual TReturn VisitQueryOrdering([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryOrdering queryOrderingParam, TContext context) { }
        public virtual TReturn VisitQueryParameterPlatform([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform queryParameterPlatformParam, TContext context) { }
        public virtual TReturn VisitQueryRangeVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration queryRangeVariableDeclarationParam, TContext context) { }
        public virtual TReturn VisitQuerySelectClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQuerySelectClause querySelectClauseParam, TContext context) { }
        public virtual TReturn VisitQueryWhereClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IQueryWhereClause queryWhereClauseParam, TContext context) { }
        public virtual TReturn VisitRankSpecifier([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier rankSpecifierParam, TContext context) { }
        public virtual TReturn VisitReferenceConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceConstraint referenceConstraintParam, TContext context) { }
        public virtual TReturn VisitReferenceExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceExpression referenceExpressionParam, TContext context) { }
        public virtual TReturn VisitReferenceName([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName referenceNameParam, TContext context) { }
        public virtual TReturn VisitRegularParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IRegularParameterDeclaration regularParameterDeclarationParam, TContext context) { }
        public virtual TReturn VisitRelationalExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IRelationalExpression relationalExpressionParam, TContext context) { }
        public virtual TReturn VisitResourceAcquisitionExpressionsList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IResourceAcquisitionExpressionsList resourceAcquisitionExpressionsListParam, TContext context) { }
        public virtual TReturn VisitReturnStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IReturnStatement returnStatementParam, TContext context) { }
        public virtual TReturn VisitShiftExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IShiftExpression shiftExpressionParam, TContext context) { }
        public virtual TReturn VisitSignOperatorDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ISignOperatorDeclaration signOperatorDeclarationParam, TContext context) { }
        public virtual TReturn VisitSpecificCatchClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ISpecificCatchClause specificCatchClauseParam, TContext context) { }
        public virtual TReturn VisitStartRegion([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IStartRegion startRegionParam, TContext context) { }
        public virtual TReturn VisitStructDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IStructDeclaration structDeclarationParam, TContext context) { }
        public virtual TReturn VisitSwitchLabelStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ISwitchLabelStatement switchLabelStatementParam, TContext context) { }
        public virtual TReturn VisitSwitchStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ISwitchStatement switchStatementParam, TContext context) { }
        public virtual TReturn VisitThisExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IThisExpression thisExpressionParam, TContext context) { }
        public virtual TReturn VisitThrowStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IThrowStatement throwStatementParam, TContext context) { }
        public virtual TReturn VisitTryStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITryStatement tryStatementParam, TContext context) { }
        public virtual TReturn VisitTypeArgumentList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList typeArgumentListParam, TContext context) { }
        public virtual TReturn VisitTypeConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeConstraint typeConstraintParam, TContext context) { }
        public virtual TReturn VisitTypeofExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeofExpression typeofExpressionParam, TContext context) { }
        public virtual TReturn VisitTypeParameterConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint typeParameterConstraintParam, TContext context) { }
        public virtual TReturn VisitTypeParameterConstraintsClause([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause typeParameterConstraintsClauseParam, TContext context) { }
        public virtual TReturn VisitTypeParameterDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterDeclaration typeParameterDeclarationParam, TContext context) { }
        public virtual TReturn VisitTypeParameterOfMethodDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration typeParameterOfMethodDeclarationParam, TContext context) { }
        public virtual TReturn VisitTypeParameterOfMethodList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodList typeParameterOfMethodListParam, TContext context) { }
        public virtual TReturn VisitTypeParameterOfTypeDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration typeParameterOfTypeDeclarationParam, TContext context) { }
        public virtual TReturn VisitTypeParameterOfTypeList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList typeParameterOfTypeListParam, TContext context) { }
        public virtual TReturn VisitTypeParameterReference([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterReference typeParameterReferenceParam, TContext context) { }
        public virtual TReturn VisitTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage typeUsageParam, TContext context) { }
        public virtual TReturn VisitUnaryExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression unaryExpressionParam, TContext context) { }
        public virtual TReturn VisitUnaryOperatorExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryOperatorExpression unaryOperatorExpressionParam, TContext context) { }
        public virtual TReturn VisitUncheckedExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUncheckedExpression uncheckedExpressionParam, TContext context) { }
        public virtual TReturn VisitUncheckedStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUncheckedStatement uncheckedStatementParam, TContext context) { }
        public virtual TReturn VisitUndefDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUndefDirective undefDirectiveParam, TContext context) { }
        public virtual TReturn VisitUnsafeCodeAddressOfExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeAddressOfExpression unsafeCodeAddressOfExpressionParam, TContext context) { }
        public virtual TReturn VisitUnsafeCodeFixedPointerDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerDeclaration unsafeCodeFixedPointerDeclarationParam, TContext context) { }
        public virtual TReturn VisitUnsafeCodeFixedPointerInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerInitializer unsafeCodeFixedPointerInitializerParam, TContext context) { }
        public virtual TReturn VisitUnsafeCodeFixedStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedStatement unsafeCodeFixedStatementParam, TContext context) { }
        public virtual TReturn VisitUnsafeCodePointer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer unsafeCodePointerParam, TContext context) { }
        public virtual TReturn VisitUnsafeCodePointerAccessExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointerAccessExpression unsafeCodePointerAccessExpressionParam, TContext context) { }
        public virtual TReturn VisitUnsafeCodePointerIndirectionExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointerIndirectionExpression unsafeCodePointerIndirectionExpressionParam, TContext context) { }
        public virtual TReturn VisitUnsafeCodeSizeOfExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeSizeOfExpression unsafeCodeSizeOfExpressionParam, TContext context) { }
        public virtual TReturn VisitUnsafeCodeStackAllocInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeStackAllocInitializer unsafeCodeStackAllocInitializerParam, TContext context) { }
        public virtual TReturn VisitUnsafeCodeUnsafeStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeUnsafeStatement unsafeCodeUnsafeStatementParam, TContext context) { }
        public virtual TReturn VisitUserDeclaredTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUserDeclaredTypeUsage userDeclaredTypeUsageParam, TContext context) { }
        public virtual TReturn VisitUserTypeUsage([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUserTypeUsage userTypeUsageParam, TContext context) { }
        public virtual TReturn VisitUsingAliasDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingAliasDirective usingAliasDirectiveParam, TContext context) { }
        public virtual TReturn VisitUsingDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective usingDirectiveParam, TContext context) { }
        public virtual TReturn VisitUsingList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList usingListParam, TContext context) { }
        public virtual TReturn VisitUsingNamespaceDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingNamespaceDirective usingNamespaceDirectiveParam, TContext context) { }
        public virtual TReturn VisitUsingStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IUsingStatement usingStatementParam, TContext context) { }
        public virtual TReturn VisitValueConstraint([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IValueConstraint valueConstraintParam, TContext context) { }
        public virtual TReturn VisitVariableDeclaration([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration variableDeclarationParam, TContext context) { }
        public virtual TReturn VisitVariableInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer variableInitializerParam, TContext context) { }
        public virtual TReturn VisitWarningAction([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IWarningAction warningActionParam, TContext context) { }
        public virtual TReturn VisitWarningDirective([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IWarningDirective warningDirectiveParam, TContext context) { }
        public virtual TReturn VisitWarningList([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IWarningList warningListParam, TContext context) { }
        public virtual TReturn VisitWhileStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IWhileStatement whileStatementParam, TContext context) { }
        public virtual TReturn VisitYieldStatement([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IYieldStatement yieldStatementParam, TContext context) { }
    }
    public class static TryStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITryStatement GetByCatche(JetBrains.ReSharper.Psi.CSharp.Tree.ICatchClause param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITryStatement GetByFinallyBlock(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITryStatement GetByTry(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
    }
    public class static TypeArgumentListNavigator
    {
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList GetByTypeArgument(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage typeArgument) { }
    }
    public class static TypeConstraintNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeConstraint GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static TypeofExpressionExt
    {
        public static System.Nullable<bool> IsOpenType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.ITypeofExpression typeofExpression) { }
    }
    public class static TypeofExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeofExpression GetByTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static TypeParameterConstraintNavigator { }
    public class static TypeParameterConstraintsClauseNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause GetByConstraint(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause GetByTypeParameter(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterReference param) { }
    }
    public class static TypeParameterDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static TypeParameterOfMethodDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static TypeParameterOfMethodListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodList GetByTypeParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfMethodDeclaration param) { }
    }
    public class static TypeParameterOfTypeDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration GetByAttribute(JetBrains.ReSharper.Psi.CSharp.Tree.IAttribute param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static TypeParameterOfTypeListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeList GetByTypeParameterDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterOfTypeDeclaration param) { }
    }
    public class static TypeParameterReferenceNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterReference GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static TypeUsageNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage GetByArrayRank(JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage GetByNullableMark(JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage GetByPointerMark(JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer param) { }
    }
    public class static UnaryExpressionNavigator { }
    public class static UnaryOperatorExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryOperatorExpression GetByOperand(JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression param) { }
    }
    public enum UnaryOperatorType
    {
        INVALID = 0,
        PLUS = 1,
        MINUS = 2,
        EXCL = 3,
        TILDE = 4,
    }
    public class static UncheckedExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUncheckedExpression GetByOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static UncheckedStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUncheckedStatement GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
    }
    public class static UndefDirectiveNavigator { }
    public class static UnsafeCodeAddressOfExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeAddressOfExpression GetByOperand(JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression param) { }
    }
    public class static UnsafeCodeFixedPointerDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerDeclaration GetByInitial(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerDeclaration> GetByScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
        [JetBrains.Annotations.NotNullAttribute()]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.Tree.TreeNodeCollection<JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerDeclaration> GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static UnsafeCodeFixedPointerInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerInitializer GetByValue(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static UnsafeCodeFixedStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedStatement GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedStatement GetByPointerDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedPointerDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeFixedStatement GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static UnsafeCodePointerAccessExpressionExtensions
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetExtensionQualifierType(this JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointerAccessExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType GetExtensionQualifierType(this JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointerAccessExpression expression, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
    }
    public class static UnsafeCodePointerAccessExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointerAccessExpression GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointerAccessExpression GetByPointerExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IPrimaryExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointerAccessExpression GetByTypeArgumentList(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeArgumentList param) { }
    }
    public class static UnsafeCodePointerIndirectionExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointerIndirectionExpression GetByOperand(JetBrains.ReSharper.Psi.CSharp.Tree.IUnaryExpression param) { }
    }
    public class static UnsafeCodePointerNavigator { }
    public class static UnsafeCodeSizeOfExpressionNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeSizeOfExpression GetByOperand(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static UnsafeCodeStackAllocInitializerNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeStackAllocInitializer GetByDimExpr(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeStackAllocInitializer GetByTypeUsage(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeUsage param) { }
    }
    public class static UnsafeCodeUnsafeStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodeUnsafeStatement GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock param) { }
    }
    public class static UserDeclaredTypeUsageNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUserDeclaredTypeUsage GetByTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
    }
    public class static UserTypeUsageNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUserTypeUsage GetByArrayRank(JetBrains.ReSharper.Psi.CSharp.Tree.IRankSpecifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUserTypeUsage GetByNullableMark(JetBrains.ReSharper.Psi.CSharp.Tree.INullableTypeMark param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUserTypeUsage GetByPointerMark(JetBrains.ReSharper.Psi.CSharp.Tree.IUnsafeCodePointer param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUserTypeUsage GetByScalarTypeName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
    }
    public class static UsingAliasDirectiveNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingAliasDirective GetByAlias(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingAliasDirective GetByImportedSymbolName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
    }
    public class static UsingDirectiveNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective GetByImportedSymbolName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
    }
    public class static UsingListNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList GetByExternAliase(JetBrains.ReSharper.Psi.CSharp.Tree.IExternAliasDirective param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingList GetByImport(JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective param) { }
    }
    public class static UsingNamespaceDirectiveNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingNamespaceDirective GetByImportedSymbolName(JetBrains.ReSharper.Psi.CSharp.Tree.IReferenceName param) { }
    }
    public class static UsingStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingStatement GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingStatement GetByDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.IMultipleLocalVariableDeclaration param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingStatement GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingStatement GetByExpressionsList(JetBrains.ReSharper.Psi.CSharp.Tree.IResourceAcquisitionExpressionsList param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IUsingStatement GetByVariableDeclaration(JetBrains.ReSharper.Psi.CSharp.Tree.ILocalVariableDeclaration param) { }
    }
    public class static ValueConstraintNavigator { }
    public class static VariableDeclarationNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IVariableDeclaration GetByNameIdentifier(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpIdentifier param) { }
    }
    public class static VariableInitializerNavigator { }
    public class static WarningActionNavigator { }
    public class static WarningDirectiveNavigator { }
    public class static WarningListNavigator { }
    public class static WhileStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IWhileStatement GetByBody(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement param) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IWhileStatement GetByCondition(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public class static YieldStatementNavigator
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null <= null")]
        [JetBrains.Annotations.PureAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IYieldStatement GetByExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression param) { }
    }
    public enum YieldStatementType
    {
        UNKNOWN = 0,
        YIELD_RETURN = 1,
        YIELD_BREAK = 2,
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Tree.Query
{
    
    public interface IGeneratedQueryArgument : JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo, JetBrains.ReSharper.Psi.IArgumentInfo
    {
        JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
        JetBrains.ReSharper.Psi.CSharp.Impl.Query.IQueryAnonymousType GetAnonymousType();
        JetBrains.ReSharper.Psi.CSharp.Impl.Query.IQueryAnonymousType GetAnonymousType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext);
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryAnonymousTypeProperty> GetGeneratedProperties();
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable> GetVariables();
    }
    public interface IQueryAnonymousTypeProperty : JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ICSharpAnonymousTypeProperty, JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryDeclaredElement, JetBrains.ReSharper.Psi.IAnonymousTypeProperty, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner { }
    public interface IQueryChainReference : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Resolve.ICSharpInvocationReference, JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedOnePhaseReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause GetElement();
    }
    public interface IQueryDeclaredElement : JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.ITypeOwner
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration Declaration { get; }
    }
    public interface IQueryReference : JetBrains.ReSharper.Psi.CSharp.ICSharpInvocationInfo, JetBrains.ReSharper.Psi.CSharp.Resolve.ICSharpInvocationReference, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceBase, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithGlobalSymbolTable, JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IReferenceWithQualifier, JetBrains.ReSharper.Psi.IInvocationInfo, JetBrains.ReSharper.Psi.Resolve.IReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedOnePhaseReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedQualifiableReference, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedReference, JetBrains.Util.IUserDataHolder
    {
        new bool IsValid();
    }
    public interface IQueryVariable : JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ILambdaParameter, JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryDeclaredElement, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParameter, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode Element { get; }
        bool IsTransparent { get; }
    }
    public interface IScheme
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.Scheme CreateScheme(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration declaration);
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable CreateVariable(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform platform);
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable CreateVariable(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause element, JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo);
    }
    public interface ITransparentVariable : JetBrains.ReSharper.Psi.CSharp.DeclaredElements.ILambdaParameter, JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryDeclaredElement, JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable, JetBrains.ReSharper.Psi.IAttributesOwner, JetBrains.ReSharper.Psi.IAttributesSet, JetBrains.ReSharper.Psi.IClrDeclaredElement, JetBrains.ReSharper.Psi.IDeclaredElement, JetBrains.ReSharper.Psi.IParameter, JetBrains.ReSharper.Psi.ITypeOwner, JetBrains.ReSharper.Psi.Resolve.Managed.IManagedVariable
    {
        JetBrains.ReSharper.Psi.CSharp.Tree.Query.Scheme Scheme { get; }
    }
    public class static QueryParameterPlatformExtension
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.IDeclaredElement> AllVisibleRangeVariables(this JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform platform) { }
    }
    public class static QueryRangeVariableDeclarationExtension
    {
        public static string Name(this JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration declaration) { }
    }
    public class static QueryReferenceExtension
    {
        public static JetBrains.ReSharper.Psi.IType GetReturnType(this JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryReference queryReference, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
    }
    public class Scheme : JetBrains.ReSharper.Psi.CSharp.Tree.Query.IScheme
    {
        public JetBrains.ReSharper.Psi.CSharp.Tree.Query.Scheme GetNext { get; }
        public bool HasNext { get; }
        public JetBrains.ReSharper.Psi.CSharp.Tree.Query.Scheme CreateScheme(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration declaration) { }
        public virtual JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable CreateVariable(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform platform) { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable CreateVariable(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause element, JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class SimpleScheme : JetBrains.ReSharper.Psi.CSharp.Tree.Query.IScheme
    {
        public SimpleScheme(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration declaration) { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration Declaration { get; }
        public string Name { get; }
        public JetBrains.ReSharper.Psi.CSharp.Tree.Query.Scheme CreateScheme(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryRangeVariableDeclaration declaration) { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable CreateVariable(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryParameterPlatform platform) { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.Query.IQueryVariable CreateVariable(JetBrains.ReSharper.Psi.CSharp.Tree.IQueryClause element, JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.TypeOracle
{
    
    public interface IDictionaryTypeOracleResult : JetBrains.ReSharper.Psi.CSharp.TypeOracle.ITypeOracleResult
    {
        JetBrains.ReSharper.Psi.IType[] KeyTypes { get; }
        JetBrains.ReSharper.Psi.IType[] ValueTypes { get; }
    }
    public interface ITypeOracleResult
    {
        JetBrains.ReSharper.Psi.IType[] Types { get; }
    }
    public class static TypeOracle
    {
        public static System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> CommonParents(System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IType> types) { }
        public static JetBrains.ReSharper.Psi.CSharp.TypeOracle.ITypeOracleResult SuggestCollectionType(JetBrains.ReSharper.Psi.IDeclaredElement collection, int timeLimit) { }
        public static JetBrains.ReSharper.Psi.IType[] SuggestIteratorTypeForCollection(JetBrains.ReSharper.Psi.IDeclaredElement collection, int timeLimit) { }
    }
    public class TypeOraclePattern
    {
        public string collectionType;
        public bool hasIndexer;
        public bool hasSetAccessor;
        public MethodPattern[] methodPatterns;
        public TypeOraclePattern(string collectionType, MethodPattern[] methodPatterns) { }
        public class MethodPattern
        {
            public const string DEFAULT_KEY = "default";
            public readonly string key;
            public readonly string methodName;
            public readonly int paramNum;
            public readonly string[] signature;
            public readonly bool transit;
            public MethodPattern(string methodName, int paramNum, bool transit, string[] signature, string key) { }
            public bool IsAccessor { get; }
            public bool IsConstructor { get; }
            public bool IsIndexerGetter { get; }
            public bool IsIndexerSetter { get; }
            public bool IsSetter { get; }
            public string ReferenceName { get; }
        }
    }
    [JetBrains.Application.Configuration.XmlConfigurableAttribute(ConfigurationResourceName="JetBrains.ReSharper.Psi.CSharp.src.TypeOracle.TypeOracle.xml")]
    [JetBrains.Application.ShellComponentAttribute()]
    public class TypeOracleSettings : JetBrains.Application.Configuration.IXmlConfigurable
    {
        public TypeOracleSettings() { }
        public static JetBrains.ReSharper.Psi.CSharp.TypeOracle.TypeOracleSettings Instance { get; }
        public JetBrains.ReSharper.Psi.CSharp.TypeOracle.TypeOraclePattern[] Patterns { get; }
        public void ConfigureFromXml(System.Xml.XmlElement element) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Types
{
    
    public class static AnonymousFunctionTypeUtil
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType InferredResultType(this JetBrains.ReSharper.Psi.CSharp.Types.IAnonymousFunctionType anonymousFunctionType) { }
        public static JetBrains.ReSharper.Psi.IType ReturnType(this JetBrains.ReSharper.Psi.CSharp.Types.IAnonymousFunctionType anonymousFunctionType) { }
    }
    public interface IAnonymousFunctionType : JetBrains.ReSharper.Psi.IExpressionType
    {
        bool HasParametersList { get; }
        bool IsAsync { get; }
        System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> Parameters { get; }
        [JetBrains.Annotations.CanBeNullAttribute()]
        System.Collections.Generic.IList<JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IType, JetBrains.ReSharper.Psi.ParameterKind>> ParameterTypesAndKinds { get; }
        System.Collections.Generic.ICollection<JetBrains.ReSharper.Psi.IExpressionType> ReturnValues { get; }
        bool IsReturnTypeConvertibleTo(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        bool IsSignatureConvertibleTo(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
    }
    public interface IAnonymousMethodType : JetBrains.ReSharper.Psi.CSharp.Types.IAnonymousFunctionType, JetBrains.ReSharper.Psi.IExpressionType
    {
        bool HasReturnStatements { get; }
    }
    public interface ICSharpConstantType : JetBrains.ReSharper.Psi.IExpressionType
    {
        JetBrains.ReSharper.Psi.ConstantValue ConstantValue { get; }
        JetBrains.ReSharper.Psi.IType GetDefaultType();
        bool IsExplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule, out JetBrains.ReSharper.Psi.IConversionOperator @operator);
        bool IsImplicitlyConvertibleTo(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.ITypeConversionRule conversionRule, out JetBrains.ReSharper.Psi.IConversionOperator @operator);
        bool IsNullType();
    }
    public interface IDynamicExpressionType : JetBrains.ReSharper.Psi.IExpressionType
    {
        new JetBrains.ReSharper.Psi.Modules.IPsiModule Module { get; }
    }
    public interface ILambdaExpressionType : JetBrains.ReSharper.Psi.CSharp.Types.IAnonymousFunctionType, JetBrains.ReSharper.Psi.IExpressionType { }
    public interface IMethodGroupType : JetBrains.ReSharper.Psi.IExpressionType
    {
        string MethodShortName { get; }
        bool IsApplicableTo(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments);
        JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo Resolve(JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution);
    }
    public class static MethodGroupTypeExtensions
    {
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> ChooseSingleMethod(this JetBrains.ReSharper.Psi.CSharp.Types.IMethodGroupType methodGroupType, JetBrains.ReSharper.Psi.IDelegate @delegate, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static bool IsApplicableTo(this JetBrains.ReSharper.Psi.CSharp.Types.IMethodGroupType methodGroupType, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IDelegate> delegateInstance) { }
    }
}
namespace JetBrains.ReSharper.Psi.CSharp.Util
{
    
    public class static AliasUtil
    {
        public static System.Collections.Generic.IEnumerable<string> GetPossibleAliasesForElement(JetBrains.ReSharper.Psi.IClrDeclaredElement declaredElement, string name) { }
        public static System.Collections.Generic.IEnumerable<string> GetPossibleAliasesForElement(JetBrains.ReSharper.Psi.IClrDeclaredElement declaredElement) { }
    }
    public class static ArgumentsUtil
    {
        public static bool CheckParametersCount(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, JetBrains.ReSharper.Psi.IParametersOwner parametersOwner) { }
        public static int GetArgumentNumber(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner argumentsOwner, JetBrains.ReSharper.Psi.TreeOffset treeOffset) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.ITokenNode> GetCommas(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgument argument) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ParameterInstance GetParameter([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ParameterInstance GetParameter(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterMultitype(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterMultitype(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.IExpressionType argumentType, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterType(JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterType(JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.IExpressionType argumentType, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext moduleReferenceResolveContext) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterType(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.IExpressionType argumentType, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext1) { }
        public static JetBrains.ReSharper.Psi.IType GetParameterType(JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ParameterInstance parameterInstance, JetBrains.ReSharper.Psi.IExpressionType argumentType, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ParameterInstance> GetPossibleParameters(JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo) { }
        public static bool IsExpanded(this JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch match, JetBrains.ReSharper.Psi.Resolve.ISubstitution parameSubstitution, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> Match(this System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> MatchNonStrict(this System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ArgumentMatch> MatchStrict(this System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo> arguments, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> parameters, System.Version languageVersion) { }
        public struct ArgumentMatch
        {
            public ArgumentMatch(JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo argumentInfo, JetBrains.ReSharper.Psi.IParameter parameter, JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ExpandedKind expanded) { }
            public JetBrains.ReSharper.Psi.CSharp.ICSharpArgumentInfo ArgumentInfo { get; }
            public JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ExpandedKind Expanded { get; }
            [JetBrains.Annotations.CanBeNullAttribute()]
            public JetBrains.ReSharper.Psi.IParameter Parameter { get; }
        }
        public enum ExpandedKind
        {
            None = 0,
            Expanded = 1,
            Possible = 2,
        }
        public class ParameterInstance : JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParameter>
        {
            public ParameterInstance([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IParameter parameter, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ExpandedKind expanded) { }
            public JetBrains.ReSharper.Psi.CSharp.Util.ArgumentsUtil.ExpandedKind Expanded { get; }
            public JetBrains.ReSharper.Psi.IType Type { get; }
        }
    }
    public class static ConditionalTernaryExpressionUtil
    {
        public static JetBrains.Util.Pair<JetBrains.ReSharper.Psi.IExpressionType, JetBrains.ReSharper.Psi.CSharp.Util.ConditionalTernaryExpressionUtil.TypeErrors> DeriveType(JetBrains.ReSharper.Psi.IExpressionType thenExpressionType, JetBrains.ReSharper.Psi.IExpressionType elseExpressionType, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public enum TypeErrors
        {
            OK = 0,
            BOTH_CONVERTIONS_EXIST = 1,
            NO_CONVERSION_EXIST = 2,
        }
    }
    public class static ConstraintsUtil
    {
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> AddClassConstraint(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> AddConstructorConstraint(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> AddTypeConstraint(JetBrains.ReSharper.Psi.ITypeParameter typeParameter, JetBrains.ReSharper.Psi.IType type) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint> AddValueConstraint(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public static bool AreEqual(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint constraint1, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution1, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint constraint2, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution2) { }
        public static bool AreEqual(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint constraint1, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint constraint2) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.Util.Pair<System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause>, JetBrains.ReSharper.Psi.Resolve.ISubstitution>> GetAllClauses(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause> GetClauses(JetBrains.ReSharper.Psi.ITypeParameter typeParameter) { }
        public static JetBrains.ReSharper.Psi.ITypeParameter GetTypeParameter(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause clause) { }
        public static void RemoveConstraint(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint constraint) { }
        public static void RemoveConstraint(JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraintsClause clause, JetBrains.ReSharper.Psi.CSharp.Tree.ITypeParameterConstraint constraint) { }
    }
    public class CSharpArgumentsOwnerInvocationClrWrapper : JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper
    {
        protected System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> myArguments;
        public CSharpArgumentsOwnerInvocationClrWrapper(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpArgumentsOwner objectCreationExpression) { }
        public virtual System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> Arguments { get; }
        public JetBrains.ReSharper.Psi.Tree.IArgumentsOwner ArgumentsOwner { get; }
        public JetBrains.ReSharper.Psi.IFunction InvokedFunction { get; }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IFunction> InvokedFunctionCandidates { get; }
        public void AddArgument(JetBrains.ReSharper.Psi.Tree.IExpression newArgumentExpression, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public virtual void ChangeInvokedMethod(JetBrains.ReSharper.Psi.IMethod newFunction) { }
        public virtual void RemoveArgumentAt(int argumentToDeleteIndex) { }
        public void SetArgumentAt(int currentItemIndex, JetBrains.ReSharper.Psi.Tree.IExpression argumentExpression, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    public struct CSharpCharPresentation
    {
        [JetBrains.Annotations.NotNullAttribute()]
        public readonly string Presentation;
        public readonly JetBrains.Util.TextRange RangeInPresentation;
        public CSharpCharPresentation([JetBrains.Annotations.NotNullAttribute()] string presentation, JetBrains.Util.TextRange rangeInPresentation) { }
    }
    public class CSharpCodeRegionType : JetBrains.Util.EnumPattern, JetBrains.ReSharper.Psi.Util.ICodeRegionData
    {
        public static readonly JetBrains.ReSharper.Psi.CSharp.Util.CSharpCodeRegionType If;
        public static readonly JetBrains.ReSharper.Psi.CSharp.Util.CSharpCodeRegionType Region;
        public CSharpCodeRegionType([JetBrains.Annotations.NotNullAttribute()] string name) { }
        public int GetSignificance() { }
    }
    public class CSharpCollectionTypeUtil : JetBrains.ReSharper.Psi.Util.CollectionTypeUtil
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IType ElementTypeByCollectionType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode context) { }
        public static bool GetCurrentAndMoveNextMethods([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> getEnumerator, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IAccessContext currentAccessContext, [JetBrains.Annotations.CanBeNullAttribute()] out JetBrains.ReSharper.Psi.DeclaredElementInstance<> current, [JetBrains.Annotations.CanBeNullAttribute()] out JetBrains.ReSharper.Psi.DeclaredElementInstance<> moveNext) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IMethod> GetEnumeratorMethod([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode context) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.ResolveResultWithInfo ResolveEnumeratorMethod([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Resolve.IAccessContext accessContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode context) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpConcatenationWrapperProvider : JetBrains.ReSharper.Psi.Util.IStringConcatenationWrapperProvider
    {
        public JetBrains.ReSharper.Psi.Util.IStringConcatenationClrWrapper CreateStringConcatenation(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public JetBrains.ReSharper.Psi.Util.IStringConcatenationClrWrapper CreateWidestContainingStringConcatenation(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
    }
    public class static CSharpDeclaredElementUtil
    {
        public const string TRANSPARENT_VARIABLE_NAME = "Transparent Variable";
        public static bool CanBeOverloaded(JetBrains.ReSharper.Psi.ITypeMember typeMember) { }
        public static JetBrains.ReSharper.Psi.IDeclaredElement EliminateDelegateInvokeMethod(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner>> FindSignatureOwners(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, JetBrains.ReSharper.Psi.IClrDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, out bool switchedToDelegateValue, out bool isDynamicValue) { }
        public static System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.DeclaredElementInstance<JetBrains.ReSharper.Psi.IParametersOwner>> FindSignatureOwners(JetBrains.ReSharper.Psi.IClrDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IParameter> GetParametersOfDefiningPart(this JetBrains.ReSharper.Psi.IMethod method) { }
        public static JetBrains.ReSharper.Psi.IDeclaredType InterfaceQualification(JetBrains.ReSharper.Psi.IOverridableMember member) { }
        public static bool IsAsyncMethod(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsAutoPropertyBackingField(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsCollectionInitializerAddMethod(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext resolveContext) { }
        public static bool IsCSharpField(JetBrains.ReSharper.Psi.IField field) { }
        public static bool IsCSharpTypeMember(JetBrains.ReSharper.Psi.ITypeMember member) { }
        public static bool IsDestructor(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsForeachEnumeratorPatternMember(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsForeachEnumeratorPatternType([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.ITypeElement typeElement) { }
        public static bool IsIndexedProperty(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsIndexer(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsLValue(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsPartial(this JetBrains.ReSharper.Psi.IMethod method) { }
        public static bool IsProperty(JetBrains.ReSharper.Psi.IDeclaredElement declaredElement) { }
        public static bool IsStaticClass(JetBrains.ReSharper.Psi.IClass @class) { }
        public static bool IsTreatedLikeEvent(JetBrains.ReSharper.Psi.IEvent @event, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression context) { }
        public static bool IsValue(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
        public static bool IsWinRTEvent(JetBrains.ReSharper.Psi.IDeclaredElement element) { }
    }
    public class static CSharpDefaultValueExt
    {
        public static bool CompareTo(this JetBrains.ReSharper.Psi.DefaultValue value, JetBrains.ReSharper.Psi.DefaultValue otherValue) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateExpressionByDefaultValueSmart([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.CSharpElementFactory factory, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.DefaultValue value, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        public static JetBrains.ReSharper.Psi.DefaultValue GetDefaultValue(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression, JetBrains.ReSharper.Psi.IType parameterType) { }
        public static JetBrains.ReSharper.Psi.DefaultValue Normalize(this JetBrains.ReSharper.Psi.DefaultValue value) { }
    }
    public class static CSharpEnumUtil
    {
        public static System.Collections.Generic.List<JetBrains.ReSharper.Psi.IField> CalculateEnumMembers(JetBrains.ReSharper.Psi.ConstantValue constantValue, JetBrains.ReSharper.Psi.IEnum @enum) { }
    }
    public class static CSharpExpressionUtil
    {
        public static bool CanUseArrayInitializer([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.IArrayCreationExpression arrayCreation) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IInvocationExpression ContainingInvocation(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        [JetBrains.Annotations.ContractAnnotationAttribute("null=>null")]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CreateLogicallyNegatedExpression([JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public static bool ExpressionCanBeStatement(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        [JetBrains.Annotations.ContractAnnotationAttribute("null => null")]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression GetContainingParenthesizedExpression(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        [JetBrains.Annotations.ContractAnnotationAttribute("null => null")]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression GetContainingParenthesizedExpressionEx(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression GetExpressionFromInitializer(JetBrains.ReSharper.Psi.CSharp.Tree.IVariableInitializer variableInitializer) { }
        [JetBrains.Annotations.ContractAnnotationAttribute("null => null")]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression GetOperandThroughParenthesis(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public static JetBrains.ReSharper.Psi.IExpressionType GetRuntimeExpressionType([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement GetStatementToBeVisibleFromAll<TElement>(System.Collections.Generic.ICollection<TElement> elements)
            where TElement : JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode { }
        public static JetBrains.ReSharper.Psi.TreeTextRange GetStringLiteralContentTreeRange([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpLiteralExpression literalExpression) { }
        public static bool IsCheckOfCodeInvariant(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public static bool IsCheckOfCodeInvariant(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement statement) { }
        public static bool IsCondition([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression, out JetBrains.ReSharper.Psi.IOperator customTrueOperator) { }
        public static bool IsCondition(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression, out JetBrains.ReSharper.Psi.IOperator customTrueOperator) { }
        public static bool IsRedundant(this JetBrains.ReSharper.Psi.CSharp.Tree.IParenthesizedExpression expr) { }
        public static bool NeedToParenthesize(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression replacedExpression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression newExpression) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression ReplaceExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression newExpression) { }
    }
    public class CSharpFunctionInvocationClrWrapper : JetBrains.ReSharper.Psi.CSharp.Util.CSharpArgumentsOwnerInvocationClrWrapper
    {
        public CSharpFunctionInvocationClrWrapper(JetBrains.ReSharper.Psi.CSharp.Tree.IInvocationExpression argumentsOwner) { }
        public override System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> Arguments { get; }
        public override void ChangeInvokedMethod(JetBrains.ReSharper.Psi.IMethod newFunction) { }
        public override void RemoveArgumentAt(int argumentToDeleteIndex) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpFunctionInvocationProvider : JetBrains.ReSharper.Psi.Util.IFunctionInvocationProvider
    {
        public bool ExpressionCanBeReplacedByMethodInvocation(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper GetFunctionInvocationByArgument(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper GetFunctionInvocationByArgumentsOwner(JetBrains.ReSharper.Psi.Tree.IArgumentsOwner argumentsOwner) { }
        public JetBrains.ReSharper.Psi.Tree.IExpression GetNarrowestContainingArgumentExpression(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public bool IsArgumentOfFormatingFunction(JetBrains.ReSharper.Psi.Tree.IExpression argumentExpression) { }
        public bool IsArgumentOfMethodThatHasSimilarFormattingMethod(JetBrains.ReSharper.Psi.Tree.IExpression argumentExpression, out JetBrains.ReSharper.Psi.IMethod properFormattingMethod) { }
        public JetBrains.ReSharper.Psi.Util.IFunctionInvocationClrWrapper SurroundWithStaticMethodInvocation(JetBrains.ReSharper.Psi.IFunction method, JetBrains.ReSharper.Psi.Tree.IExpression surroundedExpression, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpLanguageFeatures : JetBrains.ReSharper.Psi.Util.ILanguageFeatures
    {
        public bool AutoPropertiesAreSupported(JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    public class static CSharpMainMethodUtil
    {
        public static bool CanBeMainMethod(JetBrains.ReSharper.Psi.CSharp.Tree.IMethodDeclaration declaration) { }
    }
    public class static CSharpModificationUtil
    {
        public static bool CanRemoveUsing(JetBrains.DocumentModel.IDocument document, JetBrains.ReSharper.Psi.CSharp.Tree.IUsingDirective usingDirective) { }
        public static bool CanUseAliases(JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        public static JetBrains.ReSharper.Psi.CSharp.Impl.CustomHandlers.ICSharpCustomModificationHandler CreateService([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.IBlock GetMethodBodyVisibleForUser(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpFunctionDeclaration method) { }
        public static string GetSpecialElementType(JetBrains.ReSharper.Psi.DeclaredElementPresenterStyle presenter, JetBrains.ReSharper.Psi.IDeclaredElement declaredElement, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static void HandleChangeExpressionInStatement(JetBrains.ReSharper.Psi.Tree.IStatement statement, System.Action changeAction) { }
        public static JetBrains.ReSharper.Psi.ITreeRange HandleChangeStatements(JetBrains.ReSharper.Psi.ITreeRange rangeBeforeChange, System.Func<JetBrains.ReSharper.Psi.ITreeRange> changeAction, bool strict) { }
        public static bool IsToAddImportsToDeepestScope([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        public static bool PreferQualifiedReference(JetBrains.ReSharper.Psi.ExtensionsAPI.Resolve.IQualifiableReferenceWithGlobalSymbolTable reference) { }
    }
    public class static CSharpOperatorUtil
    {
        public static JetBrains.ReSharper.Psi.IConversionOperator GetCustomExplicitOperator(JetBrains.ReSharper.Psi.IExpressionType source, JetBrains.ReSharper.Psi.IType target, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.IConversionOperator GetCustomExplicitOperator(JetBrains.ReSharper.Psi.IType source, JetBrains.ReSharper.Psi.IType target, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.IConversionOperator GetCustomImplicitOperator(JetBrains.ReSharper.Psi.IType source, JetBrains.ReSharper.Psi.IType target, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.IConversionOperator GetCustomImplicitOperator(JetBrains.ReSharper.Psi.IExpressionType source, JetBrains.ReSharper.Psi.IType target, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
        public static JetBrains.ReSharper.Psi.IExpressionType OperatorExpressionExpressionType(this JetBrains.ReSharper.Psi.CSharp.Tree.IOperatorExpression operatorExpression, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public static bool OperatorIsApplicable(JetBrains.ReSharper.Psi.IOperator @operator, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> argumentTypes, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public static bool OperatorIsLiftable(JetBrains.ReSharper.Psi.IOperator @operator, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution, bool circularOperatorForm) { }
        public static JetBrains.ReSharper.Psi.IConversionOperator ResolveMultipleImplicitOperators(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Util.CSharpOperatorUtil.OperatorInfo> operators, JetBrains.ReSharper.Psi.IExpressionType source, JetBrains.ReSharper.Psi.IType target, JetBrains.ReSharper.Psi.ITypeConversionRule typeConversionRule) { }
        public struct OperatorInfo
        {
            public OperatorInfo(JetBrains.ReSharper.Psi.Resolve.ISymbolInfo info) { }
            public OperatorInfo(JetBrains.ReSharper.Psi.IConversionOperator @operator, JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
            public JetBrains.ReSharper.Psi.IConversionOperator Operator { get; }
            public JetBrains.ReSharper.Psi.IType SourceType { get; }
            public JetBrains.ReSharper.Psi.IType TargetType { get; }
            public bool IsDefinedInSourceType() { }
            public bool IsDefinedInTargetType() { }
            public bool IsValidConversionOperator() { }
        }
    }
    public class CSharpStringConcatenationClrWrapper : JetBrains.ReSharper.Psi.Util.IStringConcatenationClrWrapper
    {
        public CSharpStringConcatenationClrWrapper(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> Arguments { get; }
        public JetBrains.ReSharper.Psi.Tree.IExpression Expression { get; }
        protected JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression CombineArgumentListToAdditiveExpression(System.Collections.Generic.IList<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression> argumentsChain, JetBrains.ReSharper.Psi.CSharp.CSharpElementFactory elementFactory) { }
        public System.Collections.Generic.IEnumerable<JetBrains.ReSharper.Psi.Tree.IExpression> GetConcatenationArgumentsThatContainValueRange(JetBrains.Util.TextRange range) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.Tree.IExpression> GetConcatenationArgumentsThatContainValueRange(JetBrains.Util.TextRange range, out System.Collections.Generic.IList<> appropriateValueRanges, bool includeNonLiterals) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static System.Collections.Generic.IEnumerable<JetBrains.DocumentModel.DocumentRange> GetDocumentRangesByInnerRange(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression, JetBrains.Util.TextRange range, bool includeNonLiteralRanges = True) { }
        public System.Collections.Generic.IEnumerable<string> GetWidestConstantValues() { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression GetWidestStringConcatenationExpression(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression csharpExpression) { }
        public void InsertAtValueIndex(int index, string newValue, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public void RemoveAtValueRange(JetBrains.Util.TextRange range, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public void ReplaceAtValueRange(JetBrains.Util.TextRange range, string newValue, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public void ReplaceInAllLiterals(string oldValue, string newValue, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public void SetArgumentAt(int index, JetBrains.ReSharper.Psi.Tree.IExpression argument, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public void TryMergeArgumentWithNext(int index, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
    }
    public class static CSharpStringConcatenationUtil
    {
        public static bool IsConcatenationOperatorExpression(JetBrains.ReSharper.Psi.CSharp.Tree.IAdditiveExpression additiveExpression) { }
    }
    public class CSharpStringLiteralAlterer : JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer
    {
        public JetBrains.ReSharper.Psi.Tree.ILiteralExpression Expression { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpLiteralExpression LiteralExpression { get; }
        public JetBrains.ReSharper.Psi.TreeTextRange UnderQuotesRange { get; }
        public string Value { get; }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Util.CSharpStringLiteralAlterer Concat([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Util.CSharpStringLiteralAlterer left, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Util.CSharpStringLiteralAlterer right, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Util.CSharpStringLiteralAlterer CreateByLiteralExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpLiteralExpression literalExpression) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Util.CSharpStringLiteralAlterer CreateByValue([JetBrains.Annotations.NotNullAttribute()] string value, JetBrains.ReSharper.Psi.CSharp.Util.StringLiteralPresentationForm presentationForm, [JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.CSharpElementFactory factory) { }
        public void Insert(int index, string valueToInsert, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public int PresentationOffsetToValueOffset(int offset) { }
        public void Remove(JetBrains.Util.TextRange range, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public void Replace(string oldValue, string newValue, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public int TreeOffsetToValueOffset(JetBrains.ReSharper.Psi.TreeOffset treeOffset) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Util.CSharpStringLiteralAlterer TryCreateByLiteralExpression([JetBrains.Annotations.NotNullAttribute()] JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpLiteralExpression literalExpression) { }
        public JetBrains.DocumentModel.DocumentRange ValueTextRangeToPresentationDocumentRange(JetBrains.Util.TextRange range) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpStringLiteralAltererProvider : JetBrains.ReSharper.Psi.Util.IStringLiteralAltererProvider
    {
        public JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer CreateStringLiteralByExpression(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
        public JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer CreateStringLiteralByValue(string value, JetBrains.ReSharper.Psi.Modules.IPsiModule psiModule) { }
        public JetBrains.ReSharper.Psi.Util.IStringLiteralAlterer TryCreateStringLiteralByExpression(JetBrains.ReSharper.Psi.Tree.IExpression expression) { }
    }
    [System.ComponentModel.LocalizableAttribute(false)]
    public class static CSharpStringLiteralParser
    {
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static string ParseRegularLiteralValue([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] out JetBrains.Util.RangeTranslator translator) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static string ParseStringLiteral([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpLiteralExpression expression) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static string ParseStringLiteral([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpLiteralExpression expression, [JetBrains.Annotations.NotNullAttribute()] out JetBrains.Util.RangeTranslator translator) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static string ParseStringLiteral([JetBrains.Annotations.NotNullAttribute()] string literalText, [JetBrains.Annotations.NotNullAttribute()] out JetBrains.Util.RangeTranslator translator) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static string ParseVerbatimLiteralValue([JetBrains.Annotations.NotNullAttribute()] string text, [JetBrains.Annotations.NotNullAttribute()] out JetBrains.Util.RangeTranslator translator) { }
    }
    public class static CSharpTypeUtil
    {
        public static bool CanDeclareVolatileFieldWith(this JetBrains.ReSharper.Psi.IType type) { }
        public static bool CanUseExplicitly([JetBrains.Annotations.CanBeNullAttribute()] this JetBrains.ReSharper.Psi.IType type, [JetBrains.Annotations.CanBeNullAttribute()] JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.IDelegate GetDelegateTypeConsiderTypeParameters(JetBrains.ReSharper.Psi.IType type, out JetBrains.ReSharper.Psi.Resolve.ISubstitution substitution) { }
        public static JetBrains.ReSharper.Psi.IType GetReturnExpressionTypeByFunctionReturnType(JetBrains.ReSharper.Psi.IType type, bool isAsyncFunction) { }
        public static bool HasDynamicTypeInStructure(this JetBrains.ReSharper.Psi.IType type) { }
        public static bool IsDynamicType(this JetBrains.ReSharper.Psi.IExpressionType expressionType) { }
        public static bool IsNullConstantType(this JetBrains.ReSharper.Psi.IExpressionType expressionType) { }
        public static bool IsUnsafeType(this JetBrains.ReSharper.Psi.IType type) { }
        public static System.Nullable<System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.TypeParameterVariance>> IsVariantSafe(this JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.CSharp.Util.CSharpTypeVarianceSafe safetyType) { }
        public static System.Nullable<System.Collections.Generic.KeyValuePair<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.TypeParameterVariance>> IsVariantSafe(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.CSharp.Util.CSharpTypeVarianceSafe safetyType, System.Func<JetBrains.ReSharper.Psi.ITypeParameter, JetBrains.ReSharper.Psi.TypeParameterVariance> provider) { }
    }
    [JetBrains.ReSharper.Psi.LanguageAttribute(typeof(JetBrains.ReSharper.Psi.CSharp.CSharpLanguage))]
    public class CSharpTypeUtilLanguageService : JetBrains.ReSharper.Psi.Util.ITypeUtilLanguageService
    {
        public bool CanUseExplicitly(JetBrains.ReSharper.Psi.IType type, JetBrains.ReSharper.Psi.Tree.ITreeNode context) { }
    }
    public enum CSharpTypeVarianceSafe
    {
        INPUT = 0,
        OUTPUT = 1,
    }
    public class static IfStatementUtil
    {
        public static bool HasClosedUpperIfStatement(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement statement) { }
        public static bool HasUnclosedInnerIfStatement(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement statement) { }
    }
    public class InsertionAnchorResult : JetBrains.ReSharper.Psi.Util.IInsertionAnchorResult<JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration>
    {
        public InsertionAnchorResult(JetBrains.Util.BeforeOrAfter type, JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration declaration) { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration Declaration { get; }
        public JetBrains.Util.BeforeOrAfter Type { get; }
    }
    public class static InvocationExpressionUtil
    {
        public static JetBrains.ReSharper.Psi.Resolve.ExtensionMethods.ExtensionInstance<JetBrains.ReSharper.Psi.IMethod> GetInvokedMethod(JetBrains.ReSharper.Psi.CSharp.Tree.IInvocationExpression expression) { }
        public static bool IsSkippedByCompiler(this JetBrains.ReSharper.Psi.CSharp.Tree.IInvocationExpression invocationExpression, JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
    }
    public class static IsExpressionUtil
    {
        public static System.Nullable<bool> CompileTimeResult(JetBrains.ReSharper.Psi.IExpressionType innerExpressionType, JetBrains.ReSharper.Psi.IType isType, JetBrains.ReSharper.Psi.CSharp.Impl.ICSharpTypeConversionRule typeConversionRule) { }
    }
    public class static LocalVariablesUtil
    {
        public static JetBrains.ReSharper.Psi.IDeclaredElement[] GetDeclaredVariablesAndConstants(JetBrains.ReSharper.Psi.Tree.ITreeNode element, bool includeUninitialized) { }
    }
    public abstract class MemberInserter : JetBrains.ReSharper.Psi.Util.IMemberInserter<JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration>
    {
        public JetBrains.ReSharper.Psi.Util.IInsertionAnchorResult<JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration> Anchor { get; }
        protected abstract JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration InsertedDeclaration { get; }
        protected abstract JetBrains.ReSharper.Psi.CSharp.Tree.IClassLikeDeclaration TargetDeclaration { get; }
        protected virtual JetBrains.ReSharper.Psi.Util.IInsertionAnchorResult<JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration> FindDeclarationAnchor() { }
        public JetBrains.ReSharper.Psi.CSharp.Tree.IClassMemberDeclaration InsertMethod() { }
        public bool TryFindDeclarationAnchor() { }
    }
    public class static PreprocessorUtil
    {
        public static JetBrains.ReSharper.Psi.PreProcessingDirective[] GetPPDirectivesAtPoint(this JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
    }
    public class static RecursiveExpressionUtil
    {
        public static bool HasRecursion([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression expression) { }
    }
    public class ReturnTypeCollector : JetBrains.ReSharper.Psi.CSharp.Tree.TreeNodeVisitor, JetBrains.ReSharper.Psi.IRecursiveElementProcessor
    {
        public ReturnTypeCollector(JetBrains.ReSharper.Psi.Resolve.Managed.IResolveContext resolveContext) { }
        public System.Collections.Generic.IList<JetBrains.ReSharper.Psi.IExpressionType> CollectedTypes { get; }
        public bool ProcessingIsFinished { get; }
        public bool InteriorShouldBeProcessed(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessAfterInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public void ProcessBeforeInterior(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public override void VisitReturnStatement(JetBrains.ReSharper.Psi.CSharp.Tree.IReturnStatement returnStatementParam) { }
    }
    public class static StatementUtil
    {
        public static bool ContainsExecutableCode(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement statement) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode GetBlockParentNode(this JetBrains.ReSharper.Psi.CSharp.Tree.IBlock block) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement GetParentStatement(this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement statement, bool includeObligatoryBlocks = False) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement GetPreviousStatement(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement statement) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange GetStatementsRange([JetBrains.Annotations.NotNullAttribute()] JetBrains.ProjectModel.ISolution solution, JetBrains.DocumentModel.DocumentRange documentRange) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange GetStatementsRange(JetBrains.ReSharper.Psi.Tree.IFile file, JetBrains.ReSharper.Psi.TreeTextRange range) { }
        public static JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement GetStatementUnderBlock(JetBrains.ReSharper.Psi.Tree.ITreeNode node) { }
        public static T InsertStatement<T, U>([JetBrains.Annotations.NotNullAttribute()] T statement, [JetBrains.Annotations.NotNullAttribute()] ref U anchor, bool before)
            where T :  class, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement
            where U :  class, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement { }
        public static T InsertStatement<T>(T statement, JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange anchor, bool before)
            where T :  class, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement { }
        public static T Replace<T>(JetBrains.ReSharper.Psi.CSharp.ICSharpStatementsRange statementsRange, T statement)
            where T :  class, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement { }
        public static void ReplaceStatementWithBlock(JetBrains.ReSharper.Psi.CSharp.Tree.IBlock block, JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpStatement statement) { }
    }
    public class static StringLiteralCharacterUtil
    {
        public static string ConvertPresentationToValue(string presentation, JetBrains.ReSharper.Psi.CSharp.Util.StringLiteralPresentationForm presentationForm) { }
        public static string ConvertValueToPresentation(string value, JetBrains.ReSharper.Psi.CSharp.Util.StringLiteralPresentationForm presentationForm) { }
        [JetBrains.Annotations.NotNullAttribute()]
        public static string ConvertValueToPresentationSequence(char value) { }
        public static string ConvertValueToRegularPresentation(string value) { }
        public static string ConvertValueToVerbatimPresentation(string value) { }
        public static bool TryConvertRegularPresentationToValue(string charPresentation, out string result) { }
        [JetBrains.Annotations.CanBeNullAttribute()]
        public static string TryConvertValueToPresentationSequence(char value) { }
        public static bool TryConvertVerbatimPresentationToValue(string presentation, out string result) { }
    }
    public enum StringLiteralPresentationForm
    {
        REGULAR = 0,
        VERBATIM = 1,
    }
    public class static StringLiteralUtil
    {
        public static string ConvertValueToPresentation([JetBrains.Annotations.NotNullAttribute()] string value, JetBrains.ReSharper.Psi.CSharp.Util.StringLiteralPresentationForm presentationForm) { }
        public static string ConvertValueToRegularPresentation([JetBrains.Annotations.NotNullAttribute()] string value) { }
        public static string ConvertValueToVerbatimPresentation([JetBrains.Annotations.NotNullAttribute()] string value) { }
        public static int GetCharPresentationLength(string presentation, int firstCharInPresentationIndex) { }
    }
    public class static SwitchStatementUtil
    {
        public static JetBrains.ReSharper.Psi.IType ComputeGoverningType(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpExpression switchExpression) { }
        public static JetBrains.ReSharper.Psi.IType ComputeGoverningType(JetBrains.ReSharper.Psi.IExpressionType switchExpressionType, JetBrains.ReSharper.Psi.Modules.IPsiModule module) { }
    }
    public class static UnsafeCodeUtil
    {
        public static bool ElementContainsUnsafeCode(JetBrains.ReSharper.Psi.Tree.ITreeNode element) { }
        public static bool IsUnsafeContext([JetBrains.Annotations.NotNullAttribute()] this JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode element) { }
    }
    public class static ValidityChecker
    {
        public static bool IsTypeElementName(string qualifiedTypeName) { }
        public static bool IsValidDeclaredType(string declaredTypeUsage) { }
        public static bool IsValidExpression(string expression) { }
        public static bool IsValidIdentifier(string identifier) { }
        public static bool IsValidName(string identifier) { }
        public static bool IsValidNamespaceOrTypeName(string qualifiedName) { }
        public static bool IsValidType(string typeUsage) { }
    }
    public class XmlDocTemplateUtil
    {
        public static JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode FindDocCommentOwner(JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration declaration) { }
        public static string GetDocTemplate(JetBrains.ReSharper.Psi.Tree.IDocCommentBlockOwnerNode owner, out int cursor) { }
        public static string GetParameterDocTemplate(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpDeclaration declaration, out int cursor) { }
    }
}